[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\n\n/* Package-scope variables */\nvar lodash, _;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/stevezhu_lodash/packages/stevezhu_lodash.js              //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/stevezhu:lodash/lodash.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * @license                                                                                                            // 2\n * lodash 3.10.1 (Custom Build) <https://lodash.com/>                                                                  // 3\n * Build: `lodash compat -o ./lodash.js`                                                                               // 4\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>                                                // 5\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>                                                      // 6\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors                            // 7\n * Available under MIT license <https://lodash.com/license>                                                            // 8\n */                                                                                                                    // 9\n;(function() {                                                                                                         // 10\n                                                                                                                       // 11\n  /** Used as a safe reference for `undefined` in pre-ES5 environments. */                                             // 12\n  var undefined;                                                                                                       // 13\n                                                                                                                       // 14\n  /** Used as the semantic version number. */                                                                          // 15\n  var VERSION = '3.10.1';                                                                                              // 16\n                                                                                                                       // 17\n  /** Used to compose bitmasks for wrapper metadata. */                                                                // 18\n  var BIND_FLAG = 1,                                                                                                   // 19\n      BIND_KEY_FLAG = 2,                                                                                               // 20\n      CURRY_BOUND_FLAG = 4,                                                                                            // 21\n      CURRY_FLAG = 8,                                                                                                  // 22\n      CURRY_RIGHT_FLAG = 16,                                                                                           // 23\n      PARTIAL_FLAG = 32,                                                                                               // 24\n      PARTIAL_RIGHT_FLAG = 64,                                                                                         // 25\n      ARY_FLAG = 128,                                                                                                  // 26\n      REARG_FLAG = 256;                                                                                                // 27\n                                                                                                                       // 28\n  /** Used as default options for `_.trunc`. */                                                                        // 29\n  var DEFAULT_TRUNC_LENGTH = 30,                                                                                       // 30\n      DEFAULT_TRUNC_OMISSION = '...';                                                                                  // 31\n                                                                                                                       // 32\n  /** Used to detect when a function becomes hot. */                                                                   // 33\n  var HOT_COUNT = 150,                                                                                                 // 34\n      HOT_SPAN = 16;                                                                                                   // 35\n                                                                                                                       // 36\n  /** Used as the size to enable large array optimizations. */                                                         // 37\n  var LARGE_ARRAY_SIZE = 200;                                                                                          // 38\n                                                                                                                       // 39\n  /** Used to indicate the type of lazy iteratees. */                                                                  // 40\n  var LAZY_FILTER_FLAG = 1,                                                                                            // 41\n      LAZY_MAP_FLAG = 2;                                                                                               // 42\n                                                                                                                       // 43\n  /** Used as the `TypeError` message for \"Functions\" methods. */                                                      // 44\n  var FUNC_ERROR_TEXT = 'Expected a function';                                                                         // 45\n                                                                                                                       // 46\n  /** Used as the internal argument placeholder. */                                                                    // 47\n  var PLACEHOLDER = '__lodash_placeholder__';                                                                          // 48\n                                                                                                                       // 49\n  /** `Object#toString` result references. */                                                                          // 50\n  var argsTag = '[object Arguments]',                                                                                  // 51\n      arrayTag = '[object Array]',                                                                                     // 52\n      boolTag = '[object Boolean]',                                                                                    // 53\n      dateTag = '[object Date]',                                                                                       // 54\n      errorTag = '[object Error]',                                                                                     // 55\n      funcTag = '[object Function]',                                                                                   // 56\n      mapTag = '[object Map]',                                                                                         // 57\n      numberTag = '[object Number]',                                                                                   // 58\n      objectTag = '[object Object]',                                                                                   // 59\n      regexpTag = '[object RegExp]',                                                                                   // 60\n      setTag = '[object Set]',                                                                                         // 61\n      stringTag = '[object String]',                                                                                   // 62\n      weakMapTag = '[object WeakMap]';                                                                                 // 63\n                                                                                                                       // 64\n  var arrayBufferTag = '[object ArrayBuffer]',                                                                         // 65\n      float32Tag = '[object Float32Array]',                                                                            // 66\n      float64Tag = '[object Float64Array]',                                                                            // 67\n      int8Tag = '[object Int8Array]',                                                                                  // 68\n      int16Tag = '[object Int16Array]',                                                                                // 69\n      int32Tag = '[object Int32Array]',                                                                                // 70\n      uint8Tag = '[object Uint8Array]',                                                                                // 71\n      uint8ClampedTag = '[object Uint8ClampedArray]',                                                                  // 72\n      uint16Tag = '[object Uint16Array]',                                                                              // 73\n      uint32Tag = '[object Uint32Array]';                                                                              // 74\n                                                                                                                       // 75\n  /** Used to match empty string literals in compiled template source. */                                              // 76\n  var reEmptyStringLeading = /\\b__p \\+= '';/g,                                                                         // 77\n      reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,                                                                      // 78\n      reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;                                                         // 79\n                                                                                                                       // 80\n  /** Used to match HTML entities and HTML characters. */                                                              // 81\n  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,                                                                 // 82\n      reUnescapedHtml = /[&<>\"'`]/g,                                                                                   // 83\n      reHasEscapedHtml = RegExp(reEscapedHtml.source),                                                                 // 84\n      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);                                                             // 85\n                                                                                                                       // 86\n  /** Used to match template delimiters. */                                                                            // 87\n  var reEscape = /<%-([\\s\\S]+?)%>/g,                                                                                   // 88\n      reEvaluate = /<%([\\s\\S]+?)%>/g,                                                                                  // 89\n      reInterpolate = /<%=([\\s\\S]+?)%>/g;                                                                              // 90\n                                                                                                                       // 91\n  /** Used to match property names within property paths. */                                                           // 92\n  var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\n\\\\]|\\\\.)*?\\1)\\]/,                                             // 93\n      reIsPlainProp = /^\\w*$/,                                                                                         // 94\n      rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\n\\\\]|\\\\.)*?)\\2)\\]/g;                            // 95\n                                                                                                                       // 96\n  /**                                                                                                                  // 97\n   * Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns)              // 98\n   * and those outlined by [`EscapeRegExpPattern`](http://ecma-international.org/ecma-262/6.0/#sec-escaperegexppattern).\n   */                                                                                                                  // 100\n  var reRegExpChars = /^[:!,]|[\\\\^$.*+?()[\\]{}|\\/]|(^[0-9a-fA-Fnrtuvx])|([\\n\\r\\u2028\\u2029])/g,                        // 101\n      reHasRegExpChars = RegExp(reRegExpChars.source);                                                                 // 102\n                                                                                                                       // 103\n  /** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */       // 104\n  var reComboMark = /[\\u0300-\\u036f\\ufe20-\\ufe23]/g;                                                                   // 105\n                                                                                                                       // 106\n  /** Used to match backslashes in property paths. */                                                                  // 107\n  var reEscapeChar = /\\\\(\\\\)?/g;                                                                                       // 108\n                                                                                                                       // 109\n  /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */\n  var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;                                                                // 111\n                                                                                                                       // 112\n  /** Used to match `RegExp` flags from their coerced string values. */                                                // 113\n  var reFlags = /\\w*$/;                                                                                                // 114\n                                                                                                                       // 115\n  /** Used to detect hexadecimal string values. */                                                                     // 116\n  var reHasHexPrefix = /^0[xX]/;                                                                                       // 117\n                                                                                                                       // 118\n  /** Used to detect host constructors (Safari > 5). */                                                                // 119\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;                                                                    // 120\n                                                                                                                       // 121\n  /** Used to detect unsigned integer values. */                                                                       // 122\n  var reIsUint = /^\\d+$/;                                                                                              // 123\n                                                                                                                       // 124\n  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */                               // 125\n  var reLatin1 = /[\\xc0-\\xd6\\xd8-\\xde\\xdf-\\xf6\\xf8-\\xff]/g;                                                            // 126\n                                                                                                                       // 127\n  /** Used to ensure capturing order of template delimiters. */                                                        // 128\n  var reNoMatch = /($^)/;                                                                                              // 129\n                                                                                                                       // 130\n  /** Used to match unescaped characters in compiled string literals. */                                               // 131\n  var reUnescapedString = /['\\n\\r\\u2028\\u2029\\\\]/g;                                                                    // 132\n                                                                                                                       // 133\n  /** Used to match words to create compound words. */                                                                 // 134\n  var reWords = (function() {                                                                                          // 135\n    var upper = '[A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde]',                                                                         // 136\n        lower = '[a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff]+';                                                                        // 137\n                                                                                                                       // 138\n    return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');        // 139\n  }());                                                                                                                // 140\n                                                                                                                       // 141\n  /** Used to assign default `context` object properties. */                                                           // 142\n  var contextProps = [                                                                                                 // 143\n    'Array', 'ArrayBuffer', 'Date', 'Error', 'Float32Array', 'Float64Array',                                           // 144\n    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Math', 'Number',                                             // 145\n    'Object', 'RegExp', 'Set', 'String', '_', 'clearTimeout', 'isFinite',                                              // 146\n    'parseFloat', 'parseInt', 'setTimeout', 'TypeError', 'Uint8Array',                                                 // 147\n    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap'                                                       // 148\n  ];                                                                                                                   // 149\n                                                                                                                       // 150\n  /** Used to fix the JScript `[[DontEnum]]` bug. */                                                                   // 151\n  var shadowProps = [                                                                                                  // 152\n    'constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable',                                          // 153\n    'toLocaleString', 'toString', 'valueOf'                                                                            // 154\n  ];                                                                                                                   // 155\n                                                                                                                       // 156\n  /** Used to make template sourceURLs easier to identify. */                                                          // 157\n  var templateCounter = -1;                                                                                            // 158\n                                                                                                                       // 159\n  /** Used to identify `toStringTag` values of typed arrays. */                                                        // 160\n  var typedArrayTags = {};                                                                                             // 161\n  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =                                                            // 162\n  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =                                                                 // 163\n  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =                                                                // 164\n  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =                                                        // 165\n  typedArrayTags[uint32Tag] = true;                                                                                    // 166\n  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =                                                                 // 167\n  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =                                                           // 168\n  typedArrayTags[dateTag] = typedArrayTags[errorTag] =                                                                 // 169\n  typedArrayTags[funcTag] = typedArrayTags[mapTag] =                                                                   // 170\n  typedArrayTags[numberTag] = typedArrayTags[objectTag] =                                                              // 171\n  typedArrayTags[regexpTag] = typedArrayTags[setTag] =                                                                 // 172\n  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;                                                      // 173\n                                                                                                                       // 174\n  /** Used to identify `toStringTag` values supported by `_.clone`. */                                                 // 175\n  var cloneableTags = {};                                                                                              // 176\n  cloneableTags[argsTag] = cloneableTags[arrayTag] =                                                                   // 177\n  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =                                                             // 178\n  cloneableTags[dateTag] = cloneableTags[float32Tag] =                                                                 // 179\n  cloneableTags[float64Tag] = cloneableTags[int8Tag] =                                                                 // 180\n  cloneableTags[int16Tag] = cloneableTags[int32Tag] =                                                                  // 181\n  cloneableTags[numberTag] = cloneableTags[objectTag] =                                                                // 182\n  cloneableTags[regexpTag] = cloneableTags[stringTag] =                                                                // 183\n  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =                                                           // 184\n  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;                                                          // 185\n  cloneableTags[errorTag] = cloneableTags[funcTag] =                                                                   // 186\n  cloneableTags[mapTag] = cloneableTags[setTag] =                                                                      // 187\n  cloneableTags[weakMapTag] = false;                                                                                   // 188\n                                                                                                                       // 189\n  /** Used to map latin-1 supplementary letters to basic latin letters. */                                             // 190\n  var deburredLetters = {                                                                                              // 191\n    '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',                                     // 192\n    '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',                                     // 193\n    '\\xc7': 'C',  '\\xe7': 'c',                                                                                         // 194\n    '\\xd0': 'D',  '\\xf0': 'd',                                                                                         // 195\n    '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',                                                               // 196\n    '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',                                                               // 197\n    '\\xcC': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',                                                               // 198\n    '\\xeC': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',                                                               // 199\n    '\\xd1': 'N',  '\\xf1': 'n',                                                                                         // 200\n    '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',                                     // 201\n    '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',                                     // 202\n    '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',                                                               // 203\n    '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',                                                               // 204\n    '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',                                                                            // 205\n    '\\xc6': 'Ae', '\\xe6': 'ae',                                                                                        // 206\n    '\\xde': 'Th', '\\xfe': 'th',                                                                                        // 207\n    '\\xdf': 'ss'                                                                                                       // 208\n  };                                                                                                                   // 209\n                                                                                                                       // 210\n  /** Used to map characters to HTML entities. */                                                                      // 211\n  var htmlEscapes = {                                                                                                  // 212\n    '&': '&amp;',                                                                                                      // 213\n    '<': '&lt;',                                                                                                       // 214\n    '>': '&gt;',                                                                                                       // 215\n    '\"': '&quot;',                                                                                                     // 216\n    \"'\": '&#39;',                                                                                                      // 217\n    '`': '&#96;'                                                                                                       // 218\n  };                                                                                                                   // 219\n                                                                                                                       // 220\n  /** Used to map HTML entities to characters. */                                                                      // 221\n  var htmlUnescapes = {                                                                                                // 222\n    '&amp;': '&',                                                                                                      // 223\n    '&lt;': '<',                                                                                                       // 224\n    '&gt;': '>',                                                                                                       // 225\n    '&quot;': '\"',                                                                                                     // 226\n    '&#39;': \"'\",                                                                                                      // 227\n    '&#96;': '`'                                                                                                       // 228\n  };                                                                                                                   // 229\n                                                                                                                       // 230\n  /** Used to determine if values are of the language type `Object`. */                                                // 231\n  var objectTypes = {                                                                                                  // 232\n    'function': true,                                                                                                  // 233\n    'object': true                                                                                                     // 234\n  };                                                                                                                   // 235\n                                                                                                                       // 236\n  /** Used to escape characters for inclusion in compiled regexes. */                                                  // 237\n  var regexpEscapes = {                                                                                                // 238\n    '0': 'x30', '1': 'x31', '2': 'x32', '3': 'x33', '4': 'x34',                                                        // 239\n    '5': 'x35', '6': 'x36', '7': 'x37', '8': 'x38', '9': 'x39',                                                        // 240\n    'A': 'x41', 'B': 'x42', 'C': 'x43', 'D': 'x44', 'E': 'x45', 'F': 'x46',                                            // 241\n    'a': 'x61', 'b': 'x62', 'c': 'x63', 'd': 'x64', 'e': 'x65', 'f': 'x66',                                            // 242\n    'n': 'x6e', 'r': 'x72', 't': 'x74', 'u': 'x75', 'v': 'x76', 'x': 'x78'                                             // 243\n  };                                                                                                                   // 244\n                                                                                                                       // 245\n  /** Used to escape characters for inclusion in compiled string literals. */                                          // 246\n  var stringEscapes = {                                                                                                // 247\n    '\\\\': '\\\\',                                                                                                        // 248\n    \"'\": \"'\",                                                                                                          // 249\n    '\\n': 'n',                                                                                                         // 250\n    '\\r': 'r',                                                                                                         // 251\n    '\\u2028': 'u2028',                                                                                                 // 252\n    '\\u2029': 'u2029'                                                                                                  // 253\n  };                                                                                                                   // 254\n                                                                                                                       // 255\n  /** Detect free variable `exports`. */                                                                               // 256\n  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;                            // 257\n                                                                                                                       // 258\n  /** Detect free variable `module`. */                                                                                // 259\n  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;                                 // 260\n                                                                                                                       // 261\n  /** Detect free variable `global` from Node.js. */                                                                   // 262\n  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;        // 263\n                                                                                                                       // 264\n  /** Detect free variable `self`. */                                                                                  // 265\n  var freeSelf = objectTypes[typeof self] && self && self.Object && self;                                              // 266\n                                                                                                                       // 267\n  /** Detect free variable `window`. */                                                                                // 268\n  var freeWindow = objectTypes[typeof window] && window && window.Object && window;                                    // 269\n                                                                                                                       // 270\n  /** Detect the popular CommonJS extension `module.exports`. */                                                       // 271\n  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;                                 // 272\n                                                                                                                       // 273\n  /**                                                                                                                  // 274\n   * Used as a reference to the global object.                                                                         // 275\n   *                                                                                                                   // 276\n   * The `this` value is used if it's the global object to avoid Greasemonkey's                                        // 277\n   * restricted `window` object, otherwise the `window` object is used.                                                // 278\n   */                                                                                                                  // 279\n  var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || freeSelf || this;                 // 280\n                                                                                                                       // 281\n  /*--------------------------------------------------------------------------*/                                       // 282\n                                                                                                                       // 283\n  /**                                                                                                                  // 284\n   * The base implementation of `compareAscending` which compares values and                                           // 285\n   * sorts them in ascending order without guaranteeing a stable sort.                                                 // 286\n   *                                                                                                                   // 287\n   * @private                                                                                                          // 288\n   * @param {*} value The value to compare.                                                                            // 289\n   * @param {*} other The other value to compare.                                                                      // 290\n   * @returns {number} Returns the sort order indicator for `value`.                                                   // 291\n   */                                                                                                                  // 292\n  function baseCompareAscending(value, other) {                                                                        // 293\n    if (value !== other) {                                                                                             // 294\n      var valIsNull = value === null,                                                                                  // 295\n          valIsUndef = value === undefined,                                                                            // 296\n          valIsReflexive = value === value;                                                                            // 297\n                                                                                                                       // 298\n      var othIsNull = other === null,                                                                                  // 299\n          othIsUndef = other === undefined,                                                                            // 300\n          othIsReflexive = other === other;                                                                            // 301\n                                                                                                                       // 302\n      if ((value > other && !othIsNull) || !valIsReflexive ||                                                          // 303\n          (valIsNull && !othIsUndef && othIsReflexive) ||                                                              // 304\n          (valIsUndef && othIsReflexive)) {                                                                            // 305\n        return 1;                                                                                                      // 306\n      }                                                                                                                // 307\n      if ((value < other && !valIsNull) || !othIsReflexive ||                                                          // 308\n          (othIsNull && !valIsUndef && valIsReflexive) ||                                                              // 309\n          (othIsUndef && valIsReflexive)) {                                                                            // 310\n        return -1;                                                                                                     // 311\n      }                                                                                                                // 312\n    }                                                                                                                  // 313\n    return 0;                                                                                                          // 314\n  }                                                                                                                    // 315\n                                                                                                                       // 316\n  /**                                                                                                                  // 317\n   * The base implementation of `_.findIndex` and `_.findLastIndex` without                                            // 318\n   * support for callback shorthands and `this` binding.                                                               // 319\n   *                                                                                                                   // 320\n   * @private                                                                                                          // 321\n   * @param {Array} array The array to search.                                                                         // 322\n   * @param {Function} predicate The function invoked per iteration.                                                   // 323\n   * @param {boolean} [fromRight] Specify iterating from right to left.                                                // 324\n   * @returns {number} Returns the index of the matched value, else `-1`.                                              // 325\n   */                                                                                                                  // 326\n  function baseFindIndex(array, predicate, fromRight) {                                                                // 327\n    var length = array.length,                                                                                         // 328\n        index = fromRight ? length : -1;                                                                               // 329\n                                                                                                                       // 330\n    while ((fromRight ? index-- : ++index < length)) {                                                                 // 331\n      if (predicate(array[index], index, array)) {                                                                     // 332\n        return index;                                                                                                  // 333\n      }                                                                                                                // 334\n    }                                                                                                                  // 335\n    return -1;                                                                                                         // 336\n  }                                                                                                                    // 337\n                                                                                                                       // 338\n  /**                                                                                                                  // 339\n   * The base implementation of `_.indexOf` without support for binary searches.                                       // 340\n   *                                                                                                                   // 341\n   * @private                                                                                                          // 342\n   * @param {Array} array The array to search.                                                                         // 343\n   * @param {*} value The value to search for.                                                                         // 344\n   * @param {number} fromIndex The index to search from.                                                               // 345\n   * @returns {number} Returns the index of the matched value, else `-1`.                                              // 346\n   */                                                                                                                  // 347\n  function baseIndexOf(array, value, fromIndex) {                                                                      // 348\n    if (value !== value) {                                                                                             // 349\n      return indexOfNaN(array, fromIndex);                                                                             // 350\n    }                                                                                                                  // 351\n    var index = fromIndex - 1,                                                                                         // 352\n        length = array.length;                                                                                         // 353\n                                                                                                                       // 354\n    while (++index < length) {                                                                                         // 355\n      if (array[index] === value) {                                                                                    // 356\n        return index;                                                                                                  // 357\n      }                                                                                                                // 358\n    }                                                                                                                  // 359\n    return -1;                                                                                                         // 360\n  }                                                                                                                    // 361\n                                                                                                                       // 362\n  /**                                                                                                                  // 363\n   * The base implementation of `_.isFunction` without support for environments                                        // 364\n   * with incorrect `typeof` results.                                                                                  // 365\n   *                                                                                                                   // 366\n   * @private                                                                                                          // 367\n   * @param {*} value The value to check.                                                                              // 368\n   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                               // 369\n   */                                                                                                                  // 370\n  function baseIsFunction(value) {                                                                                     // 371\n    // Avoid a Chakra JIT bug in compatibility modes of IE 11.                                                         // 372\n    // See https://github.com/jashkenas/underscore/issues/1621 for more details.                                       // 373\n    return typeof value == 'function' || false;                                                                        // 374\n  }                                                                                                                    // 375\n                                                                                                                       // 376\n  /**                                                                                                                  // 377\n   * Converts `value` to a string if it's not one. An empty string is returned                                         // 378\n   * for `null` or `undefined` values.                                                                                 // 379\n   *                                                                                                                   // 380\n   * @private                                                                                                          // 381\n   * @param {*} value The value to process.                                                                            // 382\n   * @returns {string} Returns the string.                                                                             // 383\n   */                                                                                                                  // 384\n  function baseToString(value) {                                                                                       // 385\n    return value == null ? '' : (value + '');                                                                          // 386\n  }                                                                                                                    // 387\n                                                                                                                       // 388\n  /**                                                                                                                  // 389\n   * Used by `_.trim` and `_.trimLeft` to get the index of the first character                                         // 390\n   * of `string` that is not found in `chars`.                                                                         // 391\n   *                                                                                                                   // 392\n   * @private                                                                                                          // 393\n   * @param {string} string The string to inspect.                                                                     // 394\n   * @param {string} chars The characters to find.                                                                     // 395\n   * @returns {number} Returns the index of the first character not found in `chars`.                                  // 396\n   */                                                                                                                  // 397\n  function charsLeftIndex(string, chars) {                                                                             // 398\n    var index = -1,                                                                                                    // 399\n        length = string.length;                                                                                        // 400\n                                                                                                                       // 401\n    while (++index < length && chars.indexOf(string.charAt(index)) > -1) {}                                            // 402\n    return index;                                                                                                      // 403\n  }                                                                                                                    // 404\n                                                                                                                       // 405\n  /**                                                                                                                  // 406\n   * Used by `_.trim` and `_.trimRight` to get the index of the last character                                         // 407\n   * of `string` that is not found in `chars`.                                                                         // 408\n   *                                                                                                                   // 409\n   * @private                                                                                                          // 410\n   * @param {string} string The string to inspect.                                                                     // 411\n   * @param {string} chars The characters to find.                                                                     // 412\n   * @returns {number} Returns the index of the last character not found in `chars`.                                   // 413\n   */                                                                                                                  // 414\n  function charsRightIndex(string, chars) {                                                                            // 415\n    var index = string.length;                                                                                         // 416\n                                                                                                                       // 417\n    while (index-- && chars.indexOf(string.charAt(index)) > -1) {}                                                     // 418\n    return index;                                                                                                      // 419\n  }                                                                                                                    // 420\n                                                                                                                       // 421\n  /**                                                                                                                  // 422\n   * Used by `_.sortBy` to compare transformed elements of a collection and stable                                     // 423\n   * sort them in ascending order.                                                                                     // 424\n   *                                                                                                                   // 425\n   * @private                                                                                                          // 426\n   * @param {Object} object The object to compare.                                                                     // 427\n   * @param {Object} other The other object to compare.                                                                // 428\n   * @returns {number} Returns the sort order indicator for `object`.                                                  // 429\n   */                                                                                                                  // 430\n  function compareAscending(object, other) {                                                                           // 431\n    return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);                      // 432\n  }                                                                                                                    // 433\n                                                                                                                       // 434\n  /**                                                                                                                  // 435\n   * Used by `_.sortByOrder` to compare multiple properties of a value to another                                      // 436\n   * and stable sort them.                                                                                             // 437\n   *                                                                                                                   // 438\n   * If `orders` is unspecified, all valuess are sorted in ascending order. Otherwise,                                 // 439\n   * a value is sorted in ascending order if its corresponding order is \"asc\", and                                     // 440\n   * descending if \"desc\".                                                                                             // 441\n   *                                                                                                                   // 442\n   * @private                                                                                                          // 443\n   * @param {Object} object The object to compare.                                                                     // 444\n   * @param {Object} other The other object to compare.                                                                // 445\n   * @param {boolean[]} orders The order to sort by for each property.                                                 // 446\n   * @returns {number} Returns the sort order indicator for `object`.                                                  // 447\n   */                                                                                                                  // 448\n  function compareMultiple(object, other, orders) {                                                                    // 449\n    var index = -1,                                                                                                    // 450\n        objCriteria = object.criteria,                                                                                 // 451\n        othCriteria = other.criteria,                                                                                  // 452\n        length = objCriteria.length,                                                                                   // 453\n        ordersLength = orders.length;                                                                                  // 454\n                                                                                                                       // 455\n    while (++index < length) {                                                                                         // 456\n      var result = baseCompareAscending(objCriteria[index], othCriteria[index]);                                       // 457\n      if (result) {                                                                                                    // 458\n        if (index >= ordersLength) {                                                                                   // 459\n          return result;                                                                                               // 460\n        }                                                                                                              // 461\n        var order = orders[index];                                                                                     // 462\n        return result * ((order === 'asc' || order === true) ? 1 : -1);                                                // 463\n      }                                                                                                                // 464\n    }                                                                                                                  // 465\n    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications                                       // 466\n    // that causes it, under certain circumstances, to provide the same value for                                      // 467\n    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247                                     // 468\n    // for more details.                                                                                               // 469\n    //                                                                                                                 // 470\n    // This also ensures a stable sort in V8 and other engines.                                                        // 471\n    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.                                          // 472\n    return object.index - other.index;                                                                                 // 473\n  }                                                                                                                    // 474\n                                                                                                                       // 475\n  /**                                                                                                                  // 476\n   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.                               // 477\n   *                                                                                                                   // 478\n   * @private                                                                                                          // 479\n   * @param {string} letter The matched letter to deburr.                                                              // 480\n   * @returns {string} Returns the deburred letter.                                                                    // 481\n   */                                                                                                                  // 482\n  function deburrLetter(letter) {                                                                                      // 483\n    return deburredLetters[letter];                                                                                    // 484\n  }                                                                                                                    // 485\n                                                                                                                       // 486\n  /**                                                                                                                  // 487\n   * Used by `_.escape` to convert characters to HTML entities.                                                        // 488\n   *                                                                                                                   // 489\n   * @private                                                                                                          // 490\n   * @param {string} chr The matched character to escape.                                                              // 491\n   * @returns {string} Returns the escaped character.                                                                  // 492\n   */                                                                                                                  // 493\n  function escapeHtmlChar(chr) {                                                                                       // 494\n    return htmlEscapes[chr];                                                                                           // 495\n  }                                                                                                                    // 496\n                                                                                                                       // 497\n  /**                                                                                                                  // 498\n   * Used by `_.escapeRegExp` to escape characters for inclusion in compiled regexes.                                  // 499\n   *                                                                                                                   // 500\n   * @private                                                                                                          // 501\n   * @param {string} chr The matched character to escape.                                                              // 502\n   * @param {string} leadingChar The capture group for a leading character.                                            // 503\n   * @param {string} whitespaceChar The capture group for a whitespace character.                                      // 504\n   * @returns {string} Returns the escaped character.                                                                  // 505\n   */                                                                                                                  // 506\n  function escapeRegExpChar(chr, leadingChar, whitespaceChar) {                                                        // 507\n    if (leadingChar) {                                                                                                 // 508\n      chr = regexpEscapes[chr];                                                                                        // 509\n    } else if (whitespaceChar) {                                                                                       // 510\n      chr = stringEscapes[chr];                                                                                        // 511\n    }                                                                                                                  // 512\n    return '\\\\' + chr;                                                                                                 // 513\n  }                                                                                                                    // 514\n                                                                                                                       // 515\n  /**                                                                                                                  // 516\n   * Used by `_.template` to escape characters for inclusion in compiled string literals.                              // 517\n   *                                                                                                                   // 518\n   * @private                                                                                                          // 519\n   * @param {string} chr The matched character to escape.                                                              // 520\n   * @returns {string} Returns the escaped character.                                                                  // 521\n   */                                                                                                                  // 522\n  function escapeStringChar(chr) {                                                                                     // 523\n    return '\\\\' + stringEscapes[chr];                                                                                  // 524\n  }                                                                                                                    // 525\n                                                                                                                       // 526\n  /**                                                                                                                  // 527\n   * Gets the index at which the first occurrence of `NaN` is found in `array`.                                        // 528\n   *                                                                                                                   // 529\n   * @private                                                                                                          // 530\n   * @param {Array} array The array to search.                                                                         // 531\n   * @param {number} fromIndex The index to search from.                                                               // 532\n   * @param {boolean} [fromRight] Specify iterating from right to left.                                                // 533\n   * @returns {number} Returns the index of the matched `NaN`, else `-1`.                                              // 534\n   */                                                                                                                  // 535\n  function indexOfNaN(array, fromIndex, fromRight) {                                                                   // 536\n    var length = array.length,                                                                                         // 537\n        index = fromIndex + (fromRight ? 0 : -1);                                                                      // 538\n                                                                                                                       // 539\n    while ((fromRight ? index-- : ++index < length)) {                                                                 // 540\n      var other = array[index];                                                                                        // 541\n      if (other !== other) {                                                                                           // 542\n        return index;                                                                                                  // 543\n      }                                                                                                                // 544\n    }                                                                                                                  // 545\n    return -1;                                                                                                         // 546\n  }                                                                                                                    // 547\n                                                                                                                       // 548\n  /**                                                                                                                  // 549\n   * Checks if `value` is a host object in IE < 9.                                                                     // 550\n   *                                                                                                                   // 551\n   * @private                                                                                                          // 552\n   * @param {*} value The value to check.                                                                              // 553\n   * @returns {boolean} Returns `true` if `value` is a host object, else `false`.                                      // 554\n   */                                                                                                                  // 555\n  var isHostObject = (function() {                                                                                     // 556\n    try {                                                                                                              // 557\n      Object({ 'toString': 0 } + '');                                                                                  // 558\n    } catch(e) {                                                                                                       // 559\n      return function() { return false; };                                                                             // 560\n    }                                                                                                                  // 561\n    return function(value) {                                                                                           // 562\n      // IE < 9 presents many host objects as `Object` objects that can coerce                                         // 563\n      // to strings despite having improperly defined `toString` methods.                                              // 564\n      return typeof value.toString != 'function' && typeof (value + '') == 'string';                                   // 565\n    };                                                                                                                 // 566\n  }());                                                                                                                // 567\n                                                                                                                       // 568\n  /**                                                                                                                  // 569\n   * Checks if `value` is object-like.                                                                                 // 570\n   *                                                                                                                   // 571\n   * @private                                                                                                          // 572\n   * @param {*} value The value to check.                                                                              // 573\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.                                        // 574\n   */                                                                                                                  // 575\n  function isObjectLike(value) {                                                                                       // 576\n    return !!value && typeof value == 'object';                                                                        // 577\n  }                                                                                                                    // 578\n                                                                                                                       // 579\n  /**                                                                                                                  // 580\n   * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a                                              // 581\n   * character code is whitespace.                                                                                     // 582\n   *                                                                                                                   // 583\n   * @private                                                                                                          // 584\n   * @param {number} charCode The character code to inspect.                                                           // 585\n   * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.                                      // 586\n   */                                                                                                                  // 587\n  function isSpace(charCode) {                                                                                         // 588\n    return ((charCode <= 160 && (charCode >= 9 && charCode <= 13) || charCode == 32 || charCode == 160) || charCode == 5760 || charCode == 6158 ||\n      (charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279)));\n  }                                                                                                                    // 591\n                                                                                                                       // 592\n  /**                                                                                                                  // 593\n   * Replaces all `placeholder` elements in `array` with an internal placeholder                                       // 594\n   * and returns an array of their indexes.                                                                            // 595\n   *                                                                                                                   // 596\n   * @private                                                                                                          // 597\n   * @param {Array} array The array to modify.                                                                         // 598\n   * @param {*} placeholder The placeholder to replace.                                                                // 599\n   * @returns {Array} Returns the new array of placeholder indexes.                                                    // 600\n   */                                                                                                                  // 601\n  function replaceHolders(array, placeholder) {                                                                        // 602\n    var index = -1,                                                                                                    // 603\n        length = array.length,                                                                                         // 604\n        resIndex = -1,                                                                                                 // 605\n        result = [];                                                                                                   // 606\n                                                                                                                       // 607\n    while (++index < length) {                                                                                         // 608\n      if (array[index] === placeholder) {                                                                              // 609\n        array[index] = PLACEHOLDER;                                                                                    // 610\n        result[++resIndex] = index;                                                                                    // 611\n      }                                                                                                                // 612\n    }                                                                                                                  // 613\n    return result;                                                                                                     // 614\n  }                                                                                                                    // 615\n                                                                                                                       // 616\n  /**                                                                                                                  // 617\n   * An implementation of `_.uniq` optimized for sorted arrays without support                                         // 618\n   * for callback shorthands and `this` binding.                                                                       // 619\n   *                                                                                                                   // 620\n   * @private                                                                                                          // 621\n   * @param {Array} array The array to inspect.                                                                        // 622\n   * @param {Function} [iteratee] The function invoked per iteration.                                                  // 623\n   * @returns {Array} Returns the new duplicate free array.                                                            // 624\n   */                                                                                                                  // 625\n  function sortedUniq(array, iteratee) {                                                                               // 626\n    var seen,                                                                                                          // 627\n        index = -1,                                                                                                    // 628\n        length = array.length,                                                                                         // 629\n        resIndex = -1,                                                                                                 // 630\n        result = [];                                                                                                   // 631\n                                                                                                                       // 632\n    while (++index < length) {                                                                                         // 633\n      var value = array[index],                                                                                        // 634\n          computed = iteratee ? iteratee(value, index, array) : value;                                                 // 635\n                                                                                                                       // 636\n      if (!index || seen !== computed) {                                                                               // 637\n        seen = computed;                                                                                               // 638\n        result[++resIndex] = value;                                                                                    // 639\n      }                                                                                                                // 640\n    }                                                                                                                  // 641\n    return result;                                                                                                     // 642\n  }                                                                                                                    // 643\n                                                                                                                       // 644\n  /**                                                                                                                  // 645\n   * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace                                    // 646\n   * character of `string`.                                                                                            // 647\n   *                                                                                                                   // 648\n   * @private                                                                                                          // 649\n   * @param {string} string The string to inspect.                                                                     // 650\n   * @returns {number} Returns the index of the first non-whitespace character.                                        // 651\n   */                                                                                                                  // 652\n  function trimmedLeftIndex(string) {                                                                                  // 653\n    var index = -1,                                                                                                    // 654\n        length = string.length;                                                                                        // 655\n                                                                                                                       // 656\n    while (++index < length && isSpace(string.charCodeAt(index))) {}                                                   // 657\n    return index;                                                                                                      // 658\n  }                                                                                                                    // 659\n                                                                                                                       // 660\n  /**                                                                                                                  // 661\n   * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace                                    // 662\n   * character of `string`.                                                                                            // 663\n   *                                                                                                                   // 664\n   * @private                                                                                                          // 665\n   * @param {string} string The string to inspect.                                                                     // 666\n   * @returns {number} Returns the index of the last non-whitespace character.                                         // 667\n   */                                                                                                                  // 668\n  function trimmedRightIndex(string) {                                                                                 // 669\n    var index = string.length;                                                                                         // 670\n                                                                                                                       // 671\n    while (index-- && isSpace(string.charCodeAt(index))) {}                                                            // 672\n    return index;                                                                                                      // 673\n  }                                                                                                                    // 674\n                                                                                                                       // 675\n  /**                                                                                                                  // 676\n   * Used by `_.unescape` to convert HTML entities to characters.                                                      // 677\n   *                                                                                                                   // 678\n   * @private                                                                                                          // 679\n   * @param {string} chr The matched character to unescape.                                                            // 680\n   * @returns {string} Returns the unescaped character.                                                                // 681\n   */                                                                                                                  // 682\n  function unescapeHtmlChar(chr) {                                                                                     // 683\n    return htmlUnescapes[chr];                                                                                         // 684\n  }                                                                                                                    // 685\n                                                                                                                       // 686\n  /*--------------------------------------------------------------------------*/                                       // 687\n                                                                                                                       // 688\n  /**                                                                                                                  // 689\n   * Create a new pristine `lodash` function using the given `context` object.                                         // 690\n   *                                                                                                                   // 691\n   * @static                                                                                                           // 692\n   * @memberOf _                                                                                                       // 693\n   * @category Utility                                                                                                 // 694\n   * @param {Object} [context=root] The context object.                                                                // 695\n   * @returns {Function} Returns a new `lodash` function.                                                              // 696\n   * @example                                                                                                          // 697\n   *                                                                                                                   // 698\n   * _.mixin({ 'foo': _.constant('foo') });                                                                            // 699\n   *                                                                                                                   // 700\n   * var lodash = _.runInContext();                                                                                    // 701\n   * lodash.mixin({ 'bar': lodash.constant('bar') });                                                                  // 702\n   *                                                                                                                   // 703\n   * _.isFunction(_.foo);                                                                                              // 704\n   * // => true                                                                                                        // 705\n   * _.isFunction(_.bar);                                                                                              // 706\n   * // => false                                                                                                       // 707\n   *                                                                                                                   // 708\n   * lodash.isFunction(lodash.foo);                                                                                    // 709\n   * // => false                                                                                                       // 710\n   * lodash.isFunction(lodash.bar);                                                                                    // 711\n   * // => true                                                                                                        // 712\n   *                                                                                                                   // 713\n   * // using `context` to mock `Date#getTime` use in `_.now`                                                          // 714\n   * var mock = _.runInContext({                                                                                       // 715\n   *   'Date': function() {                                                                                            // 716\n   *     return { 'getTime': getTimeMock };                                                                            // 717\n   *   }                                                                                                               // 718\n   * });                                                                                                               // 719\n   *                                                                                                                   // 720\n   * // or creating a suped-up `defer` in Node.js                                                                      // 721\n   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;                                                 // 722\n   */                                                                                                                  // 723\n  function runInContext(context) {                                                                                     // 724\n    // Avoid issues with some ES3 environments that attempt to use values, named                                       // 725\n    // after built-in constructors like `Object`, for the creation of literals.                                        // 726\n    // ES5 clears this up by stating that literals must use built-in constructors.                                     // 727\n    // See https://es5.github.io/#x11.1.5 for more details.                                                            // 728\n    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;                         // 729\n                                                                                                                       // 730\n    /** Native constructor references. */                                                                              // 731\n    var Array = context.Array,                                                                                         // 732\n        Date = context.Date,                                                                                           // 733\n        Error = context.Error,                                                                                         // 734\n        Function = context.Function,                                                                                   // 735\n        Math = context.Math,                                                                                           // 736\n        Number = context.Number,                                                                                       // 737\n        Object = context.Object,                                                                                       // 738\n        RegExp = context.RegExp,                                                                                       // 739\n        String = context.String,                                                                                       // 740\n        TypeError = context.TypeError;                                                                                 // 741\n                                                                                                                       // 742\n    /** Used for native method references. */                                                                          // 743\n    var arrayProto = Array.prototype,                                                                                  // 744\n        errorProto = Error.prototype,                                                                                  // 745\n        objectProto = Object.prototype,                                                                                // 746\n        stringProto = String.prototype;                                                                                // 747\n                                                                                                                       // 748\n    /** Used to resolve the decompiled source of functions. */                                                         // 749\n    var fnToString = Function.prototype.toString;                                                                      // 750\n                                                                                                                       // 751\n    /** Used to check objects for own properties. */                                                                   // 752\n    var hasOwnProperty = objectProto.hasOwnProperty;                                                                   // 753\n                                                                                                                       // 754\n    /** Used to generate unique IDs. */                                                                                // 755\n    var idCounter = 0;                                                                                                 // 756\n                                                                                                                       // 757\n    /**                                                                                                                // 758\n     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)  // 759\n     * of values.                                                                                                      // 760\n     */                                                                                                                // 761\n    var objToString = objectProto.toString;                                                                            // 762\n                                                                                                                       // 763\n    /** Used to restore the original `_` reference in `_.noConflict`. */                                               // 764\n    var oldDash = root._;                                                                                              // 765\n                                                                                                                       // 766\n    /** Used to detect if a method is native. */                                                                       // 767\n    var reIsNative = RegExp('^' +                                                                                      // 768\n      fnToString.call(hasOwnProperty).replace(/[\\\\^$.*+?()[\\]{}|]/g, '\\\\$&')                                           // 769\n      .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'                                // 770\n    );                                                                                                                 // 771\n                                                                                                                       // 772\n    /** Native method references. */                                                                                   // 773\n    var ArrayBuffer = context.ArrayBuffer,                                                                             // 774\n        clearTimeout = context.clearTimeout,                                                                           // 775\n        parseFloat = context.parseFloat,                                                                               // 776\n        pow = Math.pow,                                                                                                // 777\n        propertyIsEnumerable = objectProto.propertyIsEnumerable,                                                       // 778\n        Set = getNative(context, 'Set'),                                                                               // 779\n        setTimeout = context.setTimeout,                                                                               // 780\n        splice = arrayProto.splice,                                                                                    // 781\n        Uint8Array = context.Uint8Array,                                                                               // 782\n        WeakMap = getNative(context, 'WeakMap');                                                                       // 783\n                                                                                                                       // 784\n    /* Native method references for those with the same name as other `lodash` methods. */                             // 785\n    var nativeCeil = Math.ceil,                                                                                        // 786\n        nativeCreate = getNative(Object, 'create'),                                                                    // 787\n        nativeFloor = Math.floor,                                                                                      // 788\n        nativeIsArray = getNative(Array, 'isArray'),                                                                   // 789\n        nativeIsFinite = context.isFinite,                                                                             // 790\n        nativeKeys = getNative(Object, 'keys'),                                                                        // 791\n        nativeMax = Math.max,                                                                                          // 792\n        nativeMin = Math.min,                                                                                          // 793\n        nativeNow = getNative(Date, 'now'),                                                                            // 794\n        nativeParseInt = context.parseInt,                                                                             // 795\n        nativeRandom = Math.random;                                                                                    // 796\n                                                                                                                       // 797\n    /** Used as references for `-Infinity` and `Infinity`. */                                                          // 798\n    var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY,                                                                  // 799\n        POSITIVE_INFINITY = Number.POSITIVE_INFINITY;                                                                  // 800\n                                                                                                                       // 801\n    /** Used as references for the maximum length and index of an array. */                                            // 802\n    var MAX_ARRAY_LENGTH = 4294967295,                                                                                 // 803\n        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,                                                                        // 804\n        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;                                                                // 805\n                                                                                                                       // 806\n    /**                                                                                                                // 807\n     * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)           // 808\n     * of an array-like value.                                                                                         // 809\n     */                                                                                                                // 810\n    var MAX_SAFE_INTEGER = 9007199254740991;                                                                           // 811\n                                                                                                                       // 812\n    /** Used to store function metadata. */                                                                            // 813\n    var metaMap = WeakMap && new WeakMap;                                                                              // 814\n                                                                                                                       // 815\n    /** Used to lookup unminified function names. */                                                                   // 816\n    var realNames = {};                                                                                                // 817\n                                                                                                                       // 818\n    /** Used to lookup a type array constructors by `toStringTag`. */                                                  // 819\n    var ctorByTag = {};                                                                                                // 820\n    ctorByTag[float32Tag] = context.Float32Array;                                                                      // 821\n    ctorByTag[float64Tag] = context.Float64Array;                                                                      // 822\n    ctorByTag[int8Tag] = context.Int8Array;                                                                            // 823\n    ctorByTag[int16Tag] = context.Int16Array;                                                                          // 824\n    ctorByTag[int32Tag] = context.Int32Array;                                                                          // 825\n    ctorByTag[uint8Tag] = Uint8Array;                                                                                  // 826\n    ctorByTag[uint8ClampedTag] = context.Uint8ClampedArray;                                                            // 827\n    ctorByTag[uint16Tag] = context.Uint16Array;                                                                        // 828\n    ctorByTag[uint32Tag] = context.Uint32Array;                                                                        // 829\n                                                                                                                       // 830\n    /** Used to avoid iterating over non-enumerable properties in IE < 9. */                                           // 831\n    var nonEnumProps = {};                                                                                             // 832\n    nonEnumProps[arrayTag] = nonEnumProps[dateTag] = nonEnumProps[numberTag] = { 'constructor': true, 'toLocaleString': true, 'toString': true, 'valueOf': true };\n    nonEnumProps[boolTag] = nonEnumProps[stringTag] = { 'constructor': true, 'toString': true, 'valueOf': true };      // 834\n    nonEnumProps[errorTag] = nonEnumProps[funcTag] = nonEnumProps[regexpTag] = { 'constructor': true, 'toString': true };\n    nonEnumProps[objectTag] = { 'constructor': true };                                                                 // 836\n                                                                                                                       // 837\n    arrayEach(shadowProps, function(key) {                                                                             // 838\n      for (var tag in nonEnumProps) {                                                                                  // 839\n        if (hasOwnProperty.call(nonEnumProps, tag)) {                                                                  // 840\n          var props = nonEnumProps[tag];                                                                               // 841\n          props[key] = hasOwnProperty.call(props, key);                                                                // 842\n        }                                                                                                              // 843\n      }                                                                                                                // 844\n    });                                                                                                                // 845\n                                                                                                                       // 846\n    /*------------------------------------------------------------------------*/                                       // 847\n                                                                                                                       // 848\n    /**                                                                                                                // 849\n     * Creates a `lodash` object which wraps `value` to enable implicit chaining.                                      // 850\n     * Methods that operate on and return arrays, collections, and functions can                                       // 851\n     * be chained together. Methods that retrieve a single value or may return a                                       // 852\n     * primitive value will automatically end the chain returning the unwrapped                                        // 853\n     * value. Explicit chaining may be enabled using `_.chain`. The execution of                                       // 854\n     * chained methods is lazy, that is, execution is deferred until `_#value`                                         // 855\n     * is implicitly or explicitly called.                                                                             // 856\n     *                                                                                                                 // 857\n     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut                                     // 858\n     * fusion is an optimization strategy which merge iteratee calls; this can help                                    // 859\n     * to avoid the creation of intermediate data structures and greatly reduce the                                    // 860\n     * number of iteratee executions.                                                                                  // 861\n     *                                                                                                                 // 862\n     * Chaining is supported in custom builds as long as the `_#value` method is                                       // 863\n     * directly or indirectly included in the build.                                                                   // 864\n     *                                                                                                                 // 865\n     * In addition to lodash methods, wrappers have `Array` and `String` methods.                                      // 866\n     *                                                                                                                 // 867\n     * The wrapper `Array` methods are:                                                                                // 868\n     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,                                           // 869\n     * `splice`, and `unshift`                                                                                         // 870\n     *                                                                                                                 // 871\n     * The wrapper `String` methods are:                                                                               // 872\n     * `replace` and `split`                                                                                           // 873\n     *                                                                                                                 // 874\n     * The wrapper methods that support shortcut fusion are:                                                           // 875\n     * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,                                        // 876\n     * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,                                        // 877\n     * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,                                         // 878\n     * and `where`                                                                                                     // 879\n     *                                                                                                                 // 880\n     * The chainable wrapper methods are:                                                                              // 881\n     * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,                                         // 882\n     * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,                                        // 883\n     * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defaultsDeep`,                                           // 884\n     * `defer`, `delay`, `difference`, `drop`, `dropRight`, `dropRightWhile`,                                          // 885\n     * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`,                                   // 886\n     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,                                      // 887\n     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,                                         // 888\n     * `invoke`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`,                                           // 889\n     * `matchesProperty`, `memoize`, `merge`, `method`, `methodOf`, `mixin`,                                           // 890\n     * `modArgs`, `negate`, `omit`, `once`, `pairs`, `partial`, `partialRight`,                                        // 891\n     * `partition`, `pick`, `plant`, `pluck`, `property`, `propertyOf`, `pull`,                                        // 892\n     * `pullAt`, `push`, `range`, `rearg`, `reject`, `remove`, `rest`, `restParam`,                                    // 893\n     * `reverse`, `set`, `shuffle`, `slice`, `sort`, `sortBy`, `sortByAll`,                                            // 894\n     * `sortByOrder`, `splice`, `spread`, `take`, `takeRight`, `takeRightWhile`,                                       // 895\n     * `takeWhile`, `tap`, `throttle`, `thru`, `times`, `toArray`, `toPlainObject`,                                    // 896\n     * `transform`, `union`, `uniq`, `unshift`, `unzip`, `unzipWith`, `values`,                                        // 897\n     * `valuesIn`, `where`, `without`, `wrap`, `xor`, `zip`, `zipObject`, `zipWith`                                    // 898\n     *                                                                                                                 // 899\n     * The wrapper methods that are **not** chainable by default are:                                                  // 900\n     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clone`, `cloneDeep`,                                      // 901\n     * `deburr`, `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`,                                   // 902\n     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`,                                    // 903\n     * `floor`, `get`, `gt`, `gte`, `has`, `identity`, `includes`, `indexOf`,                                          // 904\n     * `inRange`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,                                        // 905\n     * `isEmpty`, `isEqual`, `isError`, `isFinite` `isFunction`, `isMatch`,                                            // 906\n     * `isNative`, `isNaN`, `isNull`, `isNumber`, `isObject`, `isPlainObject`,                                         // 907\n     * `isRegExp`, `isString`, `isUndefined`, `isTypedArray`, `join`, `kebabCase`,                                     // 908\n     * `last`, `lastIndexOf`, `lt`, `lte`, `max`, `min`, `noConflict`, `noop`,                                         // 909\n     * `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`, `random`, `reduce`,                                     // 910\n     * `reduceRight`, `repeat`, `result`, `round`, `runInContext`, `shift`, `size`,                                    // 911\n     * `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`, `startCase`,                                             // 912\n     * `startsWith`, `sum`, `template`, `trim`, `trimLeft`, `trimRight`, `trunc`,                                      // 913\n     * `unescape`, `uniqueId`, `value`, and `words`                                                                    // 914\n     *                                                                                                                 // 915\n     * The wrapper method `sample` will return a wrapped value when `n` is provided,                                   // 916\n     * otherwise an unwrapped value is returned.                                                                       // 917\n     *                                                                                                                 // 918\n     * @name _                                                                                                         // 919\n     * @constructor                                                                                                    // 920\n     * @category Chain                                                                                                 // 921\n     * @param {*} value The value to wrap in a `lodash` instance.                                                      // 922\n     * @returns {Object} Returns the new `lodash` wrapper instance.                                                    // 923\n     * @example                                                                                                        // 924\n     *                                                                                                                 // 925\n     * var wrapped = _([1, 2, 3]);                                                                                     // 926\n     *                                                                                                                 // 927\n     * // returns an unwrapped value                                                                                   // 928\n     * wrapped.reduce(function(total, n) {                                                                             // 929\n     *   return total + n;                                                                                             // 930\n     * });                                                                                                             // 931\n     * // => 6                                                                                                         // 932\n     *                                                                                                                 // 933\n     * // returns a wrapped value                                                                                      // 934\n     * var squares = wrapped.map(function(n) {                                                                         // 935\n     *   return n * n;                                                                                                 // 936\n     * });                                                                                                             // 937\n     *                                                                                                                 // 938\n     * _.isArray(squares);                                                                                             // 939\n     * // => false                                                                                                     // 940\n     *                                                                                                                 // 941\n     * _.isArray(squares.value());                                                                                     // 942\n     * // => true                                                                                                      // 943\n     */                                                                                                                // 944\n    function lodash(value) {                                                                                           // 945\n      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {                                 // 946\n        if (value instanceof LodashWrapper) {                                                                          // 947\n          return value;                                                                                                // 948\n        }                                                                                                              // 949\n        if (hasOwnProperty.call(value, '__chain__') && hasOwnProperty.call(value, '__wrapped__')) {                    // 950\n          return wrapperClone(value);                                                                                  // 951\n        }                                                                                                              // 952\n      }                                                                                                                // 953\n      return new LodashWrapper(value);                                                                                 // 954\n    }                                                                                                                  // 955\n                                                                                                                       // 956\n    /**                                                                                                                // 957\n     * The function whose prototype all chaining wrappers inherit from.                                                // 958\n     *                                                                                                                 // 959\n     * @private                                                                                                        // 960\n     */                                                                                                                // 961\n    function baseLodash() {                                                                                            // 962\n      // No operation performed.                                                                                       // 963\n    }                                                                                                                  // 964\n                                                                                                                       // 965\n    /**                                                                                                                // 966\n     * The base constructor for creating `lodash` wrapper objects.                                                     // 967\n     *                                                                                                                 // 968\n     * @private                                                                                                        // 969\n     * @param {*} value The value to wrap.                                                                             // 970\n     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.                                            // 971\n     * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.                                   // 972\n     */                                                                                                                // 973\n    function LodashWrapper(value, chainAll, actions) {                                                                 // 974\n      this.__wrapped__ = value;                                                                                        // 975\n      this.__actions__ = actions || [];                                                                                // 976\n      this.__chain__ = !!chainAll;                                                                                     // 977\n    }                                                                                                                  // 978\n                                                                                                                       // 979\n    /**                                                                                                                // 980\n     * An object environment feature flags.                                                                            // 981\n     *                                                                                                                 // 982\n     * @static                                                                                                         // 983\n     * @memberOf _                                                                                                     // 984\n     * @type Object                                                                                                    // 985\n     */                                                                                                                // 986\n    var support = lodash.support = {};                                                                                 // 987\n                                                                                                                       // 988\n    (function(x) {                                                                                                     // 989\n      var Ctor = function() { this.x = x; },                                                                           // 990\n          object = { '0': x, 'length': x },                                                                            // 991\n          props = [];                                                                                                  // 992\n                                                                                                                       // 993\n      Ctor.prototype = { 'valueOf': x, 'y': x };                                                                       // 994\n      for (var key in new Ctor) { props.push(key); }                                                                   // 995\n                                                                                                                       // 996\n      /**                                                                                                              // 997\n       * Detect if `name` or `message` properties of `Error.prototype` are                                             // 998\n       * enumerable by default (IE < 9, Safari < 5.1).                                                                 // 999\n       *                                                                                                               // 1000\n       * @memberOf _.support                                                                                           // 1001\n       * @type boolean                                                                                                 // 1002\n       */                                                                                                              // 1003\n      support.enumErrorProps = propertyIsEnumerable.call(errorProto, 'message') ||                                     // 1004\n        propertyIsEnumerable.call(errorProto, 'name');                                                                 // 1005\n                                                                                                                       // 1006\n      /**                                                                                                              // 1007\n       * Detect if `prototype` properties are enumerable by default.                                                   // 1008\n       *                                                                                                               // 1009\n       * Firefox < 3.6, Opera > 9.50 - Opera < 11.60, and Safari < 5.1                                                 // 1010\n       * (if the prototype or a property on the prototype has been set)                                                // 1011\n       * incorrectly set the `[[Enumerable]]` value of a function's `prototype`                                        // 1012\n       * property to `true`.                                                                                           // 1013\n       *                                                                                                               // 1014\n       * @memberOf _.support                                                                                           // 1015\n       * @type boolean                                                                                                 // 1016\n       */                                                                                                              // 1017\n      support.enumPrototypes = propertyIsEnumerable.call(Ctor, 'prototype');                                           // 1018\n                                                                                                                       // 1019\n      /**                                                                                                              // 1020\n       * Detect if properties shadowing those on `Object.prototype` are non-enumerable.                                // 1021\n       *                                                                                                               // 1022\n       * In IE < 9 an object's own properties, shadowing non-enumerable ones,                                          // 1023\n       * are made non-enumerable as well (a.k.a the JScript `[[DontEnum]]` bug).                                       // 1024\n       *                                                                                                               // 1025\n       * @memberOf _.support                                                                                           // 1026\n       * @type boolean                                                                                                 // 1027\n       */                                                                                                              // 1028\n      support.nonEnumShadows = !/valueOf/.test(props);                                                                 // 1029\n                                                                                                                       // 1030\n      /**                                                                                                              // 1031\n       * Detect if own properties are iterated after inherited properties (IE < 9).                                    // 1032\n       *                                                                                                               // 1033\n       * @memberOf _.support                                                                                           // 1034\n       * @type boolean                                                                                                 // 1035\n       */                                                                                                              // 1036\n      support.ownLast = props[0] != 'x';                                                                               // 1037\n                                                                                                                       // 1038\n      /**                                                                                                              // 1039\n       * Detect if `Array#shift` and `Array#splice` augment array-like objects                                         // 1040\n       * correctly.                                                                                                    // 1041\n       *                                                                                                               // 1042\n       * Firefox < 10, compatibility modes of IE 8, and IE < 9 have buggy Array                                        // 1043\n       * `shift()` and `splice()` functions that fail to remove the last element,                                      // 1044\n       * `value[0]`, of array-like objects even though the \"length\" property is                                        // 1045\n       * set to `0`. The `shift()` method is buggy in compatibility modes of IE 8,                                     // 1046\n       * while `splice()` is buggy regardless of mode in IE < 9.                                                       // 1047\n       *                                                                                                               // 1048\n       * @memberOf _.support                                                                                           // 1049\n       * @type boolean                                                                                                 // 1050\n       */                                                                                                              // 1051\n      support.spliceObjects = (splice.call(object, 0, 1), !object[0]);                                                 // 1052\n                                                                                                                       // 1053\n      /**                                                                                                              // 1054\n       * Detect lack of support for accessing string characters by index.                                              // 1055\n       *                                                                                                               // 1056\n       * IE < 8 can't access characters by index. IE 8 can only access characters                                      // 1057\n       * by index on string literals, not string objects.                                                              // 1058\n       *                                                                                                               // 1059\n       * @memberOf _.support                                                                                           // 1060\n       * @type boolean                                                                                                 // 1061\n       */                                                                                                              // 1062\n      support.unindexedChars = ('x'[0] + Object('x')[0]) != 'xx';                                                      // 1063\n    }(1, 0));                                                                                                          // 1064\n                                                                                                                       // 1065\n    /**                                                                                                                // 1066\n     * By default, the template delimiters used by lodash are like those in                                            // 1067\n     * embedded Ruby (ERB). Change the following template settings to use                                              // 1068\n     * alternative delimiters.                                                                                         // 1069\n     *                                                                                                                 // 1070\n     * @static                                                                                                         // 1071\n     * @memberOf _                                                                                                     // 1072\n     * @type Object                                                                                                    // 1073\n     */                                                                                                                // 1074\n    lodash.templateSettings = {                                                                                        // 1075\n                                                                                                                       // 1076\n      /**                                                                                                              // 1077\n       * Used to detect `data` property values to be HTML-escaped.                                                     // 1078\n       *                                                                                                               // 1079\n       * @memberOf _.templateSettings                                                                                  // 1080\n       * @type RegExp                                                                                                  // 1081\n       */                                                                                                              // 1082\n      'escape': reEscape,                                                                                              // 1083\n                                                                                                                       // 1084\n      /**                                                                                                              // 1085\n       * Used to detect code to be evaluated.                                                                          // 1086\n       *                                                                                                               // 1087\n       * @memberOf _.templateSettings                                                                                  // 1088\n       * @type RegExp                                                                                                  // 1089\n       */                                                                                                              // 1090\n      'evaluate': reEvaluate,                                                                                          // 1091\n                                                                                                                       // 1092\n      /**                                                                                                              // 1093\n       * Used to detect `data` property values to inject.                                                              // 1094\n       *                                                                                                               // 1095\n       * @memberOf _.templateSettings                                                                                  // 1096\n       * @type RegExp                                                                                                  // 1097\n       */                                                                                                              // 1098\n      'interpolate': reInterpolate,                                                                                    // 1099\n                                                                                                                       // 1100\n      /**                                                                                                              // 1101\n       * Used to reference the data object in the template text.                                                       // 1102\n       *                                                                                                               // 1103\n       * @memberOf _.templateSettings                                                                                  // 1104\n       * @type string                                                                                                  // 1105\n       */                                                                                                              // 1106\n      'variable': '',                                                                                                  // 1107\n                                                                                                                       // 1108\n      /**                                                                                                              // 1109\n       * Used to import variables into the compiled template.                                                          // 1110\n       *                                                                                                               // 1111\n       * @memberOf _.templateSettings                                                                                  // 1112\n       * @type Object                                                                                                  // 1113\n       */                                                                                                              // 1114\n      'imports': {                                                                                                     // 1115\n                                                                                                                       // 1116\n        /**                                                                                                            // 1117\n         * A reference to the `lodash` function.                                                                       // 1118\n         *                                                                                                             // 1119\n         * @memberOf _.templateSettings.imports                                                                        // 1120\n         * @type Function                                                                                              // 1121\n         */                                                                                                            // 1122\n        '_': lodash                                                                                                    // 1123\n      }                                                                                                                // 1124\n    };                                                                                                                 // 1125\n                                                                                                                       // 1126\n    /*------------------------------------------------------------------------*/                                       // 1127\n                                                                                                                       // 1128\n    /**                                                                                                                // 1129\n     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.                                    // 1130\n     *                                                                                                                 // 1131\n     * @private                                                                                                        // 1132\n     * @param {*} value The value to wrap.                                                                             // 1133\n     */                                                                                                                // 1134\n    function LazyWrapper(value) {                                                                                      // 1135\n      this.__wrapped__ = value;                                                                                        // 1136\n      this.__actions__ = [];                                                                                           // 1137\n      this.__dir__ = 1;                                                                                                // 1138\n      this.__filtered__ = false;                                                                                       // 1139\n      this.__iteratees__ = [];                                                                                         // 1140\n      this.__takeCount__ = POSITIVE_INFINITY;                                                                          // 1141\n      this.__views__ = [];                                                                                             // 1142\n    }                                                                                                                  // 1143\n                                                                                                                       // 1144\n    /**                                                                                                                // 1145\n     * Creates a clone of the lazy wrapper object.                                                                     // 1146\n     *                                                                                                                 // 1147\n     * @private                                                                                                        // 1148\n     * @name clone                                                                                                     // 1149\n     * @memberOf LazyWrapper                                                                                           // 1150\n     * @returns {Object} Returns the cloned `LazyWrapper` object.                                                      // 1151\n     */                                                                                                                // 1152\n    function lazyClone() {                                                                                             // 1153\n      var result = new LazyWrapper(this.__wrapped__);                                                                  // 1154\n      result.__actions__ = arrayCopy(this.__actions__);                                                                // 1155\n      result.__dir__ = this.__dir__;                                                                                   // 1156\n      result.__filtered__ = this.__filtered__;                                                                         // 1157\n      result.__iteratees__ = arrayCopy(this.__iteratees__);                                                            // 1158\n      result.__takeCount__ = this.__takeCount__;                                                                       // 1159\n      result.__views__ = arrayCopy(this.__views__);                                                                    // 1160\n      return result;                                                                                                   // 1161\n    }                                                                                                                  // 1162\n                                                                                                                       // 1163\n    /**                                                                                                                // 1164\n     * Reverses the direction of lazy iteration.                                                                       // 1165\n     *                                                                                                                 // 1166\n     * @private                                                                                                        // 1167\n     * @name reverse                                                                                                   // 1168\n     * @memberOf LazyWrapper                                                                                           // 1169\n     * @returns {Object} Returns the new reversed `LazyWrapper` object.                                                // 1170\n     */                                                                                                                // 1171\n    function lazyReverse() {                                                                                           // 1172\n      if (this.__filtered__) {                                                                                         // 1173\n        var result = new LazyWrapper(this);                                                                            // 1174\n        result.__dir__ = -1;                                                                                           // 1175\n        result.__filtered__ = true;                                                                                    // 1176\n      } else {                                                                                                         // 1177\n        result = this.clone();                                                                                         // 1178\n        result.__dir__ *= -1;                                                                                          // 1179\n      }                                                                                                                // 1180\n      return result;                                                                                                   // 1181\n    }                                                                                                                  // 1182\n                                                                                                                       // 1183\n    /**                                                                                                                // 1184\n     * Extracts the unwrapped value from its lazy wrapper.                                                             // 1185\n     *                                                                                                                 // 1186\n     * @private                                                                                                        // 1187\n     * @name value                                                                                                     // 1188\n     * @memberOf LazyWrapper                                                                                           // 1189\n     * @returns {*} Returns the unwrapped value.                                                                       // 1190\n     */                                                                                                                // 1191\n    function lazyValue() {                                                                                             // 1192\n      var array = this.__wrapped__.value(),                                                                            // 1193\n          dir = this.__dir__,                                                                                          // 1194\n          isArr = isArray(array),                                                                                      // 1195\n          isRight = dir < 0,                                                                                           // 1196\n          arrLength = isArr ? array.length : 0,                                                                        // 1197\n          view = getView(0, arrLength, this.__views__),                                                                // 1198\n          start = view.start,                                                                                          // 1199\n          end = view.end,                                                                                              // 1200\n          length = end - start,                                                                                        // 1201\n          index = isRight ? end : (start - 1),                                                                         // 1202\n          iteratees = this.__iteratees__,                                                                              // 1203\n          iterLength = iteratees.length,                                                                               // 1204\n          resIndex = 0,                                                                                                // 1205\n          takeCount = nativeMin(length, this.__takeCount__);                                                           // 1206\n                                                                                                                       // 1207\n      if (!isArr || arrLength < LARGE_ARRAY_SIZE || (arrLength == length && takeCount == length)) {                    // 1208\n        return baseWrapperValue(array, this.__actions__);                                                              // 1209\n      }                                                                                                                // 1210\n      var result = [];                                                                                                 // 1211\n                                                                                                                       // 1212\n      outer:                                                                                                           // 1213\n      while (length-- && resIndex < takeCount) {                                                                       // 1214\n        index += dir;                                                                                                  // 1215\n                                                                                                                       // 1216\n        var iterIndex = -1,                                                                                            // 1217\n            value = array[index];                                                                                      // 1218\n                                                                                                                       // 1219\n        while (++iterIndex < iterLength) {                                                                             // 1220\n          var data = iteratees[iterIndex],                                                                             // 1221\n              iteratee = data.iteratee,                                                                                // 1222\n              type = data.type,                                                                                        // 1223\n              computed = iteratee(value);                                                                              // 1224\n                                                                                                                       // 1225\n          if (type == LAZY_MAP_FLAG) {                                                                                 // 1226\n            value = computed;                                                                                          // 1227\n          } else if (!computed) {                                                                                      // 1228\n            if (type == LAZY_FILTER_FLAG) {                                                                            // 1229\n              continue outer;                                                                                          // 1230\n            } else {                                                                                                   // 1231\n              break outer;                                                                                             // 1232\n            }                                                                                                          // 1233\n          }                                                                                                            // 1234\n        }                                                                                                              // 1235\n        result[resIndex++] = value;                                                                                    // 1236\n      }                                                                                                                // 1237\n      return result;                                                                                                   // 1238\n    }                                                                                                                  // 1239\n                                                                                                                       // 1240\n    /*------------------------------------------------------------------------*/                                       // 1241\n                                                                                                                       // 1242\n    /**                                                                                                                // 1243\n     * Creates a cache object to store key/value pairs.                                                                // 1244\n     *                                                                                                                 // 1245\n     * @private                                                                                                        // 1246\n     * @static                                                                                                         // 1247\n     * @name Cache                                                                                                     // 1248\n     * @memberOf _.memoize                                                                                             // 1249\n     */                                                                                                                // 1250\n    function MapCache() {                                                                                              // 1251\n      this.__data__ = {};                                                                                              // 1252\n    }                                                                                                                  // 1253\n                                                                                                                       // 1254\n    /**                                                                                                                // 1255\n     * Removes `key` and its value from the cache.                                                                     // 1256\n     *                                                                                                                 // 1257\n     * @private                                                                                                        // 1258\n     * @name delete                                                                                                    // 1259\n     * @memberOf _.memoize.Cache                                                                                       // 1260\n     * @param {string} key The key of the value to remove.                                                             // 1261\n     * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.                          // 1262\n     */                                                                                                                // 1263\n    function mapDelete(key) {                                                                                          // 1264\n      return this.has(key) && delete this.__data__[key];                                                               // 1265\n    }                                                                                                                  // 1266\n                                                                                                                       // 1267\n    /**                                                                                                                // 1268\n     * Gets the cached value for `key`.                                                                                // 1269\n     *                                                                                                                 // 1270\n     * @private                                                                                                        // 1271\n     * @name get                                                                                                       // 1272\n     * @memberOf _.memoize.Cache                                                                                       // 1273\n     * @param {string} key The key of the value to get.                                                                // 1274\n     * @returns {*} Returns the cached value.                                                                          // 1275\n     */                                                                                                                // 1276\n    function mapGet(key) {                                                                                             // 1277\n      return key == '__proto__' ? undefined : this.__data__[key];                                                      // 1278\n    }                                                                                                                  // 1279\n                                                                                                                       // 1280\n    /**                                                                                                                // 1281\n     * Checks if a cached value for `key` exists.                                                                      // 1282\n     *                                                                                                                 // 1283\n     * @private                                                                                                        // 1284\n     * @name has                                                                                                       // 1285\n     * @memberOf _.memoize.Cache                                                                                       // 1286\n     * @param {string} key The key of the entry to check.                                                              // 1287\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                   // 1288\n     */                                                                                                                // 1289\n    function mapHas(key) {                                                                                             // 1290\n      return key != '__proto__' && hasOwnProperty.call(this.__data__, key);                                            // 1291\n    }                                                                                                                  // 1292\n                                                                                                                       // 1293\n    /**                                                                                                                // 1294\n     * Sets `value` to `key` of the cache.                                                                             // 1295\n     *                                                                                                                 // 1296\n     * @private                                                                                                        // 1297\n     * @name set                                                                                                       // 1298\n     * @memberOf _.memoize.Cache                                                                                       // 1299\n     * @param {string} key The key of the value to cache.                                                              // 1300\n     * @param {*} value The value to cache.                                                                            // 1301\n     * @returns {Object} Returns the cache object.                                                                     // 1302\n     */                                                                                                                // 1303\n    function mapSet(key, value) {                                                                                      // 1304\n      if (key != '__proto__') {                                                                                        // 1305\n        this.__data__[key] = value;                                                                                    // 1306\n      }                                                                                                                // 1307\n      return this;                                                                                                     // 1308\n    }                                                                                                                  // 1309\n                                                                                                                       // 1310\n    /*------------------------------------------------------------------------*/                                       // 1311\n                                                                                                                       // 1312\n    /**                                                                                                                // 1313\n     *                                                                                                                 // 1314\n     * Creates a cache object to store unique values.                                                                  // 1315\n     *                                                                                                                 // 1316\n     * @private                                                                                                        // 1317\n     * @param {Array} [values] The values to cache.                                                                    // 1318\n     */                                                                                                                // 1319\n    function SetCache(values) {                                                                                        // 1320\n      var length = values ? values.length : 0;                                                                         // 1321\n                                                                                                                       // 1322\n      this.data = { 'hash': nativeCreate(null), 'set': new Set };                                                      // 1323\n      while (length--) {                                                                                               // 1324\n        this.push(values[length]);                                                                                     // 1325\n      }                                                                                                                // 1326\n    }                                                                                                                  // 1327\n                                                                                                                       // 1328\n    /**                                                                                                                // 1329\n     * Checks if `value` is in `cache` mimicking the return signature of                                               // 1330\n     * `_.indexOf` by returning `0` if the value is found, else `-1`.                                                  // 1331\n     *                                                                                                                 // 1332\n     * @private                                                                                                        // 1333\n     * @param {Object} cache The cache to search.                                                                      // 1334\n     * @param {*} value The value to search for.                                                                       // 1335\n     * @returns {number} Returns `0` if `value` is found, else `-1`.                                                   // 1336\n     */                                                                                                                // 1337\n    function cacheIndexOf(cache, value) {                                                                              // 1338\n      var data = cache.data,                                                                                           // 1339\n          result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];             // 1340\n                                                                                                                       // 1341\n      return result ? 0 : -1;                                                                                          // 1342\n    }                                                                                                                  // 1343\n                                                                                                                       // 1344\n    /**                                                                                                                // 1345\n     * Adds `value` to the cache.                                                                                      // 1346\n     *                                                                                                                 // 1347\n     * @private                                                                                                        // 1348\n     * @name push                                                                                                      // 1349\n     * @memberOf SetCache                                                                                              // 1350\n     * @param {*} value The value to cache.                                                                            // 1351\n     */                                                                                                                // 1352\n    function cachePush(value) {                                                                                        // 1353\n      var data = this.data;                                                                                            // 1354\n      if (typeof value == 'string' || isObject(value)) {                                                               // 1355\n        data.set.add(value);                                                                                           // 1356\n      } else {                                                                                                         // 1357\n        data.hash[value] = true;                                                                                       // 1358\n      }                                                                                                                // 1359\n    }                                                                                                                  // 1360\n                                                                                                                       // 1361\n    /*------------------------------------------------------------------------*/                                       // 1362\n                                                                                                                       // 1363\n    /**                                                                                                                // 1364\n     * Creates a new array joining `array` with `other`.                                                               // 1365\n     *                                                                                                                 // 1366\n     * @private                                                                                                        // 1367\n     * @param {Array} array The array to join.                                                                         // 1368\n     * @param {Array} other The other array to join.                                                                   // 1369\n     * @returns {Array} Returns the new concatenated array.                                                            // 1370\n     */                                                                                                                // 1371\n    function arrayConcat(array, other) {                                                                               // 1372\n      var index = -1,                                                                                                  // 1373\n          length = array.length,                                                                                       // 1374\n          othIndex = -1,                                                                                               // 1375\n          othLength = other.length,                                                                                    // 1376\n          result = Array(length + othLength);                                                                          // 1377\n                                                                                                                       // 1378\n      while (++index < length) {                                                                                       // 1379\n        result[index] = array[index];                                                                                  // 1380\n      }                                                                                                                // 1381\n      while (++othIndex < othLength) {                                                                                 // 1382\n        result[index++] = other[othIndex];                                                                             // 1383\n      }                                                                                                                // 1384\n      return result;                                                                                                   // 1385\n    }                                                                                                                  // 1386\n                                                                                                                       // 1387\n    /**                                                                                                                // 1388\n     * Copies the values of `source` to `array`.                                                                       // 1389\n     *                                                                                                                 // 1390\n     * @private                                                                                                        // 1391\n     * @param {Array} source The array to copy values from.                                                            // 1392\n     * @param {Array} [array=[]] The array to copy values to.                                                          // 1393\n     * @returns {Array} Returns `array`.                                                                               // 1394\n     */                                                                                                                // 1395\n    function arrayCopy(source, array) {                                                                                // 1396\n      var index = -1,                                                                                                  // 1397\n          length = source.length;                                                                                      // 1398\n                                                                                                                       // 1399\n      array || (array = Array(length));                                                                                // 1400\n      while (++index < length) {                                                                                       // 1401\n        array[index] = source[index];                                                                                  // 1402\n      }                                                                                                                // 1403\n      return array;                                                                                                    // 1404\n    }                                                                                                                  // 1405\n                                                                                                                       // 1406\n    /**                                                                                                                // 1407\n     * A specialized version of `_.forEach` for arrays without support for callback                                    // 1408\n     * shorthands and `this` binding.                                                                                  // 1409\n     *                                                                                                                 // 1410\n     * @private                                                                                                        // 1411\n     * @param {Array} array The array to iterate over.                                                                 // 1412\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 1413\n     * @returns {Array} Returns `array`.                                                                               // 1414\n     */                                                                                                                // 1415\n    function arrayEach(array, iteratee) {                                                                              // 1416\n      var index = -1,                                                                                                  // 1417\n          length = array.length;                                                                                       // 1418\n                                                                                                                       // 1419\n      while (++index < length) {                                                                                       // 1420\n        if (iteratee(array[index], index, array) === false) {                                                          // 1421\n          break;                                                                                                       // 1422\n        }                                                                                                              // 1423\n      }                                                                                                                // 1424\n      return array;                                                                                                    // 1425\n    }                                                                                                                  // 1426\n                                                                                                                       // 1427\n    /**                                                                                                                // 1428\n     * A specialized version of `_.forEachRight` for arrays without support for                                        // 1429\n     * callback shorthands and `this` binding.                                                                         // 1430\n     *                                                                                                                 // 1431\n     * @private                                                                                                        // 1432\n     * @param {Array} array The array to iterate over.                                                                 // 1433\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 1434\n     * @returns {Array} Returns `array`.                                                                               // 1435\n     */                                                                                                                // 1436\n    function arrayEachRight(array, iteratee) {                                                                         // 1437\n      var length = array.length;                                                                                       // 1438\n                                                                                                                       // 1439\n      while (length--) {                                                                                               // 1440\n        if (iteratee(array[length], length, array) === false) {                                                        // 1441\n          break;                                                                                                       // 1442\n        }                                                                                                              // 1443\n      }                                                                                                                // 1444\n      return array;                                                                                                    // 1445\n    }                                                                                                                  // 1446\n                                                                                                                       // 1447\n    /**                                                                                                                // 1448\n     * A specialized version of `_.every` for arrays without support for callback                                      // 1449\n     * shorthands and `this` binding.                                                                                  // 1450\n     *                                                                                                                 // 1451\n     * @private                                                                                                        // 1452\n     * @param {Array} array The array to iterate over.                                                                 // 1453\n     * @param {Function} predicate The function invoked per iteration.                                                 // 1454\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,                                     // 1455\n     *  else `false`.                                                                                                  // 1456\n     */                                                                                                                // 1457\n    function arrayEvery(array, predicate) {                                                                            // 1458\n      var index = -1,                                                                                                  // 1459\n          length = array.length;                                                                                       // 1460\n                                                                                                                       // 1461\n      while (++index < length) {                                                                                       // 1462\n        if (!predicate(array[index], index, array)) {                                                                  // 1463\n          return false;                                                                                                // 1464\n        }                                                                                                              // 1465\n      }                                                                                                                // 1466\n      return true;                                                                                                     // 1467\n    }                                                                                                                  // 1468\n                                                                                                                       // 1469\n    /**                                                                                                                // 1470\n     * A specialized version of `baseExtremum` for arrays which invokes `iteratee`                                     // 1471\n     * with one argument: (value).                                                                                     // 1472\n     *                                                                                                                 // 1473\n     * @private                                                                                                        // 1474\n     * @param {Array} array The array to iterate over.                                                                 // 1475\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 1476\n     * @param {Function} comparator The function used to compare values.                                               // 1477\n     * @param {*} exValue The initial extremum value.                                                                  // 1478\n     * @returns {*} Returns the extremum value.                                                                        // 1479\n     */                                                                                                                // 1480\n    function arrayExtremum(array, iteratee, comparator, exValue) {                                                     // 1481\n      var index = -1,                                                                                                  // 1482\n          length = array.length,                                                                                       // 1483\n          computed = exValue,                                                                                          // 1484\n          result = computed;                                                                                           // 1485\n                                                                                                                       // 1486\n      while (++index < length) {                                                                                       // 1487\n        var value = array[index],                                                                                      // 1488\n            current = +iteratee(value);                                                                                // 1489\n                                                                                                                       // 1490\n        if (comparator(current, computed)) {                                                                           // 1491\n          computed = current;                                                                                          // 1492\n          result = value;                                                                                              // 1493\n        }                                                                                                              // 1494\n      }                                                                                                                // 1495\n      return result;                                                                                                   // 1496\n    }                                                                                                                  // 1497\n                                                                                                                       // 1498\n    /**                                                                                                                // 1499\n     * A specialized version of `_.filter` for arrays without support for callback                                     // 1500\n     * shorthands and `this` binding.                                                                                  // 1501\n     *                                                                                                                 // 1502\n     * @private                                                                                                        // 1503\n     * @param {Array} array The array to iterate over.                                                                 // 1504\n     * @param {Function} predicate The function invoked per iteration.                                                 // 1505\n     * @returns {Array} Returns the new filtered array.                                                                // 1506\n     */                                                                                                                // 1507\n    function arrayFilter(array, predicate) {                                                                           // 1508\n      var index = -1,                                                                                                  // 1509\n          length = array.length,                                                                                       // 1510\n          resIndex = -1,                                                                                               // 1511\n          result = [];                                                                                                 // 1512\n                                                                                                                       // 1513\n      while (++index < length) {                                                                                       // 1514\n        var value = array[index];                                                                                      // 1515\n        if (predicate(value, index, array)) {                                                                          // 1516\n          result[++resIndex] = value;                                                                                  // 1517\n        }                                                                                                              // 1518\n      }                                                                                                                // 1519\n      return result;                                                                                                   // 1520\n    }                                                                                                                  // 1521\n                                                                                                                       // 1522\n    /**                                                                                                                // 1523\n     * A specialized version of `_.map` for arrays without support for callback                                        // 1524\n     * shorthands and `this` binding.                                                                                  // 1525\n     *                                                                                                                 // 1526\n     * @private                                                                                                        // 1527\n     * @param {Array} array The array to iterate over.                                                                 // 1528\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 1529\n     * @returns {Array} Returns the new mapped array.                                                                  // 1530\n     */                                                                                                                // 1531\n    function arrayMap(array, iteratee) {                                                                               // 1532\n      var index = -1,                                                                                                  // 1533\n          length = array.length,                                                                                       // 1534\n          result = Array(length);                                                                                      // 1535\n                                                                                                                       // 1536\n      while (++index < length) {                                                                                       // 1537\n        result[index] = iteratee(array[index], index, array);                                                          // 1538\n      }                                                                                                                // 1539\n      return result;                                                                                                   // 1540\n    }                                                                                                                  // 1541\n                                                                                                                       // 1542\n    /**                                                                                                                // 1543\n     * Appends the elements of `values` to `array`.                                                                    // 1544\n     *                                                                                                                 // 1545\n     * @private                                                                                                        // 1546\n     * @param {Array} array The array to modify.                                                                       // 1547\n     * @param {Array} values The values to append.                                                                     // 1548\n     * @returns {Array} Returns `array`.                                                                               // 1549\n     */                                                                                                                // 1550\n    function arrayPush(array, values) {                                                                                // 1551\n      var index = -1,                                                                                                  // 1552\n          length = values.length,                                                                                      // 1553\n          offset = array.length;                                                                                       // 1554\n                                                                                                                       // 1555\n      while (++index < length) {                                                                                       // 1556\n        array[offset + index] = values[index];                                                                         // 1557\n      }                                                                                                                // 1558\n      return array;                                                                                                    // 1559\n    }                                                                                                                  // 1560\n                                                                                                                       // 1561\n    /**                                                                                                                // 1562\n     * A specialized version of `_.reduce` for arrays without support for callback                                     // 1563\n     * shorthands and `this` binding.                                                                                  // 1564\n     *                                                                                                                 // 1565\n     * @private                                                                                                        // 1566\n     * @param {Array} array The array to iterate over.                                                                 // 1567\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 1568\n     * @param {*} [accumulator] The initial value.                                                                     // 1569\n     * @param {boolean} [initFromArray] Specify using the first element of `array`                                     // 1570\n     *  as the initial value.                                                                                          // 1571\n     * @returns {*} Returns the accumulated value.                                                                     // 1572\n     */                                                                                                                // 1573\n    function arrayReduce(array, iteratee, accumulator, initFromArray) {                                                // 1574\n      var index = -1,                                                                                                  // 1575\n          length = array.length;                                                                                       // 1576\n                                                                                                                       // 1577\n      if (initFromArray && length) {                                                                                   // 1578\n        accumulator = array[++index];                                                                                  // 1579\n      }                                                                                                                // 1580\n      while (++index < length) {                                                                                       // 1581\n        accumulator = iteratee(accumulator, array[index], index, array);                                               // 1582\n      }                                                                                                                // 1583\n      return accumulator;                                                                                              // 1584\n    }                                                                                                                  // 1585\n                                                                                                                       // 1586\n    /**                                                                                                                // 1587\n     * A specialized version of `_.reduceRight` for arrays without support for                                         // 1588\n     * callback shorthands and `this` binding.                                                                         // 1589\n     *                                                                                                                 // 1590\n     * @private                                                                                                        // 1591\n     * @param {Array} array The array to iterate over.                                                                 // 1592\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 1593\n     * @param {*} [accumulator] The initial value.                                                                     // 1594\n     * @param {boolean} [initFromArray] Specify using the last element of `array`                                      // 1595\n     *  as the initial value.                                                                                          // 1596\n     * @returns {*} Returns the accumulated value.                                                                     // 1597\n     */                                                                                                                // 1598\n    function arrayReduceRight(array, iteratee, accumulator, initFromArray) {                                           // 1599\n      var length = array.length;                                                                                       // 1600\n      if (initFromArray && length) {                                                                                   // 1601\n        accumulator = array[--length];                                                                                 // 1602\n      }                                                                                                                // 1603\n      while (length--) {                                                                                               // 1604\n        accumulator = iteratee(accumulator, array[length], length, array);                                             // 1605\n      }                                                                                                                // 1606\n      return accumulator;                                                                                              // 1607\n    }                                                                                                                  // 1608\n                                                                                                                       // 1609\n    /**                                                                                                                // 1610\n     * A specialized version of `_.some` for arrays without support for callback                                       // 1611\n     * shorthands and `this` binding.                                                                                  // 1612\n     *                                                                                                                 // 1613\n     * @private                                                                                                        // 1614\n     * @param {Array} array The array to iterate over.                                                                 // 1615\n     * @param {Function} predicate The function invoked per iteration.                                                 // 1616\n     * @returns {boolean} Returns `true` if any element passes the predicate check,                                    // 1617\n     *  else `false`.                                                                                                  // 1618\n     */                                                                                                                // 1619\n    function arraySome(array, predicate) {                                                                             // 1620\n      var index = -1,                                                                                                  // 1621\n          length = array.length;                                                                                       // 1622\n                                                                                                                       // 1623\n      while (++index < length) {                                                                                       // 1624\n        if (predicate(array[index], index, array)) {                                                                   // 1625\n          return true;                                                                                                 // 1626\n        }                                                                                                              // 1627\n      }                                                                                                                // 1628\n      return false;                                                                                                    // 1629\n    }                                                                                                                  // 1630\n                                                                                                                       // 1631\n    /**                                                                                                                // 1632\n     * A specialized version of `_.sum` for arrays without support for callback                                        // 1633\n     * shorthands and `this` binding..                                                                                 // 1634\n     *                                                                                                                 // 1635\n     * @private                                                                                                        // 1636\n     * @param {Array} array The array to iterate over.                                                                 // 1637\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 1638\n     * @returns {number} Returns the sum.                                                                              // 1639\n     */                                                                                                                // 1640\n    function arraySum(array, iteratee) {                                                                               // 1641\n      var length = array.length,                                                                                       // 1642\n          result = 0;                                                                                                  // 1643\n                                                                                                                       // 1644\n      while (length--) {                                                                                               // 1645\n        result += +iteratee(array[length]) || 0;                                                                       // 1646\n      }                                                                                                                // 1647\n      return result;                                                                                                   // 1648\n    }                                                                                                                  // 1649\n                                                                                                                       // 1650\n    /**                                                                                                                // 1651\n     * Used by `_.defaults` to customize its `_.assign` use.                                                           // 1652\n     *                                                                                                                 // 1653\n     * @private                                                                                                        // 1654\n     * @param {*} objectValue The destination object property value.                                                   // 1655\n     * @param {*} sourceValue The source object property value.                                                        // 1656\n     * @returns {*} Returns the value to assign to the destination object.                                             // 1657\n     */                                                                                                                // 1658\n    function assignDefaults(objectValue, sourceValue) {                                                                // 1659\n      return objectValue === undefined ? sourceValue : objectValue;                                                    // 1660\n    }                                                                                                                  // 1661\n                                                                                                                       // 1662\n    /**                                                                                                                // 1663\n     * Used by `_.template` to customize its `_.assign` use.                                                           // 1664\n     *                                                                                                                 // 1665\n     * **Note:** This function is like `assignDefaults` except that it ignores                                         // 1666\n     * inherited property values when checking if a property is `undefined`.                                           // 1667\n     *                                                                                                                 // 1668\n     * @private                                                                                                        // 1669\n     * @param {*} objectValue The destination object property value.                                                   // 1670\n     * @param {*} sourceValue The source object property value.                                                        // 1671\n     * @param {string} key The key associated with the object and source values.                                       // 1672\n     * @param {Object} object The destination object.                                                                  // 1673\n     * @returns {*} Returns the value to assign to the destination object.                                             // 1674\n     */                                                                                                                // 1675\n    function assignOwnDefaults(objectValue, sourceValue, key, object) {                                                // 1676\n      return (objectValue === undefined || !hasOwnProperty.call(object, key))                                          // 1677\n        ? sourceValue                                                                                                  // 1678\n        : objectValue;                                                                                                 // 1679\n    }                                                                                                                  // 1680\n                                                                                                                       // 1681\n    /**                                                                                                                // 1682\n     * A specialized version of `_.assign` for customizing assigned values without                                     // 1683\n     * support for argument juggling, multiple sources, and `this` binding `customizer`                                // 1684\n     * functions.                                                                                                      // 1685\n     *                                                                                                                 // 1686\n     * @private                                                                                                        // 1687\n     * @param {Object} object The destination object.                                                                  // 1688\n     * @param {Object} source The source object.                                                                       // 1689\n     * @param {Function} customizer The function to customize assigned values.                                         // 1690\n     * @returns {Object} Returns `object`.                                                                             // 1691\n     */                                                                                                                // 1692\n    function assignWith(object, source, customizer) {                                                                  // 1693\n      var index = -1,                                                                                                  // 1694\n          props = keys(source),                                                                                        // 1695\n          length = props.length;                                                                                       // 1696\n                                                                                                                       // 1697\n      while (++index < length) {                                                                                       // 1698\n        var key = props[index],                                                                                        // 1699\n            value = object[key],                                                                                       // 1700\n            result = customizer(value, source[key], key, object, source);                                              // 1701\n                                                                                                                       // 1702\n        if ((result === result ? (result !== value) : (value === value)) ||                                            // 1703\n            (value === undefined && !(key in object))) {                                                               // 1704\n          object[key] = result;                                                                                        // 1705\n        }                                                                                                              // 1706\n      }                                                                                                                // 1707\n      return object;                                                                                                   // 1708\n    }                                                                                                                  // 1709\n                                                                                                                       // 1710\n    /**                                                                                                                // 1711\n     * The base implementation of `_.assign` without support for argument juggling,                                    // 1712\n     * multiple sources, and `customizer` functions.                                                                   // 1713\n     *                                                                                                                 // 1714\n     * @private                                                                                                        // 1715\n     * @param {Object} object The destination object.                                                                  // 1716\n     * @param {Object} source The source object.                                                                       // 1717\n     * @returns {Object} Returns `object`.                                                                             // 1718\n     */                                                                                                                // 1719\n    function baseAssign(object, source) {                                                                              // 1720\n      return source == null                                                                                            // 1721\n        ? object                                                                                                       // 1722\n        : baseCopy(source, keys(source), object);                                                                      // 1723\n    }                                                                                                                  // 1724\n                                                                                                                       // 1725\n    /**                                                                                                                // 1726\n     * The base implementation of `_.at` without support for string collections                                        // 1727\n     * and individual key arguments.                                                                                   // 1728\n     *                                                                                                                 // 1729\n     * @private                                                                                                        // 1730\n     * @param {Array|Object} collection The collection to iterate over.                                                // 1731\n     * @param {number[]|string[]} props The property names or indexes of elements to pick.                             // 1732\n     * @returns {Array} Returns the new array of picked elements.                                                      // 1733\n     */                                                                                                                // 1734\n    function baseAt(collection, props) {                                                                               // 1735\n      var index = -1,                                                                                                  // 1736\n          isNil = collection == null,                                                                                  // 1737\n          isArr = !isNil && isArrayLike(collection),                                                                   // 1738\n          length = isArr ? collection.length : 0,                                                                      // 1739\n          propsLength = props.length,                                                                                  // 1740\n          result = Array(propsLength);                                                                                 // 1741\n                                                                                                                       // 1742\n      while(++index < propsLength) {                                                                                   // 1743\n        var key = props[index];                                                                                        // 1744\n        if (isArr) {                                                                                                   // 1745\n          result[index] = isIndex(key, length) ? collection[key] : undefined;                                          // 1746\n        } else {                                                                                                       // 1747\n          result[index] = isNil ? undefined : collection[key];                                                         // 1748\n        }                                                                                                              // 1749\n      }                                                                                                                // 1750\n      return result;                                                                                                   // 1751\n    }                                                                                                                  // 1752\n                                                                                                                       // 1753\n    /**                                                                                                                // 1754\n     * Copies properties of `source` to `object`.                                                                      // 1755\n     *                                                                                                                 // 1756\n     * @private                                                                                                        // 1757\n     * @param {Object} source The object to copy properties from.                                                      // 1758\n     * @param {Array} props The property names to copy.                                                                // 1759\n     * @param {Object} [object={}] The object to copy properties to.                                                   // 1760\n     * @returns {Object} Returns `object`.                                                                             // 1761\n     */                                                                                                                // 1762\n    function baseCopy(source, props, object) {                                                                         // 1763\n      object || (object = {});                                                                                         // 1764\n                                                                                                                       // 1765\n      var index = -1,                                                                                                  // 1766\n          length = props.length;                                                                                       // 1767\n                                                                                                                       // 1768\n      while (++index < length) {                                                                                       // 1769\n        var key = props[index];                                                                                        // 1770\n        object[key] = source[key];                                                                                     // 1771\n      }                                                                                                                // 1772\n      return object;                                                                                                   // 1773\n    }                                                                                                                  // 1774\n                                                                                                                       // 1775\n    /**                                                                                                                // 1776\n     * The base implementation of `_.callback` which supports specifying the                                           // 1777\n     * number of arguments to provide to `func`.                                                                       // 1778\n     *                                                                                                                 // 1779\n     * @private                                                                                                        // 1780\n     * @param {*} [func=_.identity] The value to convert to a callback.                                                // 1781\n     * @param {*} [thisArg] The `this` binding of `func`.                                                              // 1782\n     * @param {number} [argCount] The number of arguments to provide to `func`.                                        // 1783\n     * @returns {Function} Returns the callback.                                                                       // 1784\n     */                                                                                                                // 1785\n    function baseCallback(func, thisArg, argCount) {                                                                   // 1786\n      var type = typeof func;                                                                                          // 1787\n      if (type == 'function') {                                                                                        // 1788\n        return thisArg === undefined                                                                                   // 1789\n          ? func                                                                                                       // 1790\n          : bindCallback(func, thisArg, argCount);                                                                     // 1791\n      }                                                                                                                // 1792\n      if (func == null) {                                                                                              // 1793\n        return identity;                                                                                               // 1794\n      }                                                                                                                // 1795\n      if (type == 'object') {                                                                                          // 1796\n        return baseMatches(func);                                                                                      // 1797\n      }                                                                                                                // 1798\n      return thisArg === undefined                                                                                     // 1799\n        ? property(func)                                                                                               // 1800\n        : baseMatchesProperty(func, thisArg);                                                                          // 1801\n    }                                                                                                                  // 1802\n                                                                                                                       // 1803\n    /**                                                                                                                // 1804\n     * The base implementation of `_.clone` without support for argument juggling                                      // 1805\n     * and `this` binding `customizer` functions.                                                                      // 1806\n     *                                                                                                                 // 1807\n     * @private                                                                                                        // 1808\n     * @param {*} value The value to clone.                                                                            // 1809\n     * @param {boolean} [isDeep] Specify a deep clone.                                                                 // 1810\n     * @param {Function} [customizer] The function to customize cloning values.                                        // 1811\n     * @param {string} [key] The key of `value`.                                                                       // 1812\n     * @param {Object} [object] The object `value` belongs to.                                                         // 1813\n     * @param {Array} [stackA=[]] Tracks traversed source objects.                                                     // 1814\n     * @param {Array} [stackB=[]] Associates clones with source counterparts.                                          // 1815\n     * @returns {*} Returns the cloned value.                                                                          // 1816\n     */                                                                                                                // 1817\n    function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {                                       // 1818\n      var result;                                                                                                      // 1819\n      if (customizer) {                                                                                                // 1820\n        result = object ? customizer(value, key, object) : customizer(value);                                          // 1821\n      }                                                                                                                // 1822\n      if (result !== undefined) {                                                                                      // 1823\n        return result;                                                                                                 // 1824\n      }                                                                                                                // 1825\n      if (!isObject(value)) {                                                                                          // 1826\n        return value;                                                                                                  // 1827\n      }                                                                                                                // 1828\n      var isArr = isArray(value);                                                                                      // 1829\n      if (isArr) {                                                                                                     // 1830\n        result = initCloneArray(value);                                                                                // 1831\n        if (!isDeep) {                                                                                                 // 1832\n          return arrayCopy(value, result);                                                                             // 1833\n        }                                                                                                              // 1834\n      } else {                                                                                                         // 1835\n        var tag = objToString.call(value),                                                                             // 1836\n            isFunc = tag == funcTag;                                                                                   // 1837\n                                                                                                                       // 1838\n        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {                                               // 1839\n          if (isHostObject(value)) {                                                                                   // 1840\n            return object ? value : {};                                                                                // 1841\n          }                                                                                                            // 1842\n          result = initCloneObject(isFunc ? {} : value);                                                               // 1843\n          if (!isDeep) {                                                                                               // 1844\n            return baseAssign(result, value);                                                                          // 1845\n          }                                                                                                            // 1846\n        } else {                                                                                                       // 1847\n          return cloneableTags[tag]                                                                                    // 1848\n            ? initCloneByTag(value, tag, isDeep)                                                                       // 1849\n            : (object ? value : {});                                                                                   // 1850\n        }                                                                                                              // 1851\n      }                                                                                                                // 1852\n      // Check for circular references and return its corresponding clone.                                             // 1853\n      stackA || (stackA = []);                                                                                         // 1854\n      stackB || (stackB = []);                                                                                         // 1855\n                                                                                                                       // 1856\n      var length = stackA.length;                                                                                      // 1857\n      while (length--) {                                                                                               // 1858\n        if (stackA[length] == value) {                                                                                 // 1859\n          return stackB[length];                                                                                       // 1860\n        }                                                                                                              // 1861\n      }                                                                                                                // 1862\n      // Add the source value to the stack of traversed objects and associate it with its clone.                       // 1863\n      stackA.push(value);                                                                                              // 1864\n      stackB.push(result);                                                                                             // 1865\n                                                                                                                       // 1866\n      // Recursively populate clone (susceptible to call stack limits).                                                // 1867\n      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {                                                // 1868\n        result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);                             // 1869\n      });                                                                                                              // 1870\n      return result;                                                                                                   // 1871\n    }                                                                                                                  // 1872\n                                                                                                                       // 1873\n    /**                                                                                                                // 1874\n     * The base implementation of `_.create` without support for assigning                                             // 1875\n     * properties to the created object.                                                                               // 1876\n     *                                                                                                                 // 1877\n     * @private                                                                                                        // 1878\n     * @param {Object} prototype The object to inherit from.                                                           // 1879\n     * @returns {Object} Returns the new object.                                                                       // 1880\n     */                                                                                                                // 1881\n    var baseCreate = (function() {                                                                                     // 1882\n      function object() {}                                                                                             // 1883\n      return function(prototype) {                                                                                     // 1884\n        if (isObject(prototype)) {                                                                                     // 1885\n          object.prototype = prototype;                                                                                // 1886\n          var result = new object;                                                                                     // 1887\n          object.prototype = undefined;                                                                                // 1888\n        }                                                                                                              // 1889\n        return result || {};                                                                                           // 1890\n      };                                                                                                               // 1891\n    }());                                                                                                              // 1892\n                                                                                                                       // 1893\n    /**                                                                                                                // 1894\n     * The base implementation of `_.delay` and `_.defer` which accepts an index                                       // 1895\n     * of where to slice the arguments to provide to `func`.                                                           // 1896\n     *                                                                                                                 // 1897\n     * @private                                                                                                        // 1898\n     * @param {Function} func The function to delay.                                                                   // 1899\n     * @param {number} wait The number of milliseconds to delay invocation.                                            // 1900\n     * @param {Object} args The arguments provide to `func`.                                                           // 1901\n     * @returns {number} Returns the timer id.                                                                         // 1902\n     */                                                                                                                // 1903\n    function baseDelay(func, wait, args) {                                                                             // 1904\n      if (typeof func != 'function') {                                                                                 // 1905\n        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 1906\n      }                                                                                                                // 1907\n      return setTimeout(function() { func.apply(undefined, args); }, wait);                                            // 1908\n    }                                                                                                                  // 1909\n                                                                                                                       // 1910\n    /**                                                                                                                // 1911\n     * The base implementation of `_.difference` which accepts a single array                                          // 1912\n     * of values to exclude.                                                                                           // 1913\n     *                                                                                                                 // 1914\n     * @private                                                                                                        // 1915\n     * @param {Array} array The array to inspect.                                                                      // 1916\n     * @param {Array} values The values to exclude.                                                                    // 1917\n     * @returns {Array} Returns the new array of filtered values.                                                      // 1918\n     */                                                                                                                // 1919\n    function baseDifference(array, values) {                                                                           // 1920\n      var length = array ? array.length : 0,                                                                           // 1921\n          result = [];                                                                                                 // 1922\n                                                                                                                       // 1923\n      if (!length) {                                                                                                   // 1924\n        return result;                                                                                                 // 1925\n      }                                                                                                                // 1926\n      var index = -1,                                                                                                  // 1927\n          indexOf = getIndexOf(),                                                                                      // 1928\n          isCommon = indexOf === baseIndexOf,                                                                          // 1929\n          cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,                        // 1930\n          valuesLength = values.length;                                                                                // 1931\n                                                                                                                       // 1932\n      if (cache) {                                                                                                     // 1933\n        indexOf = cacheIndexOf;                                                                                        // 1934\n        isCommon = false;                                                                                              // 1935\n        values = cache;                                                                                                // 1936\n      }                                                                                                                // 1937\n      outer:                                                                                                           // 1938\n      while (++index < length) {                                                                                       // 1939\n        var value = array[index];                                                                                      // 1940\n                                                                                                                       // 1941\n        if (isCommon && value === value) {                                                                             // 1942\n          var valuesIndex = valuesLength;                                                                              // 1943\n          while (valuesIndex--) {                                                                                      // 1944\n            if (values[valuesIndex] === value) {                                                                       // 1945\n              continue outer;                                                                                          // 1946\n            }                                                                                                          // 1947\n          }                                                                                                            // 1948\n          result.push(value);                                                                                          // 1949\n        }                                                                                                              // 1950\n        else if (indexOf(values, value, 0) < 0) {                                                                      // 1951\n          result.push(value);                                                                                          // 1952\n        }                                                                                                              // 1953\n      }                                                                                                                // 1954\n      return result;                                                                                                   // 1955\n    }                                                                                                                  // 1956\n                                                                                                                       // 1957\n    /**                                                                                                                // 1958\n     * The base implementation of `_.forEach` without support for callback                                             // 1959\n     * shorthands and `this` binding.                                                                                  // 1960\n     *                                                                                                                 // 1961\n     * @private                                                                                                        // 1962\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 1963\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 1964\n     * @returns {Array|Object|string} Returns `collection`.                                                            // 1965\n     */                                                                                                                // 1966\n    var baseEach = createBaseEach(baseForOwn);                                                                         // 1967\n                                                                                                                       // 1968\n    /**                                                                                                                // 1969\n     * The base implementation of `_.forEachRight` without support for callback                                        // 1970\n     * shorthands and `this` binding.                                                                                  // 1971\n     *                                                                                                                 // 1972\n     * @private                                                                                                        // 1973\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 1974\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 1975\n     * @returns {Array|Object|string} Returns `collection`.                                                            // 1976\n     */                                                                                                                // 1977\n    var baseEachRight = createBaseEach(baseForOwnRight, true);                                                         // 1978\n                                                                                                                       // 1979\n    /**                                                                                                                // 1980\n     * The base implementation of `_.every` without support for callback                                               // 1981\n     * shorthands and `this` binding.                                                                                  // 1982\n     *                                                                                                                 // 1983\n     * @private                                                                                                        // 1984\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 1985\n     * @param {Function} predicate The function invoked per iteration.                                                 // 1986\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,                                     // 1987\n     *  else `false`                                                                                                   // 1988\n     */                                                                                                                // 1989\n    function baseEvery(collection, predicate) {                                                                        // 1990\n      var result = true;                                                                                               // 1991\n      baseEach(collection, function(value, index, collection) {                                                        // 1992\n        result = !!predicate(value, index, collection);                                                                // 1993\n        return result;                                                                                                 // 1994\n      });                                                                                                              // 1995\n      return result;                                                                                                   // 1996\n    }                                                                                                                  // 1997\n                                                                                                                       // 1998\n    /**                                                                                                                // 1999\n     * Gets the extremum value of `collection` invoking `iteratee` for each value                                      // 2000\n     * in `collection` to generate the criterion by which the value is ranked.                                         // 2001\n     * The `iteratee` is invoked with three arguments: (value, index|key, collection).                                 // 2002\n     *                                                                                                                 // 2003\n     * @private                                                                                                        // 2004\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 2005\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 2006\n     * @param {Function} comparator The function used to compare values.                                               // 2007\n     * @param {*} exValue The initial extremum value.                                                                  // 2008\n     * @returns {*} Returns the extremum value.                                                                        // 2009\n     */                                                                                                                // 2010\n    function baseExtremum(collection, iteratee, comparator, exValue) {                                                 // 2011\n      var computed = exValue,                                                                                          // 2012\n          result = computed;                                                                                           // 2013\n                                                                                                                       // 2014\n      baseEach(collection, function(value, index, collection) {                                                        // 2015\n        var current = +iteratee(value, index, collection);                                                             // 2016\n        if (comparator(current, computed) || (current === exValue && current === result)) {                            // 2017\n          computed = current;                                                                                          // 2018\n          result = value;                                                                                              // 2019\n        }                                                                                                              // 2020\n      });                                                                                                              // 2021\n      return result;                                                                                                   // 2022\n    }                                                                                                                  // 2023\n                                                                                                                       // 2024\n    /**                                                                                                                // 2025\n     * The base implementation of `_.fill` without an iteratee call guard.                                             // 2026\n     *                                                                                                                 // 2027\n     * @private                                                                                                        // 2028\n     * @param {Array} array The array to fill.                                                                         // 2029\n     * @param {*} value The value to fill `array` with.                                                                // 2030\n     * @param {number} [start=0] The start position.                                                                   // 2031\n     * @param {number} [end=array.length] The end position.                                                            // 2032\n     * @returns {Array} Returns `array`.                                                                               // 2033\n     */                                                                                                                // 2034\n    function baseFill(array, value, start, end) {                                                                      // 2035\n      var length = array.length;                                                                                       // 2036\n                                                                                                                       // 2037\n      start = start == null ? 0 : (+start || 0);                                                                       // 2038\n      if (start < 0) {                                                                                                 // 2039\n        start = -start > length ? 0 : (length + start);                                                                // 2040\n      }                                                                                                                // 2041\n      end = (end === undefined || end > length) ? length : (+end || 0);                                                // 2042\n      if (end < 0) {                                                                                                   // 2043\n        end += length;                                                                                                 // 2044\n      }                                                                                                                // 2045\n      length = start > end ? 0 : (end >>> 0);                                                                          // 2046\n      start >>>= 0;                                                                                                    // 2047\n                                                                                                                       // 2048\n      while (start < length) {                                                                                         // 2049\n        array[start++] = value;                                                                                        // 2050\n      }                                                                                                                // 2051\n      return array;                                                                                                    // 2052\n    }                                                                                                                  // 2053\n                                                                                                                       // 2054\n    /**                                                                                                                // 2055\n     * The base implementation of `_.filter` without support for callback                                              // 2056\n     * shorthands and `this` binding.                                                                                  // 2057\n     *                                                                                                                 // 2058\n     * @private                                                                                                        // 2059\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 2060\n     * @param {Function} predicate The function invoked per iteration.                                                 // 2061\n     * @returns {Array} Returns the new filtered array.                                                                // 2062\n     */                                                                                                                // 2063\n    function baseFilter(collection, predicate) {                                                                       // 2064\n      var result = [];                                                                                                 // 2065\n      baseEach(collection, function(value, index, collection) {                                                        // 2066\n        if (predicate(value, index, collection)) {                                                                     // 2067\n          result.push(value);                                                                                          // 2068\n        }                                                                                                              // 2069\n      });                                                                                                              // 2070\n      return result;                                                                                                   // 2071\n    }                                                                                                                  // 2072\n                                                                                                                       // 2073\n    /**                                                                                                                // 2074\n     * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,                            // 2075\n     * without support for callback shorthands and `this` binding, which iterates                                      // 2076\n     * over `collection` using the provided `eachFunc`.                                                                // 2077\n     *                                                                                                                 // 2078\n     * @private                                                                                                        // 2079\n     * @param {Array|Object|string} collection The collection to search.                                               // 2080\n     * @param {Function} predicate The function invoked per iteration.                                                 // 2081\n     * @param {Function} eachFunc The function to iterate over `collection`.                                           // 2082\n     * @param {boolean} [retKey] Specify returning the key of the found element                                        // 2083\n     *  instead of the element itself.                                                                                 // 2084\n     * @returns {*} Returns the found element or its key, else `undefined`.                                            // 2085\n     */                                                                                                                // 2086\n    function baseFind(collection, predicate, eachFunc, retKey) {                                                       // 2087\n      var result;                                                                                                      // 2088\n      eachFunc(collection, function(value, key, collection) {                                                          // 2089\n        if (predicate(value, key, collection)) {                                                                       // 2090\n          result = retKey ? key : value;                                                                               // 2091\n          return false;                                                                                                // 2092\n        }                                                                                                              // 2093\n      });                                                                                                              // 2094\n      return result;                                                                                                   // 2095\n    }                                                                                                                  // 2096\n                                                                                                                       // 2097\n    /**                                                                                                                // 2098\n     * The base implementation of `_.flatten` with added support for restricting                                       // 2099\n     * flattening and specifying the start index.                                                                      // 2100\n     *                                                                                                                 // 2101\n     * @private                                                                                                        // 2102\n     * @param {Array} array The array to flatten.                                                                      // 2103\n     * @param {boolean} [isDeep] Specify a deep flatten.                                                               // 2104\n     * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.                                         // 2105\n     * @param {Array} [result=[]] The initial result value.                                                            // 2106\n     * @returns {Array} Returns the new flattened array.                                                               // 2107\n     */                                                                                                                // 2108\n    function baseFlatten(array, isDeep, isStrict, result) {                                                            // 2109\n      result || (result = []);                                                                                         // 2110\n                                                                                                                       // 2111\n      var index = -1,                                                                                                  // 2112\n          length = array.length;                                                                                       // 2113\n                                                                                                                       // 2114\n      while (++index < length) {                                                                                       // 2115\n        var value = array[index];                                                                                      // 2116\n        if (isObjectLike(value) && isArrayLike(value) &&                                                               // 2117\n            (isStrict || isArray(value) || isArguments(value))) {                                                      // 2118\n          if (isDeep) {                                                                                                // 2119\n            // Recursively flatten arrays (susceptible to call stack limits).                                          // 2120\n            baseFlatten(value, isDeep, isStrict, result);                                                              // 2121\n          } else {                                                                                                     // 2122\n            arrayPush(result, value);                                                                                  // 2123\n          }                                                                                                            // 2124\n        } else if (!isStrict) {                                                                                        // 2125\n          result[result.length] = value;                                                                               // 2126\n        }                                                                                                              // 2127\n      }                                                                                                                // 2128\n      return result;                                                                                                   // 2129\n    }                                                                                                                  // 2130\n                                                                                                                       // 2131\n    /**                                                                                                                // 2132\n     * The base implementation of `baseForIn` and `baseForOwn` which iterates                                          // 2133\n     * over `object` properties returned by `keysFunc` invoking `iteratee` for                                         // 2134\n     * each property. Iteratee functions may exit iteration early by explicitly                                        // 2135\n     * returning `false`.                                                                                              // 2136\n     *                                                                                                                 // 2137\n     * @private                                                                                                        // 2138\n     * @param {Object} object The object to iterate over.                                                              // 2139\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 2140\n     * @param {Function} keysFunc The function to get the keys of `object`.                                            // 2141\n     * @returns {Object} Returns `object`.                                                                             // 2142\n     */                                                                                                                // 2143\n    var baseFor = createBaseFor();                                                                                     // 2144\n                                                                                                                       // 2145\n    /**                                                                                                                // 2146\n     * This function is like `baseFor` except that it iterates over properties                                         // 2147\n     * in the opposite order.                                                                                          // 2148\n     *                                                                                                                 // 2149\n     * @private                                                                                                        // 2150\n     * @param {Object} object The object to iterate over.                                                              // 2151\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 2152\n     * @param {Function} keysFunc The function to get the keys of `object`.                                            // 2153\n     * @returns {Object} Returns `object`.                                                                             // 2154\n     */                                                                                                                // 2155\n    var baseForRight = createBaseFor(true);                                                                            // 2156\n                                                                                                                       // 2157\n    /**                                                                                                                // 2158\n     * The base implementation of `_.forIn` without support for callback                                               // 2159\n     * shorthands and `this` binding.                                                                                  // 2160\n     *                                                                                                                 // 2161\n     * @private                                                                                                        // 2162\n     * @param {Object} object The object to iterate over.                                                              // 2163\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 2164\n     * @returns {Object} Returns `object`.                                                                             // 2165\n     */                                                                                                                // 2166\n    function baseForIn(object, iteratee) {                                                                             // 2167\n      return baseFor(object, iteratee, keysIn);                                                                        // 2168\n    }                                                                                                                  // 2169\n                                                                                                                       // 2170\n    /**                                                                                                                // 2171\n     * The base implementation of `_.forOwn` without support for callback                                              // 2172\n     * shorthands and `this` binding.                                                                                  // 2173\n     *                                                                                                                 // 2174\n     * @private                                                                                                        // 2175\n     * @param {Object} object The object to iterate over.                                                              // 2176\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 2177\n     * @returns {Object} Returns `object`.                                                                             // 2178\n     */                                                                                                                // 2179\n    function baseForOwn(object, iteratee) {                                                                            // 2180\n      return baseFor(object, iteratee, keys);                                                                          // 2181\n    }                                                                                                                  // 2182\n                                                                                                                       // 2183\n    /**                                                                                                                // 2184\n     * The base implementation of `_.forOwnRight` without support for callback                                         // 2185\n     * shorthands and `this` binding.                                                                                  // 2186\n     *                                                                                                                 // 2187\n     * @private                                                                                                        // 2188\n     * @param {Object} object The object to iterate over.                                                              // 2189\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 2190\n     * @returns {Object} Returns `object`.                                                                             // 2191\n     */                                                                                                                // 2192\n    function baseForOwnRight(object, iteratee) {                                                                       // 2193\n      return baseForRight(object, iteratee, keys);                                                                     // 2194\n    }                                                                                                                  // 2195\n                                                                                                                       // 2196\n    /**                                                                                                                // 2197\n     * The base implementation of `_.functions` which creates an array of                                              // 2198\n     * `object` function property names filtered from those provided.                                                  // 2199\n     *                                                                                                                 // 2200\n     * @private                                                                                                        // 2201\n     * @param {Object} object The object to inspect.                                                                   // 2202\n     * @param {Array} props The property names to filter.                                                              // 2203\n     * @returns {Array} Returns the new array of filtered property names.                                              // 2204\n     */                                                                                                                // 2205\n    function baseFunctions(object, props) {                                                                            // 2206\n      var index = -1,                                                                                                  // 2207\n          length = props.length,                                                                                       // 2208\n          resIndex = -1,                                                                                               // 2209\n          result = [];                                                                                                 // 2210\n                                                                                                                       // 2211\n      while (++index < length) {                                                                                       // 2212\n        var key = props[index];                                                                                        // 2213\n        if (isFunction(object[key])) {                                                                                 // 2214\n          result[++resIndex] = key;                                                                                    // 2215\n        }                                                                                                              // 2216\n      }                                                                                                                // 2217\n      return result;                                                                                                   // 2218\n    }                                                                                                                  // 2219\n                                                                                                                       // 2220\n    /**                                                                                                                // 2221\n     * The base implementation of `get` without support for string paths                                               // 2222\n     * and default values.                                                                                             // 2223\n     *                                                                                                                 // 2224\n     * @private                                                                                                        // 2225\n     * @param {Object} object The object to query.                                                                     // 2226\n     * @param {Array} path The path of the property to get.                                                            // 2227\n     * @param {string} [pathKey] The key representation of path.                                                       // 2228\n     * @returns {*} Returns the resolved value.                                                                        // 2229\n     */                                                                                                                // 2230\n    function baseGet(object, path, pathKey) {                                                                          // 2231\n      if (object == null) {                                                                                            // 2232\n        return;                                                                                                        // 2233\n      }                                                                                                                // 2234\n      object = toObject(object);                                                                                       // 2235\n      if (pathKey !== undefined && pathKey in object) {                                                                // 2236\n        path = [pathKey];                                                                                              // 2237\n      }                                                                                                                // 2238\n      var index = 0,                                                                                                   // 2239\n          length = path.length;                                                                                        // 2240\n                                                                                                                       // 2241\n      while (object != null && index < length) {                                                                       // 2242\n        object = toObject(object)[path[index++]];                                                                      // 2243\n      }                                                                                                                // 2244\n      return (index && index == length) ? object : undefined;                                                          // 2245\n    }                                                                                                                  // 2246\n                                                                                                                       // 2247\n    /**                                                                                                                // 2248\n     * The base implementation of `_.isEqual` without support for `this` binding                                       // 2249\n     * `customizer` functions.                                                                                         // 2250\n     *                                                                                                                 // 2251\n     * @private                                                                                                        // 2252\n     * @param {*} value The value to compare.                                                                          // 2253\n     * @param {*} other The other value to compare.                                                                    // 2254\n     * @param {Function} [customizer] The function to customize comparing values.                                      // 2255\n     * @param {boolean} [isLoose] Specify performing partial comparisons.                                              // 2256\n     * @param {Array} [stackA] Tracks traversed `value` objects.                                                       // 2257\n     * @param {Array} [stackB] Tracks traversed `other` objects.                                                       // 2258\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.                                   // 2259\n     */                                                                                                                // 2260\n    function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {                                          // 2261\n      if (value === other) {                                                                                           // 2262\n        return true;                                                                                                   // 2263\n      }                                                                                                                // 2264\n      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {                              // 2265\n        return value !== value && other !== other;                                                                     // 2266\n      }                                                                                                                // 2267\n      return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);                          // 2268\n    }                                                                                                                  // 2269\n                                                                                                                       // 2270\n    /**                                                                                                                // 2271\n     * A specialized version of `baseIsEqual` for arrays and objects which performs                                    // 2272\n     * deep comparisons and tracks traversed objects enabling objects with circular                                    // 2273\n     * references to be compared.                                                                                      // 2274\n     *                                                                                                                 // 2275\n     * @private                                                                                                        // 2276\n     * @param {Object} object The object to compare.                                                                   // 2277\n     * @param {Object} other The other object to compare.                                                              // 2278\n     * @param {Function} equalFunc The function to determine equivalents of values.                                    // 2279\n     * @param {Function} [customizer] The function to customize comparing objects.                                     // 2280\n     * @param {boolean} [isLoose] Specify performing partial comparisons.                                              // 2281\n     * @param {Array} [stackA=[]] Tracks traversed `value` objects.                                                    // 2282\n     * @param {Array} [stackB=[]] Tracks traversed `other` objects.                                                    // 2283\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.                                  // 2284\n     */                                                                                                                // 2285\n    function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {                          // 2286\n      var objIsArr = isArray(object),                                                                                  // 2287\n          othIsArr = isArray(other),                                                                                   // 2288\n          objTag = arrayTag,                                                                                           // 2289\n          othTag = arrayTag;                                                                                           // 2290\n                                                                                                                       // 2291\n      if (!objIsArr) {                                                                                                 // 2292\n        objTag = objToString.call(object);                                                                             // 2293\n        if (objTag == argsTag) {                                                                                       // 2294\n          objTag = objectTag;                                                                                          // 2295\n        } else if (objTag != objectTag) {                                                                              // 2296\n          objIsArr = isTypedArray(object);                                                                             // 2297\n        }                                                                                                              // 2298\n      }                                                                                                                // 2299\n      if (!othIsArr) {                                                                                                 // 2300\n        othTag = objToString.call(other);                                                                              // 2301\n        if (othTag == argsTag) {                                                                                       // 2302\n          othTag = objectTag;                                                                                          // 2303\n        } else if (othTag != objectTag) {                                                                              // 2304\n          othIsArr = isTypedArray(other);                                                                              // 2305\n        }                                                                                                              // 2306\n      }                                                                                                                // 2307\n      var objIsObj = objTag == objectTag && !isHostObject(object),                                                     // 2308\n          othIsObj = othTag == objectTag && !isHostObject(other),                                                      // 2309\n          isSameTag = objTag == othTag;                                                                                // 2310\n                                                                                                                       // 2311\n      if (isSameTag && !(objIsArr || objIsObj)) {                                                                      // 2312\n        return equalByTag(object, other, objTag);                                                                      // 2313\n      }                                                                                                                // 2314\n      if (!isLoose) {                                                                                                  // 2315\n        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),                                     // 2316\n            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');                                      // 2317\n                                                                                                                       // 2318\n        if (objIsWrapped || othIsWrapped) {                                                                            // 2319\n          return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);\n        }                                                                                                              // 2321\n      }                                                                                                                // 2322\n      if (!isSameTag) {                                                                                                // 2323\n        return false;                                                                                                  // 2324\n      }                                                                                                                // 2325\n      // Assume cyclic values are equal.                                                                               // 2326\n      // For more information on detecting circular references see https://es5.github.io/#JO.                          // 2327\n      stackA || (stackA = []);                                                                                         // 2328\n      stackB || (stackB = []);                                                                                         // 2329\n                                                                                                                       // 2330\n      var length = stackA.length;                                                                                      // 2331\n      while (length--) {                                                                                               // 2332\n        if (stackA[length] == object) {                                                                                // 2333\n          return stackB[length] == other;                                                                              // 2334\n        }                                                                                                              // 2335\n      }                                                                                                                // 2336\n      // Add `object` and `other` to the stack of traversed objects.                                                   // 2337\n      stackA.push(object);                                                                                             // 2338\n      stackB.push(other);                                                                                              // 2339\n                                                                                                                       // 2340\n      var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);\n                                                                                                                       // 2342\n      stackA.pop();                                                                                                    // 2343\n      stackB.pop();                                                                                                    // 2344\n                                                                                                                       // 2345\n      return result;                                                                                                   // 2346\n    }                                                                                                                  // 2347\n                                                                                                                       // 2348\n    /**                                                                                                                // 2349\n     * The base implementation of `_.isMatch` without support for callback                                             // 2350\n     * shorthands and `this` binding.                                                                                  // 2351\n     *                                                                                                                 // 2352\n     * @private                                                                                                        // 2353\n     * @param {Object} object The object to inspect.                                                                   // 2354\n     * @param {Array} matchData The propery names, values, and compare flags to match.                                 // 2355\n     * @param {Function} [customizer] The function to customize comparing objects.                                     // 2356\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.                                         // 2357\n     */                                                                                                                // 2358\n    function baseIsMatch(object, matchData, customizer) {                                                              // 2359\n      var index = matchData.length,                                                                                    // 2360\n          length = index,                                                                                              // 2361\n          noCustomizer = !customizer;                                                                                  // 2362\n                                                                                                                       // 2363\n      if (object == null) {                                                                                            // 2364\n        return !length;                                                                                                // 2365\n      }                                                                                                                // 2366\n      object = toObject(object);                                                                                       // 2367\n      while (index--) {                                                                                                // 2368\n        var data = matchData[index];                                                                                   // 2369\n        if ((noCustomizer && data[2])                                                                                  // 2370\n              ? data[1] !== object[data[0]]                                                                            // 2371\n              : !(data[0] in object)                                                                                   // 2372\n            ) {                                                                                                        // 2373\n          return false;                                                                                                // 2374\n        }                                                                                                              // 2375\n      }                                                                                                                // 2376\n      while (++index < length) {                                                                                       // 2377\n        data = matchData[index];                                                                                       // 2378\n        var key = data[0],                                                                                             // 2379\n            objValue = object[key],                                                                                    // 2380\n            srcValue = data[1];                                                                                        // 2381\n                                                                                                                       // 2382\n        if (noCustomizer && data[2]) {                                                                                 // 2383\n          if (objValue === undefined && !(key in object)) {                                                            // 2384\n            return false;                                                                                              // 2385\n          }                                                                                                            // 2386\n        } else {                                                                                                       // 2387\n          var result = customizer ? customizer(objValue, srcValue, key) : undefined;                                   // 2388\n          if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {                  // 2389\n            return false;                                                                                              // 2390\n          }                                                                                                            // 2391\n        }                                                                                                              // 2392\n      }                                                                                                                // 2393\n      return true;                                                                                                     // 2394\n    }                                                                                                                  // 2395\n                                                                                                                       // 2396\n    /**                                                                                                                // 2397\n     * The base implementation of `_.map` without support for callback shorthands                                      // 2398\n     * and `this` binding.                                                                                             // 2399\n     *                                                                                                                 // 2400\n     * @private                                                                                                        // 2401\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 2402\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 2403\n     * @returns {Array} Returns the new mapped array.                                                                  // 2404\n     */                                                                                                                // 2405\n    function baseMap(collection, iteratee) {                                                                           // 2406\n      var index = -1,                                                                                                  // 2407\n          result = isArrayLike(collection) ? Array(collection.length) : [];                                            // 2408\n                                                                                                                       // 2409\n      baseEach(collection, function(value, key, collection) {                                                          // 2410\n        result[++index] = iteratee(value, key, collection);                                                            // 2411\n      });                                                                                                              // 2412\n      return result;                                                                                                   // 2413\n    }                                                                                                                  // 2414\n                                                                                                                       // 2415\n    /**                                                                                                                // 2416\n     * The base implementation of `_.matches` which does not clone `source`.                                           // 2417\n     *                                                                                                                 // 2418\n     * @private                                                                                                        // 2419\n     * @param {Object} source The object of property values to match.                                                  // 2420\n     * @returns {Function} Returns the new function.                                                                   // 2421\n     */                                                                                                                // 2422\n    function baseMatches(source) {                                                                                     // 2423\n      var matchData = getMatchData(source);                                                                            // 2424\n      if (matchData.length == 1 && matchData[0][2]) {                                                                  // 2425\n        var key = matchData[0][0],                                                                                     // 2426\n            value = matchData[0][1];                                                                                   // 2427\n                                                                                                                       // 2428\n        return function(object) {                                                                                      // 2429\n          if (object == null) {                                                                                        // 2430\n            return false;                                                                                              // 2431\n          }                                                                                                            // 2432\n          object = toObject(object);                                                                                   // 2433\n          return object[key] === value && (value !== undefined || (key in object));                                    // 2434\n        };                                                                                                             // 2435\n      }                                                                                                                // 2436\n      return function(object) {                                                                                        // 2437\n        return baseIsMatch(object, matchData);                                                                         // 2438\n      };                                                                                                               // 2439\n    }                                                                                                                  // 2440\n                                                                                                                       // 2441\n    /**                                                                                                                // 2442\n     * The base implementation of `_.matchesProperty` which does not clone `srcValue`.                                 // 2443\n     *                                                                                                                 // 2444\n     * @private                                                                                                        // 2445\n     * @param {string} path The path of the property to get.                                                           // 2446\n     * @param {*} srcValue The value to compare.                                                                       // 2447\n     * @returns {Function} Returns the new function.                                                                   // 2448\n     */                                                                                                                // 2449\n    function baseMatchesProperty(path, srcValue) {                                                                     // 2450\n      var isArr = isArray(path),                                                                                       // 2451\n          isCommon = isKey(path) && isStrictComparable(srcValue),                                                      // 2452\n          pathKey = (path + '');                                                                                       // 2453\n                                                                                                                       // 2454\n      path = toPath(path);                                                                                             // 2455\n      return function(object) {                                                                                        // 2456\n        if (object == null) {                                                                                          // 2457\n          return false;                                                                                                // 2458\n        }                                                                                                              // 2459\n        var key = pathKey;                                                                                             // 2460\n        object = toObject(object);                                                                                     // 2461\n        if ((isArr || !isCommon) && !(key in object)) {                                                                // 2462\n          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));                                // 2463\n          if (object == null) {                                                                                        // 2464\n            return false;                                                                                              // 2465\n          }                                                                                                            // 2466\n          key = last(path);                                                                                            // 2467\n          object = toObject(object);                                                                                   // 2468\n        }                                                                                                              // 2469\n        return object[key] === srcValue                                                                                // 2470\n          ? (srcValue !== undefined || (key in object))                                                                // 2471\n          : baseIsEqual(srcValue, object[key], undefined, true);                                                       // 2472\n      };                                                                                                               // 2473\n    }                                                                                                                  // 2474\n                                                                                                                       // 2475\n    /**                                                                                                                // 2476\n     * The base implementation of `_.merge` without support for argument juggling,                                     // 2477\n     * multiple sources, and `this` binding `customizer` functions.                                                    // 2478\n     *                                                                                                                 // 2479\n     * @private                                                                                                        // 2480\n     * @param {Object} object The destination object.                                                                  // 2481\n     * @param {Object} source The source object.                                                                       // 2482\n     * @param {Function} [customizer] The function to customize merged values.                                         // 2483\n     * @param {Array} [stackA=[]] Tracks traversed source objects.                                                     // 2484\n     * @param {Array} [stackB=[]] Associates values with source counterparts.                                          // 2485\n     * @returns {Object} Returns `object`.                                                                             // 2486\n     */                                                                                                                // 2487\n    function baseMerge(object, source, customizer, stackA, stackB) {                                                   // 2488\n      if (!isObject(object)) {                                                                                         // 2489\n        return object;                                                                                                 // 2490\n      }                                                                                                                // 2491\n      var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),                                 // 2492\n          props = isSrcArr ? undefined : keys(source);                                                                 // 2493\n                                                                                                                       // 2494\n      arrayEach(props || source, function(srcValue, key) {                                                             // 2495\n        if (props) {                                                                                                   // 2496\n          key = srcValue;                                                                                              // 2497\n          srcValue = source[key];                                                                                      // 2498\n        }                                                                                                              // 2499\n        if (isObjectLike(srcValue)) {                                                                                  // 2500\n          stackA || (stackA = []);                                                                                     // 2501\n          stackB || (stackB = []);                                                                                     // 2502\n          baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);                                   // 2503\n        }                                                                                                              // 2504\n        else {                                                                                                         // 2505\n          var value = object[key],                                                                                     // 2506\n              result = customizer ? customizer(value, srcValue, key, object, source) : undefined,                      // 2507\n              isCommon = result === undefined;                                                                         // 2508\n                                                                                                                       // 2509\n          if (isCommon) {                                                                                              // 2510\n            result = srcValue;                                                                                         // 2511\n          }                                                                                                            // 2512\n          if ((result !== undefined || (isSrcArr && !(key in object))) &&                                              // 2513\n              (isCommon || (result === result ? (result !== value) : (value === value)))) {                            // 2514\n            object[key] = result;                                                                                      // 2515\n          }                                                                                                            // 2516\n        }                                                                                                              // 2517\n      });                                                                                                              // 2518\n      return object;                                                                                                   // 2519\n    }                                                                                                                  // 2520\n                                                                                                                       // 2521\n    /**                                                                                                                // 2522\n     * A specialized version of `baseMerge` for arrays and objects which performs                                      // 2523\n     * deep merges and tracks traversed objects enabling objects with circular                                         // 2524\n     * references to be merged.                                                                                        // 2525\n     *                                                                                                                 // 2526\n     * @private                                                                                                        // 2527\n     * @param {Object} object The destination object.                                                                  // 2528\n     * @param {Object} source The source object.                                                                       // 2529\n     * @param {string} key The key of the value to merge.                                                              // 2530\n     * @param {Function} mergeFunc The function to merge values.                                                       // 2531\n     * @param {Function} [customizer] The function to customize merged values.                                         // 2532\n     * @param {Array} [stackA=[]] Tracks traversed source objects.                                                     // 2533\n     * @param {Array} [stackB=[]] Associates values with source counterparts.                                          // 2534\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.                                  // 2535\n     */                                                                                                                // 2536\n    function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {                               // 2537\n      var length = stackA.length,                                                                                      // 2538\n          srcValue = source[key];                                                                                      // 2539\n                                                                                                                       // 2540\n      while (length--) {                                                                                               // 2541\n        if (stackA[length] == srcValue) {                                                                              // 2542\n          object[key] = stackB[length];                                                                                // 2543\n          return;                                                                                                      // 2544\n        }                                                                                                              // 2545\n      }                                                                                                                // 2546\n      var value = object[key],                                                                                         // 2547\n          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,                          // 2548\n          isCommon = result === undefined;                                                                             // 2549\n                                                                                                                       // 2550\n      if (isCommon) {                                                                                                  // 2551\n        result = srcValue;                                                                                             // 2552\n        if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {                                  // 2553\n          result = isArray(value)                                                                                      // 2554\n            ? value                                                                                                    // 2555\n            : (isArrayLike(value) ? arrayCopy(value) : []);                                                            // 2556\n        }                                                                                                              // 2557\n        else if (isPlainObject(srcValue) || isArguments(srcValue)) {                                                   // 2558\n          result = isArguments(value)                                                                                  // 2559\n            ? toPlainObject(value)                                                                                     // 2560\n            : (isPlainObject(value) ? value : {});                                                                     // 2561\n        }                                                                                                              // 2562\n        else {                                                                                                         // 2563\n          isCommon = false;                                                                                            // 2564\n        }                                                                                                              // 2565\n      }                                                                                                                // 2566\n      // Add the source value to the stack of traversed objects and associate                                          // 2567\n      // it with its merged value.                                                                                     // 2568\n      stackA.push(srcValue);                                                                                           // 2569\n      stackB.push(result);                                                                                             // 2570\n                                                                                                                       // 2571\n      if (isCommon) {                                                                                                  // 2572\n        // Recursively merge objects and arrays (susceptible to call stack limits).                                    // 2573\n        object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);                                         // 2574\n      } else if (result === result ? (result !== value) : (value === value)) {                                         // 2575\n        object[key] = result;                                                                                          // 2576\n      }                                                                                                                // 2577\n    }                                                                                                                  // 2578\n                                                                                                                       // 2579\n    /**                                                                                                                // 2580\n     * The base implementation of `_.property` without support for deep paths.                                         // 2581\n     *                                                                                                                 // 2582\n     * @private                                                                                                        // 2583\n     * @param {string} key The key of the property to get.                                                             // 2584\n     * @returns {Function} Returns the new function.                                                                   // 2585\n     */                                                                                                                // 2586\n    function baseProperty(key) {                                                                                       // 2587\n      return function(object) {                                                                                        // 2588\n        return object == null ? undefined : toObject(object)[key];                                                     // 2589\n      };                                                                                                               // 2590\n    }                                                                                                                  // 2591\n                                                                                                                       // 2592\n    /**                                                                                                                // 2593\n     * A specialized version of `baseProperty` which supports deep paths.                                              // 2594\n     *                                                                                                                 // 2595\n     * @private                                                                                                        // 2596\n     * @param {Array|string} path The path of the property to get.                                                     // 2597\n     * @returns {Function} Returns the new function.                                                                   // 2598\n     */                                                                                                                // 2599\n    function basePropertyDeep(path) {                                                                                  // 2600\n      var pathKey = (path + '');                                                                                       // 2601\n      path = toPath(path);                                                                                             // 2602\n      return function(object) {                                                                                        // 2603\n        return baseGet(object, path, pathKey);                                                                         // 2604\n      };                                                                                                               // 2605\n    }                                                                                                                  // 2606\n                                                                                                                       // 2607\n    /**                                                                                                                // 2608\n     * The base implementation of `_.pullAt` without support for individual                                            // 2609\n     * index arguments and capturing the removed elements.                                                             // 2610\n     *                                                                                                                 // 2611\n     * @private                                                                                                        // 2612\n     * @param {Array} array The array to modify.                                                                       // 2613\n     * @param {number[]} indexes The indexes of elements to remove.                                                    // 2614\n     * @returns {Array} Returns `array`.                                                                               // 2615\n     */                                                                                                                // 2616\n    function basePullAt(array, indexes) {                                                                              // 2617\n      var length = array ? indexes.length : 0;                                                                         // 2618\n      while (length--) {                                                                                               // 2619\n        var index = indexes[length];                                                                                   // 2620\n        if (index != previous && isIndex(index)) {                                                                     // 2621\n          var previous = index;                                                                                        // 2622\n          splice.call(array, index, 1);                                                                                // 2623\n        }                                                                                                              // 2624\n      }                                                                                                                // 2625\n      return array;                                                                                                    // 2626\n    }                                                                                                                  // 2627\n                                                                                                                       // 2628\n    /**                                                                                                                // 2629\n     * The base implementation of `_.random` without support for argument juggling                                     // 2630\n     * and returning floating-point numbers.                                                                           // 2631\n     *                                                                                                                 // 2632\n     * @private                                                                                                        // 2633\n     * @param {number} min The minimum possible value.                                                                 // 2634\n     * @param {number} max The maximum possible value.                                                                 // 2635\n     * @returns {number} Returns the random number.                                                                    // 2636\n     */                                                                                                                // 2637\n    function baseRandom(min, max) {                                                                                    // 2638\n      return min + nativeFloor(nativeRandom() * (max - min + 1));                                                      // 2639\n    }                                                                                                                  // 2640\n                                                                                                                       // 2641\n    /**                                                                                                                // 2642\n     * The base implementation of `_.reduce` and `_.reduceRight` without support                                       // 2643\n     * for callback shorthands and `this` binding, which iterates over `collection`                                    // 2644\n     * using the provided `eachFunc`.                                                                                  // 2645\n     *                                                                                                                 // 2646\n     * @private                                                                                                        // 2647\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 2648\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 2649\n     * @param {*} accumulator The initial value.                                                                       // 2650\n     * @param {boolean} initFromCollection Specify using the first or last element                                     // 2651\n     *  of `collection` as the initial value.                                                                          // 2652\n     * @param {Function} eachFunc The function to iterate over `collection`.                                           // 2653\n     * @returns {*} Returns the accumulated value.                                                                     // 2654\n     */                                                                                                                // 2655\n    function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {                             // 2656\n      eachFunc(collection, function(value, index, collection) {                                                        // 2657\n        accumulator = initFromCollection                                                                               // 2658\n          ? (initFromCollection = false, value)                                                                        // 2659\n          : iteratee(accumulator, value, index, collection);                                                           // 2660\n      });                                                                                                              // 2661\n      return accumulator;                                                                                              // 2662\n    }                                                                                                                  // 2663\n                                                                                                                       // 2664\n    /**                                                                                                                // 2665\n     * The base implementation of `setData` without support for hot loop detection.                                    // 2666\n     *                                                                                                                 // 2667\n     * @private                                                                                                        // 2668\n     * @param {Function} func The function to associate metadata with.                                                 // 2669\n     * @param {*} data The metadata.                                                                                   // 2670\n     * @returns {Function} Returns `func`.                                                                             // 2671\n     */                                                                                                                // 2672\n    var baseSetData = !metaMap ? identity : function(func, data) {                                                     // 2673\n      metaMap.set(func, data);                                                                                         // 2674\n      return func;                                                                                                     // 2675\n    };                                                                                                                 // 2676\n                                                                                                                       // 2677\n    /**                                                                                                                // 2678\n     * The base implementation of `_.slice` without an iteratee call guard.                                            // 2679\n     *                                                                                                                 // 2680\n     * @private                                                                                                        // 2681\n     * @param {Array} array The array to slice.                                                                        // 2682\n     * @param {number} [start=0] The start position.                                                                   // 2683\n     * @param {number} [end=array.length] The end position.                                                            // 2684\n     * @returns {Array} Returns the slice of `array`.                                                                  // 2685\n     */                                                                                                                // 2686\n    function baseSlice(array, start, end) {                                                                            // 2687\n      var index = -1,                                                                                                  // 2688\n          length = array.length;                                                                                       // 2689\n                                                                                                                       // 2690\n      start = start == null ? 0 : (+start || 0);                                                                       // 2691\n      if (start < 0) {                                                                                                 // 2692\n        start = -start > length ? 0 : (length + start);                                                                // 2693\n      }                                                                                                                // 2694\n      end = (end === undefined || end > length) ? length : (+end || 0);                                                // 2695\n      if (end < 0) {                                                                                                   // 2696\n        end += length;                                                                                                 // 2697\n      }                                                                                                                // 2698\n      length = start > end ? 0 : ((end - start) >>> 0);                                                                // 2699\n      start >>>= 0;                                                                                                    // 2700\n                                                                                                                       // 2701\n      var result = Array(length);                                                                                      // 2702\n      while (++index < length) {                                                                                       // 2703\n        result[index] = array[index + start];                                                                          // 2704\n      }                                                                                                                // 2705\n      return result;                                                                                                   // 2706\n    }                                                                                                                  // 2707\n                                                                                                                       // 2708\n    /**                                                                                                                // 2709\n     * The base implementation of `_.some` without support for callback shorthands                                     // 2710\n     * and `this` binding.                                                                                             // 2711\n     *                                                                                                                 // 2712\n     * @private                                                                                                        // 2713\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 2714\n     * @param {Function} predicate The function invoked per iteration.                                                 // 2715\n     * @returns {boolean} Returns `true` if any element passes the predicate check,                                    // 2716\n     *  else `false`.                                                                                                  // 2717\n     */                                                                                                                // 2718\n    function baseSome(collection, predicate) {                                                                         // 2719\n      var result;                                                                                                      // 2720\n                                                                                                                       // 2721\n      baseEach(collection, function(value, index, collection) {                                                        // 2722\n        result = predicate(value, index, collection);                                                                  // 2723\n        return !result;                                                                                                // 2724\n      });                                                                                                              // 2725\n      return !!result;                                                                                                 // 2726\n    }                                                                                                                  // 2727\n                                                                                                                       // 2728\n    /**                                                                                                                // 2729\n     * The base implementation of `_.sortBy` which uses `comparer` to define                                           // 2730\n     * the sort order of `array` and replaces criteria objects with their                                              // 2731\n     * corresponding values.                                                                                           // 2732\n     *                                                                                                                 // 2733\n     * @private                                                                                                        // 2734\n     * @param {Array} array The array to sort.                                                                         // 2735\n     * @param {Function} comparer The function to define sort order.                                                   // 2736\n     * @returns {Array} Returns `array`.                                                                               // 2737\n     */                                                                                                                // 2738\n    function baseSortBy(array, comparer) {                                                                             // 2739\n      var length = array.length;                                                                                       // 2740\n                                                                                                                       // 2741\n      array.sort(comparer);                                                                                            // 2742\n      while (length--) {                                                                                               // 2743\n        array[length] = array[length].value;                                                                           // 2744\n      }                                                                                                                // 2745\n      return array;                                                                                                    // 2746\n    }                                                                                                                  // 2747\n                                                                                                                       // 2748\n    /**                                                                                                                // 2749\n     * The base implementation of `_.sortByOrder` without param guards.                                                // 2750\n     *                                                                                                                 // 2751\n     * @private                                                                                                        // 2752\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 2753\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.                                       // 2754\n     * @param {boolean[]} orders The sort orders of `iteratees`.                                                       // 2755\n     * @returns {Array} Returns the new sorted array.                                                                  // 2756\n     */                                                                                                                // 2757\n    function baseSortByOrder(collection, iteratees, orders) {                                                          // 2758\n      var callback = getCallback(),                                                                                    // 2759\n          index = -1;                                                                                                  // 2760\n                                                                                                                       // 2761\n      iteratees = arrayMap(iteratees, function(iteratee) { return callback(iteratee); });                              // 2762\n                                                                                                                       // 2763\n      var result = baseMap(collection, function(value) {                                                               // 2764\n        var criteria = arrayMap(iteratees, function(iteratee) { return iteratee(value); });                            // 2765\n        return { 'criteria': criteria, 'index': ++index, 'value': value };                                             // 2766\n      });                                                                                                              // 2767\n                                                                                                                       // 2768\n      return baseSortBy(result, function(object, other) {                                                              // 2769\n        return compareMultiple(object, other, orders);                                                                 // 2770\n      });                                                                                                              // 2771\n    }                                                                                                                  // 2772\n                                                                                                                       // 2773\n    /**                                                                                                                // 2774\n     * The base implementation of `_.sum` without support for callback shorthands                                      // 2775\n     * and `this` binding.                                                                                             // 2776\n     *                                                                                                                 // 2777\n     * @private                                                                                                        // 2778\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 2779\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 2780\n     * @returns {number} Returns the sum.                                                                              // 2781\n     */                                                                                                                // 2782\n    function baseSum(collection, iteratee) {                                                                           // 2783\n      var result = 0;                                                                                                  // 2784\n      baseEach(collection, function(value, index, collection) {                                                        // 2785\n        result += +iteratee(value, index, collection) || 0;                                                            // 2786\n      });                                                                                                              // 2787\n      return result;                                                                                                   // 2788\n    }                                                                                                                  // 2789\n                                                                                                                       // 2790\n    /**                                                                                                                // 2791\n     * The base implementation of `_.uniq` without support for callback shorthands                                     // 2792\n     * and `this` binding.                                                                                             // 2793\n     *                                                                                                                 // 2794\n     * @private                                                                                                        // 2795\n     * @param {Array} array The array to inspect.                                                                      // 2796\n     * @param {Function} [iteratee] The function invoked per iteration.                                                // 2797\n     * @returns {Array} Returns the new duplicate free array.                                                          // 2798\n     */                                                                                                                // 2799\n    function baseUniq(array, iteratee) {                                                                               // 2800\n      var index = -1,                                                                                                  // 2801\n          indexOf = getIndexOf(),                                                                                      // 2802\n          length = array.length,                                                                                       // 2803\n          isCommon = indexOf === baseIndexOf,                                                                          // 2804\n          isLarge = isCommon && length >= LARGE_ARRAY_SIZE,                                                            // 2805\n          seen = isLarge ? createCache() : null,                                                                       // 2806\n          result = [];                                                                                                 // 2807\n                                                                                                                       // 2808\n      if (seen) {                                                                                                      // 2809\n        indexOf = cacheIndexOf;                                                                                        // 2810\n        isCommon = false;                                                                                              // 2811\n      } else {                                                                                                         // 2812\n        isLarge = false;                                                                                               // 2813\n        seen = iteratee ? [] : result;                                                                                 // 2814\n      }                                                                                                                // 2815\n      outer:                                                                                                           // 2816\n      while (++index < length) {                                                                                       // 2817\n        var value = array[index],                                                                                      // 2818\n            computed = iteratee ? iteratee(value, index, array) : value;                                               // 2819\n                                                                                                                       // 2820\n        if (isCommon && value === value) {                                                                             // 2821\n          var seenIndex = seen.length;                                                                                 // 2822\n          while (seenIndex--) {                                                                                        // 2823\n            if (seen[seenIndex] === computed) {                                                                        // 2824\n              continue outer;                                                                                          // 2825\n            }                                                                                                          // 2826\n          }                                                                                                            // 2827\n          if (iteratee) {                                                                                              // 2828\n            seen.push(computed);                                                                                       // 2829\n          }                                                                                                            // 2830\n          result.push(value);                                                                                          // 2831\n        }                                                                                                              // 2832\n        else if (indexOf(seen, computed, 0) < 0) {                                                                     // 2833\n          if (iteratee || isLarge) {                                                                                   // 2834\n            seen.push(computed);                                                                                       // 2835\n          }                                                                                                            // 2836\n          result.push(value);                                                                                          // 2837\n        }                                                                                                              // 2838\n      }                                                                                                                // 2839\n      return result;                                                                                                   // 2840\n    }                                                                                                                  // 2841\n                                                                                                                       // 2842\n    /**                                                                                                                // 2843\n     * The base implementation of `_.values` and `_.valuesIn` which creates an                                         // 2844\n     * array of `object` property values corresponding to the property names                                           // 2845\n     * of `props`.                                                                                                     // 2846\n     *                                                                                                                 // 2847\n     * @private                                                                                                        // 2848\n     * @param {Object} object The object to query.                                                                     // 2849\n     * @param {Array} props The property names to get values for.                                                      // 2850\n     * @returns {Object} Returns the array of property values.                                                         // 2851\n     */                                                                                                                // 2852\n    function baseValues(object, props) {                                                                               // 2853\n      var index = -1,                                                                                                  // 2854\n          length = props.length,                                                                                       // 2855\n          result = Array(length);                                                                                      // 2856\n                                                                                                                       // 2857\n      while (++index < length) {                                                                                       // 2858\n        result[index] = object[props[index]];                                                                          // 2859\n      }                                                                                                                // 2860\n      return result;                                                                                                   // 2861\n    }                                                                                                                  // 2862\n                                                                                                                       // 2863\n    /**                                                                                                                // 2864\n     * The base implementation of `_.dropRightWhile`, `_.dropWhile`, `_.takeRightWhile`,                               // 2865\n     * and `_.takeWhile` without support for callback shorthands and `this` binding.                                   // 2866\n     *                                                                                                                 // 2867\n     * @private                                                                                                        // 2868\n     * @param {Array} array The array to query.                                                                        // 2869\n     * @param {Function} predicate The function invoked per iteration.                                                 // 2870\n     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.                                     // 2871\n     * @param {boolean} [fromRight] Specify iterating from right to left.                                              // 2872\n     * @returns {Array} Returns the slice of `array`.                                                                  // 2873\n     */                                                                                                                // 2874\n    function baseWhile(array, predicate, isDrop, fromRight) {                                                          // 2875\n      var length = array.length,                                                                                       // 2876\n          index = fromRight ? length : -1;                                                                             // 2877\n                                                                                                                       // 2878\n      while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}                     // 2879\n      return isDrop                                                                                                    // 2880\n        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))                                  // 2881\n        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));                                 // 2882\n    }                                                                                                                  // 2883\n                                                                                                                       // 2884\n    /**                                                                                                                // 2885\n     * The base implementation of `wrapperValue` which returns the result of                                           // 2886\n     * performing a sequence of actions on the unwrapped `value`, where each                                           // 2887\n     * successive action is supplied the return value of the previous.                                                 // 2888\n     *                                                                                                                 // 2889\n     * @private                                                                                                        // 2890\n     * @param {*} value The unwrapped value.                                                                           // 2891\n     * @param {Array} actions Actions to peform to resolve the unwrapped value.                                        // 2892\n     * @returns {*} Returns the resolved value.                                                                        // 2893\n     */                                                                                                                // 2894\n    function baseWrapperValue(value, actions) {                                                                        // 2895\n      var result = value;                                                                                              // 2896\n      if (result instanceof LazyWrapper) {                                                                             // 2897\n        result = result.value();                                                                                       // 2898\n      }                                                                                                                // 2899\n      var index = -1,                                                                                                  // 2900\n          length = actions.length;                                                                                     // 2901\n                                                                                                                       // 2902\n      while (++index < length) {                                                                                       // 2903\n        var action = actions[index];                                                                                   // 2904\n        result = action.func.apply(action.thisArg, arrayPush([result], action.args));                                  // 2905\n      }                                                                                                                // 2906\n      return result;                                                                                                   // 2907\n    }                                                                                                                  // 2908\n                                                                                                                       // 2909\n    /**                                                                                                                // 2910\n     * Performs a binary search of `array` to determine the index at which `value`                                     // 2911\n     * should be inserted into `array` in order to maintain its sort order.                                            // 2912\n     *                                                                                                                 // 2913\n     * @private                                                                                                        // 2914\n     * @param {Array} array The sorted array to inspect.                                                               // 2915\n     * @param {*} value The value to evaluate.                                                                         // 2916\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.                                    // 2917\n     * @returns {number} Returns the index at which `value` should be inserted                                         // 2918\n     *  into `array`.                                                                                                  // 2919\n     */                                                                                                                // 2920\n    function binaryIndex(array, value, retHighest) {                                                                   // 2921\n      var low = 0,                                                                                                     // 2922\n          high = array ? array.length : low;                                                                           // 2923\n                                                                                                                       // 2924\n      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {                              // 2925\n        while (low < high) {                                                                                           // 2926\n          var mid = (low + high) >>> 1,                                                                                // 2927\n              computed = array[mid];                                                                                   // 2928\n                                                                                                                       // 2929\n          if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {                          // 2930\n            low = mid + 1;                                                                                             // 2931\n          } else {                                                                                                     // 2932\n            high = mid;                                                                                                // 2933\n          }                                                                                                            // 2934\n        }                                                                                                              // 2935\n        return high;                                                                                                   // 2936\n      }                                                                                                                // 2937\n      return binaryIndexBy(array, value, identity, retHighest);                                                        // 2938\n    }                                                                                                                  // 2939\n                                                                                                                       // 2940\n    /**                                                                                                                // 2941\n     * This function is like `binaryIndex` except that it invokes `iteratee` for                                       // 2942\n     * `value` and each element of `array` to compute their sort ranking. The                                          // 2943\n     * iteratee is invoked with one argument; (value).                                                                 // 2944\n     *                                                                                                                 // 2945\n     * @private                                                                                                        // 2946\n     * @param {Array} array The sorted array to inspect.                                                               // 2947\n     * @param {*} value The value to evaluate.                                                                         // 2948\n     * @param {Function} iteratee The function invoked per iteration.                                                  // 2949\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.                                    // 2950\n     * @returns {number} Returns the index at which `value` should be inserted                                         // 2951\n     *  into `array`.                                                                                                  // 2952\n     */                                                                                                                // 2953\n    function binaryIndexBy(array, value, iteratee, retHighest) {                                                       // 2954\n      value = iteratee(value);                                                                                         // 2955\n                                                                                                                       // 2956\n      var low = 0,                                                                                                     // 2957\n          high = array ? array.length : 0,                                                                             // 2958\n          valIsNaN = value !== value,                                                                                  // 2959\n          valIsNull = value === null,                                                                                  // 2960\n          valIsUndef = value === undefined;                                                                            // 2961\n                                                                                                                       // 2962\n      while (low < high) {                                                                                             // 2963\n        var mid = nativeFloor((low + high) / 2),                                                                       // 2964\n            computed = iteratee(array[mid]),                                                                           // 2965\n            isDef = computed !== undefined,                                                                            // 2966\n            isReflexive = computed === computed;                                                                       // 2967\n                                                                                                                       // 2968\n        if (valIsNaN) {                                                                                                // 2969\n          var setLow = isReflexive || retHighest;                                                                      // 2970\n        } else if (valIsNull) {                                                                                        // 2971\n          setLow = isReflexive && isDef && (retHighest || computed != null);                                           // 2972\n        } else if (valIsUndef) {                                                                                       // 2973\n          setLow = isReflexive && (retHighest || isDef);                                                               // 2974\n        } else if (computed == null) {                                                                                 // 2975\n          setLow = false;                                                                                              // 2976\n        } else {                                                                                                       // 2977\n          setLow = retHighest ? (computed <= value) : (computed < value);                                              // 2978\n        }                                                                                                              // 2979\n        if (setLow) {                                                                                                  // 2980\n          low = mid + 1;                                                                                               // 2981\n        } else {                                                                                                       // 2982\n          high = mid;                                                                                                  // 2983\n        }                                                                                                              // 2984\n      }                                                                                                                // 2985\n      return nativeMin(high, MAX_ARRAY_INDEX);                                                                         // 2986\n    }                                                                                                                  // 2987\n                                                                                                                       // 2988\n    /**                                                                                                                // 2989\n     * A specialized version of `baseCallback` which only supports `this` binding                                      // 2990\n     * and specifying the number of arguments to provide to `func`.                                                    // 2991\n     *                                                                                                                 // 2992\n     * @private                                                                                                        // 2993\n     * @param {Function} func The function to bind.                                                                    // 2994\n     * @param {*} thisArg The `this` binding of `func`.                                                                // 2995\n     * @param {number} [argCount] The number of arguments to provide to `func`.                                        // 2996\n     * @returns {Function} Returns the callback.                                                                       // 2997\n     */                                                                                                                // 2998\n    function bindCallback(func, thisArg, argCount) {                                                                   // 2999\n      if (typeof func != 'function') {                                                                                 // 3000\n        return identity;                                                                                               // 3001\n      }                                                                                                                // 3002\n      if (thisArg === undefined) {                                                                                     // 3003\n        return func;                                                                                                   // 3004\n      }                                                                                                                // 3005\n      switch (argCount) {                                                                                              // 3006\n        case 1: return function(value) {                                                                               // 3007\n          return func.call(thisArg, value);                                                                            // 3008\n        };                                                                                                             // 3009\n        case 3: return function(value, index, collection) {                                                            // 3010\n          return func.call(thisArg, value, index, collection);                                                         // 3011\n        };                                                                                                             // 3012\n        case 4: return function(accumulator, value, index, collection) {                                               // 3013\n          return func.call(thisArg, accumulator, value, index, collection);                                            // 3014\n        };                                                                                                             // 3015\n        case 5: return function(value, other, key, object, source) {                                                   // 3016\n          return func.call(thisArg, value, other, key, object, source);                                                // 3017\n        };                                                                                                             // 3018\n      }                                                                                                                // 3019\n      return function() {                                                                                              // 3020\n        return func.apply(thisArg, arguments);                                                                         // 3021\n      };                                                                                                               // 3022\n    }                                                                                                                  // 3023\n                                                                                                                       // 3024\n    /**                                                                                                                // 3025\n     * Creates a clone of the given array buffer.                                                                      // 3026\n     *                                                                                                                 // 3027\n     * @private                                                                                                        // 3028\n     * @param {ArrayBuffer} buffer The array buffer to clone.                                                          // 3029\n     * @returns {ArrayBuffer} Returns the cloned array buffer.                                                         // 3030\n     */                                                                                                                // 3031\n    function bufferClone(buffer) {                                                                                     // 3032\n      var result = new ArrayBuffer(buffer.byteLength),                                                                 // 3033\n          view = new Uint8Array(result);                                                                               // 3034\n                                                                                                                       // 3035\n      view.set(new Uint8Array(buffer));                                                                                // 3036\n      return result;                                                                                                   // 3037\n    }                                                                                                                  // 3038\n                                                                                                                       // 3039\n    /**                                                                                                                // 3040\n     * Creates an array that is the composition of partially applied arguments,                                        // 3041\n     * placeholders, and provided arguments into a single array of arguments.                                          // 3042\n     *                                                                                                                 // 3043\n     * @private                                                                                                        // 3044\n     * @param {Array|Object} args The provided arguments.                                                              // 3045\n     * @param {Array} partials The arguments to prepend to those provided.                                             // 3046\n     * @param {Array} holders The `partials` placeholder indexes.                                                      // 3047\n     * @returns {Array} Returns the new array of composed arguments.                                                   // 3048\n     */                                                                                                                // 3049\n    function composeArgs(args, partials, holders) {                                                                    // 3050\n      var holdersLength = holders.length,                                                                              // 3051\n          argsIndex = -1,                                                                                              // 3052\n          argsLength = nativeMax(args.length - holdersLength, 0),                                                      // 3053\n          leftIndex = -1,                                                                                              // 3054\n          leftLength = partials.length,                                                                                // 3055\n          result = Array(leftLength + argsLength);                                                                     // 3056\n                                                                                                                       // 3057\n      while (++leftIndex < leftLength) {                                                                               // 3058\n        result[leftIndex] = partials[leftIndex];                                                                       // 3059\n      }                                                                                                                // 3060\n      while (++argsIndex < holdersLength) {                                                                            // 3061\n        result[holders[argsIndex]] = args[argsIndex];                                                                  // 3062\n      }                                                                                                                // 3063\n      while (argsLength--) {                                                                                           // 3064\n        result[leftIndex++] = args[argsIndex++];                                                                       // 3065\n      }                                                                                                                // 3066\n      return result;                                                                                                   // 3067\n    }                                                                                                                  // 3068\n                                                                                                                       // 3069\n    /**                                                                                                                // 3070\n     * This function is like `composeArgs` except that the arguments composition                                       // 3071\n     * is tailored for `_.partialRight`.                                                                               // 3072\n     *                                                                                                                 // 3073\n     * @private                                                                                                        // 3074\n     * @param {Array|Object} args The provided arguments.                                                              // 3075\n     * @param {Array} partials The arguments to append to those provided.                                              // 3076\n     * @param {Array} holders The `partials` placeholder indexes.                                                      // 3077\n     * @returns {Array} Returns the new array of composed arguments.                                                   // 3078\n     */                                                                                                                // 3079\n    function composeArgsRight(args, partials, holders) {                                                               // 3080\n      var holdersIndex = -1,                                                                                           // 3081\n          holdersLength = holders.length,                                                                              // 3082\n          argsIndex = -1,                                                                                              // 3083\n          argsLength = nativeMax(args.length - holdersLength, 0),                                                      // 3084\n          rightIndex = -1,                                                                                             // 3085\n          rightLength = partials.length,                                                                               // 3086\n          result = Array(argsLength + rightLength);                                                                    // 3087\n                                                                                                                       // 3088\n      while (++argsIndex < argsLength) {                                                                               // 3089\n        result[argsIndex] = args[argsIndex];                                                                           // 3090\n      }                                                                                                                // 3091\n      var offset = argsIndex;                                                                                          // 3092\n      while (++rightIndex < rightLength) {                                                                             // 3093\n        result[offset + rightIndex] = partials[rightIndex];                                                            // 3094\n      }                                                                                                                // 3095\n      while (++holdersIndex < holdersLength) {                                                                         // 3096\n        result[offset + holders[holdersIndex]] = args[argsIndex++];                                                    // 3097\n      }                                                                                                                // 3098\n      return result;                                                                                                   // 3099\n    }                                                                                                                  // 3100\n                                                                                                                       // 3101\n    /**                                                                                                                // 3102\n     * Creates a `_.countBy`, `_.groupBy`, `_.indexBy`, or `_.partition` function.                                     // 3103\n     *                                                                                                                 // 3104\n     * @private                                                                                                        // 3105\n     * @param {Function} setter The function to set keys and values of the accumulator object.                         // 3106\n     * @param {Function} [initializer] The function to initialize the accumulator object.                              // 3107\n     * @returns {Function} Returns the new aggregator function.                                                        // 3108\n     */                                                                                                                // 3109\n    function createAggregator(setter, initializer) {                                                                   // 3110\n      return function(collection, iteratee, thisArg) {                                                                 // 3111\n        var result = initializer ? initializer() : {};                                                                 // 3112\n        iteratee = getCallback(iteratee, thisArg, 3);                                                                  // 3113\n                                                                                                                       // 3114\n        if (isArray(collection)) {                                                                                     // 3115\n          var index = -1,                                                                                              // 3116\n              length = collection.length;                                                                              // 3117\n                                                                                                                       // 3118\n          while (++index < length) {                                                                                   // 3119\n            var value = collection[index];                                                                             // 3120\n            setter(result, value, iteratee(value, index, collection), collection);                                     // 3121\n          }                                                                                                            // 3122\n        } else {                                                                                                       // 3123\n          baseEach(collection, function(value, key, collection) {                                                      // 3124\n            setter(result, value, iteratee(value, key, collection), collection);                                       // 3125\n          });                                                                                                          // 3126\n        }                                                                                                              // 3127\n        return result;                                                                                                 // 3128\n      };                                                                                                               // 3129\n    }                                                                                                                  // 3130\n                                                                                                                       // 3131\n    /**                                                                                                                // 3132\n     * Creates a `_.assign`, `_.defaults`, or `_.merge` function.                                                      // 3133\n     *                                                                                                                 // 3134\n     * @private                                                                                                        // 3135\n     * @param {Function} assigner The function to assign values.                                                       // 3136\n     * @returns {Function} Returns the new assigner function.                                                          // 3137\n     */                                                                                                                // 3138\n    function createAssigner(assigner) {                                                                                // 3139\n      return restParam(function(object, sources) {                                                                     // 3140\n        var index = -1,                                                                                                // 3141\n            length = object == null ? 0 : sources.length,                                                              // 3142\n            customizer = length > 2 ? sources[length - 2] : undefined,                                                 // 3143\n            guard = length > 2 ? sources[2] : undefined,                                                               // 3144\n            thisArg = length > 1 ? sources[length - 1] : undefined;                                                    // 3145\n                                                                                                                       // 3146\n        if (typeof customizer == 'function') {                                                                         // 3147\n          customizer = bindCallback(customizer, thisArg, 5);                                                           // 3148\n          length -= 2;                                                                                                 // 3149\n        } else {                                                                                                       // 3150\n          customizer = typeof thisArg == 'function' ? thisArg : undefined;                                             // 3151\n          length -= (customizer ? 1 : 0);                                                                              // 3152\n        }                                                                                                              // 3153\n        if (guard && isIterateeCall(sources[0], sources[1], guard)) {                                                  // 3154\n          customizer = length < 3 ? undefined : customizer;                                                            // 3155\n          length = 1;                                                                                                  // 3156\n        }                                                                                                              // 3157\n        while (++index < length) {                                                                                     // 3158\n          var source = sources[index];                                                                                 // 3159\n          if (source) {                                                                                                // 3160\n            assigner(object, source, customizer);                                                                      // 3161\n          }                                                                                                            // 3162\n        }                                                                                                              // 3163\n        return object;                                                                                                 // 3164\n      });                                                                                                              // 3165\n    }                                                                                                                  // 3166\n                                                                                                                       // 3167\n    /**                                                                                                                // 3168\n     * Creates a `baseEach` or `baseEachRight` function.                                                               // 3169\n     *                                                                                                                 // 3170\n     * @private                                                                                                        // 3171\n     * @param {Function} eachFunc The function to iterate over a collection.                                           // 3172\n     * @param {boolean} [fromRight] Specify iterating from right to left.                                              // 3173\n     * @returns {Function} Returns the new base function.                                                              // 3174\n     */                                                                                                                // 3175\n    function createBaseEach(eachFunc, fromRight) {                                                                     // 3176\n      return function(collection, iteratee) {                                                                          // 3177\n        var length = collection ? getLength(collection) : 0;                                                           // 3178\n        if (!isLength(length)) {                                                                                       // 3179\n          return eachFunc(collection, iteratee);                                                                       // 3180\n        }                                                                                                              // 3181\n        var index = fromRight ? length : -1,                                                                           // 3182\n            iterable = toObject(collection);                                                                           // 3183\n                                                                                                                       // 3184\n        while ((fromRight ? index-- : ++index < length)) {                                                             // 3185\n          if (iteratee(iterable[index], index, iterable) === false) {                                                  // 3186\n            break;                                                                                                     // 3187\n          }                                                                                                            // 3188\n        }                                                                                                              // 3189\n        return collection;                                                                                             // 3190\n      };                                                                                                               // 3191\n    }                                                                                                                  // 3192\n                                                                                                                       // 3193\n    /**                                                                                                                // 3194\n     * Creates a base function for `_.forIn` or `_.forInRight`.                                                        // 3195\n     *                                                                                                                 // 3196\n     * @private                                                                                                        // 3197\n     * @param {boolean} [fromRight] Specify iterating from right to left.                                              // 3198\n     * @returns {Function} Returns the new base function.                                                              // 3199\n     */                                                                                                                // 3200\n    function createBaseFor(fromRight) {                                                                                // 3201\n      return function(object, iteratee, keysFunc) {                                                                    // 3202\n        var iterable = toObject(object),                                                                               // 3203\n            props = keysFunc(object),                                                                                  // 3204\n            length = props.length,                                                                                     // 3205\n            index = fromRight ? length : -1;                                                                           // 3206\n                                                                                                                       // 3207\n        while ((fromRight ? index-- : ++index < length)) {                                                             // 3208\n          var key = props[index];                                                                                      // 3209\n          if (iteratee(iterable[key], key, iterable) === false) {                                                      // 3210\n            break;                                                                                                     // 3211\n          }                                                                                                            // 3212\n        }                                                                                                              // 3213\n        return object;                                                                                                 // 3214\n      };                                                                                                               // 3215\n    }                                                                                                                  // 3216\n                                                                                                                       // 3217\n    /**                                                                                                                // 3218\n     * Creates a function that wraps `func` and invokes it with the `this`                                             // 3219\n     * binding of `thisArg`.                                                                                           // 3220\n     *                                                                                                                 // 3221\n     * @private                                                                                                        // 3222\n     * @param {Function} func The function to bind.                                                                    // 3223\n     * @param {*} [thisArg] The `this` binding of `func`.                                                              // 3224\n     * @returns {Function} Returns the new bound function.                                                             // 3225\n     */                                                                                                                // 3226\n    function createBindWrapper(func, thisArg) {                                                                        // 3227\n      var Ctor = createCtorWrapper(func);                                                                              // 3228\n                                                                                                                       // 3229\n      function wrapper() {                                                                                             // 3230\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;                                     // 3231\n        return fn.apply(thisArg, arguments);                                                                           // 3232\n      }                                                                                                                // 3233\n      return wrapper;                                                                                                  // 3234\n    }                                                                                                                  // 3235\n                                                                                                                       // 3236\n    /**                                                                                                                // 3237\n     * Creates a `Set` cache object to optimize linear searches of large arrays.                                       // 3238\n     *                                                                                                                 // 3239\n     * @private                                                                                                        // 3240\n     * @param {Array} [values] The values to cache.                                                                    // 3241\n     * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.                         // 3242\n     */                                                                                                                // 3243\n    function createCache(values) {                                                                                     // 3244\n      return (nativeCreate && Set) ? new SetCache(values) : null;                                                      // 3245\n    }                                                                                                                  // 3246\n                                                                                                                       // 3247\n    /**                                                                                                                // 3248\n     * Creates a function that produces compound words out of the words in a                                           // 3249\n     * given string.                                                                                                   // 3250\n     *                                                                                                                 // 3251\n     * @private                                                                                                        // 3252\n     * @param {Function} callback The function to combine each word.                                                   // 3253\n     * @returns {Function} Returns the new compounder function.                                                        // 3254\n     */                                                                                                                // 3255\n    function createCompounder(callback) {                                                                              // 3256\n      return function(string) {                                                                                        // 3257\n        var index = -1,                                                                                                // 3258\n            array = words(deburr(string)),                                                                             // 3259\n            length = array.length,                                                                                     // 3260\n            result = '';                                                                                               // 3261\n                                                                                                                       // 3262\n        while (++index < length) {                                                                                     // 3263\n          result = callback(result, array[index], index);                                                              // 3264\n        }                                                                                                              // 3265\n        return result;                                                                                                 // 3266\n      };                                                                                                               // 3267\n    }                                                                                                                  // 3268\n                                                                                                                       // 3269\n    /**                                                                                                                // 3270\n     * Creates a function that produces an instance of `Ctor` regardless of                                            // 3271\n     * whether it was invoked as part of a `new` expression or by `call` or `apply`.                                   // 3272\n     *                                                                                                                 // 3273\n     * @private                                                                                                        // 3274\n     * @param {Function} Ctor The constructor to wrap.                                                                 // 3275\n     * @returns {Function} Returns the new wrapped function.                                                           // 3276\n     */                                                                                                                // 3277\n    function createCtorWrapper(Ctor) {                                                                                 // 3278\n      return function() {                                                                                              // 3279\n        // Use a `switch` statement to work with class constructors.                                                   // 3280\n        // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist\n        // for more details.                                                                                           // 3282\n        var args = arguments;                                                                                          // 3283\n        switch (args.length) {                                                                                         // 3284\n          case 0: return new Ctor;                                                                                     // 3285\n          case 1: return new Ctor(args[0]);                                                                            // 3286\n          case 2: return new Ctor(args[0], args[1]);                                                                   // 3287\n          case 3: return new Ctor(args[0], args[1], args[2]);                                                          // 3288\n          case 4: return new Ctor(args[0], args[1], args[2], args[3]);                                                 // 3289\n          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);                                        // 3290\n          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);                               // 3291\n          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);                      // 3292\n        }                                                                                                              // 3293\n        var thisBinding = baseCreate(Ctor.prototype),                                                                  // 3294\n            result = Ctor.apply(thisBinding, args);                                                                    // 3295\n                                                                                                                       // 3296\n        // Mimic the constructor's `return` behavior.                                                                  // 3297\n        // See https://es5.github.io/#x13.2.2 for more details.                                                        // 3298\n        return isObject(result) ? result : thisBinding;                                                                // 3299\n      };                                                                                                               // 3300\n    }                                                                                                                  // 3301\n                                                                                                                       // 3302\n    /**                                                                                                                // 3303\n     * Creates a `_.curry` or `_.curryRight` function.                                                                 // 3304\n     *                                                                                                                 // 3305\n     * @private                                                                                                        // 3306\n     * @param {boolean} flag The curry bit flag.                                                                       // 3307\n     * @returns {Function} Returns the new curry function.                                                             // 3308\n     */                                                                                                                // 3309\n    function createCurry(flag) {                                                                                       // 3310\n      function curryFunc(func, arity, guard) {                                                                         // 3311\n        if (guard && isIterateeCall(func, arity, guard)) {                                                             // 3312\n          arity = undefined;                                                                                           // 3313\n        }                                                                                                              // 3314\n        var result = createWrapper(func, flag, undefined, undefined, undefined, undefined, undefined, arity);          // 3315\n        result.placeholder = curryFunc.placeholder;                                                                    // 3316\n        return result;                                                                                                 // 3317\n      }                                                                                                                // 3318\n      return curryFunc;                                                                                                // 3319\n    }                                                                                                                  // 3320\n                                                                                                                       // 3321\n    /**                                                                                                                // 3322\n     * Creates a `_.defaults` or `_.defaultsDeep` function.                                                            // 3323\n     *                                                                                                                 // 3324\n     * @private                                                                                                        // 3325\n     * @param {Function} assigner The function to assign values.                                                       // 3326\n     * @param {Function} customizer The function to customize assigned values.                                         // 3327\n     * @returns {Function} Returns the new defaults function.                                                          // 3328\n     */                                                                                                                // 3329\n    function createDefaults(assigner, customizer) {                                                                    // 3330\n      return restParam(function(args) {                                                                                // 3331\n        var object = args[0];                                                                                          // 3332\n        if (object == null) {                                                                                          // 3333\n          return object;                                                                                               // 3334\n        }                                                                                                              // 3335\n        args.push(customizer);                                                                                         // 3336\n        return assigner.apply(undefined, args);                                                                        // 3337\n      });                                                                                                              // 3338\n    }                                                                                                                  // 3339\n                                                                                                                       // 3340\n    /**                                                                                                                // 3341\n     * Creates a `_.max` or `_.min` function.                                                                          // 3342\n     *                                                                                                                 // 3343\n     * @private                                                                                                        // 3344\n     * @param {Function} comparator The function used to compare values.                                               // 3345\n     * @param {*} exValue The initial extremum value.                                                                  // 3346\n     * @returns {Function} Returns the new extremum function.                                                          // 3347\n     */                                                                                                                // 3348\n    function createExtremum(comparator, exValue) {                                                                     // 3349\n      return function(collection, iteratee, thisArg) {                                                                 // 3350\n        if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {                                                // 3351\n          iteratee = undefined;                                                                                        // 3352\n        }                                                                                                              // 3353\n        iteratee = getCallback(iteratee, thisArg, 3);                                                                  // 3354\n        if (iteratee.length == 1) {                                                                                    // 3355\n          collection = isArray(collection) ? collection : toIterable(collection);                                      // 3356\n          var result = arrayExtremum(collection, iteratee, comparator, exValue);                                       // 3357\n          if (!(collection.length && result === exValue)) {                                                            // 3358\n            return result;                                                                                             // 3359\n          }                                                                                                            // 3360\n        }                                                                                                              // 3361\n        return baseExtremum(collection, iteratee, comparator, exValue);                                                // 3362\n      };                                                                                                               // 3363\n    }                                                                                                                  // 3364\n                                                                                                                       // 3365\n    /**                                                                                                                // 3366\n     * Creates a `_.find` or `_.findLast` function.                                                                    // 3367\n     *                                                                                                                 // 3368\n     * @private                                                                                                        // 3369\n     * @param {Function} eachFunc The function to iterate over a collection.                                           // 3370\n     * @param {boolean} [fromRight] Specify iterating from right to left.                                              // 3371\n     * @returns {Function} Returns the new find function.                                                              // 3372\n     */                                                                                                                // 3373\n    function createFind(eachFunc, fromRight) {                                                                         // 3374\n      return function(collection, predicate, thisArg) {                                                                // 3375\n        predicate = getCallback(predicate, thisArg, 3);                                                                // 3376\n        if (isArray(collection)) {                                                                                     // 3377\n          var index = baseFindIndex(collection, predicate, fromRight);                                                 // 3378\n          return index > -1 ? collection[index] : undefined;                                                           // 3379\n        }                                                                                                              // 3380\n        return baseFind(collection, predicate, eachFunc);                                                              // 3381\n      };                                                                                                               // 3382\n    }                                                                                                                  // 3383\n                                                                                                                       // 3384\n    /**                                                                                                                // 3385\n     * Creates a `_.findIndex` or `_.findLastIndex` function.                                                          // 3386\n     *                                                                                                                 // 3387\n     * @private                                                                                                        // 3388\n     * @param {boolean} [fromRight] Specify iterating from right to left.                                              // 3389\n     * @returns {Function} Returns the new find function.                                                              // 3390\n     */                                                                                                                // 3391\n    function createFindIndex(fromRight) {                                                                              // 3392\n      return function(array, predicate, thisArg) {                                                                     // 3393\n        if (!(array && array.length)) {                                                                                // 3394\n          return -1;                                                                                                   // 3395\n        }                                                                                                              // 3396\n        predicate = getCallback(predicate, thisArg, 3);                                                                // 3397\n        return baseFindIndex(array, predicate, fromRight);                                                             // 3398\n      };                                                                                                               // 3399\n    }                                                                                                                  // 3400\n                                                                                                                       // 3401\n    /**                                                                                                                // 3402\n     * Creates a `_.findKey` or `_.findLastKey` function.                                                              // 3403\n     *                                                                                                                 // 3404\n     * @private                                                                                                        // 3405\n     * @param {Function} objectFunc The function to iterate over an object.                                            // 3406\n     * @returns {Function} Returns the new find function.                                                              // 3407\n     */                                                                                                                // 3408\n    function createFindKey(objectFunc) {                                                                               // 3409\n      return function(object, predicate, thisArg) {                                                                    // 3410\n        predicate = getCallback(predicate, thisArg, 3);                                                                // 3411\n        return baseFind(object, predicate, objectFunc, true);                                                          // 3412\n      };                                                                                                               // 3413\n    }                                                                                                                  // 3414\n                                                                                                                       // 3415\n    /**                                                                                                                // 3416\n     * Creates a `_.flow` or `_.flowRight` function.                                                                   // 3417\n     *                                                                                                                 // 3418\n     * @private                                                                                                        // 3419\n     * @param {boolean} [fromRight] Specify iterating from right to left.                                              // 3420\n     * @returns {Function} Returns the new flow function.                                                              // 3421\n     */                                                                                                                // 3422\n    function createFlow(fromRight) {                                                                                   // 3423\n      return function() {                                                                                              // 3424\n        var wrapper,                                                                                                   // 3425\n            length = arguments.length,                                                                                 // 3426\n            index = fromRight ? length : -1,                                                                           // 3427\n            leftIndex = 0,                                                                                             // 3428\n            funcs = Array(length);                                                                                     // 3429\n                                                                                                                       // 3430\n        while ((fromRight ? index-- : ++index < length)) {                                                             // 3431\n          var func = funcs[leftIndex++] = arguments[index];                                                            // 3432\n          if (typeof func != 'function') {                                                                             // 3433\n            throw new TypeError(FUNC_ERROR_TEXT);                                                                      // 3434\n          }                                                                                                            // 3435\n          if (!wrapper && LodashWrapper.prototype.thru && getFuncName(func) == 'wrapper') {                            // 3436\n            wrapper = new LodashWrapper([], true);                                                                     // 3437\n          }                                                                                                            // 3438\n        }                                                                                                              // 3439\n        index = wrapper ? -1 : length;                                                                                 // 3440\n        while (++index < length) {                                                                                     // 3441\n          func = funcs[index];                                                                                         // 3442\n                                                                                                                       // 3443\n          var funcName = getFuncName(func),                                                                            // 3444\n              data = funcName == 'wrapper' ? getData(func) : undefined;                                                // 3445\n                                                                                                                       // 3446\n          if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {\n            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);                                           // 3448\n          } else {                                                                                                     // 3449\n            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);               // 3450\n          }                                                                                                            // 3451\n        }                                                                                                              // 3452\n        return function() {                                                                                            // 3453\n          var args = arguments,                                                                                        // 3454\n              value = args[0];                                                                                         // 3455\n                                                                                                                       // 3456\n          if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {                     // 3457\n            return wrapper.plant(value).value();                                                                       // 3458\n          }                                                                                                            // 3459\n          var index = 0,                                                                                               // 3460\n              result = length ? funcs[index].apply(this, args) : value;                                                // 3461\n                                                                                                                       // 3462\n          while (++index < length) {                                                                                   // 3463\n            result = funcs[index].call(this, result);                                                                  // 3464\n          }                                                                                                            // 3465\n          return result;                                                                                               // 3466\n        };                                                                                                             // 3467\n      };                                                                                                               // 3468\n    }                                                                                                                  // 3469\n                                                                                                                       // 3470\n    /**                                                                                                                // 3471\n     * Creates a function for `_.forEach` or `_.forEachRight`.                                                         // 3472\n     *                                                                                                                 // 3473\n     * @private                                                                                                        // 3474\n     * @param {Function} arrayFunc The function to iterate over an array.                                              // 3475\n     * @param {Function} eachFunc The function to iterate over a collection.                                           // 3476\n     * @returns {Function} Returns the new each function.                                                              // 3477\n     */                                                                                                                // 3478\n    function createForEach(arrayFunc, eachFunc) {                                                                      // 3479\n      return function(collection, iteratee, thisArg) {                                                                 // 3480\n        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))                         // 3481\n          ? arrayFunc(collection, iteratee)                                                                            // 3482\n          : eachFunc(collection, bindCallback(iteratee, thisArg, 3));                                                  // 3483\n      };                                                                                                               // 3484\n    }                                                                                                                  // 3485\n                                                                                                                       // 3486\n    /**                                                                                                                // 3487\n     * Creates a function for `_.forIn` or `_.forInRight`.                                                             // 3488\n     *                                                                                                                 // 3489\n     * @private                                                                                                        // 3490\n     * @param {Function} objectFunc The function to iterate over an object.                                            // 3491\n     * @returns {Function} Returns the new each function.                                                              // 3492\n     */                                                                                                                // 3493\n    function createForIn(objectFunc) {                                                                                 // 3494\n      return function(object, iteratee, thisArg) {                                                                     // 3495\n        if (typeof iteratee != 'function' || thisArg !== undefined) {                                                  // 3496\n          iteratee = bindCallback(iteratee, thisArg, 3);                                                               // 3497\n        }                                                                                                              // 3498\n        return objectFunc(object, iteratee, keysIn);                                                                   // 3499\n      };                                                                                                               // 3500\n    }                                                                                                                  // 3501\n                                                                                                                       // 3502\n    /**                                                                                                                // 3503\n     * Creates a function for `_.forOwn` or `_.forOwnRight`.                                                           // 3504\n     *                                                                                                                 // 3505\n     * @private                                                                                                        // 3506\n     * @param {Function} objectFunc The function to iterate over an object.                                            // 3507\n     * @returns {Function} Returns the new each function.                                                              // 3508\n     */                                                                                                                // 3509\n    function createForOwn(objectFunc) {                                                                                // 3510\n      return function(object, iteratee, thisArg) {                                                                     // 3511\n        if (typeof iteratee != 'function' || thisArg !== undefined) {                                                  // 3512\n          iteratee = bindCallback(iteratee, thisArg, 3);                                                               // 3513\n        }                                                                                                              // 3514\n        return objectFunc(object, iteratee);                                                                           // 3515\n      };                                                                                                               // 3516\n    }                                                                                                                  // 3517\n                                                                                                                       // 3518\n    /**                                                                                                                // 3519\n     * Creates a function for `_.mapKeys` or `_.mapValues`.                                                            // 3520\n     *                                                                                                                 // 3521\n     * @private                                                                                                        // 3522\n     * @param {boolean} [isMapKeys] Specify mapping keys instead of values.                                            // 3523\n     * @returns {Function} Returns the new map function.                                                               // 3524\n     */                                                                                                                // 3525\n    function createObjectMapper(isMapKeys) {                                                                           // 3526\n      return function(object, iteratee, thisArg) {                                                                     // 3527\n        var result = {};                                                                                               // 3528\n        iteratee = getCallback(iteratee, thisArg, 3);                                                                  // 3529\n                                                                                                                       // 3530\n        baseForOwn(object, function(value, key, object) {                                                              // 3531\n          var mapped = iteratee(value, key, object);                                                                   // 3532\n          key = isMapKeys ? mapped : key;                                                                              // 3533\n          value = isMapKeys ? value : mapped;                                                                          // 3534\n          result[key] = value;                                                                                         // 3535\n        });                                                                                                            // 3536\n        return result;                                                                                                 // 3537\n      };                                                                                                               // 3538\n    }                                                                                                                  // 3539\n                                                                                                                       // 3540\n    /**                                                                                                                // 3541\n     * Creates a function for `_.padLeft` or `_.padRight`.                                                             // 3542\n     *                                                                                                                 // 3543\n     * @private                                                                                                        // 3544\n     * @param {boolean} [fromRight] Specify padding from the right.                                                    // 3545\n     * @returns {Function} Returns the new pad function.                                                               // 3546\n     */                                                                                                                // 3547\n    function createPadDir(fromRight) {                                                                                 // 3548\n      return function(string, length, chars) {                                                                         // 3549\n        string = baseToString(string);                                                                                 // 3550\n        return (fromRight ? string : '') + createPadding(string, length, chars) + (fromRight ? '' : string);           // 3551\n      };                                                                                                               // 3552\n    }                                                                                                                  // 3553\n                                                                                                                       // 3554\n    /**                                                                                                                // 3555\n     * Creates a `_.partial` or `_.partialRight` function.                                                             // 3556\n     *                                                                                                                 // 3557\n     * @private                                                                                                        // 3558\n     * @param {boolean} flag The partial bit flag.                                                                     // 3559\n     * @returns {Function} Returns the new partial function.                                                           // 3560\n     */                                                                                                                // 3561\n    function createPartial(flag) {                                                                                     // 3562\n      var partialFunc = restParam(function(func, partials) {                                                           // 3563\n        var holders = replaceHolders(partials, partialFunc.placeholder);                                               // 3564\n        return createWrapper(func, flag, undefined, partials, holders);                                                // 3565\n      });                                                                                                              // 3566\n      return partialFunc;                                                                                              // 3567\n    }                                                                                                                  // 3568\n                                                                                                                       // 3569\n    /**                                                                                                                // 3570\n     * Creates a function for `_.reduce` or `_.reduceRight`.                                                           // 3571\n     *                                                                                                                 // 3572\n     * @private                                                                                                        // 3573\n     * @param {Function} arrayFunc The function to iterate over an array.                                              // 3574\n     * @param {Function} eachFunc The function to iterate over a collection.                                           // 3575\n     * @returns {Function} Returns the new each function.                                                              // 3576\n     */                                                                                                                // 3577\n    function createReduce(arrayFunc, eachFunc) {                                                                       // 3578\n      return function(collection, iteratee, accumulator, thisArg) {                                                    // 3579\n        var initFromArray = arguments.length < 3;                                                                      // 3580\n        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))                         // 3581\n          ? arrayFunc(collection, iteratee, accumulator, initFromArray)                                                // 3582\n          : baseReduce(collection, getCallback(iteratee, thisArg, 4), accumulator, initFromArray, eachFunc);           // 3583\n      };                                                                                                               // 3584\n    }                                                                                                                  // 3585\n                                                                                                                       // 3586\n    /**                                                                                                                // 3587\n     * Creates a function that wraps `func` and invokes it with optional `this`                                        // 3588\n     * binding of, partial application, and currying.                                                                  // 3589\n     *                                                                                                                 // 3590\n     * @private                                                                                                        // 3591\n     * @param {Function|string} func The function or method name to reference.                                         // 3592\n     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.                             // 3593\n     * @param {*} [thisArg] The `this` binding of `func`.                                                              // 3594\n     * @param {Array} [partials] The arguments to prepend to those provided to the new function.                       // 3595\n     * @param {Array} [holders] The `partials` placeholder indexes.                                                    // 3596\n     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.                   // 3597\n     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.                                          // 3598\n     * @param {Array} [argPos] The argument positions of the new function.                                             // 3599\n     * @param {number} [ary] The arity cap of `func`.                                                                  // 3600\n     * @param {number} [arity] The arity of `func`.                                                                    // 3601\n     * @returns {Function} Returns the new wrapped function.                                                           // 3602\n     */                                                                                                                // 3603\n    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {\n      var isAry = bitmask & ARY_FLAG,                                                                                  // 3605\n          isBind = bitmask & BIND_FLAG,                                                                                // 3606\n          isBindKey = bitmask & BIND_KEY_FLAG,                                                                         // 3607\n          isCurry = bitmask & CURRY_FLAG,                                                                              // 3608\n          isCurryBound = bitmask & CURRY_BOUND_FLAG,                                                                   // 3609\n          isCurryRight = bitmask & CURRY_RIGHT_FLAG,                                                                   // 3610\n          Ctor = isBindKey ? undefined : createCtorWrapper(func);                                                      // 3611\n                                                                                                                       // 3612\n      function wrapper() {                                                                                             // 3613\n        // Avoid `arguments` object use disqualifying optimizations by                                                 // 3614\n        // converting it to an array before providing it to other functions.                                           // 3615\n        var length = arguments.length,                                                                                 // 3616\n            index = length,                                                                                            // 3617\n            args = Array(length);                                                                                      // 3618\n                                                                                                                       // 3619\n        while (index--) {                                                                                              // 3620\n          args[index] = arguments[index];                                                                              // 3621\n        }                                                                                                              // 3622\n        if (partials) {                                                                                                // 3623\n          args = composeArgs(args, partials, holders);                                                                 // 3624\n        }                                                                                                              // 3625\n        if (partialsRight) {                                                                                           // 3626\n          args = composeArgsRight(args, partialsRight, holdersRight);                                                  // 3627\n        }                                                                                                              // 3628\n        if (isCurry || isCurryRight) {                                                                                 // 3629\n          var placeholder = wrapper.placeholder,                                                                       // 3630\n              argsHolders = replaceHolders(args, placeholder);                                                         // 3631\n                                                                                                                       // 3632\n          length -= argsHolders.length;                                                                                // 3633\n          if (length < arity) {                                                                                        // 3634\n            var newArgPos = argPos ? arrayCopy(argPos) : undefined,                                                    // 3635\n                newArity = nativeMax(arity - length, 0),                                                               // 3636\n                newsHolders = isCurry ? argsHolders : undefined,                                                       // 3637\n                newHoldersRight = isCurry ? undefined : argsHolders,                                                   // 3638\n                newPartials = isCurry ? args : undefined,                                                              // 3639\n                newPartialsRight = isCurry ? undefined : args;                                                         // 3640\n                                                                                                                       // 3641\n            bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);                                                  // 3642\n            bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);                                                 // 3643\n                                                                                                                       // 3644\n            if (!isCurryBound) {                                                                                       // 3645\n              bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);                                                                 // 3646\n            }                                                                                                          // 3647\n            var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity],\n                result = createHybridWrapper.apply(undefined, newData);                                                // 3649\n                                                                                                                       // 3650\n            if (isLaziable(func)) {                                                                                    // 3651\n              setData(result, newData);                                                                                // 3652\n            }                                                                                                          // 3653\n            result.placeholder = placeholder;                                                                          // 3654\n            return result;                                                                                             // 3655\n          }                                                                                                            // 3656\n        }                                                                                                              // 3657\n        var thisBinding = isBind ? thisArg : this,                                                                     // 3658\n            fn = isBindKey ? thisBinding[func] : func;                                                                 // 3659\n                                                                                                                       // 3660\n        if (argPos) {                                                                                                  // 3661\n          args = reorder(args, argPos);                                                                                // 3662\n        }                                                                                                              // 3663\n        if (isAry && ary < args.length) {                                                                              // 3664\n          args.length = ary;                                                                                           // 3665\n        }                                                                                                              // 3666\n        if (this && this !== root && this instanceof wrapper) {                                                        // 3667\n          fn = Ctor || createCtorWrapper(func);                                                                        // 3668\n        }                                                                                                              // 3669\n        return fn.apply(thisBinding, args);                                                                            // 3670\n      }                                                                                                                // 3671\n      return wrapper;                                                                                                  // 3672\n    }                                                                                                                  // 3673\n                                                                                                                       // 3674\n    /**                                                                                                                // 3675\n     * Creates the padding required for `string` based on the given `length`.                                          // 3676\n     * The `chars` string is truncated if the number of characters exceeds `length`.                                   // 3677\n     *                                                                                                                 // 3678\n     * @private                                                                                                        // 3679\n     * @param {string} string The string to create padding for.                                                        // 3680\n     * @param {number} [length=0] The padding length.                                                                  // 3681\n     * @param {string} [chars=' '] The string used as padding.                                                         // 3682\n     * @returns {string} Returns the pad for `string`.                                                                 // 3683\n     */                                                                                                                // 3684\n    function createPadding(string, length, chars) {                                                                    // 3685\n      var strLength = string.length;                                                                                   // 3686\n      length = +length;                                                                                                // 3687\n                                                                                                                       // 3688\n      if (strLength >= length || !nativeIsFinite(length)) {                                                            // 3689\n        return '';                                                                                                     // 3690\n      }                                                                                                                // 3691\n      var padLength = length - strLength;                                                                              // 3692\n      chars = chars == null ? ' ' : (chars + '');                                                                      // 3693\n      return repeat(chars, nativeCeil(padLength / chars.length)).slice(0, padLength);                                  // 3694\n    }                                                                                                                  // 3695\n                                                                                                                       // 3696\n    /**                                                                                                                // 3697\n     * Creates a function that wraps `func` and invokes it with the optional `this`                                    // 3698\n     * binding of `thisArg` and the `partials` prepended to those provided to                                          // 3699\n     * the wrapper.                                                                                                    // 3700\n     *                                                                                                                 // 3701\n     * @private                                                                                                        // 3702\n     * @param {Function} func The function to partially apply arguments to.                                            // 3703\n     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.                             // 3704\n     * @param {*} thisArg The `this` binding of `func`.                                                                // 3705\n     * @param {Array} partials The arguments to prepend to those provided to the new function.                         // 3706\n     * @returns {Function} Returns the new bound function.                                                             // 3707\n     */                                                                                                                // 3708\n    function createPartialWrapper(func, bitmask, thisArg, partials) {                                                  // 3709\n      var isBind = bitmask & BIND_FLAG,                                                                                // 3710\n          Ctor = createCtorWrapper(func);                                                                              // 3711\n                                                                                                                       // 3712\n      function wrapper() {                                                                                             // 3713\n        // Avoid `arguments` object use disqualifying optimizations by                                                 // 3714\n        // converting it to an array before providing it `func`.                                                       // 3715\n        var argsIndex = -1,                                                                                            // 3716\n            argsLength = arguments.length,                                                                             // 3717\n            leftIndex = -1,                                                                                            // 3718\n            leftLength = partials.length,                                                                              // 3719\n            args = Array(leftLength + argsLength);                                                                     // 3720\n                                                                                                                       // 3721\n        while (++leftIndex < leftLength) {                                                                             // 3722\n          args[leftIndex] = partials[leftIndex];                                                                       // 3723\n        }                                                                                                              // 3724\n        while (argsLength--) {                                                                                         // 3725\n          args[leftIndex++] = arguments[++argsIndex];                                                                  // 3726\n        }                                                                                                              // 3727\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;                                     // 3728\n        return fn.apply(isBind ? thisArg : this, args);                                                                // 3729\n      }                                                                                                                // 3730\n      return wrapper;                                                                                                  // 3731\n    }                                                                                                                  // 3732\n                                                                                                                       // 3733\n    /**                                                                                                                // 3734\n     * Creates a `_.ceil`, `_.floor`, or `_.round` function.                                                           // 3735\n     *                                                                                                                 // 3736\n     * @private                                                                                                        // 3737\n     * @param {string} methodName The name of the `Math` method to use when rounding.                                  // 3738\n     * @returns {Function} Returns the new round function.                                                             // 3739\n     */                                                                                                                // 3740\n    function createRound(methodName) {                                                                                 // 3741\n      var func = Math[methodName];                                                                                     // 3742\n      return function(number, precision) {                                                                             // 3743\n        precision = precision === undefined ? 0 : (+precision || 0);                                                   // 3744\n        if (precision) {                                                                                               // 3745\n          precision = pow(10, precision);                                                                              // 3746\n          return func(number * precision) / precision;                                                                 // 3747\n        }                                                                                                              // 3748\n        return func(number);                                                                                           // 3749\n      };                                                                                                               // 3750\n    }                                                                                                                  // 3751\n                                                                                                                       // 3752\n    /**                                                                                                                // 3753\n     * Creates a `_.sortedIndex` or `_.sortedLastIndex` function.                                                      // 3754\n     *                                                                                                                 // 3755\n     * @private                                                                                                        // 3756\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.                                    // 3757\n     * @returns {Function} Returns the new index function.                                                             // 3758\n     */                                                                                                                // 3759\n    function createSortedIndex(retHighest) {                                                                           // 3760\n      return function(array, value, iteratee, thisArg) {                                                               // 3761\n        var callback = getCallback(iteratee);                                                                          // 3762\n        return (iteratee == null && callback === baseCallback)                                                         // 3763\n          ? binaryIndex(array, value, retHighest)                                                                      // 3764\n          : binaryIndexBy(array, value, callback(iteratee, thisArg, 1), retHighest);                                   // 3765\n      };                                                                                                               // 3766\n    }                                                                                                                  // 3767\n                                                                                                                       // 3768\n    /**                                                                                                                // 3769\n     * Creates a function that either curries or invokes `func` with optional                                          // 3770\n     * `this` binding and partially applied arguments.                                                                 // 3771\n     *                                                                                                                 // 3772\n     * @private                                                                                                        // 3773\n     * @param {Function|string} func The function or method name to reference.                                         // 3774\n     * @param {number} bitmask The bitmask of flags.                                                                   // 3775\n     *  The bitmask may be composed of the following flags:                                                            // 3776\n     *     1 - `_.bind`                                                                                                // 3777\n     *     2 - `_.bindKey`                                                                                             // 3778\n     *     4 - `_.curry` or `_.curryRight` of a bound function                                                         // 3779\n     *     8 - `_.curry`                                                                                               // 3780\n     *    16 - `_.curryRight`                                                                                          // 3781\n     *    32 - `_.partial`                                                                                             // 3782\n     *    64 - `_.partialRight`                                                                                        // 3783\n     *   128 - `_.rearg`                                                                                               // 3784\n     *   256 - `_.ary`                                                                                                 // 3785\n     * @param {*} [thisArg] The `this` binding of `func`.                                                              // 3786\n     * @param {Array} [partials] The arguments to be partially applied.                                                // 3787\n     * @param {Array} [holders] The `partials` placeholder indexes.                                                    // 3788\n     * @param {Array} [argPos] The argument positions of the new function.                                             // 3789\n     * @param {number} [ary] The arity cap of `func`.                                                                  // 3790\n     * @param {number} [arity] The arity of `func`.                                                                    // 3791\n     * @returns {Function} Returns the new wrapped function.                                                           // 3792\n     */                                                                                                                // 3793\n    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {                            // 3794\n      var isBindKey = bitmask & BIND_KEY_FLAG;                                                                         // 3795\n      if (!isBindKey && typeof func != 'function') {                                                                   // 3796\n        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 3797\n      }                                                                                                                // 3798\n      var length = partials ? partials.length : 0;                                                                     // 3799\n      if (!length) {                                                                                                   // 3800\n        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);                                                               // 3801\n        partials = holders = undefined;                                                                                // 3802\n      }                                                                                                                // 3803\n      length -= (holders ? holders.length : 0);                                                                        // 3804\n      if (bitmask & PARTIAL_RIGHT_FLAG) {                                                                              // 3805\n        var partialsRight = partials,                                                                                  // 3806\n            holdersRight = holders;                                                                                    // 3807\n                                                                                                                       // 3808\n        partials = holders = undefined;                                                                                // 3809\n      }                                                                                                                // 3810\n      var data = isBindKey ? undefined : getData(func),                                                                // 3811\n          newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];      // 3812\n                                                                                                                       // 3813\n      if (data) {                                                                                                      // 3814\n        mergeData(newData, data);                                                                                      // 3815\n        bitmask = newData[1];                                                                                          // 3816\n        arity = newData[9];                                                                                            // 3817\n      }                                                                                                                // 3818\n      newData[9] = arity == null                                                                                       // 3819\n        ? (isBindKey ? 0 : func.length)                                                                                // 3820\n        : (nativeMax(arity - length, 0) || 0);                                                                         // 3821\n                                                                                                                       // 3822\n      if (bitmask == BIND_FLAG) {                                                                                      // 3823\n        var result = createBindWrapper(newData[0], newData[2]);                                                        // 3824\n      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {           // 3825\n        result = createPartialWrapper.apply(undefined, newData);                                                       // 3826\n      } else {                                                                                                         // 3827\n        result = createHybridWrapper.apply(undefined, newData);                                                        // 3828\n      }                                                                                                                // 3829\n      var setter = data ? baseSetData : setData;                                                                       // 3830\n      return setter(result, newData);                                                                                  // 3831\n    }                                                                                                                  // 3832\n                                                                                                                       // 3833\n    /**                                                                                                                // 3834\n     * A specialized version of `baseIsEqualDeep` for arrays with support for                                          // 3835\n     * partial deep comparisons.                                                                                       // 3836\n     *                                                                                                                 // 3837\n     * @private                                                                                                        // 3838\n     * @param {Array} array The array to compare.                                                                      // 3839\n     * @param {Array} other The other array to compare.                                                                // 3840\n     * @param {Function} equalFunc The function to determine equivalents of values.                                    // 3841\n     * @param {Function} [customizer] The function to customize comparing arrays.                                      // 3842\n     * @param {boolean} [isLoose] Specify performing partial comparisons.                                              // 3843\n     * @param {Array} [stackA] Tracks traversed `value` objects.                                                       // 3844\n     * @param {Array} [stackB] Tracks traversed `other` objects.                                                       // 3845\n     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.                                   // 3846\n     */                                                                                                                // 3847\n    function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {                               // 3848\n      var index = -1,                                                                                                  // 3849\n          arrLength = array.length,                                                                                    // 3850\n          othLength = other.length;                                                                                    // 3851\n                                                                                                                       // 3852\n      if (arrLength != othLength && !(isLoose && othLength > arrLength)) {                                             // 3853\n        return false;                                                                                                  // 3854\n      }                                                                                                                // 3855\n      // Ignore non-index properties.                                                                                  // 3856\n      while (++index < arrLength) {                                                                                    // 3857\n        var arrValue = array[index],                                                                                   // 3858\n            othValue = other[index],                                                                                   // 3859\n            result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;\n                                                                                                                       // 3861\n        if (result !== undefined) {                                                                                    // 3862\n          if (result) {                                                                                                // 3863\n            continue;                                                                                                  // 3864\n          }                                                                                                            // 3865\n          return false;                                                                                                // 3866\n        }                                                                                                              // 3867\n        // Recursively compare arrays (susceptible to call stack limits).                                              // 3868\n        if (isLoose) {                                                                                                 // 3869\n          if (!arraySome(other, function(othValue) {                                                                   // 3870\n                return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);    // 3871\n              })) {                                                                                                    // 3872\n            return false;                                                                                              // 3873\n          }                                                                                                            // 3874\n        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {   // 3875\n          return false;                                                                                                // 3876\n        }                                                                                                              // 3877\n      }                                                                                                                // 3878\n      return true;                                                                                                     // 3879\n    }                                                                                                                  // 3880\n                                                                                                                       // 3881\n    /**                                                                                                                // 3882\n     * A specialized version of `baseIsEqualDeep` for comparing objects of                                             // 3883\n     * the same `toStringTag`.                                                                                         // 3884\n     *                                                                                                                 // 3885\n     * **Note:** This function only supports comparing values with tags of                                             // 3886\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.                                                    // 3887\n     *                                                                                                                 // 3888\n     * @private                                                                                                        // 3889\n     * @param {Object} object The object to compare.                                                                   // 3890\n     * @param {Object} other The other object to compare.                                                              // 3891\n     * @param {string} tag The `toStringTag` of the objects to compare.                                                // 3892\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.                                  // 3893\n     */                                                                                                                // 3894\n    function equalByTag(object, other, tag) {                                                                          // 3895\n      switch (tag) {                                                                                                   // 3896\n        case boolTag:                                                                                                  // 3897\n        case dateTag:                                                                                                  // 3898\n          // Coerce dates and booleans to numbers, dates to milliseconds and booleans                                  // 3899\n          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.                                       // 3900\n          return +object == +other;                                                                                    // 3901\n                                                                                                                       // 3902\n        case errorTag:                                                                                                 // 3903\n          return object.name == other.name && object.message == other.message;                                         // 3904\n                                                                                                                       // 3905\n        case numberTag:                                                                                                // 3906\n          // Treat `NaN` vs. `NaN` as equal.                                                                           // 3907\n          return (object != +object)                                                                                   // 3908\n            ? other != +other                                                                                          // 3909\n            : object == +other;                                                                                        // 3910\n                                                                                                                       // 3911\n        case regexpTag:                                                                                                // 3912\n        case stringTag:                                                                                                // 3913\n          // Coerce regexes to strings and treat strings primitives and string                                         // 3914\n          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.                                 // 3915\n          return object == (other + '');                                                                               // 3916\n      }                                                                                                                // 3917\n      return false;                                                                                                    // 3918\n    }                                                                                                                  // 3919\n                                                                                                                       // 3920\n    /**                                                                                                                // 3921\n     * A specialized version of `baseIsEqualDeep` for objects with support for                                         // 3922\n     * partial deep comparisons.                                                                                       // 3923\n     *                                                                                                                 // 3924\n     * @private                                                                                                        // 3925\n     * @param {Object} object The object to compare.                                                                   // 3926\n     * @param {Object} other The other object to compare.                                                              // 3927\n     * @param {Function} equalFunc The function to determine equivalents of values.                                    // 3928\n     * @param {Function} [customizer] The function to customize comparing values.                                      // 3929\n     * @param {boolean} [isLoose] Specify performing partial comparisons.                                              // 3930\n     * @param {Array} [stackA] Tracks traversed `value` objects.                                                       // 3931\n     * @param {Array} [stackB] Tracks traversed `other` objects.                                                       // 3932\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.                                  // 3933\n     */                                                                                                                // 3934\n    function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {                             // 3935\n      var objProps = keys(object),                                                                                     // 3936\n          objLength = objProps.length,                                                                                 // 3937\n          othProps = keys(other),                                                                                      // 3938\n          othLength = othProps.length;                                                                                 // 3939\n                                                                                                                       // 3940\n      if (objLength != othLength && !isLoose) {                                                                        // 3941\n        return false;                                                                                                  // 3942\n      }                                                                                                                // 3943\n      var index = objLength;                                                                                           // 3944\n      while (index--) {                                                                                                // 3945\n        var key = objProps[index];                                                                                     // 3946\n        if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {                                             // 3947\n          return false;                                                                                                // 3948\n        }                                                                                                              // 3949\n      }                                                                                                                // 3950\n      var skipCtor = isLoose;                                                                                          // 3951\n      while (++index < objLength) {                                                                                    // 3952\n        key = objProps[index];                                                                                         // 3953\n        var objValue = object[key],                                                                                    // 3954\n            othValue = other[key],                                                                                     // 3955\n            result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;\n                                                                                                                       // 3957\n        // Recursively compare objects (susceptible to call stack limits).                                             // 3958\n        if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {   // 3959\n          return false;                                                                                                // 3960\n        }                                                                                                              // 3961\n        skipCtor || (skipCtor = key == 'constructor');                                                                 // 3962\n      }                                                                                                                // 3963\n      if (!skipCtor) {                                                                                                 // 3964\n        var objCtor = object.constructor,                                                                              // 3965\n            othCtor = other.constructor;                                                                               // 3966\n                                                                                                                       // 3967\n        // Non `Object` object instances with different constructors are not equal.                                    // 3968\n        if (objCtor != othCtor &&                                                                                      // 3969\n            ('constructor' in object && 'constructor' in other) &&                                                     // 3970\n            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&                                            // 3971\n              typeof othCtor == 'function' && othCtor instanceof othCtor)) {                                           // 3972\n          return false;                                                                                                // 3973\n        }                                                                                                              // 3974\n      }                                                                                                                // 3975\n      return true;                                                                                                     // 3976\n    }                                                                                                                  // 3977\n                                                                                                                       // 3978\n    /**                                                                                                                // 3979\n     * Gets the appropriate \"callback\" function. If the `_.callback` method is                                         // 3980\n     * customized this function returns the custom method, otherwise it returns                                        // 3981\n     * the `baseCallback` function. If arguments are provided the chosen function                                      // 3982\n     * is invoked with them and its result is returned.                                                                // 3983\n     *                                                                                                                 // 3984\n     * @private                                                                                                        // 3985\n     * @returns {Function} Returns the chosen function or its result.                                                  // 3986\n     */                                                                                                                // 3987\n    function getCallback(func, thisArg, argCount) {                                                                    // 3988\n      var result = lodash.callback || callback;                                                                        // 3989\n      result = result === callback ? baseCallback : result;                                                            // 3990\n      return argCount ? result(func, thisArg, argCount) : result;                                                      // 3991\n    }                                                                                                                  // 3992\n                                                                                                                       // 3993\n    /**                                                                                                                // 3994\n     * Gets metadata for `func`.                                                                                       // 3995\n     *                                                                                                                 // 3996\n     * @private                                                                                                        // 3997\n     * @param {Function} func The function to query.                                                                   // 3998\n     * @returns {*} Returns the metadata for `func`.                                                                   // 3999\n     */                                                                                                                // 4000\n    var getData = !metaMap ? noop : function(func) {                                                                   // 4001\n      return metaMap.get(func);                                                                                        // 4002\n    };                                                                                                                 // 4003\n                                                                                                                       // 4004\n    /**                                                                                                                // 4005\n     * Gets the name of `func`.                                                                                        // 4006\n     *                                                                                                                 // 4007\n     * @private                                                                                                        // 4008\n     * @param {Function} func The function to query.                                                                   // 4009\n     * @returns {string} Returns the function name.                                                                    // 4010\n     */                                                                                                                // 4011\n    function getFuncName(func) {                                                                                       // 4012\n      var result = (func.name + ''),                                                                                   // 4013\n          array = realNames[result],                                                                                   // 4014\n          length = array ? array.length : 0;                                                                           // 4015\n                                                                                                                       // 4016\n      while (length--) {                                                                                               // 4017\n        var data = array[length],                                                                                      // 4018\n            otherFunc = data.func;                                                                                     // 4019\n        if (otherFunc == null || otherFunc == func) {                                                                  // 4020\n          return data.name;                                                                                            // 4021\n        }                                                                                                              // 4022\n      }                                                                                                                // 4023\n      return result;                                                                                                   // 4024\n    }                                                                                                                  // 4025\n                                                                                                                       // 4026\n    /**                                                                                                                // 4027\n     * Gets the appropriate \"indexOf\" function. If the `_.indexOf` method is                                           // 4028\n     * customized this function returns the custom method, otherwise it returns                                        // 4029\n     * the `baseIndexOf` function. If arguments are provided the chosen function                                       // 4030\n     * is invoked with them and its result is returned.                                                                // 4031\n     *                                                                                                                 // 4032\n     * @private                                                                                                        // 4033\n     * @returns {Function|number} Returns the chosen function or its result.                                           // 4034\n     */                                                                                                                // 4035\n    function getIndexOf(collection, target, fromIndex) {                                                               // 4036\n      var result = lodash.indexOf || indexOf;                                                                          // 4037\n      result = result === indexOf ? baseIndexOf : result;                                                              // 4038\n      return collection ? result(collection, target, fromIndex) : result;                                              // 4039\n    }                                                                                                                  // 4040\n                                                                                                                       // 4041\n    /**                                                                                                                // 4042\n     * Gets the \"length\" property value of `object`.                                                                   // 4043\n     *                                                                                                                 // 4044\n     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)            // 4045\n     * that affects Safari on at least iOS 8.1-8.3 ARM64.                                                              // 4046\n     *                                                                                                                 // 4047\n     * @private                                                                                                        // 4048\n     * @param {Object} object The object to query.                                                                     // 4049\n     * @returns {*} Returns the \"length\" value.                                                                        // 4050\n     */                                                                                                                // 4051\n    var getLength = baseProperty('length');                                                                            // 4052\n                                                                                                                       // 4053\n    /**                                                                                                                // 4054\n     * Gets the propery names, values, and compare flags of `object`.                                                  // 4055\n     *                                                                                                                 // 4056\n     * @private                                                                                                        // 4057\n     * @param {Object} object The object to query.                                                                     // 4058\n     * @returns {Array} Returns the match data of `object`.                                                            // 4059\n     */                                                                                                                // 4060\n    function getMatchData(object) {                                                                                    // 4061\n      var result = pairs(object),                                                                                      // 4062\n          length = result.length;                                                                                      // 4063\n                                                                                                                       // 4064\n      while (length--) {                                                                                               // 4065\n        result[length][2] = isStrictComparable(result[length][1]);                                                     // 4066\n      }                                                                                                                // 4067\n      return result;                                                                                                   // 4068\n    }                                                                                                                  // 4069\n                                                                                                                       // 4070\n    /**                                                                                                                // 4071\n     * Gets the native function at `key` of `object`.                                                                  // 4072\n     *                                                                                                                 // 4073\n     * @private                                                                                                        // 4074\n     * @param {Object} object The object to query.                                                                     // 4075\n     * @param {string} key The key of the method to get.                                                               // 4076\n     * @returns {*} Returns the function if it's native, else `undefined`.                                             // 4077\n     */                                                                                                                // 4078\n    function getNative(object, key) {                                                                                  // 4079\n      var value = object == null ? undefined : object[key];                                                            // 4080\n      return isNative(value) ? value : undefined;                                                                      // 4081\n    }                                                                                                                  // 4082\n                                                                                                                       // 4083\n    /**                                                                                                                // 4084\n     * Gets the view, applying any `transforms` to the `start` and `end` positions.                                    // 4085\n     *                                                                                                                 // 4086\n     * @private                                                                                                        // 4087\n     * @param {number} start The start of the view.                                                                    // 4088\n     * @param {number} end The end of the view.                                                                        // 4089\n     * @param {Array} transforms The transformations to apply to the view.                                             // 4090\n     * @returns {Object} Returns an object containing the `start` and `end`                                            // 4091\n     *  positions of the view.                                                                                         // 4092\n     */                                                                                                                // 4093\n    function getView(start, end, transforms) {                                                                         // 4094\n      var index = -1,                                                                                                  // 4095\n          length = transforms.length;                                                                                  // 4096\n                                                                                                                       // 4097\n      while (++index < length) {                                                                                       // 4098\n        var data = transforms[index],                                                                                  // 4099\n            size = data.size;                                                                                          // 4100\n                                                                                                                       // 4101\n        switch (data.type) {                                                                                           // 4102\n          case 'drop':      start += size; break;                                                                      // 4103\n          case 'dropRight': end -= size; break;                                                                        // 4104\n          case 'take':      end = nativeMin(end, start + size); break;                                                 // 4105\n          case 'takeRight': start = nativeMax(start, end - size); break;                                               // 4106\n        }                                                                                                              // 4107\n      }                                                                                                                // 4108\n      return { 'start': start, 'end': end };                                                                           // 4109\n    }                                                                                                                  // 4110\n                                                                                                                       // 4111\n    /**                                                                                                                // 4112\n     * Initializes an array clone.                                                                                     // 4113\n     *                                                                                                                 // 4114\n     * @private                                                                                                        // 4115\n     * @param {Array} array The array to clone.                                                                        // 4116\n     * @returns {Array} Returns the initialized clone.                                                                 // 4117\n     */                                                                                                                // 4118\n    function initCloneArray(array) {                                                                                   // 4119\n      var length = array.length,                                                                                       // 4120\n          result = new array.constructor(length);                                                                      // 4121\n                                                                                                                       // 4122\n      // Add array properties assigned by `RegExp#exec`.                                                               // 4123\n      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {                              // 4124\n        result.index = array.index;                                                                                    // 4125\n        result.input = array.input;                                                                                    // 4126\n      }                                                                                                                // 4127\n      return result;                                                                                                   // 4128\n    }                                                                                                                  // 4129\n                                                                                                                       // 4130\n    /**                                                                                                                // 4131\n     * Initializes an object clone.                                                                                    // 4132\n     *                                                                                                                 // 4133\n     * @private                                                                                                        // 4134\n     * @param {Object} object The object to clone.                                                                     // 4135\n     * @returns {Object} Returns the initialized clone.                                                                // 4136\n     */                                                                                                                // 4137\n    function initCloneObject(object) {                                                                                 // 4138\n      var Ctor = object.constructor;                                                                                   // 4139\n      if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {                                                      // 4140\n        Ctor = Object;                                                                                                 // 4141\n      }                                                                                                                // 4142\n      return new Ctor;                                                                                                 // 4143\n    }                                                                                                                  // 4144\n                                                                                                                       // 4145\n    /**                                                                                                                // 4146\n     * Initializes an object clone based on its `toStringTag`.                                                         // 4147\n     *                                                                                                                 // 4148\n     * **Note:** This function only supports cloning values with tags of                                               // 4149\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.                                                    // 4150\n     *                                                                                                                 // 4151\n     * @private                                                                                                        // 4152\n     * @param {Object} object The object to clone.                                                                     // 4153\n     * @param {string} tag The `toStringTag` of the object to clone.                                                   // 4154\n     * @param {boolean} [isDeep] Specify a deep clone.                                                                 // 4155\n     * @returns {Object} Returns the initialized clone.                                                                // 4156\n     */                                                                                                                // 4157\n    function initCloneByTag(object, tag, isDeep) {                                                                     // 4158\n      var Ctor = object.constructor;                                                                                   // 4159\n      switch (tag) {                                                                                                   // 4160\n        case arrayBufferTag:                                                                                           // 4161\n          return bufferClone(object);                                                                                  // 4162\n                                                                                                                       // 4163\n        case boolTag:                                                                                                  // 4164\n        case dateTag:                                                                                                  // 4165\n          return new Ctor(+object);                                                                                    // 4166\n                                                                                                                       // 4167\n        case float32Tag: case float64Tag:                                                                              // 4168\n        case int8Tag: case int16Tag: case int32Tag:                                                                    // 4169\n        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:                                           // 4170\n          // Safari 5 mobile incorrectly has `Object` as the constructor of typed arrays.                              // 4171\n          if (Ctor instanceof Ctor) {                                                                                  // 4172\n            Ctor = ctorByTag[tag];                                                                                     // 4173\n          }                                                                                                            // 4174\n          var buffer = object.buffer;                                                                                  // 4175\n          return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);                    // 4176\n                                                                                                                       // 4177\n        case numberTag:                                                                                                // 4178\n        case stringTag:                                                                                                // 4179\n          return new Ctor(object);                                                                                     // 4180\n                                                                                                                       // 4181\n        case regexpTag:                                                                                                // 4182\n          var result = new Ctor(object.source, reFlags.exec(object));                                                  // 4183\n          result.lastIndex = object.lastIndex;                                                                         // 4184\n      }                                                                                                                // 4185\n      return result;                                                                                                   // 4186\n    }                                                                                                                  // 4187\n                                                                                                                       // 4188\n    /**                                                                                                                // 4189\n     * Invokes the method at `path` on `object`.                                                                       // 4190\n     *                                                                                                                 // 4191\n     * @private                                                                                                        // 4192\n     * @param {Object} object The object to query.                                                                     // 4193\n     * @param {Array|string} path The path of the method to invoke.                                                    // 4194\n     * @param {Array} args The arguments to invoke the method with.                                                    // 4195\n     * @returns {*} Returns the result of the invoked method.                                                          // 4196\n     */                                                                                                                // 4197\n    function invokePath(object, path, args) {                                                                          // 4198\n      if (object != null && !isKey(path, object)) {                                                                    // 4199\n        path = toPath(path);                                                                                           // 4200\n        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));                                  // 4201\n        path = last(path);                                                                                             // 4202\n      }                                                                                                                // 4203\n      var func = object == null ? object : object[path];                                                               // 4204\n      return func == null ? undefined : func.apply(object, args);                                                      // 4205\n    }                                                                                                                  // 4206\n                                                                                                                       // 4207\n    /**                                                                                                                // 4208\n     * Checks if `value` is array-like.                                                                                // 4209\n     *                                                                                                                 // 4210\n     * @private                                                                                                        // 4211\n     * @param {*} value The value to check.                                                                            // 4212\n     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.                                       // 4213\n     */                                                                                                                // 4214\n    function isArrayLike(value) {                                                                                      // 4215\n      return value != null && isLength(getLength(value));                                                              // 4216\n    }                                                                                                                  // 4217\n                                                                                                                       // 4218\n    /**                                                                                                                // 4219\n     * Checks if `value` is a valid array-like index.                                                                  // 4220\n     *                                                                                                                 // 4221\n     * @private                                                                                                        // 4222\n     * @param {*} value The value to check.                                                                            // 4223\n     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.                                    // 4224\n     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.                                    // 4225\n     */                                                                                                                // 4226\n    function isIndex(value, length) {                                                                                  // 4227\n      value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;                                        // 4228\n      length = length == null ? MAX_SAFE_INTEGER : length;                                                             // 4229\n      return value > -1 && value % 1 == 0 && value < length;                                                           // 4230\n    }                                                                                                                  // 4231\n                                                                                                                       // 4232\n    /**                                                                                                                // 4233\n     * Checks if the provided arguments are from an iteratee call.                                                     // 4234\n     *                                                                                                                 // 4235\n     * @private                                                                                                        // 4236\n     * @param {*} value The potential iteratee value argument.                                                         // 4237\n     * @param {*} index The potential iteratee index or key argument.                                                  // 4238\n     * @param {*} object The potential iteratee object argument.                                                       // 4239\n     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.                     // 4240\n     */                                                                                                                // 4241\n    function isIterateeCall(value, index, object) {                                                                    // 4242\n      if (!isObject(object)) {                                                                                         // 4243\n        return false;                                                                                                  // 4244\n      }                                                                                                                // 4245\n      var type = typeof index;                                                                                         // 4246\n      if (type == 'number'                                                                                             // 4247\n          ? (isArrayLike(object) && isIndex(index, object.length))                                                     // 4248\n          : (type == 'string' && index in object)) {                                                                   // 4249\n        var other = object[index];                                                                                     // 4250\n        return value === value ? (value === other) : (other !== other);                                                // 4251\n      }                                                                                                                // 4252\n      return false;                                                                                                    // 4253\n    }                                                                                                                  // 4254\n                                                                                                                       // 4255\n    /**                                                                                                                // 4256\n     * Checks if `value` is a property name and not a property path.                                                   // 4257\n     *                                                                                                                 // 4258\n     * @private                                                                                                        // 4259\n     * @param {*} value The value to check.                                                                            // 4260\n     * @param {Object} [object] The object to query keys on.                                                           // 4261\n     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.                                  // 4262\n     */                                                                                                                // 4263\n    function isKey(value, object) {                                                                                    // 4264\n      var type = typeof value;                                                                                         // 4265\n      if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {                                       // 4266\n        return true;                                                                                                   // 4267\n      }                                                                                                                // 4268\n      if (isArray(value)) {                                                                                            // 4269\n        return false;                                                                                                  // 4270\n      }                                                                                                                // 4271\n      var result = !reIsDeepProp.test(value);                                                                          // 4272\n      return result || (object != null && value in toObject(object));                                                  // 4273\n    }                                                                                                                  // 4274\n                                                                                                                       // 4275\n    /**                                                                                                                // 4276\n     * Checks if `func` has a lazy counterpart.                                                                        // 4277\n     *                                                                                                                 // 4278\n     * @private                                                                                                        // 4279\n     * @param {Function} func The function to check.                                                                   // 4280\n     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.                               // 4281\n     */                                                                                                                // 4282\n    function isLaziable(func) {                                                                                        // 4283\n      var funcName = getFuncName(func),                                                                                // 4284\n          other = lodash[funcName];                                                                                    // 4285\n                                                                                                                       // 4286\n      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {                                        // 4287\n        return false;                                                                                                  // 4288\n      }                                                                                                                // 4289\n      if (func === other) {                                                                                            // 4290\n        return true;                                                                                                   // 4291\n      }                                                                                                                // 4292\n      var data = getData(other);                                                                                       // 4293\n      return !!data && func === data[0];                                                                               // 4294\n    }                                                                                                                  // 4295\n                                                                                                                       // 4296\n    /**                                                                                                                // 4297\n     * Checks if `value` is a valid array-like length.                                                                 // 4298\n     *                                                                                                                 // 4299\n     * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).     // 4300\n     *                                                                                                                 // 4301\n     * @private                                                                                                        // 4302\n     * @param {*} value The value to check.                                                                            // 4303\n     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.                                   // 4304\n     */                                                                                                                // 4305\n    function isLength(value) {                                                                                         // 4306\n      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;                    // 4307\n    }                                                                                                                  // 4308\n                                                                                                                       // 4309\n    /**                                                                                                                // 4310\n     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.                                      // 4311\n     *                                                                                                                 // 4312\n     * @private                                                                                                        // 4313\n     * @param {*} value The value to check.                                                                            // 4314\n     * @returns {boolean} Returns `true` if `value` if suitable for strict                                             // 4315\n     *  equality comparisons, else `false`.                                                                            // 4316\n     */                                                                                                                // 4317\n    function isStrictComparable(value) {                                                                               // 4318\n      return value === value && !isObject(value);                                                                      // 4319\n    }                                                                                                                  // 4320\n                                                                                                                       // 4321\n    /**                                                                                                                // 4322\n     * Merges the function metadata of `source` into `data`.                                                           // 4323\n     *                                                                                                                 // 4324\n     * Merging metadata reduces the number of wrappers required to invoke a function.                                  // 4325\n     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`                                      // 4326\n     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`                                // 4327\n     * augment function arguments, making the order in which they are executed important,                              // 4328\n     * preventing the merging of metadata. However, we make an exception for a safe                                    // 4329\n     * common case where curried functions have `_.ary` and or `_.rearg` applied.                                      // 4330\n     *                                                                                                                 // 4331\n     * @private                                                                                                        // 4332\n     * @param {Array} data The destination metadata.                                                                   // 4333\n     * @param {Array} source The source metadata.                                                                      // 4334\n     * @returns {Array} Returns `data`.                                                                                // 4335\n     */                                                                                                                // 4336\n    function mergeData(data, source) {                                                                                 // 4337\n      var bitmask = data[1],                                                                                           // 4338\n          srcBitmask = source[1],                                                                                      // 4339\n          newBitmask = bitmask | srcBitmask,                                                                           // 4340\n          isCommon = newBitmask < ARY_FLAG;                                                                            // 4341\n                                                                                                                       // 4342\n      var isCombo =                                                                                                    // 4343\n        (srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG) ||                                                           // 4344\n        (srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8]) ||                            // 4345\n        (srcBitmask == (ARY_FLAG | REARG_FLAG) && bitmask == CURRY_FLAG);                                              // 4346\n                                                                                                                       // 4347\n      // Exit early if metadata can't be merged.                                                                       // 4348\n      if (!(isCommon || isCombo)) {                                                                                    // 4349\n        return data;                                                                                                   // 4350\n      }                                                                                                                // 4351\n      // Use source `thisArg` if available.                                                                            // 4352\n      if (srcBitmask & BIND_FLAG) {                                                                                    // 4353\n        data[2] = source[2];                                                                                           // 4354\n        // Set when currying a bound function.                                                                         // 4355\n        newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;                                                    // 4356\n      }                                                                                                                // 4357\n      // Compose partial arguments.                                                                                    // 4358\n      var value = source[3];                                                                                           // 4359\n      if (value) {                                                                                                     // 4360\n        var partials = data[3];                                                                                        // 4361\n        data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);                               // 4362\n        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);                              // 4363\n      }                                                                                                                // 4364\n      // Compose partial right arguments.                                                                              // 4365\n      value = source[5];                                                                                               // 4366\n      if (value) {                                                                                                     // 4367\n        partials = data[5];                                                                                            // 4368\n        data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);                          // 4369\n        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);                              // 4370\n      }                                                                                                                // 4371\n      // Use source `argPos` if available.                                                                             // 4372\n      value = source[7];                                                                                               // 4373\n      if (value) {                                                                                                     // 4374\n        data[7] = arrayCopy(value);                                                                                    // 4375\n      }                                                                                                                // 4376\n      // Use source `ary` if it's smaller.                                                                             // 4377\n      if (srcBitmask & ARY_FLAG) {                                                                                     // 4378\n        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);                                         // 4379\n      }                                                                                                                // 4380\n      // Use source `arity` if one is not provided.                                                                    // 4381\n      if (data[9] == null) {                                                                                           // 4382\n        data[9] = source[9];                                                                                           // 4383\n      }                                                                                                                // 4384\n      // Use source `func` and merge bitmasks.                                                                         // 4385\n      data[0] = source[0];                                                                                             // 4386\n      data[1] = newBitmask;                                                                                            // 4387\n                                                                                                                       // 4388\n      return data;                                                                                                     // 4389\n    }                                                                                                                  // 4390\n                                                                                                                       // 4391\n    /**                                                                                                                // 4392\n     * Used by `_.defaultsDeep` to customize its `_.merge` use.                                                        // 4393\n     *                                                                                                                 // 4394\n     * @private                                                                                                        // 4395\n     * @param {*} objectValue The destination object property value.                                                   // 4396\n     * @param {*} sourceValue The source object property value.                                                        // 4397\n     * @returns {*} Returns the value to assign to the destination object.                                             // 4398\n     */                                                                                                                // 4399\n    function mergeDefaults(objectValue, sourceValue) {                                                                 // 4400\n      return objectValue === undefined ? sourceValue : merge(objectValue, sourceValue, mergeDefaults);                 // 4401\n    }                                                                                                                  // 4402\n                                                                                                                       // 4403\n    /**                                                                                                                // 4404\n     * A specialized version of `_.pick` which picks `object` properties specified                                     // 4405\n     * by `props`.                                                                                                     // 4406\n     *                                                                                                                 // 4407\n     * @private                                                                                                        // 4408\n     * @param {Object} object The source object.                                                                       // 4409\n     * @param {string[]} props The property names to pick.                                                             // 4410\n     * @returns {Object} Returns the new object.                                                                       // 4411\n     */                                                                                                                // 4412\n    function pickByArray(object, props) {                                                                              // 4413\n      object = toObject(object);                                                                                       // 4414\n                                                                                                                       // 4415\n      var index = -1,                                                                                                  // 4416\n          length = props.length,                                                                                       // 4417\n          result = {};                                                                                                 // 4418\n                                                                                                                       // 4419\n      while (++index < length) {                                                                                       // 4420\n        var key = props[index];                                                                                        // 4421\n        if (key in object) {                                                                                           // 4422\n          result[key] = object[key];                                                                                   // 4423\n        }                                                                                                              // 4424\n      }                                                                                                                // 4425\n      return result;                                                                                                   // 4426\n    }                                                                                                                  // 4427\n                                                                                                                       // 4428\n    /**                                                                                                                // 4429\n     * A specialized version of `_.pick` which picks `object` properties `predicate`                                   // 4430\n     * returns truthy for.                                                                                             // 4431\n     *                                                                                                                 // 4432\n     * @private                                                                                                        // 4433\n     * @param {Object} object The source object.                                                                       // 4434\n     * @param {Function} predicate The function invoked per iteration.                                                 // 4435\n     * @returns {Object} Returns the new object.                                                                       // 4436\n     */                                                                                                                // 4437\n    function pickByCallback(object, predicate) {                                                                       // 4438\n      var result = {};                                                                                                 // 4439\n      baseForIn(object, function(value, key, object) {                                                                 // 4440\n        if (predicate(value, key, object)) {                                                                           // 4441\n          result[key] = value;                                                                                         // 4442\n        }                                                                                                              // 4443\n      });                                                                                                              // 4444\n      return result;                                                                                                   // 4445\n    }                                                                                                                  // 4446\n                                                                                                                       // 4447\n    /**                                                                                                                // 4448\n     * Reorder `array` according to the specified indexes where the element at                                         // 4449\n     * the first index is assigned as the first element, the element at                                                // 4450\n     * the second index is assigned as the second element, and so on.                                                  // 4451\n     *                                                                                                                 // 4452\n     * @private                                                                                                        // 4453\n     * @param {Array} array The array to reorder.                                                                      // 4454\n     * @param {Array} indexes The arranged array indexes.                                                              // 4455\n     * @returns {Array} Returns `array`.                                                                               // 4456\n     */                                                                                                                // 4457\n    function reorder(array, indexes) {                                                                                 // 4458\n      var arrLength = array.length,                                                                                    // 4459\n          length = nativeMin(indexes.length, arrLength),                                                               // 4460\n          oldArray = arrayCopy(array);                                                                                 // 4461\n                                                                                                                       // 4462\n      while (length--) {                                                                                               // 4463\n        var index = indexes[length];                                                                                   // 4464\n        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;                                       // 4465\n      }                                                                                                                // 4466\n      return array;                                                                                                    // 4467\n    }                                                                                                                  // 4468\n                                                                                                                       // 4469\n    /**                                                                                                                // 4470\n     * Sets metadata for `func`.                                                                                       // 4471\n     *                                                                                                                 // 4472\n     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short                                        // 4473\n     * period of time, it will trip its breaker and transition to an identity function                                 // 4474\n     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)\n     * for more details.                                                                                               // 4476\n     *                                                                                                                 // 4477\n     * @private                                                                                                        // 4478\n     * @param {Function} func The function to associate metadata with.                                                 // 4479\n     * @param {*} data The metadata.                                                                                   // 4480\n     * @returns {Function} Returns `func`.                                                                             // 4481\n     */                                                                                                                // 4482\n    var setData = (function() {                                                                                        // 4483\n      var count = 0,                                                                                                   // 4484\n          lastCalled = 0;                                                                                              // 4485\n                                                                                                                       // 4486\n      return function(key, value) {                                                                                    // 4487\n        var stamp = now(),                                                                                             // 4488\n            remaining = HOT_SPAN - (stamp - lastCalled);                                                               // 4489\n                                                                                                                       // 4490\n        lastCalled = stamp;                                                                                            // 4491\n        if (remaining > 0) {                                                                                           // 4492\n          if (++count >= HOT_COUNT) {                                                                                  // 4493\n            return key;                                                                                                // 4494\n          }                                                                                                            // 4495\n        } else {                                                                                                       // 4496\n          count = 0;                                                                                                   // 4497\n        }                                                                                                              // 4498\n        return baseSetData(key, value);                                                                                // 4499\n      };                                                                                                               // 4500\n    }());                                                                                                              // 4501\n                                                                                                                       // 4502\n    /**                                                                                                                // 4503\n     * A fallback implementation of `Object.keys` which creates an array of the                                        // 4504\n     * own enumerable property names of `object`.                                                                      // 4505\n     *                                                                                                                 // 4506\n     * @private                                                                                                        // 4507\n     * @param {Object} object The object to query.                                                                     // 4508\n     * @returns {Array} Returns the array of property names.                                                           // 4509\n     */                                                                                                                // 4510\n    function shimKeys(object) {                                                                                        // 4511\n      var props = keysIn(object),                                                                                      // 4512\n          propsLength = props.length,                                                                                  // 4513\n          length = propsLength && object.length;                                                                       // 4514\n                                                                                                                       // 4515\n      var allowIndexes = !!length && isLength(length) &&                                                               // 4516\n        (isArray(object) || isArguments(object) || isString(object));                                                  // 4517\n                                                                                                                       // 4518\n      var index = -1,                                                                                                  // 4519\n          result = [];                                                                                                 // 4520\n                                                                                                                       // 4521\n      while (++index < propsLength) {                                                                                  // 4522\n        var key = props[index];                                                                                        // 4523\n        if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {                              // 4524\n          result.push(key);                                                                                            // 4525\n        }                                                                                                              // 4526\n      }                                                                                                                // 4527\n      return result;                                                                                                   // 4528\n    }                                                                                                                  // 4529\n                                                                                                                       // 4530\n    /**                                                                                                                // 4531\n     * Converts `value` to an array-like object if it's not one.                                                       // 4532\n     *                                                                                                                 // 4533\n     * @private                                                                                                        // 4534\n     * @param {*} value The value to process.                                                                          // 4535\n     * @returns {Array|Object} Returns the array-like object.                                                          // 4536\n     */                                                                                                                // 4537\n    function toIterable(value) {                                                                                       // 4538\n      if (value == null) {                                                                                             // 4539\n        return [];                                                                                                     // 4540\n      }                                                                                                                // 4541\n      if (!isArrayLike(value)) {                                                                                       // 4542\n        return values(value);                                                                                          // 4543\n      }                                                                                                                // 4544\n      if (lodash.support.unindexedChars && isString(value)) {                                                          // 4545\n        return value.split('');                                                                                        // 4546\n      }                                                                                                                // 4547\n      return isObject(value) ? value : Object(value);                                                                  // 4548\n    }                                                                                                                  // 4549\n                                                                                                                       // 4550\n    /**                                                                                                                // 4551\n     * Converts `value` to an object if it's not one.                                                                  // 4552\n     *                                                                                                                 // 4553\n     * @private                                                                                                        // 4554\n     * @param {*} value The value to process.                                                                          // 4555\n     * @returns {Object} Returns the object.                                                                           // 4556\n     */                                                                                                                // 4557\n    function toObject(value) {                                                                                         // 4558\n      if (lodash.support.unindexedChars && isString(value)) {                                                          // 4559\n        var index = -1,                                                                                                // 4560\n            length = value.length,                                                                                     // 4561\n            result = Object(value);                                                                                    // 4562\n                                                                                                                       // 4563\n        while (++index < length) {                                                                                     // 4564\n          result[index] = value.charAt(index);                                                                         // 4565\n        }                                                                                                              // 4566\n        return result;                                                                                                 // 4567\n      }                                                                                                                // 4568\n      return isObject(value) ? value : Object(value);                                                                  // 4569\n    }                                                                                                                  // 4570\n                                                                                                                       // 4571\n    /**                                                                                                                // 4572\n     * Converts `value` to property path array if it's not one.                                                        // 4573\n     *                                                                                                                 // 4574\n     * @private                                                                                                        // 4575\n     * @param {*} value The value to process.                                                                          // 4576\n     * @returns {Array} Returns the property path array.                                                               // 4577\n     */                                                                                                                // 4578\n    function toPath(value) {                                                                                           // 4579\n      if (isArray(value)) {                                                                                            // 4580\n        return value;                                                                                                  // 4581\n      }                                                                                                                // 4582\n      var result = [];                                                                                                 // 4583\n      baseToString(value).replace(rePropName, function(match, number, quote, string) {                                 // 4584\n        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));                                   // 4585\n      });                                                                                                              // 4586\n      return result;                                                                                                   // 4587\n    }                                                                                                                  // 4588\n                                                                                                                       // 4589\n    /**                                                                                                                // 4590\n     * Creates a clone of `wrapper`.                                                                                   // 4591\n     *                                                                                                                 // 4592\n     * @private                                                                                                        // 4593\n     * @param {Object} wrapper The wrapper to clone.                                                                   // 4594\n     * @returns {Object} Returns the cloned wrapper.                                                                   // 4595\n     */                                                                                                                // 4596\n    function wrapperClone(wrapper) {                                                                                   // 4597\n      return wrapper instanceof LazyWrapper                                                                            // 4598\n        ? wrapper.clone()                                                                                              // 4599\n        : new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__, arrayCopy(wrapper.__actions__));                   // 4600\n    }                                                                                                                  // 4601\n                                                                                                                       // 4602\n    /*------------------------------------------------------------------------*/                                       // 4603\n                                                                                                                       // 4604\n    /**                                                                                                                // 4605\n     * Creates an array of elements split into groups the length of `size`.                                            // 4606\n     * If `collection` can't be split evenly, the final chunk will be the remaining                                    // 4607\n     * elements.                                                                                                       // 4608\n     *                                                                                                                 // 4609\n     * @static                                                                                                         // 4610\n     * @memberOf _                                                                                                     // 4611\n     * @category Array                                                                                                 // 4612\n     * @param {Array} array The array to process.                                                                      // 4613\n     * @param {number} [size=1] The length of each chunk.                                                              // 4614\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 4615\n     * @returns {Array} Returns the new array containing chunks.                                                       // 4616\n     * @example                                                                                                        // 4617\n     *                                                                                                                 // 4618\n     * _.chunk(['a', 'b', 'c', 'd'], 2);                                                                               // 4619\n     * // => [['a', 'b'], ['c', 'd']]                                                                                  // 4620\n     *                                                                                                                 // 4621\n     * _.chunk(['a', 'b', 'c', 'd'], 3);                                                                               // 4622\n     * // => [['a', 'b', 'c'], ['d']]                                                                                  // 4623\n     */                                                                                                                // 4624\n    function chunk(array, size, guard) {                                                                               // 4625\n      if (guard ? isIterateeCall(array, size, guard) : size == null) {                                                 // 4626\n        size = 1;                                                                                                      // 4627\n      } else {                                                                                                         // 4628\n        size = nativeMax(nativeFloor(size) || 1, 1);                                                                   // 4629\n      }                                                                                                                // 4630\n      var index = 0,                                                                                                   // 4631\n          length = array ? array.length : 0,                                                                           // 4632\n          resIndex = -1,                                                                                               // 4633\n          result = Array(nativeCeil(length / size));                                                                   // 4634\n                                                                                                                       // 4635\n      while (index < length) {                                                                                         // 4636\n        result[++resIndex] = baseSlice(array, index, (index += size));                                                 // 4637\n      }                                                                                                                // 4638\n      return result;                                                                                                   // 4639\n    }                                                                                                                  // 4640\n                                                                                                                       // 4641\n    /**                                                                                                                // 4642\n     * Creates an array with all falsey values removed. The values `false`, `null`,                                    // 4643\n     * `0`, `\"\"`, `undefined`, and `NaN` are falsey.                                                                   // 4644\n     *                                                                                                                 // 4645\n     * @static                                                                                                         // 4646\n     * @memberOf _                                                                                                     // 4647\n     * @category Array                                                                                                 // 4648\n     * @param {Array} array The array to compact.                                                                      // 4649\n     * @returns {Array} Returns the new array of filtered values.                                                      // 4650\n     * @example                                                                                                        // 4651\n     *                                                                                                                 // 4652\n     * _.compact([0, 1, false, 2, '', 3]);                                                                             // 4653\n     * // => [1, 2, 3]                                                                                                 // 4654\n     */                                                                                                                // 4655\n    function compact(array) {                                                                                          // 4656\n      var index = -1,                                                                                                  // 4657\n          length = array ? array.length : 0,                                                                           // 4658\n          resIndex = -1,                                                                                               // 4659\n          result = [];                                                                                                 // 4660\n                                                                                                                       // 4661\n      while (++index < length) {                                                                                       // 4662\n        var value = array[index];                                                                                      // 4663\n        if (value) {                                                                                                   // 4664\n          result[++resIndex] = value;                                                                                  // 4665\n        }                                                                                                              // 4666\n      }                                                                                                                // 4667\n      return result;                                                                                                   // 4668\n    }                                                                                                                  // 4669\n                                                                                                                       // 4670\n    /**                                                                                                                // 4671\n     * Creates an array of unique `array` values not included in the other                                             // 4672\n     * provided arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)          // 4673\n     * for equality comparisons.                                                                                       // 4674\n     *                                                                                                                 // 4675\n     * @static                                                                                                         // 4676\n     * @memberOf _                                                                                                     // 4677\n     * @category Array                                                                                                 // 4678\n     * @param {Array} array The array to inspect.                                                                      // 4679\n     * @param {...Array} [values] The arrays of values to exclude.                                                     // 4680\n     * @returns {Array} Returns the new array of filtered values.                                                      // 4681\n     * @example                                                                                                        // 4682\n     *                                                                                                                 // 4683\n     * _.difference([1, 2, 3], [4, 2]);                                                                                // 4684\n     * // => [1, 3]                                                                                                    // 4685\n     */                                                                                                                // 4686\n    var difference = restParam(function(array, values) {                                                               // 4687\n      return (isObjectLike(array) && isArrayLike(array))                                                               // 4688\n        ? baseDifference(array, baseFlatten(values, false, true))                                                      // 4689\n        : [];                                                                                                          // 4690\n    });                                                                                                                // 4691\n                                                                                                                       // 4692\n    /**                                                                                                                // 4693\n     * Creates a slice of `array` with `n` elements dropped from the beginning.                                        // 4694\n     *                                                                                                                 // 4695\n     * @static                                                                                                         // 4696\n     * @memberOf _                                                                                                     // 4697\n     * @category Array                                                                                                 // 4698\n     * @param {Array} array The array to query.                                                                        // 4699\n     * @param {number} [n=1] The number of elements to drop.                                                           // 4700\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 4701\n     * @returns {Array} Returns the slice of `array`.                                                                  // 4702\n     * @example                                                                                                        // 4703\n     *                                                                                                                 // 4704\n     * _.drop([1, 2, 3]);                                                                                              // 4705\n     * // => [2, 3]                                                                                                    // 4706\n     *                                                                                                                 // 4707\n     * _.drop([1, 2, 3], 2);                                                                                           // 4708\n     * // => [3]                                                                                                       // 4709\n     *                                                                                                                 // 4710\n     * _.drop([1, 2, 3], 5);                                                                                           // 4711\n     * // => []                                                                                                        // 4712\n     *                                                                                                                 // 4713\n     * _.drop([1, 2, 3], 0);                                                                                           // 4714\n     * // => [1, 2, 3]                                                                                                 // 4715\n     */                                                                                                                // 4716\n    function drop(array, n, guard) {                                                                                   // 4717\n      var length = array ? array.length : 0;                                                                           // 4718\n      if (!length) {                                                                                                   // 4719\n        return [];                                                                                                     // 4720\n      }                                                                                                                // 4721\n      if (guard ? isIterateeCall(array, n, guard) : n == null) {                                                       // 4722\n        n = 1;                                                                                                         // 4723\n      }                                                                                                                // 4724\n      return baseSlice(array, n < 0 ? 0 : n);                                                                          // 4725\n    }                                                                                                                  // 4726\n                                                                                                                       // 4727\n    /**                                                                                                                // 4728\n     * Creates a slice of `array` with `n` elements dropped from the end.                                              // 4729\n     *                                                                                                                 // 4730\n     * @static                                                                                                         // 4731\n     * @memberOf _                                                                                                     // 4732\n     * @category Array                                                                                                 // 4733\n     * @param {Array} array The array to query.                                                                        // 4734\n     * @param {number} [n=1] The number of elements to drop.                                                           // 4735\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 4736\n     * @returns {Array} Returns the slice of `array`.                                                                  // 4737\n     * @example                                                                                                        // 4738\n     *                                                                                                                 // 4739\n     * _.dropRight([1, 2, 3]);                                                                                         // 4740\n     * // => [1, 2]                                                                                                    // 4741\n     *                                                                                                                 // 4742\n     * _.dropRight([1, 2, 3], 2);                                                                                      // 4743\n     * // => [1]                                                                                                       // 4744\n     *                                                                                                                 // 4745\n     * _.dropRight([1, 2, 3], 5);                                                                                      // 4746\n     * // => []                                                                                                        // 4747\n     *                                                                                                                 // 4748\n     * _.dropRight([1, 2, 3], 0);                                                                                      // 4749\n     * // => [1, 2, 3]                                                                                                 // 4750\n     */                                                                                                                // 4751\n    function dropRight(array, n, guard) {                                                                              // 4752\n      var length = array ? array.length : 0;                                                                           // 4753\n      if (!length) {                                                                                                   // 4754\n        return [];                                                                                                     // 4755\n      }                                                                                                                // 4756\n      if (guard ? isIterateeCall(array, n, guard) : n == null) {                                                       // 4757\n        n = 1;                                                                                                         // 4758\n      }                                                                                                                // 4759\n      n = length - (+n || 0);                                                                                          // 4760\n      return baseSlice(array, 0, n < 0 ? 0 : n);                                                                       // 4761\n    }                                                                                                                  // 4762\n                                                                                                                       // 4763\n    /**                                                                                                                // 4764\n     * Creates a slice of `array` excluding elements dropped from the end.                                             // 4765\n     * Elements are dropped until `predicate` returns falsey. The predicate is                                         // 4766\n     * bound to `thisArg` and invoked with three arguments: (value, index, array).                                     // 4767\n     *                                                                                                                 // 4768\n     * If a property name is provided for `predicate` the created `_.property`                                         // 4769\n     * style callback returns the property value of the given element.                                                 // 4770\n     *                                                                                                                 // 4771\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 4772\n     * style callback returns `true` for elements that have a matching property                                        // 4773\n     * value, else `false`.                                                                                            // 4774\n     *                                                                                                                 // 4775\n     * If an object is provided for `predicate` the created `_.matches` style                                          // 4776\n     * callback returns `true` for elements that match the properties of the given                                     // 4777\n     * object, else `false`.                                                                                           // 4778\n     *                                                                                                                 // 4779\n     * @static                                                                                                         // 4780\n     * @memberOf _                                                                                                     // 4781\n     * @category Array                                                                                                 // 4782\n     * @param {Array} array The array to query.                                                                        // 4783\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 4784\n     *  per iteration.                                                                                                 // 4785\n     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 4786\n     * @returns {Array} Returns the slice of `array`.                                                                  // 4787\n     * @example                                                                                                        // 4788\n     *                                                                                                                 // 4789\n     * _.dropRightWhile([1, 2, 3], function(n) {                                                                       // 4790\n     *   return n > 1;                                                                                                 // 4791\n     * });                                                                                                             // 4792\n     * // => [1]                                                                                                       // 4793\n     *                                                                                                                 // 4794\n     * var users = [                                                                                                   // 4795\n     *   { 'user': 'barney',  'active': true },                                                                        // 4796\n     *   { 'user': 'fred',    'active': false },                                                                       // 4797\n     *   { 'user': 'pebbles', 'active': false }                                                                        // 4798\n     * ];                                                                                                              // 4799\n     *                                                                                                                 // 4800\n     * // using the `_.matches` callback shorthand                                                                     // 4801\n     * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');                               // 4802\n     * // => ['barney', 'fred']                                                                                        // 4803\n     *                                                                                                                 // 4804\n     * // using the `_.matchesProperty` callback shorthand                                                             // 4805\n     * _.pluck(_.dropRightWhile(users, 'active', false), 'user');                                                      // 4806\n     * // => ['barney']                                                                                                // 4807\n     *                                                                                                                 // 4808\n     * // using the `_.property` callback shorthand                                                                    // 4809\n     * _.pluck(_.dropRightWhile(users, 'active'), 'user');                                                             // 4810\n     * // => ['barney', 'fred', 'pebbles']                                                                             // 4811\n     */                                                                                                                // 4812\n    function dropRightWhile(array, predicate, thisArg) {                                                               // 4813\n      return (array && array.length)                                                                                   // 4814\n        ? baseWhile(array, getCallback(predicate, thisArg, 3), true, true)                                             // 4815\n        : [];                                                                                                          // 4816\n    }                                                                                                                  // 4817\n                                                                                                                       // 4818\n    /**                                                                                                                // 4819\n     * Creates a slice of `array` excluding elements dropped from the beginning.                                       // 4820\n     * Elements are dropped until `predicate` returns falsey. The predicate is                                         // 4821\n     * bound to `thisArg` and invoked with three arguments: (value, index, array).                                     // 4822\n     *                                                                                                                 // 4823\n     * If a property name is provided for `predicate` the created `_.property`                                         // 4824\n     * style callback returns the property value of the given element.                                                 // 4825\n     *                                                                                                                 // 4826\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 4827\n     * style callback returns `true` for elements that have a matching property                                        // 4828\n     * value, else `false`.                                                                                            // 4829\n     *                                                                                                                 // 4830\n     * If an object is provided for `predicate` the created `_.matches` style                                          // 4831\n     * callback returns `true` for elements that have the properties of the given                                      // 4832\n     * object, else `false`.                                                                                           // 4833\n     *                                                                                                                 // 4834\n     * @static                                                                                                         // 4835\n     * @memberOf _                                                                                                     // 4836\n     * @category Array                                                                                                 // 4837\n     * @param {Array} array The array to query.                                                                        // 4838\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 4839\n     *  per iteration.                                                                                                 // 4840\n     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 4841\n     * @returns {Array} Returns the slice of `array`.                                                                  // 4842\n     * @example                                                                                                        // 4843\n     *                                                                                                                 // 4844\n     * _.dropWhile([1, 2, 3], function(n) {                                                                            // 4845\n     *   return n < 3;                                                                                                 // 4846\n     * });                                                                                                             // 4847\n     * // => [3]                                                                                                       // 4848\n     *                                                                                                                 // 4849\n     * var users = [                                                                                                   // 4850\n     *   { 'user': 'barney',  'active': false },                                                                       // 4851\n     *   { 'user': 'fred',    'active': false },                                                                       // 4852\n     *   { 'user': 'pebbles', 'active': true }                                                                         // 4853\n     * ];                                                                                                              // 4854\n     *                                                                                                                 // 4855\n     * // using the `_.matches` callback shorthand                                                                     // 4856\n     * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');                                     // 4857\n     * // => ['fred', 'pebbles']                                                                                       // 4858\n     *                                                                                                                 // 4859\n     * // using the `_.matchesProperty` callback shorthand                                                             // 4860\n     * _.pluck(_.dropWhile(users, 'active', false), 'user');                                                           // 4861\n     * // => ['pebbles']                                                                                               // 4862\n     *                                                                                                                 // 4863\n     * // using the `_.property` callback shorthand                                                                    // 4864\n     * _.pluck(_.dropWhile(users, 'active'), 'user');                                                                  // 4865\n     * // => ['barney', 'fred', 'pebbles']                                                                             // 4866\n     */                                                                                                                // 4867\n    function dropWhile(array, predicate, thisArg) {                                                                    // 4868\n      return (array && array.length)                                                                                   // 4869\n        ? baseWhile(array, getCallback(predicate, thisArg, 3), true)                                                   // 4870\n        : [];                                                                                                          // 4871\n    }                                                                                                                  // 4872\n                                                                                                                       // 4873\n    /**                                                                                                                // 4874\n     * Fills elements of `array` with `value` from `start` up to, but not                                              // 4875\n     * including, `end`.                                                                                               // 4876\n     *                                                                                                                 // 4877\n     * **Note:** This method mutates `array`.                                                                          // 4878\n     *                                                                                                                 // 4879\n     * @static                                                                                                         // 4880\n     * @memberOf _                                                                                                     // 4881\n     * @category Array                                                                                                 // 4882\n     * @param {Array} array The array to fill.                                                                         // 4883\n     * @param {*} value The value to fill `array` with.                                                                // 4884\n     * @param {number} [start=0] The start position.                                                                   // 4885\n     * @param {number} [end=array.length] The end position.                                                            // 4886\n     * @returns {Array} Returns `array`.                                                                               // 4887\n     * @example                                                                                                        // 4888\n     *                                                                                                                 // 4889\n     * var array = [1, 2, 3];                                                                                          // 4890\n     *                                                                                                                 // 4891\n     * _.fill(array, 'a');                                                                                             // 4892\n     * console.log(array);                                                                                             // 4893\n     * // => ['a', 'a', 'a']                                                                                           // 4894\n     *                                                                                                                 // 4895\n     * _.fill(Array(3), 2);                                                                                            // 4896\n     * // => [2, 2, 2]                                                                                                 // 4897\n     *                                                                                                                 // 4898\n     * _.fill([4, 6, 8], '*', 1, 2);                                                                                   // 4899\n     * // => [4, '*', 8]                                                                                               // 4900\n     */                                                                                                                // 4901\n    function fill(array, value, start, end) {                                                                          // 4902\n      var length = array ? array.length : 0;                                                                           // 4903\n      if (!length) {                                                                                                   // 4904\n        return [];                                                                                                     // 4905\n      }                                                                                                                // 4906\n      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {                                  // 4907\n        start = 0;                                                                                                     // 4908\n        end = length;                                                                                                  // 4909\n      }                                                                                                                // 4910\n      return baseFill(array, value, start, end);                                                                       // 4911\n    }                                                                                                                  // 4912\n                                                                                                                       // 4913\n    /**                                                                                                                // 4914\n     * This method is like `_.find` except that it returns the index of the first                                      // 4915\n     * element `predicate` returns truthy for instead of the element itself.                                           // 4916\n     *                                                                                                                 // 4917\n     * If a property name is provided for `predicate` the created `_.property`                                         // 4918\n     * style callback returns the property value of the given element.                                                 // 4919\n     *                                                                                                                 // 4920\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 4921\n     * style callback returns `true` for elements that have a matching property                                        // 4922\n     * value, else `false`.                                                                                            // 4923\n     *                                                                                                                 // 4924\n     * If an object is provided for `predicate` the created `_.matches` style                                          // 4925\n     * callback returns `true` for elements that have the properties of the given                                      // 4926\n     * object, else `false`.                                                                                           // 4927\n     *                                                                                                                 // 4928\n     * @static                                                                                                         // 4929\n     * @memberOf _                                                                                                     // 4930\n     * @category Array                                                                                                 // 4931\n     * @param {Array} array The array to search.                                                                       // 4932\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 4933\n     *  per iteration.                                                                                                 // 4934\n     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 4935\n     * @returns {number} Returns the index of the found element, else `-1`.                                            // 4936\n     * @example                                                                                                        // 4937\n     *                                                                                                                 // 4938\n     * var users = [                                                                                                   // 4939\n     *   { 'user': 'barney',  'active': false },                                                                       // 4940\n     *   { 'user': 'fred',    'active': false },                                                                       // 4941\n     *   { 'user': 'pebbles', 'active': true }                                                                         // 4942\n     * ];                                                                                                              // 4943\n     *                                                                                                                 // 4944\n     * _.findIndex(users, function(chr) {                                                                              // 4945\n     *   return chr.user == 'barney';                                                                                  // 4946\n     * });                                                                                                             // 4947\n     * // => 0                                                                                                         // 4948\n     *                                                                                                                 // 4949\n     * // using the `_.matches` callback shorthand                                                                     // 4950\n     * _.findIndex(users, { 'user': 'fred', 'active': false });                                                        // 4951\n     * // => 1                                                                                                         // 4952\n     *                                                                                                                 // 4953\n     * // using the `_.matchesProperty` callback shorthand                                                             // 4954\n     * _.findIndex(users, 'active', false);                                                                            // 4955\n     * // => 0                                                                                                         // 4956\n     *                                                                                                                 // 4957\n     * // using the `_.property` callback shorthand                                                                    // 4958\n     * _.findIndex(users, 'active');                                                                                   // 4959\n     * // => 2                                                                                                         // 4960\n     */                                                                                                                // 4961\n    var findIndex = createFindIndex();                                                                                 // 4962\n                                                                                                                       // 4963\n    /**                                                                                                                // 4964\n     * This method is like `_.findIndex` except that it iterates over elements                                         // 4965\n     * of `collection` from right to left.                                                                             // 4966\n     *                                                                                                                 // 4967\n     * If a property name is provided for `predicate` the created `_.property`                                         // 4968\n     * style callback returns the property value of the given element.                                                 // 4969\n     *                                                                                                                 // 4970\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 4971\n     * style callback returns `true` for elements that have a matching property                                        // 4972\n     * value, else `false`.                                                                                            // 4973\n     *                                                                                                                 // 4974\n     * If an object is provided for `predicate` the created `_.matches` style                                          // 4975\n     * callback returns `true` for elements that have the properties of the given                                      // 4976\n     * object, else `false`.                                                                                           // 4977\n     *                                                                                                                 // 4978\n     * @static                                                                                                         // 4979\n     * @memberOf _                                                                                                     // 4980\n     * @category Array                                                                                                 // 4981\n     * @param {Array} array The array to search.                                                                       // 4982\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 4983\n     *  per iteration.                                                                                                 // 4984\n     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 4985\n     * @returns {number} Returns the index of the found element, else `-1`.                                            // 4986\n     * @example                                                                                                        // 4987\n     *                                                                                                                 // 4988\n     * var users = [                                                                                                   // 4989\n     *   { 'user': 'barney',  'active': true },                                                                        // 4990\n     *   { 'user': 'fred',    'active': false },                                                                       // 4991\n     *   { 'user': 'pebbles', 'active': false }                                                                        // 4992\n     * ];                                                                                                              // 4993\n     *                                                                                                                 // 4994\n     * _.findLastIndex(users, function(chr) {                                                                          // 4995\n     *   return chr.user == 'pebbles';                                                                                 // 4996\n     * });                                                                                                             // 4997\n     * // => 2                                                                                                         // 4998\n     *                                                                                                                 // 4999\n     * // using the `_.matches` callback shorthand                                                                     // 5000\n     * _.findLastIndex(users, { 'user': 'barney', 'active': true });                                                   // 5001\n     * // => 0                                                                                                         // 5002\n     *                                                                                                                 // 5003\n     * // using the `_.matchesProperty` callback shorthand                                                             // 5004\n     * _.findLastIndex(users, 'active', false);                                                                        // 5005\n     * // => 2                                                                                                         // 5006\n     *                                                                                                                 // 5007\n     * // using the `_.property` callback shorthand                                                                    // 5008\n     * _.findLastIndex(users, 'active');                                                                               // 5009\n     * // => 0                                                                                                         // 5010\n     */                                                                                                                // 5011\n    var findLastIndex = createFindIndex(true);                                                                         // 5012\n                                                                                                                       // 5013\n    /**                                                                                                                // 5014\n     * Gets the first element of `array`.                                                                              // 5015\n     *                                                                                                                 // 5016\n     * @static                                                                                                         // 5017\n     * @memberOf _                                                                                                     // 5018\n     * @alias head                                                                                                     // 5019\n     * @category Array                                                                                                 // 5020\n     * @param {Array} array The array to query.                                                                        // 5021\n     * @returns {*} Returns the first element of `array`.                                                              // 5022\n     * @example                                                                                                        // 5023\n     *                                                                                                                 // 5024\n     * _.first([1, 2, 3]);                                                                                             // 5025\n     * // => 1                                                                                                         // 5026\n     *                                                                                                                 // 5027\n     * _.first([]);                                                                                                    // 5028\n     * // => undefined                                                                                                 // 5029\n     */                                                                                                                // 5030\n    function first(array) {                                                                                            // 5031\n      return array ? array[0] : undefined;                                                                             // 5032\n    }                                                                                                                  // 5033\n                                                                                                                       // 5034\n    /**                                                                                                                // 5035\n     * Flattens a nested array. If `isDeep` is `true` the array is recursively                                         // 5036\n     * flattened, otherwise it's only flattened a single level.                                                        // 5037\n     *                                                                                                                 // 5038\n     * @static                                                                                                         // 5039\n     * @memberOf _                                                                                                     // 5040\n     * @category Array                                                                                                 // 5041\n     * @param {Array} array The array to flatten.                                                                      // 5042\n     * @param {boolean} [isDeep] Specify a deep flatten.                                                               // 5043\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 5044\n     * @returns {Array} Returns the new flattened array.                                                               // 5045\n     * @example                                                                                                        // 5046\n     *                                                                                                                 // 5047\n     * _.flatten([1, [2, 3, [4]]]);                                                                                    // 5048\n     * // => [1, 2, 3, [4]]                                                                                            // 5049\n     *                                                                                                                 // 5050\n     * // using `isDeep`                                                                                               // 5051\n     * _.flatten([1, [2, 3, [4]]], true);                                                                              // 5052\n     * // => [1, 2, 3, 4]                                                                                              // 5053\n     */                                                                                                                // 5054\n    function flatten(array, isDeep, guard) {                                                                           // 5055\n      var length = array ? array.length : 0;                                                                           // 5056\n      if (guard && isIterateeCall(array, isDeep, guard)) {                                                             // 5057\n        isDeep = false;                                                                                                // 5058\n      }                                                                                                                // 5059\n      return length ? baseFlatten(array, isDeep) : [];                                                                 // 5060\n    }                                                                                                                  // 5061\n                                                                                                                       // 5062\n    /**                                                                                                                // 5063\n     * Recursively flattens a nested array.                                                                            // 5064\n     *                                                                                                                 // 5065\n     * @static                                                                                                         // 5066\n     * @memberOf _                                                                                                     // 5067\n     * @category Array                                                                                                 // 5068\n     * @param {Array} array The array to recursively flatten.                                                          // 5069\n     * @returns {Array} Returns the new flattened array.                                                               // 5070\n     * @example                                                                                                        // 5071\n     *                                                                                                                 // 5072\n     * _.flattenDeep([1, [2, 3, [4]]]);                                                                                // 5073\n     * // => [1, 2, 3, 4]                                                                                              // 5074\n     */                                                                                                                // 5075\n    function flattenDeep(array) {                                                                                      // 5076\n      var length = array ? array.length : 0;                                                                           // 5077\n      return length ? baseFlatten(array, true) : [];                                                                   // 5078\n    }                                                                                                                  // 5079\n                                                                                                                       // 5080\n    /**                                                                                                                // 5081\n     * Gets the index at which the first occurrence of `value` is found in `array`                                     // 5082\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                          // 5083\n     * for equality comparisons. If `fromIndex` is negative, it's used as the offset                                   // 5084\n     * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`                                  // 5085\n     * performs a faster binary search.                                                                                // 5086\n     *                                                                                                                 // 5087\n     * @static                                                                                                         // 5088\n     * @memberOf _                                                                                                     // 5089\n     * @category Array                                                                                                 // 5090\n     * @param {Array} array The array to search.                                                                       // 5091\n     * @param {*} value The value to search for.                                                                       // 5092\n     * @param {boolean|number} [fromIndex=0] The index to search from or `true`                                        // 5093\n     *  to perform a binary search on a sorted array.                                                                  // 5094\n     * @returns {number} Returns the index of the matched value, else `-1`.                                            // 5095\n     * @example                                                                                                        // 5096\n     *                                                                                                                 // 5097\n     * _.indexOf([1, 2, 1, 2], 2);                                                                                     // 5098\n     * // => 1                                                                                                         // 5099\n     *                                                                                                                 // 5100\n     * // using `fromIndex`                                                                                            // 5101\n     * _.indexOf([1, 2, 1, 2], 2, 2);                                                                                  // 5102\n     * // => 3                                                                                                         // 5103\n     *                                                                                                                 // 5104\n     * // performing a binary search                                                                                   // 5105\n     * _.indexOf([1, 1, 2, 2], 2, true);                                                                               // 5106\n     * // => 2                                                                                                         // 5107\n     */                                                                                                                // 5108\n    function indexOf(array, value, fromIndex) {                                                                        // 5109\n      var length = array ? array.length : 0;                                                                           // 5110\n      if (!length) {                                                                                                   // 5111\n        return -1;                                                                                                     // 5112\n      }                                                                                                                // 5113\n      if (typeof fromIndex == 'number') {                                                                              // 5114\n        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;                                      // 5115\n      } else if (fromIndex) {                                                                                          // 5116\n        var index = binaryIndex(array, value);                                                                         // 5117\n        if (index < length &&                                                                                          // 5118\n            (value === value ? (value === array[index]) : (array[index] !== array[index]))) {                          // 5119\n          return index;                                                                                                // 5120\n        }                                                                                                              // 5121\n        return -1;                                                                                                     // 5122\n      }                                                                                                                // 5123\n      return baseIndexOf(array, value, fromIndex || 0);                                                                // 5124\n    }                                                                                                                  // 5125\n                                                                                                                       // 5126\n    /**                                                                                                                // 5127\n     * Gets all but the last element of `array`.                                                                       // 5128\n     *                                                                                                                 // 5129\n     * @static                                                                                                         // 5130\n     * @memberOf _                                                                                                     // 5131\n     * @category Array                                                                                                 // 5132\n     * @param {Array} array The array to query.                                                                        // 5133\n     * @returns {Array} Returns the slice of `array`.                                                                  // 5134\n     * @example                                                                                                        // 5135\n     *                                                                                                                 // 5136\n     * _.initial([1, 2, 3]);                                                                                           // 5137\n     * // => [1, 2]                                                                                                    // 5138\n     */                                                                                                                // 5139\n    function initial(array) {                                                                                          // 5140\n      return dropRight(array, 1);                                                                                      // 5141\n    }                                                                                                                  // 5142\n                                                                                                                       // 5143\n    /**                                                                                                                // 5144\n     * Creates an array of unique values that are included in all of the provided                                      // 5145\n     * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                   // 5146\n     * for equality comparisons.                                                                                       // 5147\n     *                                                                                                                 // 5148\n     * @static                                                                                                         // 5149\n     * @memberOf _                                                                                                     // 5150\n     * @category Array                                                                                                 // 5151\n     * @param {...Array} [arrays] The arrays to inspect.                                                               // 5152\n     * @returns {Array} Returns the new array of shared values.                                                        // 5153\n     * @example                                                                                                        // 5154\n     * _.intersection([1, 2], [4, 2], [2, 1]);                                                                         // 5155\n     * // => [2]                                                                                                       // 5156\n     */                                                                                                                // 5157\n    var intersection = restParam(function(arrays) {                                                                    // 5158\n      var othLength = arrays.length,                                                                                   // 5159\n          othIndex = othLength,                                                                                        // 5160\n          caches = Array(length),                                                                                      // 5161\n          indexOf = getIndexOf(),                                                                                      // 5162\n          isCommon = indexOf === baseIndexOf,                                                                          // 5163\n          result = [];                                                                                                 // 5164\n                                                                                                                       // 5165\n      while (othIndex--) {                                                                                             // 5166\n        var value = arrays[othIndex] = isArrayLike(value = arrays[othIndex]) ? value : [];                             // 5167\n        caches[othIndex] = (isCommon && value.length >= 120) ? createCache(othIndex && value) : null;                  // 5168\n      }                                                                                                                // 5169\n      var array = arrays[0],                                                                                           // 5170\n          index = -1,                                                                                                  // 5171\n          length = array ? array.length : 0,                                                                           // 5172\n          seen = caches[0];                                                                                            // 5173\n                                                                                                                       // 5174\n      outer:                                                                                                           // 5175\n      while (++index < length) {                                                                                       // 5176\n        value = array[index];                                                                                          // 5177\n        if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value, 0)) < 0) {                                      // 5178\n          var othIndex = othLength;                                                                                    // 5179\n          while (--othIndex) {                                                                                         // 5180\n            var cache = caches[othIndex];                                                                              // 5181\n            if ((cache ? cacheIndexOf(cache, value) : indexOf(arrays[othIndex], value, 0)) < 0) {                      // 5182\n              continue outer;                                                                                          // 5183\n            }                                                                                                          // 5184\n          }                                                                                                            // 5185\n          if (seen) {                                                                                                  // 5186\n            seen.push(value);                                                                                          // 5187\n          }                                                                                                            // 5188\n          result.push(value);                                                                                          // 5189\n        }                                                                                                              // 5190\n      }                                                                                                                // 5191\n      return result;                                                                                                   // 5192\n    });                                                                                                                // 5193\n                                                                                                                       // 5194\n    /**                                                                                                                // 5195\n     * Gets the last element of `array`.                                                                               // 5196\n     *                                                                                                                 // 5197\n     * @static                                                                                                         // 5198\n     * @memberOf _                                                                                                     // 5199\n     * @category Array                                                                                                 // 5200\n     * @param {Array} array The array to query.                                                                        // 5201\n     * @returns {*} Returns the last element of `array`.                                                               // 5202\n     * @example                                                                                                        // 5203\n     *                                                                                                                 // 5204\n     * _.last([1, 2, 3]);                                                                                              // 5205\n     * // => 3                                                                                                         // 5206\n     */                                                                                                                // 5207\n    function last(array) {                                                                                             // 5208\n      var length = array ? array.length : 0;                                                                           // 5209\n      return length ? array[length - 1] : undefined;                                                                   // 5210\n    }                                                                                                                  // 5211\n                                                                                                                       // 5212\n    /**                                                                                                                // 5213\n     * This method is like `_.indexOf` except that it iterates over elements of                                        // 5214\n     * `array` from right to left.                                                                                     // 5215\n     *                                                                                                                 // 5216\n     * @static                                                                                                         // 5217\n     * @memberOf _                                                                                                     // 5218\n     * @category Array                                                                                                 // 5219\n     * @param {Array} array The array to search.                                                                       // 5220\n     * @param {*} value The value to search for.                                                                       // 5221\n     * @param {boolean|number} [fromIndex=array.length-1] The index to search from                                     // 5222\n     *  or `true` to perform a binary search on a sorted array.                                                        // 5223\n     * @returns {number} Returns the index of the matched value, else `-1`.                                            // 5224\n     * @example                                                                                                        // 5225\n     *                                                                                                                 // 5226\n     * _.lastIndexOf([1, 2, 1, 2], 2);                                                                                 // 5227\n     * // => 3                                                                                                         // 5228\n     *                                                                                                                 // 5229\n     * // using `fromIndex`                                                                                            // 5230\n     * _.lastIndexOf([1, 2, 1, 2], 2, 2);                                                                              // 5231\n     * // => 1                                                                                                         // 5232\n     *                                                                                                                 // 5233\n     * // performing a binary search                                                                                   // 5234\n     * _.lastIndexOf([1, 1, 2, 2], 2, true);                                                                           // 5235\n     * // => 3                                                                                                         // 5236\n     */                                                                                                                // 5237\n    function lastIndexOf(array, value, fromIndex) {                                                                    // 5238\n      var length = array ? array.length : 0;                                                                           // 5239\n      if (!length) {                                                                                                   // 5240\n        return -1;                                                                                                     // 5241\n      }                                                                                                                // 5242\n      var index = length;                                                                                              // 5243\n      if (typeof fromIndex == 'number') {                                                                              // 5244\n        index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;        // 5245\n      } else if (fromIndex) {                                                                                          // 5246\n        index = binaryIndex(array, value, true) - 1;                                                                   // 5247\n        var other = array[index];                                                                                      // 5248\n        if (value === value ? (value === other) : (other !== other)) {                                                 // 5249\n          return index;                                                                                                // 5250\n        }                                                                                                              // 5251\n        return -1;                                                                                                     // 5252\n      }                                                                                                                // 5253\n      if (value !== value) {                                                                                           // 5254\n        return indexOfNaN(array, index, true);                                                                         // 5255\n      }                                                                                                                // 5256\n      while (index--) {                                                                                                // 5257\n        if (array[index] === value) {                                                                                  // 5258\n          return index;                                                                                                // 5259\n        }                                                                                                              // 5260\n      }                                                                                                                // 5261\n      return -1;                                                                                                       // 5262\n    }                                                                                                                  // 5263\n                                                                                                                       // 5264\n    /**                                                                                                                // 5265\n     * Removes all provided values from `array` using                                                                  // 5266\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                                // 5267\n     * for equality comparisons.                                                                                       // 5268\n     *                                                                                                                 // 5269\n     * **Note:** Unlike `_.without`, this method mutates `array`.                                                      // 5270\n     *                                                                                                                 // 5271\n     * @static                                                                                                         // 5272\n     * @memberOf _                                                                                                     // 5273\n     * @category Array                                                                                                 // 5274\n     * @param {Array} array The array to modify.                                                                       // 5275\n     * @param {...*} [values] The values to remove.                                                                    // 5276\n     * @returns {Array} Returns `array`.                                                                               // 5277\n     * @example                                                                                                        // 5278\n     *                                                                                                                 // 5279\n     * var array = [1, 2, 3, 1, 2, 3];                                                                                 // 5280\n     *                                                                                                                 // 5281\n     * _.pull(array, 2, 3);                                                                                            // 5282\n     * console.log(array);                                                                                             // 5283\n     * // => [1, 1]                                                                                                    // 5284\n     */                                                                                                                // 5285\n    function pull() {                                                                                                  // 5286\n      var args = arguments,                                                                                            // 5287\n          array = args[0];                                                                                             // 5288\n                                                                                                                       // 5289\n      if (!(array && array.length)) {                                                                                  // 5290\n        return array;                                                                                                  // 5291\n      }                                                                                                                // 5292\n      var index = 0,                                                                                                   // 5293\n          indexOf = getIndexOf(),                                                                                      // 5294\n          length = args.length;                                                                                        // 5295\n                                                                                                                       // 5296\n      while (++index < length) {                                                                                       // 5297\n        var fromIndex = 0,                                                                                             // 5298\n            value = args[index];                                                                                       // 5299\n                                                                                                                       // 5300\n        while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {                                                  // 5301\n          splice.call(array, fromIndex, 1);                                                                            // 5302\n        }                                                                                                              // 5303\n      }                                                                                                                // 5304\n      return array;                                                                                                    // 5305\n    }                                                                                                                  // 5306\n                                                                                                                       // 5307\n    /**                                                                                                                // 5308\n     * Removes elements from `array` corresponding to the given indexes and returns                                    // 5309\n     * an array of the removed elements. Indexes may be specified as an array of                                       // 5310\n     * indexes or as individual arguments.                                                                             // 5311\n     *                                                                                                                 // 5312\n     * **Note:** Unlike `_.at`, this method mutates `array`.                                                           // 5313\n     *                                                                                                                 // 5314\n     * @static                                                                                                         // 5315\n     * @memberOf _                                                                                                     // 5316\n     * @category Array                                                                                                 // 5317\n     * @param {Array} array The array to modify.                                                                       // 5318\n     * @param {...(number|number[])} [indexes] The indexes of elements to remove,                                      // 5319\n     *  specified as individual indexes or arrays of indexes.                                                          // 5320\n     * @returns {Array} Returns the new array of removed elements.                                                     // 5321\n     * @example                                                                                                        // 5322\n     *                                                                                                                 // 5323\n     * var array = [5, 10, 15, 20];                                                                                    // 5324\n     * var evens = _.pullAt(array, 1, 3);                                                                              // 5325\n     *                                                                                                                 // 5326\n     * console.log(array);                                                                                             // 5327\n     * // => [5, 15]                                                                                                   // 5328\n     *                                                                                                                 // 5329\n     * console.log(evens);                                                                                             // 5330\n     * // => [10, 20]                                                                                                  // 5331\n     */                                                                                                                // 5332\n    var pullAt = restParam(function(array, indexes) {                                                                  // 5333\n      indexes = baseFlatten(indexes);                                                                                  // 5334\n                                                                                                                       // 5335\n      var result = baseAt(array, indexes);                                                                             // 5336\n      basePullAt(array, indexes.sort(baseCompareAscending));                                                           // 5337\n      return result;                                                                                                   // 5338\n    });                                                                                                                // 5339\n                                                                                                                       // 5340\n    /**                                                                                                                // 5341\n     * Removes all elements from `array` that `predicate` returns truthy for                                           // 5342\n     * and returns an array of the removed elements. The predicate is bound to                                         // 5343\n     * `thisArg` and invoked with three arguments: (value, index, array).                                              // 5344\n     *                                                                                                                 // 5345\n     * If a property name is provided for `predicate` the created `_.property`                                         // 5346\n     * style callback returns the property value of the given element.                                                 // 5347\n     *                                                                                                                 // 5348\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 5349\n     * style callback returns `true` for elements that have a matching property                                        // 5350\n     * value, else `false`.                                                                                            // 5351\n     *                                                                                                                 // 5352\n     * If an object is provided for `predicate` the created `_.matches` style                                          // 5353\n     * callback returns `true` for elements that have the properties of the given                                      // 5354\n     * object, else `false`.                                                                                           // 5355\n     *                                                                                                                 // 5356\n     * **Note:** Unlike `_.filter`, this method mutates `array`.                                                       // 5357\n     *                                                                                                                 // 5358\n     * @static                                                                                                         // 5359\n     * @memberOf _                                                                                                     // 5360\n     * @category Array                                                                                                 // 5361\n     * @param {Array} array The array to modify.                                                                       // 5362\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 5363\n     *  per iteration.                                                                                                 // 5364\n     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 5365\n     * @returns {Array} Returns the new array of removed elements.                                                     // 5366\n     * @example                                                                                                        // 5367\n     *                                                                                                                 // 5368\n     * var array = [1, 2, 3, 4];                                                                                       // 5369\n     * var evens = _.remove(array, function(n) {                                                                       // 5370\n     *   return n % 2 == 0;                                                                                            // 5371\n     * });                                                                                                             // 5372\n     *                                                                                                                 // 5373\n     * console.log(array);                                                                                             // 5374\n     * // => [1, 3]                                                                                                    // 5375\n     *                                                                                                                 // 5376\n     * console.log(evens);                                                                                             // 5377\n     * // => [2, 4]                                                                                                    // 5378\n     */                                                                                                                // 5379\n    function remove(array, predicate, thisArg) {                                                                       // 5380\n      var result = [];                                                                                                 // 5381\n      if (!(array && array.length)) {                                                                                  // 5382\n        return result;                                                                                                 // 5383\n      }                                                                                                                // 5384\n      var index = -1,                                                                                                  // 5385\n          indexes = [],                                                                                                // 5386\n          length = array.length;                                                                                       // 5387\n                                                                                                                       // 5388\n      predicate = getCallback(predicate, thisArg, 3);                                                                  // 5389\n      while (++index < length) {                                                                                       // 5390\n        var value = array[index];                                                                                      // 5391\n        if (predicate(value, index, array)) {                                                                          // 5392\n          result.push(value);                                                                                          // 5393\n          indexes.push(index);                                                                                         // 5394\n        }                                                                                                              // 5395\n      }                                                                                                                // 5396\n      basePullAt(array, indexes);                                                                                      // 5397\n      return result;                                                                                                   // 5398\n    }                                                                                                                  // 5399\n                                                                                                                       // 5400\n    /**                                                                                                                // 5401\n     * Gets all but the first element of `array`.                                                                      // 5402\n     *                                                                                                                 // 5403\n     * @static                                                                                                         // 5404\n     * @memberOf _                                                                                                     // 5405\n     * @alias tail                                                                                                     // 5406\n     * @category Array                                                                                                 // 5407\n     * @param {Array} array The array to query.                                                                        // 5408\n     * @returns {Array} Returns the slice of `array`.                                                                  // 5409\n     * @example                                                                                                        // 5410\n     *                                                                                                                 // 5411\n     * _.rest([1, 2, 3]);                                                                                              // 5412\n     * // => [2, 3]                                                                                                    // 5413\n     */                                                                                                                // 5414\n    function rest(array) {                                                                                             // 5415\n      return drop(array, 1);                                                                                           // 5416\n    }                                                                                                                  // 5417\n                                                                                                                       // 5418\n    /**                                                                                                                // 5419\n     * Creates a slice of `array` from `start` up to, but not including, `end`.                                        // 5420\n     *                                                                                                                 // 5421\n     * **Note:** This method is used instead of `Array#slice` to support node                                          // 5422\n     * lists in IE < 9 and to ensure dense arrays are returned.                                                        // 5423\n     *                                                                                                                 // 5424\n     * @static                                                                                                         // 5425\n     * @memberOf _                                                                                                     // 5426\n     * @category Array                                                                                                 // 5427\n     * @param {Array} array The array to slice.                                                                        // 5428\n     * @param {number} [start=0] The start position.                                                                   // 5429\n     * @param {number} [end=array.length] The end position.                                                            // 5430\n     * @returns {Array} Returns the slice of `array`.                                                                  // 5431\n     */                                                                                                                // 5432\n    function slice(array, start, end) {                                                                                // 5433\n      var length = array ? array.length : 0;                                                                           // 5434\n      if (!length) {                                                                                                   // 5435\n        return [];                                                                                                     // 5436\n      }                                                                                                                // 5437\n      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {                                        // 5438\n        start = 0;                                                                                                     // 5439\n        end = length;                                                                                                  // 5440\n      }                                                                                                                // 5441\n      return baseSlice(array, start, end);                                                                             // 5442\n    }                                                                                                                  // 5443\n                                                                                                                       // 5444\n    /**                                                                                                                // 5445\n     * Uses a binary search to determine the lowest index at which `value` should                                      // 5446\n     * be inserted into `array` in order to maintain its sort order. If an iteratee                                    // 5447\n     * function is provided it's invoked for `value` and each element of `array`                                       // 5448\n     * to compute their sort ranking. The iteratee is bound to `thisArg` and                                           // 5449\n     * invoked with one argument; (value).                                                                             // 5450\n     *                                                                                                                 // 5451\n     * If a property name is provided for `iteratee` the created `_.property`                                          // 5452\n     * style callback returns the property value of the given element.                                                 // 5453\n     *                                                                                                                 // 5454\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 5455\n     * style callback returns `true` for elements that have a matching property                                        // 5456\n     * value, else `false`.                                                                                            // 5457\n     *                                                                                                                 // 5458\n     * If an object is provided for `iteratee` the created `_.matches` style                                           // 5459\n     * callback returns `true` for elements that have the properties of the given                                      // 5460\n     * object, else `false`.                                                                                           // 5461\n     *                                                                                                                 // 5462\n     * @static                                                                                                         // 5463\n     * @memberOf _                                                                                                     // 5464\n     * @category Array                                                                                                 // 5465\n     * @param {Array} array The sorted array to inspect.                                                               // 5466\n     * @param {*} value The value to evaluate.                                                                         // 5467\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked                                      // 5468\n     *  per iteration.                                                                                                 // 5469\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 5470\n     * @returns {number} Returns the index at which `value` should be inserted                                         // 5471\n     *  into `array`.                                                                                                  // 5472\n     * @example                                                                                                        // 5473\n     *                                                                                                                 // 5474\n     * _.sortedIndex([30, 50], 40);                                                                                    // 5475\n     * // => 1                                                                                                         // 5476\n     *                                                                                                                 // 5477\n     * _.sortedIndex([4, 4, 5, 5], 5);                                                                                 // 5478\n     * // => 2                                                                                                         // 5479\n     *                                                                                                                 // 5480\n     * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };                                              // 5481\n     *                                                                                                                 // 5482\n     * // using an iteratee function                                                                                   // 5483\n     * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {                                                    // 5484\n     *   return this.data[word];                                                                                       // 5485\n     * }, dict);                                                                                                       // 5486\n     * // => 1                                                                                                         // 5487\n     *                                                                                                                 // 5488\n     * // using the `_.property` callback shorthand                                                                    // 5489\n     * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');                                                    // 5490\n     * // => 1                                                                                                         // 5491\n     */                                                                                                                // 5492\n    var sortedIndex = createSortedIndex();                                                                             // 5493\n                                                                                                                       // 5494\n    /**                                                                                                                // 5495\n     * This method is like `_.sortedIndex` except that it returns the highest                                          // 5496\n     * index at which `value` should be inserted into `array` in order to                                              // 5497\n     * maintain its sort order.                                                                                        // 5498\n     *                                                                                                                 // 5499\n     * @static                                                                                                         // 5500\n     * @memberOf _                                                                                                     // 5501\n     * @category Array                                                                                                 // 5502\n     * @param {Array} array The sorted array to inspect.                                                               // 5503\n     * @param {*} value The value to evaluate.                                                                         // 5504\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked                                      // 5505\n     *  per iteration.                                                                                                 // 5506\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 5507\n     * @returns {number} Returns the index at which `value` should be inserted                                         // 5508\n     *  into `array`.                                                                                                  // 5509\n     * @example                                                                                                        // 5510\n     *                                                                                                                 // 5511\n     * _.sortedLastIndex([4, 4, 5, 5], 5);                                                                             // 5512\n     * // => 4                                                                                                         // 5513\n     */                                                                                                                // 5514\n    var sortedLastIndex = createSortedIndex(true);                                                                     // 5515\n                                                                                                                       // 5516\n    /**                                                                                                                // 5517\n     * Creates a slice of `array` with `n` elements taken from the beginning.                                          // 5518\n     *                                                                                                                 // 5519\n     * @static                                                                                                         // 5520\n     * @memberOf _                                                                                                     // 5521\n     * @category Array                                                                                                 // 5522\n     * @param {Array} array The array to query.                                                                        // 5523\n     * @param {number} [n=1] The number of elements to take.                                                           // 5524\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 5525\n     * @returns {Array} Returns the slice of `array`.                                                                  // 5526\n     * @example                                                                                                        // 5527\n     *                                                                                                                 // 5528\n     * _.take([1, 2, 3]);                                                                                              // 5529\n     * // => [1]                                                                                                       // 5530\n     *                                                                                                                 // 5531\n     * _.take([1, 2, 3], 2);                                                                                           // 5532\n     * // => [1, 2]                                                                                                    // 5533\n     *                                                                                                                 // 5534\n     * _.take([1, 2, 3], 5);                                                                                           // 5535\n     * // => [1, 2, 3]                                                                                                 // 5536\n     *                                                                                                                 // 5537\n     * _.take([1, 2, 3], 0);                                                                                           // 5538\n     * // => []                                                                                                        // 5539\n     */                                                                                                                // 5540\n    function take(array, n, guard) {                                                                                   // 5541\n      var length = array ? array.length : 0;                                                                           // 5542\n      if (!length) {                                                                                                   // 5543\n        return [];                                                                                                     // 5544\n      }                                                                                                                // 5545\n      if (guard ? isIterateeCall(array, n, guard) : n == null) {                                                       // 5546\n        n = 1;                                                                                                         // 5547\n      }                                                                                                                // 5548\n      return baseSlice(array, 0, n < 0 ? 0 : n);                                                                       // 5549\n    }                                                                                                                  // 5550\n                                                                                                                       // 5551\n    /**                                                                                                                // 5552\n     * Creates a slice of `array` with `n` elements taken from the end.                                                // 5553\n     *                                                                                                                 // 5554\n     * @static                                                                                                         // 5555\n     * @memberOf _                                                                                                     // 5556\n     * @category Array                                                                                                 // 5557\n     * @param {Array} array The array to query.                                                                        // 5558\n     * @param {number} [n=1] The number of elements to take.                                                           // 5559\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 5560\n     * @returns {Array} Returns the slice of `array`.                                                                  // 5561\n     * @example                                                                                                        // 5562\n     *                                                                                                                 // 5563\n     * _.takeRight([1, 2, 3]);                                                                                         // 5564\n     * // => [3]                                                                                                       // 5565\n     *                                                                                                                 // 5566\n     * _.takeRight([1, 2, 3], 2);                                                                                      // 5567\n     * // => [2, 3]                                                                                                    // 5568\n     *                                                                                                                 // 5569\n     * _.takeRight([1, 2, 3], 5);                                                                                      // 5570\n     * // => [1, 2, 3]                                                                                                 // 5571\n     *                                                                                                                 // 5572\n     * _.takeRight([1, 2, 3], 0);                                                                                      // 5573\n     * // => []                                                                                                        // 5574\n     */                                                                                                                // 5575\n    function takeRight(array, n, guard) {                                                                              // 5576\n      var length = array ? array.length : 0;                                                                           // 5577\n      if (!length) {                                                                                                   // 5578\n        return [];                                                                                                     // 5579\n      }                                                                                                                // 5580\n      if (guard ? isIterateeCall(array, n, guard) : n == null) {                                                       // 5581\n        n = 1;                                                                                                         // 5582\n      }                                                                                                                // 5583\n      n = length - (+n || 0);                                                                                          // 5584\n      return baseSlice(array, n < 0 ? 0 : n);                                                                          // 5585\n    }                                                                                                                  // 5586\n                                                                                                                       // 5587\n    /**                                                                                                                // 5588\n     * Creates a slice of `array` with elements taken from the end. Elements are                                       // 5589\n     * taken until `predicate` returns falsey. The predicate is bound to `thisArg`                                     // 5590\n     * and invoked with three arguments: (value, index, array).                                                        // 5591\n     *                                                                                                                 // 5592\n     * If a property name is provided for `predicate` the created `_.property`                                         // 5593\n     * style callback returns the property value of the given element.                                                 // 5594\n     *                                                                                                                 // 5595\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 5596\n     * style callback returns `true` for elements that have a matching property                                        // 5597\n     * value, else `false`.                                                                                            // 5598\n     *                                                                                                                 // 5599\n     * If an object is provided for `predicate` the created `_.matches` style                                          // 5600\n     * callback returns `true` for elements that have the properties of the given                                      // 5601\n     * object, else `false`.                                                                                           // 5602\n     *                                                                                                                 // 5603\n     * @static                                                                                                         // 5604\n     * @memberOf _                                                                                                     // 5605\n     * @category Array                                                                                                 // 5606\n     * @param {Array} array The array to query.                                                                        // 5607\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 5608\n     *  per iteration.                                                                                                 // 5609\n     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 5610\n     * @returns {Array} Returns the slice of `array`.                                                                  // 5611\n     * @example                                                                                                        // 5612\n     *                                                                                                                 // 5613\n     * _.takeRightWhile([1, 2, 3], function(n) {                                                                       // 5614\n     *   return n > 1;                                                                                                 // 5615\n     * });                                                                                                             // 5616\n     * // => [2, 3]                                                                                                    // 5617\n     *                                                                                                                 // 5618\n     * var users = [                                                                                                   // 5619\n     *   { 'user': 'barney',  'active': true },                                                                        // 5620\n     *   { 'user': 'fred',    'active': false },                                                                       // 5621\n     *   { 'user': 'pebbles', 'active': false }                                                                        // 5622\n     * ];                                                                                                              // 5623\n     *                                                                                                                 // 5624\n     * // using the `_.matches` callback shorthand                                                                     // 5625\n     * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');                               // 5626\n     * // => ['pebbles']                                                                                               // 5627\n     *                                                                                                                 // 5628\n     * // using the `_.matchesProperty` callback shorthand                                                             // 5629\n     * _.pluck(_.takeRightWhile(users, 'active', false), 'user');                                                      // 5630\n     * // => ['fred', 'pebbles']                                                                                       // 5631\n     *                                                                                                                 // 5632\n     * // using the `_.property` callback shorthand                                                                    // 5633\n     * _.pluck(_.takeRightWhile(users, 'active'), 'user');                                                             // 5634\n     * // => []                                                                                                        // 5635\n     */                                                                                                                // 5636\n    function takeRightWhile(array, predicate, thisArg) {                                                               // 5637\n      return (array && array.length)                                                                                   // 5638\n        ? baseWhile(array, getCallback(predicate, thisArg, 3), false, true)                                            // 5639\n        : [];                                                                                                          // 5640\n    }                                                                                                                  // 5641\n                                                                                                                       // 5642\n    /**                                                                                                                // 5643\n     * Creates a slice of `array` with elements taken from the beginning. Elements                                     // 5644\n     * are taken until `predicate` returns falsey. The predicate is bound to                                           // 5645\n     * `thisArg` and invoked with three arguments: (value, index, array).                                              // 5646\n     *                                                                                                                 // 5647\n     * If a property name is provided for `predicate` the created `_.property`                                         // 5648\n     * style callback returns the property value of the given element.                                                 // 5649\n     *                                                                                                                 // 5650\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 5651\n     * style callback returns `true` for elements that have a matching property                                        // 5652\n     * value, else `false`.                                                                                            // 5653\n     *                                                                                                                 // 5654\n     * If an object is provided for `predicate` the created `_.matches` style                                          // 5655\n     * callback returns `true` for elements that have the properties of the given                                      // 5656\n     * object, else `false`.                                                                                           // 5657\n     *                                                                                                                 // 5658\n     * @static                                                                                                         // 5659\n     * @memberOf _                                                                                                     // 5660\n     * @category Array                                                                                                 // 5661\n     * @param {Array} array The array to query.                                                                        // 5662\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 5663\n     *  per iteration.                                                                                                 // 5664\n     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 5665\n     * @returns {Array} Returns the slice of `array`.                                                                  // 5666\n     * @example                                                                                                        // 5667\n     *                                                                                                                 // 5668\n     * _.takeWhile([1, 2, 3], function(n) {                                                                            // 5669\n     *   return n < 3;                                                                                                 // 5670\n     * });                                                                                                             // 5671\n     * // => [1, 2]                                                                                                    // 5672\n     *                                                                                                                 // 5673\n     * var users = [                                                                                                   // 5674\n     *   { 'user': 'barney',  'active': false },                                                                       // 5675\n     *   { 'user': 'fred',    'active': false},                                                                        // 5676\n     *   { 'user': 'pebbles', 'active': true }                                                                         // 5677\n     * ];                                                                                                              // 5678\n     *                                                                                                                 // 5679\n     * // using the `_.matches` callback shorthand                                                                     // 5680\n     * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');                                     // 5681\n     * // => ['barney']                                                                                                // 5682\n     *                                                                                                                 // 5683\n     * // using the `_.matchesProperty` callback shorthand                                                             // 5684\n     * _.pluck(_.takeWhile(users, 'active', false), 'user');                                                           // 5685\n     * // => ['barney', 'fred']                                                                                        // 5686\n     *                                                                                                                 // 5687\n     * // using the `_.property` callback shorthand                                                                    // 5688\n     * _.pluck(_.takeWhile(users, 'active'), 'user');                                                                  // 5689\n     * // => []                                                                                                        // 5690\n     */                                                                                                                // 5691\n    function takeWhile(array, predicate, thisArg) {                                                                    // 5692\n      return (array && array.length)                                                                                   // 5693\n        ? baseWhile(array, getCallback(predicate, thisArg, 3))                                                         // 5694\n        : [];                                                                                                          // 5695\n    }                                                                                                                  // 5696\n                                                                                                                       // 5697\n    /**                                                                                                                // 5698\n     * Creates an array of unique values, in order, from all of the provided arrays                                    // 5699\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                          // 5700\n     * for equality comparisons.                                                                                       // 5701\n     *                                                                                                                 // 5702\n     * @static                                                                                                         // 5703\n     * @memberOf _                                                                                                     // 5704\n     * @category Array                                                                                                 // 5705\n     * @param {...Array} [arrays] The arrays to inspect.                                                               // 5706\n     * @returns {Array} Returns the new array of combined values.                                                      // 5707\n     * @example                                                                                                        // 5708\n     *                                                                                                                 // 5709\n     * _.union([1, 2], [4, 2], [2, 1]);                                                                                // 5710\n     * // => [1, 2, 4]                                                                                                 // 5711\n     */                                                                                                                // 5712\n    var union = restParam(function(arrays) {                                                                           // 5713\n      return baseUniq(baseFlatten(arrays, false, true));                                                               // 5714\n    });                                                                                                                // 5715\n                                                                                                                       // 5716\n    /**                                                                                                                // 5717\n     * Creates a duplicate-free version of an array, using                                                             // 5718\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                                // 5719\n     * for equality comparisons, in which only the first occurence of each element                                     // 5720\n     * is kept. Providing `true` for `isSorted` performs a faster search algorithm                                     // 5721\n     * for sorted arrays. If an iteratee function is provided it's invoked for                                         // 5722\n     * each element in the array to generate the criterion by which uniqueness                                         // 5723\n     * is computed. The `iteratee` is bound to `thisArg` and invoked with three                                        // 5724\n     * arguments: (value, index, array).                                                                               // 5725\n     *                                                                                                                 // 5726\n     * If a property name is provided for `iteratee` the created `_.property`                                          // 5727\n     * style callback returns the property value of the given element.                                                 // 5728\n     *                                                                                                                 // 5729\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 5730\n     * style callback returns `true` for elements that have a matching property                                        // 5731\n     * value, else `false`.                                                                                            // 5732\n     *                                                                                                                 // 5733\n     * If an object is provided for `iteratee` the created `_.matches` style                                           // 5734\n     * callback returns `true` for elements that have the properties of the given                                      // 5735\n     * object, else `false`.                                                                                           // 5736\n     *                                                                                                                 // 5737\n     * @static                                                                                                         // 5738\n     * @memberOf _                                                                                                     // 5739\n     * @alias unique                                                                                                   // 5740\n     * @category Array                                                                                                 // 5741\n     * @param {Array} array The array to inspect.                                                                      // 5742\n     * @param {boolean} [isSorted] Specify the array is sorted.                                                        // 5743\n     * @param {Function|Object|string} [iteratee] The function invoked per iteration.                                  // 5744\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 5745\n     * @returns {Array} Returns the new duplicate-value-free array.                                                    // 5746\n     * @example                                                                                                        // 5747\n     *                                                                                                                 // 5748\n     * _.uniq([2, 1, 2]);                                                                                              // 5749\n     * // => [2, 1]                                                                                                    // 5750\n     *                                                                                                                 // 5751\n     * // using `isSorted`                                                                                             // 5752\n     * _.uniq([1, 1, 2], true);                                                                                        // 5753\n     * // => [1, 2]                                                                                                    // 5754\n     *                                                                                                                 // 5755\n     * // using an iteratee function                                                                                   // 5756\n     * _.uniq([1, 2.5, 1.5, 2], function(n) {                                                                          // 5757\n     *   return this.floor(n);                                                                                         // 5758\n     * }, Math);                                                                                                       // 5759\n     * // => [1, 2.5]                                                                                                  // 5760\n     *                                                                                                                 // 5761\n     * // using the `_.property` callback shorthand                                                                    // 5762\n     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');                                                              // 5763\n     * // => [{ 'x': 1 }, { 'x': 2 }]                                                                                  // 5764\n     */                                                                                                                // 5765\n    function uniq(array, isSorted, iteratee, thisArg) {                                                                // 5766\n      var length = array ? array.length : 0;                                                                           // 5767\n      if (!length) {                                                                                                   // 5768\n        return [];                                                                                                     // 5769\n      }                                                                                                                // 5770\n      if (isSorted != null && typeof isSorted != 'boolean') {                                                          // 5771\n        thisArg = iteratee;                                                                                            // 5772\n        iteratee = isIterateeCall(array, isSorted, thisArg) ? undefined : isSorted;                                    // 5773\n        isSorted = false;                                                                                              // 5774\n      }                                                                                                                // 5775\n      var callback = getCallback();                                                                                    // 5776\n      if (!(iteratee == null && callback === baseCallback)) {                                                          // 5777\n        iteratee = callback(iteratee, thisArg, 3);                                                                     // 5778\n      }                                                                                                                // 5779\n      return (isSorted && getIndexOf() === baseIndexOf)                                                                // 5780\n        ? sortedUniq(array, iteratee)                                                                                  // 5781\n        : baseUniq(array, iteratee);                                                                                   // 5782\n    }                                                                                                                  // 5783\n                                                                                                                       // 5784\n    /**                                                                                                                // 5785\n     * This method is like `_.zip` except that it accepts an array of grouped                                          // 5786\n     * elements and creates an array regrouping the elements to their pre-zip                                          // 5787\n     * configuration.                                                                                                  // 5788\n     *                                                                                                                 // 5789\n     * @static                                                                                                         // 5790\n     * @memberOf _                                                                                                     // 5791\n     * @category Array                                                                                                 // 5792\n     * @param {Array} array The array of grouped elements to process.                                                  // 5793\n     * @returns {Array} Returns the new array of regrouped elements.                                                   // 5794\n     * @example                                                                                                        // 5795\n     *                                                                                                                 // 5796\n     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);                                                // 5797\n     * // => [['fred', 30, true], ['barney', 40, false]]                                                               // 5798\n     *                                                                                                                 // 5799\n     * _.unzip(zipped);                                                                                                // 5800\n     * // => [['fred', 'barney'], [30, 40], [true, false]]                                                             // 5801\n     */                                                                                                                // 5802\n    function unzip(array) {                                                                                            // 5803\n      if (!(array && array.length)) {                                                                                  // 5804\n        return [];                                                                                                     // 5805\n      }                                                                                                                // 5806\n      var index = -1,                                                                                                  // 5807\n          length = 0;                                                                                                  // 5808\n                                                                                                                       // 5809\n      array = arrayFilter(array, function(group) {                                                                     // 5810\n        if (isArrayLike(group)) {                                                                                      // 5811\n          length = nativeMax(group.length, length);                                                                    // 5812\n          return true;                                                                                                 // 5813\n        }                                                                                                              // 5814\n      });                                                                                                              // 5815\n      var result = Array(length);                                                                                      // 5816\n      while (++index < length) {                                                                                       // 5817\n        result[index] = arrayMap(array, baseProperty(index));                                                          // 5818\n      }                                                                                                                // 5819\n      return result;                                                                                                   // 5820\n    }                                                                                                                  // 5821\n                                                                                                                       // 5822\n    /**                                                                                                                // 5823\n     * This method is like `_.unzip` except that it accepts an iteratee to specify                                     // 5824\n     * how regrouped values should be combined. The `iteratee` is bound to `thisArg`                                   // 5825\n     * and invoked with four arguments: (accumulator, value, index, group).                                            // 5826\n     *                                                                                                                 // 5827\n     * @static                                                                                                         // 5828\n     * @memberOf _                                                                                                     // 5829\n     * @category Array                                                                                                 // 5830\n     * @param {Array} array The array of grouped elements to process.                                                  // 5831\n     * @param {Function} [iteratee] The function to combine regrouped values.                                          // 5832\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 5833\n     * @returns {Array} Returns the new array of regrouped elements.                                                   // 5834\n     * @example                                                                                                        // 5835\n     *                                                                                                                 // 5836\n     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);                                                               // 5837\n     * // => [[1, 10, 100], [2, 20, 200]]                                                                              // 5838\n     *                                                                                                                 // 5839\n     * _.unzipWith(zipped, _.add);                                                                                     // 5840\n     * // => [3, 30, 300]                                                                                              // 5841\n     */                                                                                                                // 5842\n    function unzipWith(array, iteratee, thisArg) {                                                                     // 5843\n      var length = array ? array.length : 0;                                                                           // 5844\n      if (!length) {                                                                                                   // 5845\n        return [];                                                                                                     // 5846\n      }                                                                                                                // 5847\n      var result = unzip(array);                                                                                       // 5848\n      if (iteratee == null) {                                                                                          // 5849\n        return result;                                                                                                 // 5850\n      }                                                                                                                // 5851\n      iteratee = bindCallback(iteratee, thisArg, 4);                                                                   // 5852\n      return arrayMap(result, function(group) {                                                                        // 5853\n        return arrayReduce(group, iteratee, undefined, true);                                                          // 5854\n      });                                                                                                              // 5855\n    }                                                                                                                  // 5856\n                                                                                                                       // 5857\n    /**                                                                                                                // 5858\n     * Creates an array excluding all provided values using                                                            // 5859\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                                // 5860\n     * for equality comparisons.                                                                                       // 5861\n     *                                                                                                                 // 5862\n     * @static                                                                                                         // 5863\n     * @memberOf _                                                                                                     // 5864\n     * @category Array                                                                                                 // 5865\n     * @param {Array} array The array to filter.                                                                       // 5866\n     * @param {...*} [values] The values to exclude.                                                                   // 5867\n     * @returns {Array} Returns the new array of filtered values.                                                      // 5868\n     * @example                                                                                                        // 5869\n     *                                                                                                                 // 5870\n     * _.without([1, 2, 1, 3], 1, 2);                                                                                  // 5871\n     * // => [3]                                                                                                       // 5872\n     */                                                                                                                // 5873\n    var without = restParam(function(array, values) {                                                                  // 5874\n      return isArrayLike(array)                                                                                        // 5875\n        ? baseDifference(array, values)                                                                                // 5876\n        : [];                                                                                                          // 5877\n    });                                                                                                                // 5878\n                                                                                                                       // 5879\n    /**                                                                                                                // 5880\n     * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\n     * of the provided arrays.                                                                                         // 5882\n     *                                                                                                                 // 5883\n     * @static                                                                                                         // 5884\n     * @memberOf _                                                                                                     // 5885\n     * @category Array                                                                                                 // 5886\n     * @param {...Array} [arrays] The arrays to inspect.                                                               // 5887\n     * @returns {Array} Returns the new array of values.                                                               // 5888\n     * @example                                                                                                        // 5889\n     *                                                                                                                 // 5890\n     * _.xor([1, 2], [4, 2]);                                                                                          // 5891\n     * // => [1, 4]                                                                                                    // 5892\n     */                                                                                                                // 5893\n    function xor() {                                                                                                   // 5894\n      var index = -1,                                                                                                  // 5895\n          length = arguments.length;                                                                                   // 5896\n                                                                                                                       // 5897\n      while (++index < length) {                                                                                       // 5898\n        var array = arguments[index];                                                                                  // 5899\n        if (isArrayLike(array)) {                                                                                      // 5900\n          var result = result                                                                                          // 5901\n            ? arrayPush(baseDifference(result, array), baseDifference(array, result))                                  // 5902\n            : array;                                                                                                   // 5903\n        }                                                                                                              // 5904\n      }                                                                                                                // 5905\n      return result ? baseUniq(result) : [];                                                                           // 5906\n    }                                                                                                                  // 5907\n                                                                                                                       // 5908\n    /**                                                                                                                // 5909\n     * Creates an array of grouped elements, the first of which contains the first                                     // 5910\n     * elements of the given arrays, the second of which contains the second elements                                  // 5911\n     * of the given arrays, and so on.                                                                                 // 5912\n     *                                                                                                                 // 5913\n     * @static                                                                                                         // 5914\n     * @memberOf _                                                                                                     // 5915\n     * @category Array                                                                                                 // 5916\n     * @param {...Array} [arrays] The arrays to process.                                                               // 5917\n     * @returns {Array} Returns the new array of grouped elements.                                                     // 5918\n     * @example                                                                                                        // 5919\n     *                                                                                                                 // 5920\n     * _.zip(['fred', 'barney'], [30, 40], [true, false]);                                                             // 5921\n     * // => [['fred', 30, true], ['barney', 40, false]]                                                               // 5922\n     */                                                                                                                // 5923\n    var zip = restParam(unzip);                                                                                        // 5924\n                                                                                                                       // 5925\n    /**                                                                                                                // 5926\n     * The inverse of `_.pairs`; this method returns an object composed from arrays                                    // 5927\n     * of property names and values. Provide either a single two dimensional array,                                    // 5928\n     * e.g. `[[key1, value1], [key2, value2]]` or two arrays, one of property names                                    // 5929\n     * and one of corresponding values.                                                                                // 5930\n     *                                                                                                                 // 5931\n     * @static                                                                                                         // 5932\n     * @memberOf _                                                                                                     // 5933\n     * @alias object                                                                                                   // 5934\n     * @category Array                                                                                                 // 5935\n     * @param {Array} props The property names.                                                                        // 5936\n     * @param {Array} [values=[]] The property values.                                                                 // 5937\n     * @returns {Object} Returns the new object.                                                                       // 5938\n     * @example                                                                                                        // 5939\n     *                                                                                                                 // 5940\n     * _.zipObject([['fred', 30], ['barney', 40]]);                                                                    // 5941\n     * // => { 'fred': 30, 'barney': 40 }                                                                              // 5942\n     *                                                                                                                 // 5943\n     * _.zipObject(['fred', 'barney'], [30, 40]);                                                                      // 5944\n     * // => { 'fred': 30, 'barney': 40 }                                                                              // 5945\n     */                                                                                                                // 5946\n    function zipObject(props, values) {                                                                                // 5947\n      var index = -1,                                                                                                  // 5948\n          length = props ? props.length : 0,                                                                           // 5949\n          result = {};                                                                                                 // 5950\n                                                                                                                       // 5951\n      if (length && !values && !isArray(props[0])) {                                                                   // 5952\n        values = [];                                                                                                   // 5953\n      }                                                                                                                // 5954\n      while (++index < length) {                                                                                       // 5955\n        var key = props[index];                                                                                        // 5956\n        if (values) {                                                                                                  // 5957\n          result[key] = values[index];                                                                                 // 5958\n        } else if (key) {                                                                                              // 5959\n          result[key[0]] = key[1];                                                                                     // 5960\n        }                                                                                                              // 5961\n      }                                                                                                                // 5962\n      return result;                                                                                                   // 5963\n    }                                                                                                                  // 5964\n                                                                                                                       // 5965\n    /**                                                                                                                // 5966\n     * This method is like `_.zip` except that it accepts an iteratee to specify                                       // 5967\n     * how grouped values should be combined. The `iteratee` is bound to `thisArg`                                     // 5968\n     * and invoked with four arguments: (accumulator, value, index, group).                                            // 5969\n     *                                                                                                                 // 5970\n     * @static                                                                                                         // 5971\n     * @memberOf _                                                                                                     // 5972\n     * @category Array                                                                                                 // 5973\n     * @param {...Array} [arrays] The arrays to process.                                                               // 5974\n     * @param {Function} [iteratee] The function to combine grouped values.                                            // 5975\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 5976\n     * @returns {Array} Returns the new array of grouped elements.                                                     // 5977\n     * @example                                                                                                        // 5978\n     *                                                                                                                 // 5979\n     * _.zipWith([1, 2], [10, 20], [100, 200], _.add);                                                                 // 5980\n     * // => [111, 222]                                                                                                // 5981\n     */                                                                                                                // 5982\n    var zipWith = restParam(function(arrays) {                                                                         // 5983\n      var length = arrays.length,                                                                                      // 5984\n          iteratee = length > 2 ? arrays[length - 2] : undefined,                                                      // 5985\n          thisArg = length > 1 ? arrays[length - 1] : undefined;                                                       // 5986\n                                                                                                                       // 5987\n      if (length > 2 && typeof iteratee == 'function') {                                                               // 5988\n        length -= 2;                                                                                                   // 5989\n      } else {                                                                                                         // 5990\n        iteratee = (length > 1 && typeof thisArg == 'function') ? (--length, thisArg) : undefined;                     // 5991\n        thisArg = undefined;                                                                                           // 5992\n      }                                                                                                                // 5993\n      arrays.length = length;                                                                                          // 5994\n      return unzipWith(arrays, iteratee, thisArg);                                                                     // 5995\n    });                                                                                                                // 5996\n                                                                                                                       // 5997\n    /*------------------------------------------------------------------------*/                                       // 5998\n                                                                                                                       // 5999\n    /**                                                                                                                // 6000\n     * Creates a `lodash` object that wraps `value` with explicit method                                               // 6001\n     * chaining enabled.                                                                                               // 6002\n     *                                                                                                                 // 6003\n     * @static                                                                                                         // 6004\n     * @memberOf _                                                                                                     // 6005\n     * @category Chain                                                                                                 // 6006\n     * @param {*} value The value to wrap.                                                                             // 6007\n     * @returns {Object} Returns the new `lodash` wrapper instance.                                                    // 6008\n     * @example                                                                                                        // 6009\n     *                                                                                                                 // 6010\n     * var users = [                                                                                                   // 6011\n     *   { 'user': 'barney',  'age': 36 },                                                                             // 6012\n     *   { 'user': 'fred',    'age': 40 },                                                                             // 6013\n     *   { 'user': 'pebbles', 'age': 1 }                                                                               // 6014\n     * ];                                                                                                              // 6015\n     *                                                                                                                 // 6016\n     * var youngest = _.chain(users)                                                                                   // 6017\n     *   .sortBy('age')                                                                                                // 6018\n     *   .map(function(chr) {                                                                                          // 6019\n     *     return chr.user + ' is ' + chr.age;                                                                         // 6020\n     *   })                                                                                                            // 6021\n     *   .first()                                                                                                      // 6022\n     *   .value();                                                                                                     // 6023\n     * // => 'pebbles is 1'                                                                                            // 6024\n     */                                                                                                                // 6025\n    function chain(value) {                                                                                            // 6026\n      var result = lodash(value);                                                                                      // 6027\n      result.__chain__ = true;                                                                                         // 6028\n      return result;                                                                                                   // 6029\n    }                                                                                                                  // 6030\n                                                                                                                       // 6031\n    /**                                                                                                                // 6032\n     * This method invokes `interceptor` and returns `value`. The interceptor is                                       // 6033\n     * bound to `thisArg` and invoked with one argument; (value). The purpose of                                       // 6034\n     * this method is to \"tap into\" a method chain in order to perform operations                                      // 6035\n     * on intermediate results within the chain.                                                                       // 6036\n     *                                                                                                                 // 6037\n     * @static                                                                                                         // 6038\n     * @memberOf _                                                                                                     // 6039\n     * @category Chain                                                                                                 // 6040\n     * @param {*} value The value to provide to `interceptor`.                                                         // 6041\n     * @param {Function} interceptor The function to invoke.                                                           // 6042\n     * @param {*} [thisArg] The `this` binding of `interceptor`.                                                       // 6043\n     * @returns {*} Returns `value`.                                                                                   // 6044\n     * @example                                                                                                        // 6045\n     *                                                                                                                 // 6046\n     * _([1, 2, 3])                                                                                                    // 6047\n     *  .tap(function(array) {                                                                                         // 6048\n     *    array.pop();                                                                                                 // 6049\n     *  })                                                                                                             // 6050\n     *  .reverse()                                                                                                     // 6051\n     *  .value();                                                                                                      // 6052\n     * // => [2, 1]                                                                                                    // 6053\n     */                                                                                                                // 6054\n    function tap(value, interceptor, thisArg) {                                                                        // 6055\n      interceptor.call(thisArg, value);                                                                                // 6056\n      return value;                                                                                                    // 6057\n    }                                                                                                                  // 6058\n                                                                                                                       // 6059\n    /**                                                                                                                // 6060\n     * This method is like `_.tap` except that it returns the result of `interceptor`.                                 // 6061\n     *                                                                                                                 // 6062\n     * @static                                                                                                         // 6063\n     * @memberOf _                                                                                                     // 6064\n     * @category Chain                                                                                                 // 6065\n     * @param {*} value The value to provide to `interceptor`.                                                         // 6066\n     * @param {Function} interceptor The function to invoke.                                                           // 6067\n     * @param {*} [thisArg] The `this` binding of `interceptor`.                                                       // 6068\n     * @returns {*} Returns the result of `interceptor`.                                                               // 6069\n     * @example                                                                                                        // 6070\n     *                                                                                                                 // 6071\n     * _('  abc  ')                                                                                                    // 6072\n     *  .chain()                                                                                                       // 6073\n     *  .trim()                                                                                                        // 6074\n     *  .thru(function(value) {                                                                                        // 6075\n     *    return [value];                                                                                              // 6076\n     *  })                                                                                                             // 6077\n     *  .value();                                                                                                      // 6078\n     * // => ['abc']                                                                                                   // 6079\n     */                                                                                                                // 6080\n    function thru(value, interceptor, thisArg) {                                                                       // 6081\n      return interceptor.call(thisArg, value);                                                                         // 6082\n    }                                                                                                                  // 6083\n                                                                                                                       // 6084\n    /**                                                                                                                // 6085\n     * Enables explicit method chaining on the wrapper object.                                                         // 6086\n     *                                                                                                                 // 6087\n     * @name chain                                                                                                     // 6088\n     * @memberOf _                                                                                                     // 6089\n     * @category Chain                                                                                                 // 6090\n     * @returns {Object} Returns the new `lodash` wrapper instance.                                                    // 6091\n     * @example                                                                                                        // 6092\n     *                                                                                                                 // 6093\n     * var users = [                                                                                                   // 6094\n     *   { 'user': 'barney', 'age': 36 },                                                                              // 6095\n     *   { 'user': 'fred',   'age': 40 }                                                                               // 6096\n     * ];                                                                                                              // 6097\n     *                                                                                                                 // 6098\n     * // without explicit chaining                                                                                    // 6099\n     * _(users).first();                                                                                               // 6100\n     * // => { 'user': 'barney', 'age': 36 }                                                                           // 6101\n     *                                                                                                                 // 6102\n     * // with explicit chaining                                                                                       // 6103\n     * _(users).chain()                                                                                                // 6104\n     *   .first()                                                                                                      // 6105\n     *   .pick('user')                                                                                                 // 6106\n     *   .value();                                                                                                     // 6107\n     * // => { 'user': 'barney' }                                                                                      // 6108\n     */                                                                                                                // 6109\n    function wrapperChain() {                                                                                          // 6110\n      return chain(this);                                                                                              // 6111\n    }                                                                                                                  // 6112\n                                                                                                                       // 6113\n    /**                                                                                                                // 6114\n     * Executes the chained sequence and returns the wrapped result.                                                   // 6115\n     *                                                                                                                 // 6116\n     * @name commit                                                                                                    // 6117\n     * @memberOf _                                                                                                     // 6118\n     * @category Chain                                                                                                 // 6119\n     * @returns {Object} Returns the new `lodash` wrapper instance.                                                    // 6120\n     * @example                                                                                                        // 6121\n     *                                                                                                                 // 6122\n     * var array = [1, 2];                                                                                             // 6123\n     * var wrapped = _(array).push(3);                                                                                 // 6124\n     *                                                                                                                 // 6125\n     * console.log(array);                                                                                             // 6126\n     * // => [1, 2]                                                                                                    // 6127\n     *                                                                                                                 // 6128\n     * wrapped = wrapped.commit();                                                                                     // 6129\n     * console.log(array);                                                                                             // 6130\n     * // => [1, 2, 3]                                                                                                 // 6131\n     *                                                                                                                 // 6132\n     * wrapped.last();                                                                                                 // 6133\n     * // => 3                                                                                                         // 6134\n     *                                                                                                                 // 6135\n     * console.log(array);                                                                                             // 6136\n     * // => [1, 2, 3]                                                                                                 // 6137\n     */                                                                                                                // 6138\n    function wrapperCommit() {                                                                                         // 6139\n      return new LodashWrapper(this.value(), this.__chain__);                                                          // 6140\n    }                                                                                                                  // 6141\n                                                                                                                       // 6142\n    /**                                                                                                                // 6143\n     * Creates a new array joining a wrapped array with any additional arrays                                          // 6144\n     * and/or values.                                                                                                  // 6145\n     *                                                                                                                 // 6146\n     * @name concat                                                                                                    // 6147\n     * @memberOf _                                                                                                     // 6148\n     * @category Chain                                                                                                 // 6149\n     * @param {...*} [values] The values to concatenate.                                                               // 6150\n     * @returns {Array} Returns the new concatenated array.                                                            // 6151\n     * @example                                                                                                        // 6152\n     *                                                                                                                 // 6153\n     * var array = [1];                                                                                                // 6154\n     * var wrapped = _(array).concat(2, [3], [[4]]);                                                                   // 6155\n     *                                                                                                                 // 6156\n     * console.log(wrapped.value());                                                                                   // 6157\n     * // => [1, 2, 3, [4]]                                                                                            // 6158\n     *                                                                                                                 // 6159\n     * console.log(array);                                                                                             // 6160\n     * // => [1]                                                                                                       // 6161\n     */                                                                                                                // 6162\n    var wrapperConcat = restParam(function(values) {                                                                   // 6163\n      values = baseFlatten(values);                                                                                    // 6164\n      return this.thru(function(array) {                                                                               // 6165\n        return arrayConcat(isArray(array) ? array : [toObject(array)], values);                                        // 6166\n      });                                                                                                              // 6167\n    });                                                                                                                // 6168\n                                                                                                                       // 6169\n    /**                                                                                                                // 6170\n     * Creates a clone of the chained sequence planting `value` as the wrapped value.                                  // 6171\n     *                                                                                                                 // 6172\n     * @name plant                                                                                                     // 6173\n     * @memberOf _                                                                                                     // 6174\n     * @category Chain                                                                                                 // 6175\n     * @returns {Object} Returns the new `lodash` wrapper instance.                                                    // 6176\n     * @example                                                                                                        // 6177\n     *                                                                                                                 // 6178\n     * var array = [1, 2];                                                                                             // 6179\n     * var wrapped = _(array).map(function(value) {                                                                    // 6180\n     *   return Math.pow(value, 2);                                                                                    // 6181\n     * });                                                                                                             // 6182\n     *                                                                                                                 // 6183\n     * var other = [3, 4];                                                                                             // 6184\n     * var otherWrapped = wrapped.plant(other);                                                                        // 6185\n     *                                                                                                                 // 6186\n     * otherWrapped.value();                                                                                           // 6187\n     * // => [9, 16]                                                                                                   // 6188\n     *                                                                                                                 // 6189\n     * wrapped.value();                                                                                                // 6190\n     * // => [1, 4]                                                                                                    // 6191\n     */                                                                                                                // 6192\n    function wrapperPlant(value) {                                                                                     // 6193\n      var result,                                                                                                      // 6194\n          parent = this;                                                                                               // 6195\n                                                                                                                       // 6196\n      while (parent instanceof baseLodash) {                                                                           // 6197\n        var clone = wrapperClone(parent);                                                                              // 6198\n        if (result) {                                                                                                  // 6199\n          previous.__wrapped__ = clone;                                                                                // 6200\n        } else {                                                                                                       // 6201\n          result = clone;                                                                                              // 6202\n        }                                                                                                              // 6203\n        var previous = clone;                                                                                          // 6204\n        parent = parent.__wrapped__;                                                                                   // 6205\n      }                                                                                                                // 6206\n      previous.__wrapped__ = value;                                                                                    // 6207\n      return result;                                                                                                   // 6208\n    }                                                                                                                  // 6209\n                                                                                                                       // 6210\n    /**                                                                                                                // 6211\n     * Reverses the wrapped array so the first element becomes the last, the                                           // 6212\n     * second element becomes the second to last, and so on.                                                           // 6213\n     *                                                                                                                 // 6214\n     * **Note:** This method mutates the wrapped array.                                                                // 6215\n     *                                                                                                                 // 6216\n     * @name reverse                                                                                                   // 6217\n     * @memberOf _                                                                                                     // 6218\n     * @category Chain                                                                                                 // 6219\n     * @returns {Object} Returns the new reversed `lodash` wrapper instance.                                           // 6220\n     * @example                                                                                                        // 6221\n     *                                                                                                                 // 6222\n     * var array = [1, 2, 3];                                                                                          // 6223\n     *                                                                                                                 // 6224\n     * _(array).reverse().value()                                                                                      // 6225\n     * // => [3, 2, 1]                                                                                                 // 6226\n     *                                                                                                                 // 6227\n     * console.log(array);                                                                                             // 6228\n     * // => [3, 2, 1]                                                                                                 // 6229\n     */                                                                                                                // 6230\n    function wrapperReverse() {                                                                                        // 6231\n      var value = this.__wrapped__;                                                                                    // 6232\n                                                                                                                       // 6233\n      var interceptor = function(value) {                                                                              // 6234\n        return value.reverse();                                                                                        // 6235\n      };                                                                                                               // 6236\n      if (value instanceof LazyWrapper) {                                                                              // 6237\n        var wrapped = value;                                                                                           // 6238\n        if (this.__actions__.length) {                                                                                 // 6239\n          wrapped = new LazyWrapper(this);                                                                             // 6240\n        }                                                                                                              // 6241\n        wrapped = wrapped.reverse();                                                                                   // 6242\n        wrapped.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });                       // 6243\n        return new LodashWrapper(wrapped, this.__chain__);                                                             // 6244\n      }                                                                                                                // 6245\n      return this.thru(interceptor);                                                                                   // 6246\n    }                                                                                                                  // 6247\n                                                                                                                       // 6248\n    /**                                                                                                                // 6249\n     * Produces the result of coercing the unwrapped value to a string.                                                // 6250\n     *                                                                                                                 // 6251\n     * @name toString                                                                                                  // 6252\n     * @memberOf _                                                                                                     // 6253\n     * @category Chain                                                                                                 // 6254\n     * @returns {string} Returns the coerced string value.                                                             // 6255\n     * @example                                                                                                        // 6256\n     *                                                                                                                 // 6257\n     * _([1, 2, 3]).toString();                                                                                        // 6258\n     * // => '1,2,3'                                                                                                   // 6259\n     */                                                                                                                // 6260\n    function wrapperToString() {                                                                                       // 6261\n      return (this.value() + '');                                                                                      // 6262\n    }                                                                                                                  // 6263\n                                                                                                                       // 6264\n    /**                                                                                                                // 6265\n     * Executes the chained sequence to extract the unwrapped value.                                                   // 6266\n     *                                                                                                                 // 6267\n     * @name value                                                                                                     // 6268\n     * @memberOf _                                                                                                     // 6269\n     * @alias run, toJSON, valueOf                                                                                     // 6270\n     * @category Chain                                                                                                 // 6271\n     * @returns {*} Returns the resolved unwrapped value.                                                              // 6272\n     * @example                                                                                                        // 6273\n     *                                                                                                                 // 6274\n     * _([1, 2, 3]).value();                                                                                           // 6275\n     * // => [1, 2, 3]                                                                                                 // 6276\n     */                                                                                                                // 6277\n    function wrapperValue() {                                                                                          // 6278\n      return baseWrapperValue(this.__wrapped__, this.__actions__);                                                     // 6279\n    }                                                                                                                  // 6280\n                                                                                                                       // 6281\n    /*------------------------------------------------------------------------*/                                       // 6282\n                                                                                                                       // 6283\n    /**                                                                                                                // 6284\n     * Creates an array of elements corresponding to the given keys, or indexes,                                       // 6285\n     * of `collection`. Keys may be specified as individual arguments or as arrays                                     // 6286\n     * of keys.                                                                                                        // 6287\n     *                                                                                                                 // 6288\n     * @static                                                                                                         // 6289\n     * @memberOf _                                                                                                     // 6290\n     * @category Collection                                                                                            // 6291\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6292\n     * @param {...(number|number[]|string|string[])} [props] The property names                                        // 6293\n     *  or indexes of elements to pick, specified individually or in arrays.                                           // 6294\n     * @returns {Array} Returns the new array of picked elements.                                                      // 6295\n     * @example                                                                                                        // 6296\n     *                                                                                                                 // 6297\n     * _.at(['a', 'b', 'c'], [0, 2]);                                                                                  // 6298\n     * // => ['a', 'c']                                                                                                // 6299\n     *                                                                                                                 // 6300\n     * _.at(['barney', 'fred', 'pebbles'], 0, 2);                                                                      // 6301\n     * // => ['barney', 'pebbles']                                                                                     // 6302\n     */                                                                                                                // 6303\n    var at = restParam(function(collection, props) {                                                                   // 6304\n      if (isArrayLike(collection)) {                                                                                   // 6305\n        collection = toIterable(collection);                                                                           // 6306\n      }                                                                                                                // 6307\n      return baseAt(collection, baseFlatten(props));                                                                   // 6308\n    });                                                                                                                // 6309\n                                                                                                                       // 6310\n    /**                                                                                                                // 6311\n     * Creates an object composed of keys generated from the results of running                                        // 6312\n     * each element of `collection` through `iteratee`. The corresponding value                                        // 6313\n     * of each key is the number of times the key was returned by `iteratee`.                                          // 6314\n     * The `iteratee` is bound to `thisArg` and invoked with three arguments:                                          // 6315\n     * (value, index|key, collection).                                                                                 // 6316\n     *                                                                                                                 // 6317\n     * If a property name is provided for `iteratee` the created `_.property`                                          // 6318\n     * style callback returns the property value of the given element.                                                 // 6319\n     *                                                                                                                 // 6320\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 6321\n     * style callback returns `true` for elements that have a matching property                                        // 6322\n     * value, else `false`.                                                                                            // 6323\n     *                                                                                                                 // 6324\n     * If an object is provided for `iteratee` the created `_.matches` style                                           // 6325\n     * callback returns `true` for elements that have the properties of the given                                      // 6326\n     * object, else `false`.                                                                                           // 6327\n     *                                                                                                                 // 6328\n     * @static                                                                                                         // 6329\n     * @memberOf _                                                                                                     // 6330\n     * @category Collection                                                                                            // 6331\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6332\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked                                      // 6333\n     *  per iteration.                                                                                                 // 6334\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 6335\n     * @returns {Object} Returns the composed aggregate object.                                                        // 6336\n     * @example                                                                                                        // 6337\n     *                                                                                                                 // 6338\n     * _.countBy([4.3, 6.1, 6.4], function(n) {                                                                        // 6339\n     *   return Math.floor(n);                                                                                         // 6340\n     * });                                                                                                             // 6341\n     * // => { '4': 1, '6': 2 }                                                                                        // 6342\n     *                                                                                                                 // 6343\n     * _.countBy([4.3, 6.1, 6.4], function(n) {                                                                        // 6344\n     *   return this.floor(n);                                                                                         // 6345\n     * }, Math);                                                                                                       // 6346\n     * // => { '4': 1, '6': 2 }                                                                                        // 6347\n     *                                                                                                                 // 6348\n     * _.countBy(['one', 'two', 'three'], 'length');                                                                   // 6349\n     * // => { '3': 2, '5': 1 }                                                                                        // 6350\n     */                                                                                                                // 6351\n    var countBy = createAggregator(function(result, value, key) {                                                      // 6352\n      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);                                            // 6353\n    });                                                                                                                // 6354\n                                                                                                                       // 6355\n    /**                                                                                                                // 6356\n     * Checks if `predicate` returns truthy for **all** elements of `collection`.                                      // 6357\n     * The predicate is bound to `thisArg` and invoked with three arguments:                                           // 6358\n     * (value, index|key, collection).                                                                                 // 6359\n     *                                                                                                                 // 6360\n     * If a property name is provided for `predicate` the created `_.property`                                         // 6361\n     * style callback returns the property value of the given element.                                                 // 6362\n     *                                                                                                                 // 6363\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 6364\n     * style callback returns `true` for elements that have a matching property                                        // 6365\n     * value, else `false`.                                                                                            // 6366\n     *                                                                                                                 // 6367\n     * If an object is provided for `predicate` the created `_.matches` style                                          // 6368\n     * callback returns `true` for elements that have the properties of the given                                      // 6369\n     * object, else `false`.                                                                                           // 6370\n     *                                                                                                                 // 6371\n     * @static                                                                                                         // 6372\n     * @memberOf _                                                                                                     // 6373\n     * @alias all                                                                                                      // 6374\n     * @category Collection                                                                                            // 6375\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6376\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 6377\n     *  per iteration.                                                                                                 // 6378\n     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 6379\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,                                     // 6380\n     *  else `false`.                                                                                                  // 6381\n     * @example                                                                                                        // 6382\n     *                                                                                                                 // 6383\n     * _.every([true, 1, null, 'yes'], Boolean);                                                                       // 6384\n     * // => false                                                                                                     // 6385\n     *                                                                                                                 // 6386\n     * var users = [                                                                                                   // 6387\n     *   { 'user': 'barney', 'active': false },                                                                        // 6388\n     *   { 'user': 'fred',   'active': false }                                                                         // 6389\n     * ];                                                                                                              // 6390\n     *                                                                                                                 // 6391\n     * // using the `_.matches` callback shorthand                                                                     // 6392\n     * _.every(users, { 'user': 'barney', 'active': false });                                                          // 6393\n     * // => false                                                                                                     // 6394\n     *                                                                                                                 // 6395\n     * // using the `_.matchesProperty` callback shorthand                                                             // 6396\n     * _.every(users, 'active', false);                                                                                // 6397\n     * // => true                                                                                                      // 6398\n     *                                                                                                                 // 6399\n     * // using the `_.property` callback shorthand                                                                    // 6400\n     * _.every(users, 'active');                                                                                       // 6401\n     * // => false                                                                                                     // 6402\n     */                                                                                                                // 6403\n    function every(collection, predicate, thisArg) {                                                                   // 6404\n      var func = isArray(collection) ? arrayEvery : baseEvery;                                                         // 6405\n      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {                                                 // 6406\n        predicate = undefined;                                                                                         // 6407\n      }                                                                                                                // 6408\n      if (typeof predicate != 'function' || thisArg !== undefined) {                                                   // 6409\n        predicate = getCallback(predicate, thisArg, 3);                                                                // 6410\n      }                                                                                                                // 6411\n      return func(collection, predicate);                                                                              // 6412\n    }                                                                                                                  // 6413\n                                                                                                                       // 6414\n    /**                                                                                                                // 6415\n     * Iterates over elements of `collection`, returning an array of all elements                                      // 6416\n     * `predicate` returns truthy for. The predicate is bound to `thisArg` and                                         // 6417\n     * invoked with three arguments: (value, index|key, collection).                                                   // 6418\n     *                                                                                                                 // 6419\n     * If a property name is provided for `predicate` the created `_.property`                                         // 6420\n     * style callback returns the property value of the given element.                                                 // 6421\n     *                                                                                                                 // 6422\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 6423\n     * style callback returns `true` for elements that have a matching property                                        // 6424\n     * value, else `false`.                                                                                            // 6425\n     *                                                                                                                 // 6426\n     * If an object is provided for `predicate` the created `_.matches` style                                          // 6427\n     * callback returns `true` for elements that have the properties of the given                                      // 6428\n     * object, else `false`.                                                                                           // 6429\n     *                                                                                                                 // 6430\n     * @static                                                                                                         // 6431\n     * @memberOf _                                                                                                     // 6432\n     * @alias select                                                                                                   // 6433\n     * @category Collection                                                                                            // 6434\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6435\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 6436\n     *  per iteration.                                                                                                 // 6437\n     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 6438\n     * @returns {Array} Returns the new filtered array.                                                                // 6439\n     * @example                                                                                                        // 6440\n     *                                                                                                                 // 6441\n     * _.filter([4, 5, 6], function(n) {                                                                               // 6442\n     *   return n % 2 == 0;                                                                                            // 6443\n     * });                                                                                                             // 6444\n     * // => [4, 6]                                                                                                    // 6445\n     *                                                                                                                 // 6446\n     * var users = [                                                                                                   // 6447\n     *   { 'user': 'barney', 'age': 36, 'active': true },                                                              // 6448\n     *   { 'user': 'fred',   'age': 40, 'active': false }                                                              // 6449\n     * ];                                                                                                              // 6450\n     *                                                                                                                 // 6451\n     * // using the `_.matches` callback shorthand                                                                     // 6452\n     * _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');                                                // 6453\n     * // => ['barney']                                                                                                // 6454\n     *                                                                                                                 // 6455\n     * // using the `_.matchesProperty` callback shorthand                                                             // 6456\n     * _.pluck(_.filter(users, 'active', false), 'user');                                                              // 6457\n     * // => ['fred']                                                                                                  // 6458\n     *                                                                                                                 // 6459\n     * // using the `_.property` callback shorthand                                                                    // 6460\n     * _.pluck(_.filter(users, 'active'), 'user');                                                                     // 6461\n     * // => ['barney']                                                                                                // 6462\n     */                                                                                                                // 6463\n    function filter(collection, predicate, thisArg) {                                                                  // 6464\n      var func = isArray(collection) ? arrayFilter : baseFilter;                                                       // 6465\n      predicate = getCallback(predicate, thisArg, 3);                                                                  // 6466\n      return func(collection, predicate);                                                                              // 6467\n    }                                                                                                                  // 6468\n                                                                                                                       // 6469\n    /**                                                                                                                // 6470\n     * Iterates over elements of `collection`, returning the first element                                             // 6471\n     * `predicate` returns truthy for. The predicate is bound to `thisArg` and                                         // 6472\n     * invoked with three arguments: (value, index|key, collection).                                                   // 6473\n     *                                                                                                                 // 6474\n     * If a property name is provided for `predicate` the created `_.property`                                         // 6475\n     * style callback returns the property value of the given element.                                                 // 6476\n     *                                                                                                                 // 6477\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 6478\n     * style callback returns `true` for elements that have a matching property                                        // 6479\n     * value, else `false`.                                                                                            // 6480\n     *                                                                                                                 // 6481\n     * If an object is provided for `predicate` the created `_.matches` style                                          // 6482\n     * callback returns `true` for elements that have the properties of the given                                      // 6483\n     * object, else `false`.                                                                                           // 6484\n     *                                                                                                                 // 6485\n     * @static                                                                                                         // 6486\n     * @memberOf _                                                                                                     // 6487\n     * @alias detect                                                                                                   // 6488\n     * @category Collection                                                                                            // 6489\n     * @param {Array|Object|string} collection The collection to search.                                               // 6490\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 6491\n     *  per iteration.                                                                                                 // 6492\n     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 6493\n     * @returns {*} Returns the matched element, else `undefined`.                                                     // 6494\n     * @example                                                                                                        // 6495\n     *                                                                                                                 // 6496\n     * var users = [                                                                                                   // 6497\n     *   { 'user': 'barney',  'age': 36, 'active': true },                                                             // 6498\n     *   { 'user': 'fred',    'age': 40, 'active': false },                                                            // 6499\n     *   { 'user': 'pebbles', 'age': 1,  'active': true }                                                              // 6500\n     * ];                                                                                                              // 6501\n     *                                                                                                                 // 6502\n     * _.result(_.find(users, function(chr) {                                                                          // 6503\n     *   return chr.age < 40;                                                                                          // 6504\n     * }), 'user');                                                                                                    // 6505\n     * // => 'barney'                                                                                                  // 6506\n     *                                                                                                                 // 6507\n     * // using the `_.matches` callback shorthand                                                                     // 6508\n     * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');                                                  // 6509\n     * // => 'pebbles'                                                                                                 // 6510\n     *                                                                                                                 // 6511\n     * // using the `_.matchesProperty` callback shorthand                                                             // 6512\n     * _.result(_.find(users, 'active', false), 'user');                                                               // 6513\n     * // => 'fred'                                                                                                    // 6514\n     *                                                                                                                 // 6515\n     * // using the `_.property` callback shorthand                                                                    // 6516\n     * _.result(_.find(users, 'active'), 'user');                                                                      // 6517\n     * // => 'barney'                                                                                                  // 6518\n     */                                                                                                                // 6519\n    var find = createFind(baseEach);                                                                                   // 6520\n                                                                                                                       // 6521\n    /**                                                                                                                // 6522\n     * This method is like `_.find` except that it iterates over elements of                                           // 6523\n     * `collection` from right to left.                                                                                // 6524\n     *                                                                                                                 // 6525\n     * @static                                                                                                         // 6526\n     * @memberOf _                                                                                                     // 6527\n     * @category Collection                                                                                            // 6528\n     * @param {Array|Object|string} collection The collection to search.                                               // 6529\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 6530\n     *  per iteration.                                                                                                 // 6531\n     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 6532\n     * @returns {*} Returns the matched element, else `undefined`.                                                     // 6533\n     * @example                                                                                                        // 6534\n     *                                                                                                                 // 6535\n     * _.findLast([1, 2, 3, 4], function(n) {                                                                          // 6536\n     *   return n % 2 == 1;                                                                                            // 6537\n     * });                                                                                                             // 6538\n     * // => 3                                                                                                         // 6539\n     */                                                                                                                // 6540\n    var findLast = createFind(baseEachRight, true);                                                                    // 6541\n                                                                                                                       // 6542\n    /**                                                                                                                // 6543\n     * Performs a deep comparison between each element in `collection` and the                                         // 6544\n     * source object, returning the first element that has equivalent property                                         // 6545\n     * values.                                                                                                         // 6546\n     *                                                                                                                 // 6547\n     * **Note:** This method supports comparing arrays, booleans, `Date` objects,                                      // 6548\n     * numbers, `Object` objects, regexes, and strings. Objects are compared by                                        // 6549\n     * their own, not inherited, enumerable properties. For comparing a single                                         // 6550\n     * own or inherited property value see `_.matchesProperty`.                                                        // 6551\n     *                                                                                                                 // 6552\n     * @static                                                                                                         // 6553\n     * @memberOf _                                                                                                     // 6554\n     * @category Collection                                                                                            // 6555\n     * @param {Array|Object|string} collection The collection to search.                                               // 6556\n     * @param {Object} source The object of property values to match.                                                  // 6557\n     * @returns {*} Returns the matched element, else `undefined`.                                                     // 6558\n     * @example                                                                                                        // 6559\n     *                                                                                                                 // 6560\n     * var users = [                                                                                                   // 6561\n     *   { 'user': 'barney', 'age': 36, 'active': true },                                                              // 6562\n     *   { 'user': 'fred',   'age': 40, 'active': false }                                                              // 6563\n     * ];                                                                                                              // 6564\n     *                                                                                                                 // 6565\n     * _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');                                            // 6566\n     * // => 'barney'                                                                                                  // 6567\n     *                                                                                                                 // 6568\n     * _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');                                           // 6569\n     * // => 'fred'                                                                                                    // 6570\n     */                                                                                                                // 6571\n    function findWhere(collection, source) {                                                                           // 6572\n      return find(collection, baseMatches(source));                                                                    // 6573\n    }                                                                                                                  // 6574\n                                                                                                                       // 6575\n    /**                                                                                                                // 6576\n     * Iterates over elements of `collection` invoking `iteratee` for each element.                                    // 6577\n     * The `iteratee` is bound to `thisArg` and invoked with three arguments:                                          // 6578\n     * (value, index|key, collection). Iteratee functions may exit iteration early                                     // 6579\n     * by explicitly returning `false`.                                                                                // 6580\n     *                                                                                                                 // 6581\n     * **Note:** As with other \"Collections\" methods, objects with a \"length\" property                                 // 6582\n     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`                                        // 6583\n     * may be used for object iteration.                                                                               // 6584\n     *                                                                                                                 // 6585\n     * @static                                                                                                         // 6586\n     * @memberOf _                                                                                                     // 6587\n     * @alias each                                                                                                     // 6588\n     * @category Collection                                                                                            // 6589\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6590\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 6591\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 6592\n     * @returns {Array|Object|string} Returns `collection`.                                                            // 6593\n     * @example                                                                                                        // 6594\n     *                                                                                                                 // 6595\n     * _([1, 2]).forEach(function(n) {                                                                                 // 6596\n     *   console.log(n);                                                                                               // 6597\n     * }).value();                                                                                                     // 6598\n     * // => logs each value from left to right and returns the array                                                  // 6599\n     *                                                                                                                 // 6600\n     * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {                                                                // 6601\n     *   console.log(n, key);                                                                                          // 6602\n     * });                                                                                                             // 6603\n     * // => logs each value-key pair and returns the object (iteration order is not guaranteed)                       // 6604\n     */                                                                                                                // 6605\n    var forEach = createForEach(arrayEach, baseEach);                                                                  // 6606\n                                                                                                                       // 6607\n    /**                                                                                                                // 6608\n     * This method is like `_.forEach` except that it iterates over elements of                                        // 6609\n     * `collection` from right to left.                                                                                // 6610\n     *                                                                                                                 // 6611\n     * @static                                                                                                         // 6612\n     * @memberOf _                                                                                                     // 6613\n     * @alias eachRight                                                                                                // 6614\n     * @category Collection                                                                                            // 6615\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6616\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 6617\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 6618\n     * @returns {Array|Object|string} Returns `collection`.                                                            // 6619\n     * @example                                                                                                        // 6620\n     *                                                                                                                 // 6621\n     * _([1, 2]).forEachRight(function(n) {                                                                            // 6622\n     *   console.log(n);                                                                                               // 6623\n     * }).value();                                                                                                     // 6624\n     * // => logs each value from right to left and returns the array                                                  // 6625\n     */                                                                                                                // 6626\n    var forEachRight = createForEach(arrayEachRight, baseEachRight);                                                   // 6627\n                                                                                                                       // 6628\n    /**                                                                                                                // 6629\n     * Creates an object composed of keys generated from the results of running                                        // 6630\n     * each element of `collection` through `iteratee`. The corresponding value                                        // 6631\n     * of each key is an array of the elements responsible for generating the key.                                     // 6632\n     * The `iteratee` is bound to `thisArg` and invoked with three arguments:                                          // 6633\n     * (value, index|key, collection).                                                                                 // 6634\n     *                                                                                                                 // 6635\n     * If a property name is provided for `iteratee` the created `_.property`                                          // 6636\n     * style callback returns the property value of the given element.                                                 // 6637\n     *                                                                                                                 // 6638\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 6639\n     * style callback returns `true` for elements that have a matching property                                        // 6640\n     * value, else `false`.                                                                                            // 6641\n     *                                                                                                                 // 6642\n     * If an object is provided for `iteratee` the created `_.matches` style                                           // 6643\n     * callback returns `true` for elements that have the properties of the given                                      // 6644\n     * object, else `false`.                                                                                           // 6645\n     *                                                                                                                 // 6646\n     * @static                                                                                                         // 6647\n     * @memberOf _                                                                                                     // 6648\n     * @category Collection                                                                                            // 6649\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6650\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked                                      // 6651\n     *  per iteration.                                                                                                 // 6652\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 6653\n     * @returns {Object} Returns the composed aggregate object.                                                        // 6654\n     * @example                                                                                                        // 6655\n     *                                                                                                                 // 6656\n     * _.groupBy([4.2, 6.1, 6.4], function(n) {                                                                        // 6657\n     *   return Math.floor(n);                                                                                         // 6658\n     * });                                                                                                             // 6659\n     * // => { '4': [4.2], '6': [6.1, 6.4] }                                                                           // 6660\n     *                                                                                                                 // 6661\n     * _.groupBy([4.2, 6.1, 6.4], function(n) {                                                                        // 6662\n     *   return this.floor(n);                                                                                         // 6663\n     * }, Math);                                                                                                       // 6664\n     * // => { '4': [4.2], '6': [6.1, 6.4] }                                                                           // 6665\n     *                                                                                                                 // 6666\n     * // using the `_.property` callback shorthand                                                                    // 6667\n     * _.groupBy(['one', 'two', 'three'], 'length');                                                                   // 6668\n     * // => { '3': ['one', 'two'], '5': ['three'] }                                                                   // 6669\n     */                                                                                                                // 6670\n    var groupBy = createAggregator(function(result, value, key) {                                                      // 6671\n      if (hasOwnProperty.call(result, key)) {                                                                          // 6672\n        result[key].push(value);                                                                                       // 6673\n      } else {                                                                                                         // 6674\n        result[key] = [value];                                                                                         // 6675\n      }                                                                                                                // 6676\n    });                                                                                                                // 6677\n                                                                                                                       // 6678\n    /**                                                                                                                // 6679\n     * Checks if `target` is in `collection` using                                                                     // 6680\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                                // 6681\n     * for equality comparisons. If `fromIndex` is negative, it's used as the offset                                   // 6682\n     * from the end of `collection`.                                                                                   // 6683\n     *                                                                                                                 // 6684\n     * @static                                                                                                         // 6685\n     * @memberOf _                                                                                                     // 6686\n     * @alias contains, include                                                                                        // 6687\n     * @category Collection                                                                                            // 6688\n     * @param {Array|Object|string} collection The collection to search.                                               // 6689\n     * @param {*} target The value to search for.                                                                      // 6690\n     * @param {number} [fromIndex=0] The index to search from.                                                         // 6691\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.                               // 6692\n     * @returns {boolean} Returns `true` if a matching element is found, else `false`.                                 // 6693\n     * @example                                                                                                        // 6694\n     *                                                                                                                 // 6695\n     * _.includes([1, 2, 3], 1);                                                                                       // 6696\n     * // => true                                                                                                      // 6697\n     *                                                                                                                 // 6698\n     * _.includes([1, 2, 3], 1, 2);                                                                                    // 6699\n     * // => false                                                                                                     // 6700\n     *                                                                                                                 // 6701\n     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');                                                              // 6702\n     * // => true                                                                                                      // 6703\n     *                                                                                                                 // 6704\n     * _.includes('pebbles', 'eb');                                                                                    // 6705\n     * // => true                                                                                                      // 6706\n     */                                                                                                                // 6707\n    function includes(collection, target, fromIndex, guard) {                                                          // 6708\n      var length = collection ? getLength(collection) : 0;                                                             // 6709\n      if (!isLength(length)) {                                                                                         // 6710\n        collection = values(collection);                                                                               // 6711\n        length = collection.length;                                                                                    // 6712\n      }                                                                                                                // 6713\n      if (typeof fromIndex != 'number' || (guard && isIterateeCall(target, fromIndex, guard))) {                       // 6714\n        fromIndex = 0;                                                                                                 // 6715\n      } else {                                                                                                         // 6716\n        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);                               // 6717\n      }                                                                                                                // 6718\n      return (typeof collection == 'string' || !isArray(collection) && isString(collection))                           // 6719\n        ? (fromIndex <= length && collection.indexOf(target, fromIndex) > -1)                                          // 6720\n        : (!!length && getIndexOf(collection, target, fromIndex) > -1);                                                // 6721\n    }                                                                                                                  // 6722\n                                                                                                                       // 6723\n    /**                                                                                                                // 6724\n     * Creates an object composed of keys generated from the results of running                                        // 6725\n     * each element of `collection` through `iteratee`. The corresponding value                                        // 6726\n     * of each key is the last element responsible for generating the key. The                                         // 6727\n     * iteratee function is bound to `thisArg` and invoked with three arguments:                                       // 6728\n     * (value, index|key, collection).                                                                                 // 6729\n     *                                                                                                                 // 6730\n     * If a property name is provided for `iteratee` the created `_.property`                                          // 6731\n     * style callback returns the property value of the given element.                                                 // 6732\n     *                                                                                                                 // 6733\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 6734\n     * style callback returns `true` for elements that have a matching property                                        // 6735\n     * value, else `false`.                                                                                            // 6736\n     *                                                                                                                 // 6737\n     * If an object is provided for `iteratee` the created `_.matches` style                                           // 6738\n     * callback returns `true` for elements that have the properties of the given                                      // 6739\n     * object, else `false`.                                                                                           // 6740\n     *                                                                                                                 // 6741\n     * @static                                                                                                         // 6742\n     * @memberOf _                                                                                                     // 6743\n     * @category Collection                                                                                            // 6744\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6745\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked                                      // 6746\n     *  per iteration.                                                                                                 // 6747\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 6748\n     * @returns {Object} Returns the composed aggregate object.                                                        // 6749\n     * @example                                                                                                        // 6750\n     *                                                                                                                 // 6751\n     * var keyData = [                                                                                                 // 6752\n     *   { 'dir': 'left', 'code': 97 },                                                                                // 6753\n     *   { 'dir': 'right', 'code': 100 }                                                                               // 6754\n     * ];                                                                                                              // 6755\n     *                                                                                                                 // 6756\n     * _.indexBy(keyData, 'dir');                                                                                      // 6757\n     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }                       // 6758\n     *                                                                                                                 // 6759\n     * _.indexBy(keyData, function(object) {                                                                           // 6760\n     *   return String.fromCharCode(object.code);                                                                      // 6761\n     * });                                                                                                             // 6762\n     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }                              // 6763\n     *                                                                                                                 // 6764\n     * _.indexBy(keyData, function(object) {                                                                           // 6765\n     *   return this.fromCharCode(object.code);                                                                        // 6766\n     * }, String);                                                                                                     // 6767\n     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }                              // 6768\n     */                                                                                                                // 6769\n    var indexBy = createAggregator(function(result, value, key) {                                                      // 6770\n      result[key] = value;                                                                                             // 6771\n    });                                                                                                                // 6772\n                                                                                                                       // 6773\n    /**                                                                                                                // 6774\n     * Invokes the method at `path` of each element in `collection`, returning                                         // 6775\n     * an array of the results of each invoked method. Any additional arguments                                        // 6776\n     * are provided to each invoked method. If `methodName` is a function it's                                         // 6777\n     * invoked for, and `this` bound to, each element in `collection`.                                                 // 6778\n     *                                                                                                                 // 6779\n     * @static                                                                                                         // 6780\n     * @memberOf _                                                                                                     // 6781\n     * @category Collection                                                                                            // 6782\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6783\n     * @param {Array|Function|string} path The path of the method to invoke or                                         // 6784\n     *  the function invoked per iteration.                                                                            // 6785\n     * @param {...*} [args] The arguments to invoke the method with.                                                   // 6786\n     * @returns {Array} Returns the array of results.                                                                  // 6787\n     * @example                                                                                                        // 6788\n     *                                                                                                                 // 6789\n     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');                                                                       // 6790\n     * // => [[1, 5, 7], [1, 2, 3]]                                                                                    // 6791\n     *                                                                                                                 // 6792\n     * _.invoke([123, 456], String.prototype.split, '');                                                               // 6793\n     * // => [['1', '2', '3'], ['4', '5', '6']]                                                                        // 6794\n     */                                                                                                                // 6795\n    var invoke = restParam(function(collection, path, args) {                                                          // 6796\n      var index = -1,                                                                                                  // 6797\n          isFunc = typeof path == 'function',                                                                          // 6798\n          isProp = isKey(path),                                                                                        // 6799\n          result = isArrayLike(collection) ? Array(collection.length) : [];                                            // 6800\n                                                                                                                       // 6801\n      baseEach(collection, function(value) {                                                                           // 6802\n        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);                              // 6803\n        result[++index] = func ? func.apply(value, args) : invokePath(value, path, args);                              // 6804\n      });                                                                                                              // 6805\n      return result;                                                                                                   // 6806\n    });                                                                                                                // 6807\n                                                                                                                       // 6808\n    /**                                                                                                                // 6809\n     * Creates an array of values by running each element in `collection` through                                      // 6810\n     * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three                                         // 6811\n     * arguments: (value, index|key, collection).                                                                      // 6812\n     *                                                                                                                 // 6813\n     * If a property name is provided for `iteratee` the created `_.property`                                          // 6814\n     * style callback returns the property value of the given element.                                                 // 6815\n     *                                                                                                                 // 6816\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 6817\n     * style callback returns `true` for elements that have a matching property                                        // 6818\n     * value, else `false`.                                                                                            // 6819\n     *                                                                                                                 // 6820\n     * If an object is provided for `iteratee` the created `_.matches` style                                           // 6821\n     * callback returns `true` for elements that have the properties of the given                                      // 6822\n     * object, else `false`.                                                                                           // 6823\n     *                                                                                                                 // 6824\n     * Many lodash methods are guarded to work as iteratees for methods like                                           // 6825\n     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.                                        // 6826\n     *                                                                                                                 // 6827\n     * The guarded methods are:                                                                                        // 6828\n     * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`,                                           // 6829\n     * `drop`, `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`,                                        // 6830\n     * `parseInt`, `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`,                                         // 6831\n     * `trimLeft`, `trimRight`, `trunc`, `random`, `range`, `sample`, `some`,                                          // 6832\n     * `sum`, `uniq`, and `words`                                                                                      // 6833\n     *                                                                                                                 // 6834\n     * @static                                                                                                         // 6835\n     * @memberOf _                                                                                                     // 6836\n     * @alias collect                                                                                                  // 6837\n     * @category Collection                                                                                            // 6838\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6839\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked                                      // 6840\n     *  per iteration.                                                                                                 // 6841\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 6842\n     * @returns {Array} Returns the new mapped array.                                                                  // 6843\n     * @example                                                                                                        // 6844\n     *                                                                                                                 // 6845\n     * function timesThree(n) {                                                                                        // 6846\n     *   return n * 3;                                                                                                 // 6847\n     * }                                                                                                               // 6848\n     *                                                                                                                 // 6849\n     * _.map([1, 2], timesThree);                                                                                      // 6850\n     * // => [3, 6]                                                                                                    // 6851\n     *                                                                                                                 // 6852\n     * _.map({ 'a': 1, 'b': 2 }, timesThree);                                                                          // 6853\n     * // => [3, 6] (iteration order is not guaranteed)                                                                // 6854\n     *                                                                                                                 // 6855\n     * var users = [                                                                                                   // 6856\n     *   { 'user': 'barney' },                                                                                         // 6857\n     *   { 'user': 'fred' }                                                                                            // 6858\n     * ];                                                                                                              // 6859\n     *                                                                                                                 // 6860\n     * // using the `_.property` callback shorthand                                                                    // 6861\n     * _.map(users, 'user');                                                                                           // 6862\n     * // => ['barney', 'fred']                                                                                        // 6863\n     */                                                                                                                // 6864\n    function map(collection, iteratee, thisArg) {                                                                      // 6865\n      var func = isArray(collection) ? arrayMap : baseMap;                                                             // 6866\n      iteratee = getCallback(iteratee, thisArg, 3);                                                                    // 6867\n      return func(collection, iteratee);                                                                               // 6868\n    }                                                                                                                  // 6869\n                                                                                                                       // 6870\n    /**                                                                                                                // 6871\n     * Creates an array of elements split into two groups, the first of which                                          // 6872\n     * contains elements `predicate` returns truthy for, while the second of which                                     // 6873\n     * contains elements `predicate` returns falsey for. The predicate is bound                                        // 6874\n     * to `thisArg` and invoked with three arguments: (value, index|key, collection).                                  // 6875\n     *                                                                                                                 // 6876\n     * If a property name is provided for `predicate` the created `_.property`                                         // 6877\n     * style callback returns the property value of the given element.                                                 // 6878\n     *                                                                                                                 // 6879\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 6880\n     * style callback returns `true` for elements that have a matching property                                        // 6881\n     * value, else `false`.                                                                                            // 6882\n     *                                                                                                                 // 6883\n     * If an object is provided for `predicate` the created `_.matches` style                                          // 6884\n     * callback returns `true` for elements that have the properties of the given                                      // 6885\n     * object, else `false`.                                                                                           // 6886\n     *                                                                                                                 // 6887\n     * @static                                                                                                         // 6888\n     * @memberOf _                                                                                                     // 6889\n     * @category Collection                                                                                            // 6890\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6891\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 6892\n     *  per iteration.                                                                                                 // 6893\n     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 6894\n     * @returns {Array} Returns the array of grouped elements.                                                         // 6895\n     * @example                                                                                                        // 6896\n     *                                                                                                                 // 6897\n     * _.partition([1, 2, 3], function(n) {                                                                            // 6898\n     *   return n % 2;                                                                                                 // 6899\n     * });                                                                                                             // 6900\n     * // => [[1, 3], [2]]                                                                                             // 6901\n     *                                                                                                                 // 6902\n     * _.partition([1.2, 2.3, 3.4], function(n) {                                                                      // 6903\n     *   return this.floor(n) % 2;                                                                                     // 6904\n     * }, Math);                                                                                                       // 6905\n     * // => [[1.2, 3.4], [2.3]]                                                                                       // 6906\n     *                                                                                                                 // 6907\n     * var users = [                                                                                                   // 6908\n     *   { 'user': 'barney',  'age': 36, 'active': false },                                                            // 6909\n     *   { 'user': 'fred',    'age': 40, 'active': true },                                                             // 6910\n     *   { 'user': 'pebbles', 'age': 1,  'active': false }                                                             // 6911\n     * ];                                                                                                              // 6912\n     *                                                                                                                 // 6913\n     * var mapper = function(array) {                                                                                  // 6914\n     *   return _.pluck(array, 'user');                                                                                // 6915\n     * };                                                                                                              // 6916\n     *                                                                                                                 // 6917\n     * // using the `_.matches` callback shorthand                                                                     // 6918\n     * _.map(_.partition(users, { 'age': 1, 'active': false }), mapper);                                               // 6919\n     * // => [['pebbles'], ['barney', 'fred']]                                                                         // 6920\n     *                                                                                                                 // 6921\n     * // using the `_.matchesProperty` callback shorthand                                                             // 6922\n     * _.map(_.partition(users, 'active', false), mapper);                                                             // 6923\n     * // => [['barney', 'pebbles'], ['fred']]                                                                         // 6924\n     *                                                                                                                 // 6925\n     * // using the `_.property` callback shorthand                                                                    // 6926\n     * _.map(_.partition(users, 'active'), mapper);                                                                    // 6927\n     * // => [['fred'], ['barney', 'pebbles']]                                                                         // 6928\n     */                                                                                                                // 6929\n    var partition = createAggregator(function(result, value, key) {                                                    // 6930\n      result[key ? 0 : 1].push(value);                                                                                 // 6931\n    }, function() { return [[], []]; });                                                                               // 6932\n                                                                                                                       // 6933\n    /**                                                                                                                // 6934\n     * Gets the property value of `path` from all elements in `collection`.                                            // 6935\n     *                                                                                                                 // 6936\n     * @static                                                                                                         // 6937\n     * @memberOf _                                                                                                     // 6938\n     * @category Collection                                                                                            // 6939\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6940\n     * @param {Array|string} path The path of the property to pluck.                                                   // 6941\n     * @returns {Array} Returns the property values.                                                                   // 6942\n     * @example                                                                                                        // 6943\n     *                                                                                                                 // 6944\n     * var users = [                                                                                                   // 6945\n     *   { 'user': 'barney', 'age': 36 },                                                                              // 6946\n     *   { 'user': 'fred',   'age': 40 }                                                                               // 6947\n     * ];                                                                                                              // 6948\n     *                                                                                                                 // 6949\n     * _.pluck(users, 'user');                                                                                         // 6950\n     * // => ['barney', 'fred']                                                                                        // 6951\n     *                                                                                                                 // 6952\n     * var userIndex = _.indexBy(users, 'user');                                                                       // 6953\n     * _.pluck(userIndex, 'age');                                                                                      // 6954\n     * // => [36, 40] (iteration order is not guaranteed)                                                              // 6955\n     */                                                                                                                // 6956\n    function pluck(collection, path) {                                                                                 // 6957\n      return map(collection, property(path));                                                                          // 6958\n    }                                                                                                                  // 6959\n                                                                                                                       // 6960\n    /**                                                                                                                // 6961\n     * Reduces `collection` to a value which is the accumulated result of running                                      // 6962\n     * each element in `collection` through `iteratee`, where each successive                                          // 6963\n     * invocation is supplied the return value of the previous. If `accumulator`                                       // 6964\n     * is not provided the first element of `collection` is used as the initial                                        // 6965\n     * value. The `iteratee` is bound to `thisArg` and invoked with four arguments:                                    // 6966\n     * (accumulator, value, index|key, collection).                                                                    // 6967\n     *                                                                                                                 // 6968\n     * Many lodash methods are guarded to work as iteratees for methods like                                           // 6969\n     * `_.reduce`, `_.reduceRight`, and `_.transform`.                                                                 // 6970\n     *                                                                                                                 // 6971\n     * The guarded methods are:                                                                                        // 6972\n     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `sortByAll`,                                         // 6973\n     * and `sortByOrder`                                                                                               // 6974\n     *                                                                                                                 // 6975\n     * @static                                                                                                         // 6976\n     * @memberOf _                                                                                                     // 6977\n     * @alias foldl, inject                                                                                            // 6978\n     * @category Collection                                                                                            // 6979\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6980\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 6981\n     * @param {*} [accumulator] The initial value.                                                                     // 6982\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 6983\n     * @returns {*} Returns the accumulated value.                                                                     // 6984\n     * @example                                                                                                        // 6985\n     *                                                                                                                 // 6986\n     * _.reduce([1, 2], function(total, n) {                                                                           // 6987\n     *   return total + n;                                                                                             // 6988\n     * });                                                                                                             // 6989\n     * // => 3                                                                                                         // 6990\n     *                                                                                                                 // 6991\n     * _.reduce({ 'a': 1, 'b': 2 }, function(result, n, key) {                                                         // 6992\n     *   result[key] = n * 3;                                                                                          // 6993\n     *   return result;                                                                                                // 6994\n     * }, {});                                                                                                         // 6995\n     * // => { 'a': 3, 'b': 6 } (iteration order is not guaranteed)                                                    // 6996\n     */                                                                                                                // 6997\n    var reduce = createReduce(arrayReduce, baseEach);                                                                  // 6998\n                                                                                                                       // 6999\n    /**                                                                                                                // 7000\n     * This method is like `_.reduce` except that it iterates over elements of                                         // 7001\n     * `collection` from right to left.                                                                                // 7002\n     *                                                                                                                 // 7003\n     * @static                                                                                                         // 7004\n     * @memberOf _                                                                                                     // 7005\n     * @alias foldr                                                                                                    // 7006\n     * @category Collection                                                                                            // 7007\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 7008\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 7009\n     * @param {*} [accumulator] The initial value.                                                                     // 7010\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 7011\n     * @returns {*} Returns the accumulated value.                                                                     // 7012\n     * @example                                                                                                        // 7013\n     *                                                                                                                 // 7014\n     * var array = [[0, 1], [2, 3], [4, 5]];                                                                           // 7015\n     *                                                                                                                 // 7016\n     * _.reduceRight(array, function(flattened, other) {                                                               // 7017\n     *   return flattened.concat(other);                                                                               // 7018\n     * }, []);                                                                                                         // 7019\n     * // => [4, 5, 2, 3, 0, 1]                                                                                        // 7020\n     */                                                                                                                // 7021\n    var reduceRight = createReduce(arrayReduceRight, baseEachRight);                                                   // 7022\n                                                                                                                       // 7023\n    /**                                                                                                                // 7024\n     * The opposite of `_.filter`; this method returns the elements of `collection`                                    // 7025\n     * that `predicate` does **not** return truthy for.                                                                // 7026\n     *                                                                                                                 // 7027\n     * @static                                                                                                         // 7028\n     * @memberOf _                                                                                                     // 7029\n     * @category Collection                                                                                            // 7030\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 7031\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 7032\n     *  per iteration.                                                                                                 // 7033\n     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 7034\n     * @returns {Array} Returns the new filtered array.                                                                // 7035\n     * @example                                                                                                        // 7036\n     *                                                                                                                 // 7037\n     * _.reject([1, 2, 3, 4], function(n) {                                                                            // 7038\n     *   return n % 2 == 0;                                                                                            // 7039\n     * });                                                                                                             // 7040\n     * // => [1, 3]                                                                                                    // 7041\n     *                                                                                                                 // 7042\n     * var users = [                                                                                                   // 7043\n     *   { 'user': 'barney', 'age': 36, 'active': false },                                                             // 7044\n     *   { 'user': 'fred',   'age': 40, 'active': true }                                                               // 7045\n     * ];                                                                                                              // 7046\n     *                                                                                                                 // 7047\n     * // using the `_.matches` callback shorthand                                                                     // 7048\n     * _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');                                                // 7049\n     * // => ['barney']                                                                                                // 7050\n     *                                                                                                                 // 7051\n     * // using the `_.matchesProperty` callback shorthand                                                             // 7052\n     * _.pluck(_.reject(users, 'active', false), 'user');                                                              // 7053\n     * // => ['fred']                                                                                                  // 7054\n     *                                                                                                                 // 7055\n     * // using the `_.property` callback shorthand                                                                    // 7056\n     * _.pluck(_.reject(users, 'active'), 'user');                                                                     // 7057\n     * // => ['barney']                                                                                                // 7058\n     */                                                                                                                // 7059\n    function reject(collection, predicate, thisArg) {                                                                  // 7060\n      var func = isArray(collection) ? arrayFilter : baseFilter;                                                       // 7061\n      predicate = getCallback(predicate, thisArg, 3);                                                                  // 7062\n      return func(collection, function(value, index, collection) {                                                     // 7063\n        return !predicate(value, index, collection);                                                                   // 7064\n      });                                                                                                              // 7065\n    }                                                                                                                  // 7066\n                                                                                                                       // 7067\n    /**                                                                                                                // 7068\n     * Gets a random element or `n` random elements from a collection.                                                 // 7069\n     *                                                                                                                 // 7070\n     * @static                                                                                                         // 7071\n     * @memberOf _                                                                                                     // 7072\n     * @category Collection                                                                                            // 7073\n     * @param {Array|Object|string} collection The collection to sample.                                               // 7074\n     * @param {number} [n] The number of elements to sample.                                                           // 7075\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 7076\n     * @returns {*} Returns the random sample(s).                                                                      // 7077\n     * @example                                                                                                        // 7078\n     *                                                                                                                 // 7079\n     * _.sample([1, 2, 3, 4]);                                                                                         // 7080\n     * // => 2                                                                                                         // 7081\n     *                                                                                                                 // 7082\n     * _.sample([1, 2, 3, 4], 2);                                                                                      // 7083\n     * // => [3, 1]                                                                                                    // 7084\n     */                                                                                                                // 7085\n    function sample(collection, n, guard) {                                                                            // 7086\n      if (guard ? isIterateeCall(collection, n, guard) : n == null) {                                                  // 7087\n        collection = toIterable(collection);                                                                           // 7088\n        var length = collection.length;                                                                                // 7089\n        return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;                                         // 7090\n      }                                                                                                                // 7091\n      var index = -1,                                                                                                  // 7092\n          result = toArray(collection),                                                                                // 7093\n          length = result.length,                                                                                      // 7094\n          lastIndex = length - 1;                                                                                      // 7095\n                                                                                                                       // 7096\n      n = nativeMin(n < 0 ? 0 : (+n || 0), length);                                                                    // 7097\n      while (++index < n) {                                                                                            // 7098\n        var rand = baseRandom(index, lastIndex),                                                                       // 7099\n            value = result[rand];                                                                                      // 7100\n                                                                                                                       // 7101\n        result[rand] = result[index];                                                                                  // 7102\n        result[index] = value;                                                                                         // 7103\n      }                                                                                                                // 7104\n      result.length = n;                                                                                               // 7105\n      return result;                                                                                                   // 7106\n    }                                                                                                                  // 7107\n                                                                                                                       // 7108\n    /**                                                                                                                // 7109\n     * Creates an array of shuffled values, using a version of the                                                     // 7110\n     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).                                     // 7111\n     *                                                                                                                 // 7112\n     * @static                                                                                                         // 7113\n     * @memberOf _                                                                                                     // 7114\n     * @category Collection                                                                                            // 7115\n     * @param {Array|Object|string} collection The collection to shuffle.                                              // 7116\n     * @returns {Array} Returns the new shuffled array.                                                                // 7117\n     * @example                                                                                                        // 7118\n     *                                                                                                                 // 7119\n     * _.shuffle([1, 2, 3, 4]);                                                                                        // 7120\n     * // => [4, 1, 3, 2]                                                                                              // 7121\n     */                                                                                                                // 7122\n    function shuffle(collection) {                                                                                     // 7123\n      return sample(collection, POSITIVE_INFINITY);                                                                    // 7124\n    }                                                                                                                  // 7125\n                                                                                                                       // 7126\n    /**                                                                                                                // 7127\n     * Gets the size of `collection` by returning its length for array-like                                            // 7128\n     * values or the number of own enumerable properties for objects.                                                  // 7129\n     *                                                                                                                 // 7130\n     * @static                                                                                                         // 7131\n     * @memberOf _                                                                                                     // 7132\n     * @category Collection                                                                                            // 7133\n     * @param {Array|Object|string} collection The collection to inspect.                                              // 7134\n     * @returns {number} Returns the size of `collection`.                                                             // 7135\n     * @example                                                                                                        // 7136\n     *                                                                                                                 // 7137\n     * _.size([1, 2, 3]);                                                                                              // 7138\n     * // => 3                                                                                                         // 7139\n     *                                                                                                                 // 7140\n     * _.size({ 'a': 1, 'b': 2 });                                                                                     // 7141\n     * // => 2                                                                                                         // 7142\n     *                                                                                                                 // 7143\n     * _.size('pebbles');                                                                                              // 7144\n     * // => 7                                                                                                         // 7145\n     */                                                                                                                // 7146\n    function size(collection) {                                                                                        // 7147\n      var length = collection ? getLength(collection) : 0;                                                             // 7148\n      return isLength(length) ? length : keys(collection).length;                                                      // 7149\n    }                                                                                                                  // 7150\n                                                                                                                       // 7151\n    /**                                                                                                                // 7152\n     * Checks if `predicate` returns truthy for **any** element of `collection`.                                       // 7153\n     * The function returns as soon as it finds a passing value and does not iterate                                   // 7154\n     * over the entire collection. The predicate is bound to `thisArg` and invoked                                     // 7155\n     * with three arguments: (value, index|key, collection).                                                           // 7156\n     *                                                                                                                 // 7157\n     * If a property name is provided for `predicate` the created `_.property`                                         // 7158\n     * style callback returns the property value of the given element.                                                 // 7159\n     *                                                                                                                 // 7160\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 7161\n     * style callback returns `true` for elements that have a matching property                                        // 7162\n     * value, else `false`.                                                                                            // 7163\n     *                                                                                                                 // 7164\n     * If an object is provided for `predicate` the created `_.matches` style                                          // 7165\n     * callback returns `true` for elements that have the properties of the given                                      // 7166\n     * object, else `false`.                                                                                           // 7167\n     *                                                                                                                 // 7168\n     * @static                                                                                                         // 7169\n     * @memberOf _                                                                                                     // 7170\n     * @alias any                                                                                                      // 7171\n     * @category Collection                                                                                            // 7172\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 7173\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 7174\n     *  per iteration.                                                                                                 // 7175\n     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 7176\n     * @returns {boolean} Returns `true` if any element passes the predicate check,                                    // 7177\n     *  else `false`.                                                                                                  // 7178\n     * @example                                                                                                        // 7179\n     *                                                                                                                 // 7180\n     * _.some([null, 0, 'yes', false], Boolean);                                                                       // 7181\n     * // => true                                                                                                      // 7182\n     *                                                                                                                 // 7183\n     * var users = [                                                                                                   // 7184\n     *   { 'user': 'barney', 'active': true },                                                                         // 7185\n     *   { 'user': 'fred',   'active': false }                                                                         // 7186\n     * ];                                                                                                              // 7187\n     *                                                                                                                 // 7188\n     * // using the `_.matches` callback shorthand                                                                     // 7189\n     * _.some(users, { 'user': 'barney', 'active': false });                                                           // 7190\n     * // => false                                                                                                     // 7191\n     *                                                                                                                 // 7192\n     * // using the `_.matchesProperty` callback shorthand                                                             // 7193\n     * _.some(users, 'active', false);                                                                                 // 7194\n     * // => true                                                                                                      // 7195\n     *                                                                                                                 // 7196\n     * // using the `_.property` callback shorthand                                                                    // 7197\n     * _.some(users, 'active');                                                                                        // 7198\n     * // => true                                                                                                      // 7199\n     */                                                                                                                // 7200\n    function some(collection, predicate, thisArg) {                                                                    // 7201\n      var func = isArray(collection) ? arraySome : baseSome;                                                           // 7202\n      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {                                                 // 7203\n        predicate = undefined;                                                                                         // 7204\n      }                                                                                                                // 7205\n      if (typeof predicate != 'function' || thisArg !== undefined) {                                                   // 7206\n        predicate = getCallback(predicate, thisArg, 3);                                                                // 7207\n      }                                                                                                                // 7208\n      return func(collection, predicate);                                                                              // 7209\n    }                                                                                                                  // 7210\n                                                                                                                       // 7211\n    /**                                                                                                                // 7212\n     * Creates an array of elements, sorted in ascending order by the results of                                       // 7213\n     * running each element in a collection through `iteratee`. This method performs                                   // 7214\n     * a stable sort, that is, it preserves the original sort order of equal elements.                                 // 7215\n     * The `iteratee` is bound to `thisArg` and invoked with three arguments:                                          // 7216\n     * (value, index|key, collection).                                                                                 // 7217\n     *                                                                                                                 // 7218\n     * If a property name is provided for `iteratee` the created `_.property`                                          // 7219\n     * style callback returns the property value of the given element.                                                 // 7220\n     *                                                                                                                 // 7221\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 7222\n     * style callback returns `true` for elements that have a matching property                                        // 7223\n     * value, else `false`.                                                                                            // 7224\n     *                                                                                                                 // 7225\n     * If an object is provided for `iteratee` the created `_.matches` style                                           // 7226\n     * callback returns `true` for elements that have the properties of the given                                      // 7227\n     * object, else `false`.                                                                                           // 7228\n     *                                                                                                                 // 7229\n     * @static                                                                                                         // 7230\n     * @memberOf _                                                                                                     // 7231\n     * @category Collection                                                                                            // 7232\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 7233\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked                                      // 7234\n     *  per iteration.                                                                                                 // 7235\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 7236\n     * @returns {Array} Returns the new sorted array.                                                                  // 7237\n     * @example                                                                                                        // 7238\n     *                                                                                                                 // 7239\n     * _.sortBy([1, 2, 3], function(n) {                                                                               // 7240\n     *   return Math.sin(n);                                                                                           // 7241\n     * });                                                                                                             // 7242\n     * // => [3, 1, 2]                                                                                                 // 7243\n     *                                                                                                                 // 7244\n     * _.sortBy([1, 2, 3], function(n) {                                                                               // 7245\n     *   return this.sin(n);                                                                                           // 7246\n     * }, Math);                                                                                                       // 7247\n     * // => [3, 1, 2]                                                                                                 // 7248\n     *                                                                                                                 // 7249\n     * var users = [                                                                                                   // 7250\n     *   { 'user': 'fred' },                                                                                           // 7251\n     *   { 'user': 'pebbles' },                                                                                        // 7252\n     *   { 'user': 'barney' }                                                                                          // 7253\n     * ];                                                                                                              // 7254\n     *                                                                                                                 // 7255\n     * // using the `_.property` callback shorthand                                                                    // 7256\n     * _.pluck(_.sortBy(users, 'user'), 'user');                                                                       // 7257\n     * // => ['barney', 'fred', 'pebbles']                                                                             // 7258\n     */                                                                                                                // 7259\n    function sortBy(collection, iteratee, thisArg) {                                                                   // 7260\n      if (collection == null) {                                                                                        // 7261\n        return [];                                                                                                     // 7262\n      }                                                                                                                // 7263\n      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {                                                  // 7264\n        iteratee = undefined;                                                                                          // 7265\n      }                                                                                                                // 7266\n      var index = -1;                                                                                                  // 7267\n      iteratee = getCallback(iteratee, thisArg, 3);                                                                    // 7268\n                                                                                                                       // 7269\n      var result = baseMap(collection, function(value, key, collection) {                                              // 7270\n        return { 'criteria': iteratee(value, key, collection), 'index': ++index, 'value': value };                     // 7271\n      });                                                                                                              // 7272\n      return baseSortBy(result, compareAscending);                                                                     // 7273\n    }                                                                                                                  // 7274\n                                                                                                                       // 7275\n    /**                                                                                                                // 7276\n     * This method is like `_.sortBy` except that it can sort by multiple iteratees                                    // 7277\n     * or property names.                                                                                              // 7278\n     *                                                                                                                 // 7279\n     * If a property name is provided for an iteratee the created `_.property`                                         // 7280\n     * style callback returns the property value of the given element.                                                 // 7281\n     *                                                                                                                 // 7282\n     * If an object is provided for an iteratee the created `_.matches` style                                          // 7283\n     * callback returns `true` for elements that have the properties of the given                                      // 7284\n     * object, else `false`.                                                                                           // 7285\n     *                                                                                                                 // 7286\n     * @static                                                                                                         // 7287\n     * @memberOf _                                                                                                     // 7288\n     * @category Collection                                                                                            // 7289\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 7290\n     * @param {...(Function|Function[]|Object|Object[]|string|string[])} iteratees                                     // 7291\n     *  The iteratees to sort by, specified as individual values or arrays of values.                                  // 7292\n     * @returns {Array} Returns the new sorted array.                                                                  // 7293\n     * @example                                                                                                        // 7294\n     *                                                                                                                 // 7295\n     * var users = [                                                                                                   // 7296\n     *   { 'user': 'fred',   'age': 48 },                                                                              // 7297\n     *   { 'user': 'barney', 'age': 36 },                                                                              // 7298\n     *   { 'user': 'fred',   'age': 42 },                                                                              // 7299\n     *   { 'user': 'barney', 'age': 34 }                                                                               // 7300\n     * ];                                                                                                              // 7301\n     *                                                                                                                 // 7302\n     * _.map(_.sortByAll(users, ['user', 'age']), _.values);                                                           // 7303\n     * // => [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]                                              // 7304\n     *                                                                                                                 // 7305\n     * _.map(_.sortByAll(users, 'user', function(chr) {                                                                // 7306\n     *   return Math.floor(chr.age / 10);                                                                              // 7307\n     * }), _.values);                                                                                                  // 7308\n     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]                                              // 7309\n     */                                                                                                                // 7310\n    var sortByAll = restParam(function(collection, iteratees) {                                                        // 7311\n      if (collection == null) {                                                                                        // 7312\n        return [];                                                                                                     // 7313\n      }                                                                                                                // 7314\n      var guard = iteratees[2];                                                                                        // 7315\n      if (guard && isIterateeCall(iteratees[0], iteratees[1], guard)) {                                                // 7316\n        iteratees.length = 1;                                                                                          // 7317\n      }                                                                                                                // 7318\n      return baseSortByOrder(collection, baseFlatten(iteratees), []);                                                  // 7319\n    });                                                                                                                // 7320\n                                                                                                                       // 7321\n    /**                                                                                                                // 7322\n     * This method is like `_.sortByAll` except that it allows specifying the                                          // 7323\n     * sort orders of the iteratees to sort by. If `orders` is unspecified, all                                        // 7324\n     * values are sorted in ascending order. Otherwise, a value is sorted in                                           // 7325\n     * ascending order if its corresponding order is \"asc\", and descending if \"desc\".                                  // 7326\n     *                                                                                                                 // 7327\n     * If a property name is provided for an iteratee the created `_.property`                                         // 7328\n     * style callback returns the property value of the given element.                                                 // 7329\n     *                                                                                                                 // 7330\n     * If an object is provided for an iteratee the created `_.matches` style                                          // 7331\n     * callback returns `true` for elements that have the properties of the given                                      // 7332\n     * object, else `false`.                                                                                           // 7333\n     *                                                                                                                 // 7334\n     * @static                                                                                                         // 7335\n     * @memberOf _                                                                                                     // 7336\n     * @category Collection                                                                                            // 7337\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 7338\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.                                       // 7339\n     * @param {boolean[]} [orders] The sort orders of `iteratees`.                                                     // 7340\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.                               // 7341\n     * @returns {Array} Returns the new sorted array.                                                                  // 7342\n     * @example                                                                                                        // 7343\n     *                                                                                                                 // 7344\n     * var users = [                                                                                                   // 7345\n     *   { 'user': 'fred',   'age': 48 },                                                                              // 7346\n     *   { 'user': 'barney', 'age': 34 },                                                                              // 7347\n     *   { 'user': 'fred',   'age': 42 },                                                                              // 7348\n     *   { 'user': 'barney', 'age': 36 }                                                                               // 7349\n     * ];                                                                                                              // 7350\n     *                                                                                                                 // 7351\n     * // sort by `user` in ascending order and by `age` in descending order                                           // 7352\n     * _.map(_.sortByOrder(users, ['user', 'age'], ['asc', 'desc']), _.values);                                        // 7353\n     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]                                              // 7354\n     */                                                                                                                // 7355\n    function sortByOrder(collection, iteratees, orders, guard) {                                                       // 7356\n      if (collection == null) {                                                                                        // 7357\n        return [];                                                                                                     // 7358\n      }                                                                                                                // 7359\n      if (guard && isIterateeCall(iteratees, orders, guard)) {                                                         // 7360\n        orders = undefined;                                                                                            // 7361\n      }                                                                                                                // 7362\n      if (!isArray(iteratees)) {                                                                                       // 7363\n        iteratees = iteratees == null ? [] : [iteratees];                                                              // 7364\n      }                                                                                                                // 7365\n      if (!isArray(orders)) {                                                                                          // 7366\n        orders = orders == null ? [] : [orders];                                                                       // 7367\n      }                                                                                                                // 7368\n      return baseSortByOrder(collection, iteratees, orders);                                                           // 7369\n    }                                                                                                                  // 7370\n                                                                                                                       // 7371\n    /**                                                                                                                // 7372\n     * Performs a deep comparison between each element in `collection` and the                                         // 7373\n     * source object, returning an array of all elements that have equivalent                                          // 7374\n     * property values.                                                                                                // 7375\n     *                                                                                                                 // 7376\n     * **Note:** This method supports comparing arrays, booleans, `Date` objects,                                      // 7377\n     * numbers, `Object` objects, regexes, and strings. Objects are compared by                                        // 7378\n     * their own, not inherited, enumerable properties. For comparing a single                                         // 7379\n     * own or inherited property value see `_.matchesProperty`.                                                        // 7380\n     *                                                                                                                 // 7381\n     * @static                                                                                                         // 7382\n     * @memberOf _                                                                                                     // 7383\n     * @category Collection                                                                                            // 7384\n     * @param {Array|Object|string} collection The collection to search.                                               // 7385\n     * @param {Object} source The object of property values to match.                                                  // 7386\n     * @returns {Array} Returns the new filtered array.                                                                // 7387\n     * @example                                                                                                        // 7388\n     *                                                                                                                 // 7389\n     * var users = [                                                                                                   // 7390\n     *   { 'user': 'barney', 'age': 36, 'active': false, 'pets': ['hoppy'] },                                          // 7391\n     *   { 'user': 'fred',   'age': 40, 'active': true, 'pets': ['baby puss', 'dino'] }                                // 7392\n     * ];                                                                                                              // 7393\n     *                                                                                                                 // 7394\n     * _.pluck(_.where(users, { 'age': 36, 'active': false }), 'user');                                                // 7395\n     * // => ['barney']                                                                                                // 7396\n     *                                                                                                                 // 7397\n     * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');                                                          // 7398\n     * // => ['fred']                                                                                                  // 7399\n     */                                                                                                                // 7400\n    function where(collection, source) {                                                                               // 7401\n      return filter(collection, baseMatches(source));                                                                  // 7402\n    }                                                                                                                  // 7403\n                                                                                                                       // 7404\n    /*------------------------------------------------------------------------*/                                       // 7405\n                                                                                                                       // 7406\n    /**                                                                                                                // 7407\n     * Gets the number of milliseconds that have elapsed since the Unix epoch                                          // 7408\n     * (1 January 1970 00:00:00 UTC).                                                                                  // 7409\n     *                                                                                                                 // 7410\n     * @static                                                                                                         // 7411\n     * @memberOf _                                                                                                     // 7412\n     * @category Date                                                                                                  // 7413\n     * @example                                                                                                        // 7414\n     *                                                                                                                 // 7415\n     * _.defer(function(stamp) {                                                                                       // 7416\n     *   console.log(_.now() - stamp);                                                                                 // 7417\n     * }, _.now());                                                                                                    // 7418\n     * // => logs the number of milliseconds it took for the deferred function to be invoked                           // 7419\n     */                                                                                                                // 7420\n    var now = nativeNow || function() {                                                                                // 7421\n      return new Date().getTime();                                                                                     // 7422\n    };                                                                                                                 // 7423\n                                                                                                                       // 7424\n    /*------------------------------------------------------------------------*/                                       // 7425\n                                                                                                                       // 7426\n    /**                                                                                                                // 7427\n     * The opposite of `_.before`; this method creates a function that invokes                                         // 7428\n     * `func` once it's called `n` or more times.                                                                      // 7429\n     *                                                                                                                 // 7430\n     * @static                                                                                                         // 7431\n     * @memberOf _                                                                                                     // 7432\n     * @category Function                                                                                              // 7433\n     * @param {number} n The number of calls before `func` is invoked.                                                 // 7434\n     * @param {Function} func The function to restrict.                                                                // 7435\n     * @returns {Function} Returns the new restricted function.                                                        // 7436\n     * @example                                                                                                        // 7437\n     *                                                                                                                 // 7438\n     * var saves = ['profile', 'settings'];                                                                            // 7439\n     *                                                                                                                 // 7440\n     * var done = _.after(saves.length, function() {                                                                   // 7441\n     *   console.log('done saving!');                                                                                  // 7442\n     * });                                                                                                             // 7443\n     *                                                                                                                 // 7444\n     * _.forEach(saves, function(type) {                                                                               // 7445\n     *   asyncSave({ 'type': type, 'complete': done });                                                                // 7446\n     * });                                                                                                             // 7447\n     * // => logs 'done saving!' after the two async saves have completed                                              // 7448\n     */                                                                                                                // 7449\n    function after(n, func) {                                                                                          // 7450\n      if (typeof func != 'function') {                                                                                 // 7451\n        if (typeof n == 'function') {                                                                                  // 7452\n          var temp = n;                                                                                                // 7453\n          n = func;                                                                                                    // 7454\n          func = temp;                                                                                                 // 7455\n        } else {                                                                                                       // 7456\n          throw new TypeError(FUNC_ERROR_TEXT);                                                                        // 7457\n        }                                                                                                              // 7458\n      }                                                                                                                // 7459\n      n = nativeIsFinite(n = +n) ? n : 0;                                                                              // 7460\n      return function() {                                                                                              // 7461\n        if (--n < 1) {                                                                                                 // 7462\n          return func.apply(this, arguments);                                                                          // 7463\n        }                                                                                                              // 7464\n      };                                                                                                               // 7465\n    }                                                                                                                  // 7466\n                                                                                                                       // 7467\n    /**                                                                                                                // 7468\n     * Creates a function that accepts up to `n` arguments ignoring any                                                // 7469\n     * additional arguments.                                                                                           // 7470\n     *                                                                                                                 // 7471\n     * @static                                                                                                         // 7472\n     * @memberOf _                                                                                                     // 7473\n     * @category Function                                                                                              // 7474\n     * @param {Function} func The function to cap arguments for.                                                       // 7475\n     * @param {number} [n=func.length] The arity cap.                                                                  // 7476\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 7477\n     * @returns {Function} Returns the new function.                                                                   // 7478\n     * @example                                                                                                        // 7479\n     *                                                                                                                 // 7480\n     * _.map(['6', '8', '10'], _.ary(parseInt, 1));                                                                    // 7481\n     * // => [6, 8, 10]                                                                                                // 7482\n     */                                                                                                                // 7483\n    function ary(func, n, guard) {                                                                                     // 7484\n      if (guard && isIterateeCall(func, n, guard)) {                                                                   // 7485\n        n = undefined;                                                                                                 // 7486\n      }                                                                                                                // 7487\n      n = (func && n == null) ? func.length : nativeMax(+n || 0, 0);                                                   // 7488\n      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);                             // 7489\n    }                                                                                                                  // 7490\n                                                                                                                       // 7491\n    /**                                                                                                                // 7492\n     * Creates a function that invokes `func`, with the `this` binding and arguments                                   // 7493\n     * of the created function, while it's called less than `n` times. Subsequent                                      // 7494\n     * calls to the created function return the result of the last `func` invocation.                                  // 7495\n     *                                                                                                                 // 7496\n     * @static                                                                                                         // 7497\n     * @memberOf _                                                                                                     // 7498\n     * @category Function                                                                                              // 7499\n     * @param {number} n The number of calls at which `func` is no longer invoked.                                     // 7500\n     * @param {Function} func The function to restrict.                                                                // 7501\n     * @returns {Function} Returns the new restricted function.                                                        // 7502\n     * @example                                                                                                        // 7503\n     *                                                                                                                 // 7504\n     * jQuery('#add').on('click', _.before(5, addContactToList));                                                      // 7505\n     * // => allows adding up to 4 contacts to the list                                                                // 7506\n     */                                                                                                                // 7507\n    function before(n, func) {                                                                                         // 7508\n      var result;                                                                                                      // 7509\n      if (typeof func != 'function') {                                                                                 // 7510\n        if (typeof n == 'function') {                                                                                  // 7511\n          var temp = n;                                                                                                // 7512\n          n = func;                                                                                                    // 7513\n          func = temp;                                                                                                 // 7514\n        } else {                                                                                                       // 7515\n          throw new TypeError(FUNC_ERROR_TEXT);                                                                        // 7516\n        }                                                                                                              // 7517\n      }                                                                                                                // 7518\n      return function() {                                                                                              // 7519\n        if (--n > 0) {                                                                                                 // 7520\n          result = func.apply(this, arguments);                                                                        // 7521\n        }                                                                                                              // 7522\n        if (n <= 1) {                                                                                                  // 7523\n          func = undefined;                                                                                            // 7524\n        }                                                                                                              // 7525\n        return result;                                                                                                 // 7526\n      };                                                                                                               // 7527\n    }                                                                                                                  // 7528\n                                                                                                                       // 7529\n    /**                                                                                                                // 7530\n     * Creates a function that invokes `func` with the `this` binding of `thisArg`                                     // 7531\n     * and prepends any additional `_.bind` arguments to those provided to the                                         // 7532\n     * bound function.                                                                                                 // 7533\n     *                                                                                                                 // 7534\n     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,                                     // 7535\n     * may be used as a placeholder for partially applied arguments.                                                   // 7536\n     *                                                                                                                 // 7537\n     * **Note:** Unlike native `Function#bind` this method does not set the \"length\"                                   // 7538\n     * property of bound functions.                                                                                    // 7539\n     *                                                                                                                 // 7540\n     * @static                                                                                                         // 7541\n     * @memberOf _                                                                                                     // 7542\n     * @category Function                                                                                              // 7543\n     * @param {Function} func The function to bind.                                                                    // 7544\n     * @param {*} thisArg The `this` binding of `func`.                                                                // 7545\n     * @param {...*} [partials] The arguments to be partially applied.                                                 // 7546\n     * @returns {Function} Returns the new bound function.                                                             // 7547\n     * @example                                                                                                        // 7548\n     *                                                                                                                 // 7549\n     * var greet = function(greeting, punctuation) {                                                                   // 7550\n     *   return greeting + ' ' + this.user + punctuation;                                                              // 7551\n     * };                                                                                                              // 7552\n     *                                                                                                                 // 7553\n     * var object = { 'user': 'fred' };                                                                                // 7554\n     *                                                                                                                 // 7555\n     * var bound = _.bind(greet, object, 'hi');                                                                        // 7556\n     * bound('!');                                                                                                     // 7557\n     * // => 'hi fred!'                                                                                                // 7558\n     *                                                                                                                 // 7559\n     * // using placeholders                                                                                           // 7560\n     * var bound = _.bind(greet, object, _, '!');                                                                      // 7561\n     * bound('hi');                                                                                                    // 7562\n     * // => 'hi fred!'                                                                                                // 7563\n     */                                                                                                                // 7564\n    var bind = restParam(function(func, thisArg, partials) {                                                           // 7565\n      var bitmask = BIND_FLAG;                                                                                         // 7566\n      if (partials.length) {                                                                                           // 7567\n        var holders = replaceHolders(partials, bind.placeholder);                                                      // 7568\n        bitmask |= PARTIAL_FLAG;                                                                                       // 7569\n      }                                                                                                                // 7570\n      return createWrapper(func, bitmask, thisArg, partials, holders);                                                 // 7571\n    });                                                                                                                // 7572\n                                                                                                                       // 7573\n    /**                                                                                                                // 7574\n     * Binds methods of an object to the object itself, overwriting the existing                                       // 7575\n     * method. Method names may be specified as individual arguments or as arrays                                      // 7576\n     * of method names. If no method names are provided all enumerable function                                        // 7577\n     * properties, own and inherited, of `object` are bound.                                                           // 7578\n     *                                                                                                                 // 7579\n     * **Note:** This method does not set the \"length\" property of bound functions.                                    // 7580\n     *                                                                                                                 // 7581\n     * @static                                                                                                         // 7582\n     * @memberOf _                                                                                                     // 7583\n     * @category Function                                                                                              // 7584\n     * @param {Object} object The object to bind and assign the bound methods to.                                      // 7585\n     * @param {...(string|string[])} [methodNames] The object method names to bind,                                    // 7586\n     *  specified as individual method names or arrays of method names.                                                // 7587\n     * @returns {Object} Returns `object`.                                                                             // 7588\n     * @example                                                                                                        // 7589\n     *                                                                                                                 // 7590\n     * var view = {                                                                                                    // 7591\n     *   'label': 'docs',                                                                                              // 7592\n     *   'onClick': function() {                                                                                       // 7593\n     *     console.log('clicked ' + this.label);                                                                       // 7594\n     *   }                                                                                                             // 7595\n     * };                                                                                                              // 7596\n     *                                                                                                                 // 7597\n     * _.bindAll(view);                                                                                                // 7598\n     * jQuery('#docs').on('click', view.onClick);                                                                      // 7599\n     * // => logs 'clicked docs' when the element is clicked                                                           // 7600\n     */                                                                                                                // 7601\n    var bindAll = restParam(function(object, methodNames) {                                                            // 7602\n      methodNames = methodNames.length ? baseFlatten(methodNames) : functions(object);                                 // 7603\n                                                                                                                       // 7604\n      var index = -1,                                                                                                  // 7605\n          length = methodNames.length;                                                                                 // 7606\n                                                                                                                       // 7607\n      while (++index < length) {                                                                                       // 7608\n        var key = methodNames[index];                                                                                  // 7609\n        object[key] = createWrapper(object[key], BIND_FLAG, object);                                                   // 7610\n      }                                                                                                                // 7611\n      return object;                                                                                                   // 7612\n    });                                                                                                                // 7613\n                                                                                                                       // 7614\n    /**                                                                                                                // 7615\n     * Creates a function that invokes the method at `object[key]` and prepends                                        // 7616\n     * any additional `_.bindKey` arguments to those provided to the bound function.                                   // 7617\n     *                                                                                                                 // 7618\n     * This method differs from `_.bind` by allowing bound functions to reference                                      // 7619\n     * methods that may be redefined or don't yet exist.                                                               // 7620\n     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)                // 7621\n     * for more details.                                                                                               // 7622\n     *                                                                                                                 // 7623\n     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic                                          // 7624\n     * builds, may be used as a placeholder for partially applied arguments.                                           // 7625\n     *                                                                                                                 // 7626\n     * @static                                                                                                         // 7627\n     * @memberOf _                                                                                                     // 7628\n     * @category Function                                                                                              // 7629\n     * @param {Object} object The object the method belongs to.                                                        // 7630\n     * @param {string} key The key of the method.                                                                      // 7631\n     * @param {...*} [partials] The arguments to be partially applied.                                                 // 7632\n     * @returns {Function} Returns the new bound function.                                                             // 7633\n     * @example                                                                                                        // 7634\n     *                                                                                                                 // 7635\n     * var object = {                                                                                                  // 7636\n     *   'user': 'fred',                                                                                               // 7637\n     *   'greet': function(greeting, punctuation) {                                                                    // 7638\n     *     return greeting + ' ' + this.user + punctuation;                                                            // 7639\n     *   }                                                                                                             // 7640\n     * };                                                                                                              // 7641\n     *                                                                                                                 // 7642\n     * var bound = _.bindKey(object, 'greet', 'hi');                                                                   // 7643\n     * bound('!');                                                                                                     // 7644\n     * // => 'hi fred!'                                                                                                // 7645\n     *                                                                                                                 // 7646\n     * object.greet = function(greeting, punctuation) {                                                                // 7647\n     *   return greeting + 'ya ' + this.user + punctuation;                                                            // 7648\n     * };                                                                                                              // 7649\n     *                                                                                                                 // 7650\n     * bound('!');                                                                                                     // 7651\n     * // => 'hiya fred!'                                                                                              // 7652\n     *                                                                                                                 // 7653\n     * // using placeholders                                                                                           // 7654\n     * var bound = _.bindKey(object, 'greet', _, '!');                                                                 // 7655\n     * bound('hi');                                                                                                    // 7656\n     * // => 'hiya fred!'                                                                                              // 7657\n     */                                                                                                                // 7658\n    var bindKey = restParam(function(object, key, partials) {                                                          // 7659\n      var bitmask = BIND_FLAG | BIND_KEY_FLAG;                                                                         // 7660\n      if (partials.length) {                                                                                           // 7661\n        var holders = replaceHolders(partials, bindKey.placeholder);                                                   // 7662\n        bitmask |= PARTIAL_FLAG;                                                                                       // 7663\n      }                                                                                                                // 7664\n      return createWrapper(key, bitmask, object, partials, holders);                                                   // 7665\n    });                                                                                                                // 7666\n                                                                                                                       // 7667\n    /**                                                                                                                // 7668\n     * Creates a function that accepts one or more arguments of `func` that when                                       // 7669\n     * called either invokes `func` returning its result, if all `func` arguments                                      // 7670\n     * have been provided, or returns a function that accepts one or more of the                                       // 7671\n     * remaining `func` arguments, and so on. The arity of `func` may be specified                                     // 7672\n     * if `func.length` is not sufficient.                                                                             // 7673\n     *                                                                                                                 // 7674\n     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,                                    // 7675\n     * may be used as a placeholder for provided arguments.                                                            // 7676\n     *                                                                                                                 // 7677\n     * **Note:** This method does not set the \"length\" property of curried functions.                                  // 7678\n     *                                                                                                                 // 7679\n     * @static                                                                                                         // 7680\n     * @memberOf _                                                                                                     // 7681\n     * @category Function                                                                                              // 7682\n     * @param {Function} func The function to curry.                                                                   // 7683\n     * @param {number} [arity=func.length] The arity of `func`.                                                        // 7684\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 7685\n     * @returns {Function} Returns the new curried function.                                                           // 7686\n     * @example                                                                                                        // 7687\n     *                                                                                                                 // 7688\n     * var abc = function(a, b, c) {                                                                                   // 7689\n     *   return [a, b, c];                                                                                             // 7690\n     * };                                                                                                              // 7691\n     *                                                                                                                 // 7692\n     * var curried = _.curry(abc);                                                                                     // 7693\n     *                                                                                                                 // 7694\n     * curried(1)(2)(3);                                                                                               // 7695\n     * // => [1, 2, 3]                                                                                                 // 7696\n     *                                                                                                                 // 7697\n     * curried(1, 2)(3);                                                                                               // 7698\n     * // => [1, 2, 3]                                                                                                 // 7699\n     *                                                                                                                 // 7700\n     * curried(1, 2, 3);                                                                                               // 7701\n     * // => [1, 2, 3]                                                                                                 // 7702\n     *                                                                                                                 // 7703\n     * // using placeholders                                                                                           // 7704\n     * curried(1)(_, 3)(2);                                                                                            // 7705\n     * // => [1, 2, 3]                                                                                                 // 7706\n     */                                                                                                                // 7707\n    var curry = createCurry(CURRY_FLAG);                                                                               // 7708\n                                                                                                                       // 7709\n    /**                                                                                                                // 7710\n     * This method is like `_.curry` except that arguments are applied to `func`                                       // 7711\n     * in the manner of `_.partialRight` instead of `_.partial`.                                                       // 7712\n     *                                                                                                                 // 7713\n     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic                                       // 7714\n     * builds, may be used as a placeholder for provided arguments.                                                    // 7715\n     *                                                                                                                 // 7716\n     * **Note:** This method does not set the \"length\" property of curried functions.                                  // 7717\n     *                                                                                                                 // 7718\n     * @static                                                                                                         // 7719\n     * @memberOf _                                                                                                     // 7720\n     * @category Function                                                                                              // 7721\n     * @param {Function} func The function to curry.                                                                   // 7722\n     * @param {number} [arity=func.length] The arity of `func`.                                                        // 7723\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 7724\n     * @returns {Function} Returns the new curried function.                                                           // 7725\n     * @example                                                                                                        // 7726\n     *                                                                                                                 // 7727\n     * var abc = function(a, b, c) {                                                                                   // 7728\n     *   return [a, b, c];                                                                                             // 7729\n     * };                                                                                                              // 7730\n     *                                                                                                                 // 7731\n     * var curried = _.curryRight(abc);                                                                                // 7732\n     *                                                                                                                 // 7733\n     * curried(3)(2)(1);                                                                                               // 7734\n     * // => [1, 2, 3]                                                                                                 // 7735\n     *                                                                                                                 // 7736\n     * curried(2, 3)(1);                                                                                               // 7737\n     * // => [1, 2, 3]                                                                                                 // 7738\n     *                                                                                                                 // 7739\n     * curried(1, 2, 3);                                                                                               // 7740\n     * // => [1, 2, 3]                                                                                                 // 7741\n     *                                                                                                                 // 7742\n     * // using placeholders                                                                                           // 7743\n     * curried(3)(1, _)(2);                                                                                            // 7744\n     * // => [1, 2, 3]                                                                                                 // 7745\n     */                                                                                                                // 7746\n    var curryRight = createCurry(CURRY_RIGHT_FLAG);                                                                    // 7747\n                                                                                                                       // 7748\n    /**                                                                                                                // 7749\n     * Creates a debounced function that delays invoking `func` until after `wait`                                     // 7750\n     * milliseconds have elapsed since the last time the debounced function was                                        // 7751\n     * invoked. The debounced function comes with a `cancel` method to cancel                                          // 7752\n     * delayed invocations. Provide an options object to indicate that `func`                                          // 7753\n     * should be invoked on the leading and/or trailing edge of the `wait` timeout.                                    // 7754\n     * Subsequent calls to the debounced function return the result of the last                                        // 7755\n     * `func` invocation.                                                                                              // 7756\n     *                                                                                                                 // 7757\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked                                     // 7758\n     * on the trailing edge of the timeout only if the the debounced function is                                       // 7759\n     * invoked more than once during the `wait` timeout.                                                               // 7760\n     *                                                                                                                 // 7761\n     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)        // 7762\n     * for details over the differences between `_.debounce` and `_.throttle`.                                         // 7763\n     *                                                                                                                 // 7764\n     * @static                                                                                                         // 7765\n     * @memberOf _                                                                                                     // 7766\n     * @category Function                                                                                              // 7767\n     * @param {Function} func The function to debounce.                                                                // 7768\n     * @param {number} [wait=0] The number of milliseconds to delay.                                                   // 7769\n     * @param {Object} [options] The options object.                                                                   // 7770\n     * @param {boolean} [options.leading=false] Specify invoking on the leading                                        // 7771\n     *  edge of the timeout.                                                                                           // 7772\n     * @param {number} [options.maxWait] The maximum time `func` is allowed to be                                      // 7773\n     *  delayed before it's invoked.                                                                                   // 7774\n     * @param {boolean} [options.trailing=true] Specify invoking on the trailing                                       // 7775\n     *  edge of the timeout.                                                                                           // 7776\n     * @returns {Function} Returns the new debounced function.                                                         // 7777\n     * @example                                                                                                        // 7778\n     *                                                                                                                 // 7779\n     * // avoid costly calculations while the window size is in flux                                                   // 7780\n     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));                                                  // 7781\n     *                                                                                                                 // 7782\n     * // invoke `sendMail` when the click event is fired, debouncing subsequent calls                                 // 7783\n     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {                                                      // 7784\n     *   'leading': true,                                                                                              // 7785\n     *   'trailing': false                                                                                             // 7786\n     * }));                                                                                                            // 7787\n     *                                                                                                                 // 7788\n     * // ensure `batchLog` is invoked once after 1 second of debounced calls                                          // 7789\n     * var source = new EventSource('/stream');                                                                        // 7790\n     * jQuery(source).on('message', _.debounce(batchLog, 250, {                                                        // 7791\n     *   'maxWait': 1000                                                                                               // 7792\n     * }));                                                                                                            // 7793\n     *                                                                                                                 // 7794\n     * // cancel a debounced call                                                                                      // 7795\n     * var todoChanges = _.debounce(batchLog, 1000);                                                                   // 7796\n     * Object.observe(models.todo, todoChanges);                                                                       // 7797\n     *                                                                                                                 // 7798\n     * Object.observe(models, function(changes) {                                                                      // 7799\n     *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {                                                   // 7800\n     *     todoChanges.cancel();                                                                                       // 7801\n     *   }                                                                                                             // 7802\n     * }, ['delete']);                                                                                                 // 7803\n     *                                                                                                                 // 7804\n     * // ...at some point `models.todo` is changed                                                                    // 7805\n     * models.todo.completed = true;                                                                                   // 7806\n     *                                                                                                                 // 7807\n     * // ...before 1 second has passed `models.todo` is deleted                                                       // 7808\n     * // which cancels the debounced `todoChanges` call                                                               // 7809\n     * delete models.todo;                                                                                             // 7810\n     */                                                                                                                // 7811\n    function debounce(func, wait, options) {                                                                           // 7812\n      var args,                                                                                                        // 7813\n          maxTimeoutId,                                                                                                // 7814\n          result,                                                                                                      // 7815\n          stamp,                                                                                                       // 7816\n          thisArg,                                                                                                     // 7817\n          timeoutId,                                                                                                   // 7818\n          trailingCall,                                                                                                // 7819\n          lastCalled = 0,                                                                                              // 7820\n          maxWait = false,                                                                                             // 7821\n          trailing = true;                                                                                             // 7822\n                                                                                                                       // 7823\n      if (typeof func != 'function') {                                                                                 // 7824\n        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 7825\n      }                                                                                                                // 7826\n      wait = wait < 0 ? 0 : (+wait || 0);                                                                              // 7827\n      if (options === true) {                                                                                          // 7828\n        var leading = true;                                                                                            // 7829\n        trailing = false;                                                                                              // 7830\n      } else if (isObject(options)) {                                                                                  // 7831\n        leading = !!options.leading;                                                                                   // 7832\n        maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);                                      // 7833\n        trailing = 'trailing' in options ? !!options.trailing : trailing;                                              // 7834\n      }                                                                                                                // 7835\n                                                                                                                       // 7836\n      function cancel() {                                                                                              // 7837\n        if (timeoutId) {                                                                                               // 7838\n          clearTimeout(timeoutId);                                                                                     // 7839\n        }                                                                                                              // 7840\n        if (maxTimeoutId) {                                                                                            // 7841\n          clearTimeout(maxTimeoutId);                                                                                  // 7842\n        }                                                                                                              // 7843\n        lastCalled = 0;                                                                                                // 7844\n        maxTimeoutId = timeoutId = trailingCall = undefined;                                                           // 7845\n      }                                                                                                                // 7846\n                                                                                                                       // 7847\n      function complete(isCalled, id) {                                                                                // 7848\n        if (id) {                                                                                                      // 7849\n          clearTimeout(id);                                                                                            // 7850\n        }                                                                                                              // 7851\n        maxTimeoutId = timeoutId = trailingCall = undefined;                                                           // 7852\n        if (isCalled) {                                                                                                // 7853\n          lastCalled = now();                                                                                          // 7854\n          result = func.apply(thisArg, args);                                                                          // 7855\n          if (!timeoutId && !maxTimeoutId) {                                                                           // 7856\n            args = thisArg = undefined;                                                                                // 7857\n          }                                                                                                            // 7858\n        }                                                                                                              // 7859\n      }                                                                                                                // 7860\n                                                                                                                       // 7861\n      function delayed() {                                                                                             // 7862\n        var remaining = wait - (now() - stamp);                                                                        // 7863\n        if (remaining <= 0 || remaining > wait) {                                                                      // 7864\n          complete(trailingCall, maxTimeoutId);                                                                        // 7865\n        } else {                                                                                                       // 7866\n          timeoutId = setTimeout(delayed, remaining);                                                                  // 7867\n        }                                                                                                              // 7868\n      }                                                                                                                // 7869\n                                                                                                                       // 7870\n      function maxDelayed() {                                                                                          // 7871\n        complete(trailing, timeoutId);                                                                                 // 7872\n      }                                                                                                                // 7873\n                                                                                                                       // 7874\n      function debounced() {                                                                                           // 7875\n        args = arguments;                                                                                              // 7876\n        stamp = now();                                                                                                 // 7877\n        thisArg = this;                                                                                                // 7878\n        trailingCall = trailing && (timeoutId || !leading);                                                            // 7879\n                                                                                                                       // 7880\n        if (maxWait === false) {                                                                                       // 7881\n          var leadingCall = leading && !timeoutId;                                                                     // 7882\n        } else {                                                                                                       // 7883\n          if (!maxTimeoutId && !leading) {                                                                             // 7884\n            lastCalled = stamp;                                                                                        // 7885\n          }                                                                                                            // 7886\n          var remaining = maxWait - (stamp - lastCalled),                                                              // 7887\n              isCalled = remaining <= 0 || remaining > maxWait;                                                        // 7888\n                                                                                                                       // 7889\n          if (isCalled) {                                                                                              // 7890\n            if (maxTimeoutId) {                                                                                        // 7891\n              maxTimeoutId = clearTimeout(maxTimeoutId);                                                               // 7892\n            }                                                                                                          // 7893\n            lastCalled = stamp;                                                                                        // 7894\n            result = func.apply(thisArg, args);                                                                        // 7895\n          }                                                                                                            // 7896\n          else if (!maxTimeoutId) {                                                                                    // 7897\n            maxTimeoutId = setTimeout(maxDelayed, remaining);                                                          // 7898\n          }                                                                                                            // 7899\n        }                                                                                                              // 7900\n        if (isCalled && timeoutId) {                                                                                   // 7901\n          timeoutId = clearTimeout(timeoutId);                                                                         // 7902\n        }                                                                                                              // 7903\n        else if (!timeoutId && wait !== maxWait) {                                                                     // 7904\n          timeoutId = setTimeout(delayed, wait);                                                                       // 7905\n        }                                                                                                              // 7906\n        if (leadingCall) {                                                                                             // 7907\n          isCalled = true;                                                                                             // 7908\n          result = func.apply(thisArg, args);                                                                          // 7909\n        }                                                                                                              // 7910\n        if (isCalled && !timeoutId && !maxTimeoutId) {                                                                 // 7911\n          args = thisArg = undefined;                                                                                  // 7912\n        }                                                                                                              // 7913\n        return result;                                                                                                 // 7914\n      }                                                                                                                // 7915\n      debounced.cancel = cancel;                                                                                       // 7916\n      return debounced;                                                                                                // 7917\n    }                                                                                                                  // 7918\n                                                                                                                       // 7919\n    /**                                                                                                                // 7920\n     * Defers invoking the `func` until the current call stack has cleared. Any                                        // 7921\n     * additional arguments are provided to `func` when it's invoked.                                                  // 7922\n     *                                                                                                                 // 7923\n     * @static                                                                                                         // 7924\n     * @memberOf _                                                                                                     // 7925\n     * @category Function                                                                                              // 7926\n     * @param {Function} func The function to defer.                                                                   // 7927\n     * @param {...*} [args] The arguments to invoke the function with.                                                 // 7928\n     * @returns {number} Returns the timer id.                                                                         // 7929\n     * @example                                                                                                        // 7930\n     *                                                                                                                 // 7931\n     * _.defer(function(text) {                                                                                        // 7932\n     *   console.log(text);                                                                                            // 7933\n     * }, 'deferred');                                                                                                 // 7934\n     * // logs 'deferred' after one or more milliseconds                                                               // 7935\n     */                                                                                                                // 7936\n    var defer = restParam(function(func, args) {                                                                       // 7937\n      return baseDelay(func, 1, args);                                                                                 // 7938\n    });                                                                                                                // 7939\n                                                                                                                       // 7940\n    /**                                                                                                                // 7941\n     * Invokes `func` after `wait` milliseconds. Any additional arguments are                                          // 7942\n     * provided to `func` when it's invoked.                                                                           // 7943\n     *                                                                                                                 // 7944\n     * @static                                                                                                         // 7945\n     * @memberOf _                                                                                                     // 7946\n     * @category Function                                                                                              // 7947\n     * @param {Function} func The function to delay.                                                                   // 7948\n     * @param {number} wait The number of milliseconds to delay invocation.                                            // 7949\n     * @param {...*} [args] The arguments to invoke the function with.                                                 // 7950\n     * @returns {number} Returns the timer id.                                                                         // 7951\n     * @example                                                                                                        // 7952\n     *                                                                                                                 // 7953\n     * _.delay(function(text) {                                                                                        // 7954\n     *   console.log(text);                                                                                            // 7955\n     * }, 1000, 'later');                                                                                              // 7956\n     * // => logs 'later' after one second                                                                             // 7957\n     */                                                                                                                // 7958\n    var delay = restParam(function(func, wait, args) {                                                                 // 7959\n      return baseDelay(func, wait, args);                                                                              // 7960\n    });                                                                                                                // 7961\n                                                                                                                       // 7962\n    /**                                                                                                                // 7963\n     * Creates a function that returns the result of invoking the provided                                             // 7964\n     * functions with the `this` binding of the created function, where each                                           // 7965\n     * successive invocation is supplied the return value of the previous.                                             // 7966\n     *                                                                                                                 // 7967\n     * @static                                                                                                         // 7968\n     * @memberOf _                                                                                                     // 7969\n     * @category Function                                                                                              // 7970\n     * @param {...Function} [funcs] Functions to invoke.                                                               // 7971\n     * @returns {Function} Returns the new function.                                                                   // 7972\n     * @example                                                                                                        // 7973\n     *                                                                                                                 // 7974\n     * function square(n) {                                                                                            // 7975\n     *   return n * n;                                                                                                 // 7976\n     * }                                                                                                               // 7977\n     *                                                                                                                 // 7978\n     * var addSquare = _.flow(_.add, square);                                                                          // 7979\n     * addSquare(1, 2);                                                                                                // 7980\n     * // => 9                                                                                                         // 7981\n     */                                                                                                                // 7982\n    var flow = createFlow();                                                                                           // 7983\n                                                                                                                       // 7984\n    /**                                                                                                                // 7985\n     * This method is like `_.flow` except that it creates a function that                                             // 7986\n     * invokes the provided functions from right to left.                                                              // 7987\n     *                                                                                                                 // 7988\n     * @static                                                                                                         // 7989\n     * @memberOf _                                                                                                     // 7990\n     * @alias backflow, compose                                                                                        // 7991\n     * @category Function                                                                                              // 7992\n     * @param {...Function} [funcs] Functions to invoke.                                                               // 7993\n     * @returns {Function} Returns the new function.                                                                   // 7994\n     * @example                                                                                                        // 7995\n     *                                                                                                                 // 7996\n     * function square(n) {                                                                                            // 7997\n     *   return n * n;                                                                                                 // 7998\n     * }                                                                                                               // 7999\n     *                                                                                                                 // 8000\n     * var addSquare = _.flowRight(square, _.add);                                                                     // 8001\n     * addSquare(1, 2);                                                                                                // 8002\n     * // => 9                                                                                                         // 8003\n     */                                                                                                                // 8004\n    var flowRight = createFlow(true);                                                                                  // 8005\n                                                                                                                       // 8006\n    /**                                                                                                                // 8007\n     * Creates a function that memoizes the result of `func`. If `resolver` is                                         // 8008\n     * provided it determines the cache key for storing the result based on the                                        // 8009\n     * arguments provided to the memoized function. By default, the first argument                                     // 8010\n     * provided to the memoized function is coerced to a string and used as the                                        // 8011\n     * cache key. The `func` is invoked with the `this` binding of the memoized                                        // 8012\n     * function.                                                                                                       // 8013\n     *                                                                                                                 // 8014\n     * **Note:** The cache is exposed as the `cache` property on the memoized                                          // 8015\n     * function. Its creation may be customized by replacing the `_.memoize.Cache`                                     // 8016\n     * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)\n     * method interface of `get`, `has`, and `set`.                                                                    // 8018\n     *                                                                                                                 // 8019\n     * @static                                                                                                         // 8020\n     * @memberOf _                                                                                                     // 8021\n     * @category Function                                                                                              // 8022\n     * @param {Function} func The function to have its output memoized.                                                // 8023\n     * @param {Function} [resolver] The function to resolve the cache key.                                             // 8024\n     * @returns {Function} Returns the new memoizing function.                                                         // 8025\n     * @example                                                                                                        // 8026\n     *                                                                                                                 // 8027\n     * var upperCase = _.memoize(function(string) {                                                                    // 8028\n     *   return string.toUpperCase();                                                                                  // 8029\n     * });                                                                                                             // 8030\n     *                                                                                                                 // 8031\n     * upperCase('fred');                                                                                              // 8032\n     * // => 'FRED'                                                                                                    // 8033\n     *                                                                                                                 // 8034\n     * // modifying the result cache                                                                                   // 8035\n     * upperCase.cache.set('fred', 'BARNEY');                                                                          // 8036\n     * upperCase('fred');                                                                                              // 8037\n     * // => 'BARNEY'                                                                                                  // 8038\n     *                                                                                                                 // 8039\n     * // replacing `_.memoize.Cache`                                                                                  // 8040\n     * var object = { 'user': 'fred' };                                                                                // 8041\n     * var other = { 'user': 'barney' };                                                                               // 8042\n     * var identity = _.memoize(_.identity);                                                                           // 8043\n     *                                                                                                                 // 8044\n     * identity(object);                                                                                               // 8045\n     * // => { 'user': 'fred' }                                                                                        // 8046\n     * identity(other);                                                                                                // 8047\n     * // => { 'user': 'fred' }                                                                                        // 8048\n     *                                                                                                                 // 8049\n     * _.memoize.Cache = WeakMap;                                                                                      // 8050\n     * var identity = _.memoize(_.identity);                                                                           // 8051\n     *                                                                                                                 // 8052\n     * identity(object);                                                                                               // 8053\n     * // => { 'user': 'fred' }                                                                                        // 8054\n     * identity(other);                                                                                                // 8055\n     * // => { 'user': 'barney' }                                                                                      // 8056\n     */                                                                                                                // 8057\n    function memoize(func, resolver) {                                                                                 // 8058\n      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {                                  // 8059\n        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 8060\n      }                                                                                                                // 8061\n      var memoized = function() {                                                                                      // 8062\n        var args = arguments,                                                                                          // 8063\n            key = resolver ? resolver.apply(this, args) : args[0],                                                     // 8064\n            cache = memoized.cache;                                                                                    // 8065\n                                                                                                                       // 8066\n        if (cache.has(key)) {                                                                                          // 8067\n          return cache.get(key);                                                                                       // 8068\n        }                                                                                                              // 8069\n        var result = func.apply(this, args);                                                                           // 8070\n        memoized.cache = cache.set(key, result);                                                                       // 8071\n        return result;                                                                                                 // 8072\n      };                                                                                                               // 8073\n      memoized.cache = new memoize.Cache;                                                                              // 8074\n      return memoized;                                                                                                 // 8075\n    }                                                                                                                  // 8076\n                                                                                                                       // 8077\n    /**                                                                                                                // 8078\n     * Creates a function that runs each argument through a corresponding                                              // 8079\n     * transform function.                                                                                             // 8080\n     *                                                                                                                 // 8081\n     * @static                                                                                                         // 8082\n     * @memberOf _                                                                                                     // 8083\n     * @category Function                                                                                              // 8084\n     * @param {Function} func The function to wrap.                                                                    // 8085\n     * @param {...(Function|Function[])} [transforms] The functions to transform                                       // 8086\n     * arguments, specified as individual functions or arrays of functions.                                            // 8087\n     * @returns {Function} Returns the new function.                                                                   // 8088\n     * @example                                                                                                        // 8089\n     *                                                                                                                 // 8090\n     * function doubled(n) {                                                                                           // 8091\n     *   return n * 2;                                                                                                 // 8092\n     * }                                                                                                               // 8093\n     *                                                                                                                 // 8094\n     * function square(n) {                                                                                            // 8095\n     *   return n * n;                                                                                                 // 8096\n     * }                                                                                                               // 8097\n     *                                                                                                                 // 8098\n     * var modded = _.modArgs(function(x, y) {                                                                         // 8099\n     *   return [x, y];                                                                                                // 8100\n     * }, square, doubled);                                                                                            // 8101\n     *                                                                                                                 // 8102\n     * modded(1, 2);                                                                                                   // 8103\n     * // => [1, 4]                                                                                                    // 8104\n     *                                                                                                                 // 8105\n     * modded(5, 10);                                                                                                  // 8106\n     * // => [25, 20]                                                                                                  // 8107\n     */                                                                                                                // 8108\n    var modArgs = restParam(function(func, transforms) {                                                               // 8109\n      transforms = baseFlatten(transforms);                                                                            // 8110\n      if (typeof func != 'function' || !arrayEvery(transforms, baseIsFunction)) {                                      // 8111\n        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 8112\n      }                                                                                                                // 8113\n      var length = transforms.length;                                                                                  // 8114\n      return restParam(function(args) {                                                                                // 8115\n        var index = nativeMin(args.length, length);                                                                    // 8116\n        while (index--) {                                                                                              // 8117\n          args[index] = transforms[index](args[index]);                                                                // 8118\n        }                                                                                                              // 8119\n        return func.apply(this, args);                                                                                 // 8120\n      });                                                                                                              // 8121\n    });                                                                                                                // 8122\n                                                                                                                       // 8123\n    /**                                                                                                                // 8124\n     * Creates a function that negates the result of the predicate `func`. The                                         // 8125\n     * `func` predicate is invoked with the `this` binding and arguments of the                                        // 8126\n     * created function.                                                                                               // 8127\n     *                                                                                                                 // 8128\n     * @static                                                                                                         // 8129\n     * @memberOf _                                                                                                     // 8130\n     * @category Function                                                                                              // 8131\n     * @param {Function} predicate The predicate to negate.                                                            // 8132\n     * @returns {Function} Returns the new function.                                                                   // 8133\n     * @example                                                                                                        // 8134\n     *                                                                                                                 // 8135\n     * function isEven(n) {                                                                                            // 8136\n     *   return n % 2 == 0;                                                                                            // 8137\n     * }                                                                                                               // 8138\n     *                                                                                                                 // 8139\n     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));                                                                 // 8140\n     * // => [1, 3, 5]                                                                                                 // 8141\n     */                                                                                                                // 8142\n    function negate(predicate) {                                                                                       // 8143\n      if (typeof predicate != 'function') {                                                                            // 8144\n        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 8145\n      }                                                                                                                // 8146\n      return function() {                                                                                              // 8147\n        return !predicate.apply(this, arguments);                                                                      // 8148\n      };                                                                                                               // 8149\n    }                                                                                                                  // 8150\n                                                                                                                       // 8151\n    /**                                                                                                                // 8152\n     * Creates a function that is restricted to invoking `func` once. Repeat calls                                     // 8153\n     * to the function return the value of the first call. The `func` is invoked                                       // 8154\n     * with the `this` binding and arguments of the created function.                                                  // 8155\n     *                                                                                                                 // 8156\n     * @static                                                                                                         // 8157\n     * @memberOf _                                                                                                     // 8158\n     * @category Function                                                                                              // 8159\n     * @param {Function} func The function to restrict.                                                                // 8160\n     * @returns {Function} Returns the new restricted function.                                                        // 8161\n     * @example                                                                                                        // 8162\n     *                                                                                                                 // 8163\n     * var initialize = _.once(createApplication);                                                                     // 8164\n     * initialize();                                                                                                   // 8165\n     * initialize();                                                                                                   // 8166\n     * // `initialize` invokes `createApplication` once                                                                // 8167\n     */                                                                                                                // 8168\n    function once(func) {                                                                                              // 8169\n      return before(2, func);                                                                                          // 8170\n    }                                                                                                                  // 8171\n                                                                                                                       // 8172\n    /**                                                                                                                // 8173\n     * Creates a function that invokes `func` with `partial` arguments prepended                                       // 8174\n     * to those provided to the new function. This method is like `_.bind` except                                      // 8175\n     * it does **not** alter the `this` binding.                                                                       // 8176\n     *                                                                                                                 // 8177\n     * The `_.partial.placeholder` value, which defaults to `_` in monolithic                                          // 8178\n     * builds, may be used as a placeholder for partially applied arguments.                                           // 8179\n     *                                                                                                                 // 8180\n     * **Note:** This method does not set the \"length\" property of partially                                           // 8181\n     * applied functions.                                                                                              // 8182\n     *                                                                                                                 // 8183\n     * @static                                                                                                         // 8184\n     * @memberOf _                                                                                                     // 8185\n     * @category Function                                                                                              // 8186\n     * @param {Function} func The function to partially apply arguments to.                                            // 8187\n     * @param {...*} [partials] The arguments to be partially applied.                                                 // 8188\n     * @returns {Function} Returns the new partially applied function.                                                 // 8189\n     * @example                                                                                                        // 8190\n     *                                                                                                                 // 8191\n     * var greet = function(greeting, name) {                                                                          // 8192\n     *   return greeting + ' ' + name;                                                                                 // 8193\n     * };                                                                                                              // 8194\n     *                                                                                                                 // 8195\n     * var sayHelloTo = _.partial(greet, 'hello');                                                                     // 8196\n     * sayHelloTo('fred');                                                                                             // 8197\n     * // => 'hello fred'                                                                                              // 8198\n     *                                                                                                                 // 8199\n     * // using placeholders                                                                                           // 8200\n     * var greetFred = _.partial(greet, _, 'fred');                                                                    // 8201\n     * greetFred('hi');                                                                                                // 8202\n     * // => 'hi fred'                                                                                                 // 8203\n     */                                                                                                                // 8204\n    var partial = createPartial(PARTIAL_FLAG);                                                                         // 8205\n                                                                                                                       // 8206\n    /**                                                                                                                // 8207\n     * This method is like `_.partial` except that partially applied arguments                                         // 8208\n     * are appended to those provided to the new function.                                                             // 8209\n     *                                                                                                                 // 8210\n     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic                                     // 8211\n     * builds, may be used as a placeholder for partially applied arguments.                                           // 8212\n     *                                                                                                                 // 8213\n     * **Note:** This method does not set the \"length\" property of partially                                           // 8214\n     * applied functions.                                                                                              // 8215\n     *                                                                                                                 // 8216\n     * @static                                                                                                         // 8217\n     * @memberOf _                                                                                                     // 8218\n     * @category Function                                                                                              // 8219\n     * @param {Function} func The function to partially apply arguments to.                                            // 8220\n     * @param {...*} [partials] The arguments to be partially applied.                                                 // 8221\n     * @returns {Function} Returns the new partially applied function.                                                 // 8222\n     * @example                                                                                                        // 8223\n     *                                                                                                                 // 8224\n     * var greet = function(greeting, name) {                                                                          // 8225\n     *   return greeting + ' ' + name;                                                                                 // 8226\n     * };                                                                                                              // 8227\n     *                                                                                                                 // 8228\n     * var greetFred = _.partialRight(greet, 'fred');                                                                  // 8229\n     * greetFred('hi');                                                                                                // 8230\n     * // => 'hi fred'                                                                                                 // 8231\n     *                                                                                                                 // 8232\n     * // using placeholders                                                                                           // 8233\n     * var sayHelloTo = _.partialRight(greet, 'hello', _);                                                             // 8234\n     * sayHelloTo('fred');                                                                                             // 8235\n     * // => 'hello fred'                                                                                              // 8236\n     */                                                                                                                // 8237\n    var partialRight = createPartial(PARTIAL_RIGHT_FLAG);                                                              // 8238\n                                                                                                                       // 8239\n    /**                                                                                                                // 8240\n     * Creates a function that invokes `func` with arguments arranged according                                        // 8241\n     * to the specified indexes where the argument value at the first index is                                         // 8242\n     * provided as the first argument, the argument value at the second index is                                       // 8243\n     * provided as the second argument, and so on.                                                                     // 8244\n     *                                                                                                                 // 8245\n     * @static                                                                                                         // 8246\n     * @memberOf _                                                                                                     // 8247\n     * @category Function                                                                                              // 8248\n     * @param {Function} func The function to rearrange arguments for.                                                 // 8249\n     * @param {...(number|number[])} indexes The arranged argument indexes,                                            // 8250\n     *  specified as individual indexes or arrays of indexes.                                                          // 8251\n     * @returns {Function} Returns the new function.                                                                   // 8252\n     * @example                                                                                                        // 8253\n     *                                                                                                                 // 8254\n     * var rearged = _.rearg(function(a, b, c) {                                                                       // 8255\n     *   return [a, b, c];                                                                                             // 8256\n     * }, 2, 0, 1);                                                                                                    // 8257\n     *                                                                                                                 // 8258\n     * rearged('b', 'c', 'a')                                                                                          // 8259\n     * // => ['a', 'b', 'c']                                                                                           // 8260\n     *                                                                                                                 // 8261\n     * var map = _.rearg(_.map, [1, 0]);                                                                               // 8262\n     * map(function(n) {                                                                                               // 8263\n     *   return n * 3;                                                                                                 // 8264\n     * }, [1, 2, 3]);                                                                                                  // 8265\n     * // => [3, 6, 9]                                                                                                 // 8266\n     */                                                                                                                // 8267\n    var rearg = restParam(function(func, indexes) {                                                                    // 8268\n      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes));                   // 8269\n    });                                                                                                                // 8270\n                                                                                                                       // 8271\n    /**                                                                                                                // 8272\n     * Creates a function that invokes `func` with the `this` binding of the                                           // 8273\n     * created function and arguments from `start` and beyond provided as an array.                                    // 8274\n     *                                                                                                                 // 8275\n     * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/Web/JavaScript/Reference/Functions/rest_parameters).\n     *                                                                                                                 // 8277\n     * @static                                                                                                         // 8278\n     * @memberOf _                                                                                                     // 8279\n     * @category Function                                                                                              // 8280\n     * @param {Function} func The function to apply a rest parameter to.                                               // 8281\n     * @param {number} [start=func.length-1] The start position of the rest parameter.                                 // 8282\n     * @returns {Function} Returns the new function.                                                                   // 8283\n     * @example                                                                                                        // 8284\n     *                                                                                                                 // 8285\n     * var say = _.restParam(function(what, names) {                                                                   // 8286\n     *   return what + ' ' + _.initial(names).join(', ') +                                                             // 8287\n     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);                                                          // 8288\n     * });                                                                                                             // 8289\n     *                                                                                                                 // 8290\n     * say('hello', 'fred', 'barney', 'pebbles');                                                                      // 8291\n     * // => 'hello fred, barney, & pebbles'                                                                           // 8292\n     */                                                                                                                // 8293\n    function restParam(func, start) {                                                                                  // 8294\n      if (typeof func != 'function') {                                                                                 // 8295\n        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 8296\n      }                                                                                                                // 8297\n      start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);                                   // 8298\n      return function() {                                                                                              // 8299\n        var args = arguments,                                                                                          // 8300\n            index = -1,                                                                                                // 8301\n            length = nativeMax(args.length - start, 0),                                                                // 8302\n            rest = Array(length);                                                                                      // 8303\n                                                                                                                       // 8304\n        while (++index < length) {                                                                                     // 8305\n          rest[index] = args[start + index];                                                                           // 8306\n        }                                                                                                              // 8307\n        switch (start) {                                                                                               // 8308\n          case 0: return func.call(this, rest);                                                                        // 8309\n          case 1: return func.call(this, args[0], rest);                                                               // 8310\n          case 2: return func.call(this, args[0], args[1], rest);                                                      // 8311\n        }                                                                                                              // 8312\n        var otherArgs = Array(start + 1);                                                                              // 8313\n        index = -1;                                                                                                    // 8314\n        while (++index < start) {                                                                                      // 8315\n          otherArgs[index] = args[index];                                                                              // 8316\n        }                                                                                                              // 8317\n        otherArgs[start] = rest;                                                                                       // 8318\n        return func.apply(this, otherArgs);                                                                            // 8319\n      };                                                                                                               // 8320\n    }                                                                                                                  // 8321\n                                                                                                                       // 8322\n    /**                                                                                                                // 8323\n     * Creates a function that invokes `func` with the `this` binding of the created                                   // 8324\n     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).              // 8325\n     *                                                                                                                 // 8326\n     * **Note:** This method is based on the [spread operator](https://developer.mozilla.org/Web/JavaScript/Reference/Operators/Spread_operator).\n     *                                                                                                                 // 8328\n     * @static                                                                                                         // 8329\n     * @memberOf _                                                                                                     // 8330\n     * @category Function                                                                                              // 8331\n     * @param {Function} func The function to spread arguments over.                                                   // 8332\n     * @returns {Function} Returns the new function.                                                                   // 8333\n     * @example                                                                                                        // 8334\n     *                                                                                                                 // 8335\n     * var say = _.spread(function(who, what) {                                                                        // 8336\n     *   return who + ' says ' + what;                                                                                 // 8337\n     * });                                                                                                             // 8338\n     *                                                                                                                 // 8339\n     * say(['fred', 'hello']);                                                                                         // 8340\n     * // => 'fred says hello'                                                                                         // 8341\n     *                                                                                                                 // 8342\n     * // with a Promise                                                                                               // 8343\n     * var numbers = Promise.all([                                                                                     // 8344\n     *   Promise.resolve(40),                                                                                          // 8345\n     *   Promise.resolve(36)                                                                                           // 8346\n     * ]);                                                                                                             // 8347\n     *                                                                                                                 // 8348\n     * numbers.then(_.spread(function(x, y) {                                                                          // 8349\n     *   return x + y;                                                                                                 // 8350\n     * }));                                                                                                            // 8351\n     * // => a Promise of 76                                                                                           // 8352\n     */                                                                                                                // 8353\n    function spread(func) {                                                                                            // 8354\n      if (typeof func != 'function') {                                                                                 // 8355\n        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 8356\n      }                                                                                                                // 8357\n      return function(array) {                                                                                         // 8358\n        return func.apply(this, array);                                                                                // 8359\n      };                                                                                                               // 8360\n    }                                                                                                                  // 8361\n                                                                                                                       // 8362\n    /**                                                                                                                // 8363\n     * Creates a throttled function that only invokes `func` at most once per                                          // 8364\n     * every `wait` milliseconds. The throttled function comes with a `cancel`                                         // 8365\n     * method to cancel delayed invocations. Provide an options object to indicate                                     // 8366\n     * that `func` should be invoked on the leading and/or trailing edge of the                                        // 8367\n     * `wait` timeout. Subsequent calls to the throttled function return the                                           // 8368\n     * result of the last `func` call.                                                                                 // 8369\n     *                                                                                                                 // 8370\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked                                     // 8371\n     * on the trailing edge of the timeout only if the the throttled function is                                       // 8372\n     * invoked more than once during the `wait` timeout.                                                               // 8373\n     *                                                                                                                 // 8374\n     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)        // 8375\n     * for details over the differences between `_.throttle` and `_.debounce`.                                         // 8376\n     *                                                                                                                 // 8377\n     * @static                                                                                                         // 8378\n     * @memberOf _                                                                                                     // 8379\n     * @category Function                                                                                              // 8380\n     * @param {Function} func The function to throttle.                                                                // 8381\n     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.                                 // 8382\n     * @param {Object} [options] The options object.                                                                   // 8383\n     * @param {boolean} [options.leading=true] Specify invoking on the leading                                         // 8384\n     *  edge of the timeout.                                                                                           // 8385\n     * @param {boolean} [options.trailing=true] Specify invoking on the trailing                                       // 8386\n     *  edge of the timeout.                                                                                           // 8387\n     * @returns {Function} Returns the new throttled function.                                                         // 8388\n     * @example                                                                                                        // 8389\n     *                                                                                                                 // 8390\n     * // avoid excessively updating the position while scrolling                                                      // 8391\n     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));                                                   // 8392\n     *                                                                                                                 // 8393\n     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes                    // 8394\n     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {                                             // 8395\n     *   'trailing': false                                                                                             // 8396\n     * }));                                                                                                            // 8397\n     *                                                                                                                 // 8398\n     * // cancel a trailing throttled call                                                                             // 8399\n     * jQuery(window).on('popstate', throttled.cancel);                                                                // 8400\n     */                                                                                                                // 8401\n    function throttle(func, wait, options) {                                                                           // 8402\n      var leading = true,                                                                                              // 8403\n          trailing = true;                                                                                             // 8404\n                                                                                                                       // 8405\n      if (typeof func != 'function') {                                                                                 // 8406\n        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 8407\n      }                                                                                                                // 8408\n      if (options === false) {                                                                                         // 8409\n        leading = false;                                                                                               // 8410\n      } else if (isObject(options)) {                                                                                  // 8411\n        leading = 'leading' in options ? !!options.leading : leading;                                                  // 8412\n        trailing = 'trailing' in options ? !!options.trailing : trailing;                                              // 8413\n      }                                                                                                                // 8414\n      return debounce(func, wait, { 'leading': leading, 'maxWait': +wait, 'trailing': trailing });                     // 8415\n    }                                                                                                                  // 8416\n                                                                                                                       // 8417\n    /**                                                                                                                // 8418\n     * Creates a function that provides `value` to the wrapper function as its                                         // 8419\n     * first argument. Any additional arguments provided to the function are                                           // 8420\n     * appended to those provided to the wrapper function. The wrapper is invoked                                      // 8421\n     * with the `this` binding of the created function.                                                                // 8422\n     *                                                                                                                 // 8423\n     * @static                                                                                                         // 8424\n     * @memberOf _                                                                                                     // 8425\n     * @category Function                                                                                              // 8426\n     * @param {*} value The value to wrap.                                                                             // 8427\n     * @param {Function} wrapper The wrapper function.                                                                 // 8428\n     * @returns {Function} Returns the new function.                                                                   // 8429\n     * @example                                                                                                        // 8430\n     *                                                                                                                 // 8431\n     * var p = _.wrap(_.escape, function(func, text) {                                                                 // 8432\n     *   return '<p>' + func(text) + '</p>';                                                                           // 8433\n     * });                                                                                                             // 8434\n     *                                                                                                                 // 8435\n     * p('fred, barney, & pebbles');                                                                                   // 8436\n     * // => '<p>fred, barney, &amp; pebbles</p>'                                                                      // 8437\n     */                                                                                                                // 8438\n    function wrap(value, wrapper) {                                                                                    // 8439\n      wrapper = wrapper == null ? identity : wrapper;                                                                  // 8440\n      return createWrapper(wrapper, PARTIAL_FLAG, undefined, [value], []);                                             // 8441\n    }                                                                                                                  // 8442\n                                                                                                                       // 8443\n    /*------------------------------------------------------------------------*/                                       // 8444\n                                                                                                                       // 8445\n    /**                                                                                                                // 8446\n     * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,                                    // 8447\n     * otherwise they are assigned by reference. If `customizer` is provided it's                                      // 8448\n     * invoked to produce the cloned values. If `customizer` returns `undefined`                                       // 8449\n     * cloning is handled by the method instead. The `customizer` is bound to                                          // 8450\n     * `thisArg` and invoked with up to three argument; (value [, index|key, object]).                                 // 8451\n     *                                                                                                                 // 8452\n     * **Note:** This method is loosely based on the                                                                   // 8453\n     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).\n     * The enumerable properties of `arguments` objects and objects created by                                         // 8455\n     * constructors other than `Object` are cloned to plain `Object` objects. An                                       // 8456\n     * empty object is returned for uncloneable values such as functions, DOM nodes,                                   // 8457\n     * Maps, Sets, and WeakMaps.                                                                                       // 8458\n     *                                                                                                                 // 8459\n     * @static                                                                                                         // 8460\n     * @memberOf _                                                                                                     // 8461\n     * @category Lang                                                                                                  // 8462\n     * @param {*} value The value to clone.                                                                            // 8463\n     * @param {boolean} [isDeep] Specify a deep clone.                                                                 // 8464\n     * @param {Function} [customizer] The function to customize cloning values.                                        // 8465\n     * @param {*} [thisArg] The `this` binding of `customizer`.                                                        // 8466\n     * @returns {*} Returns the cloned value.                                                                          // 8467\n     * @example                                                                                                        // 8468\n     *                                                                                                                 // 8469\n     * var users = [                                                                                                   // 8470\n     *   { 'user': 'barney' },                                                                                         // 8471\n     *   { 'user': 'fred' }                                                                                            // 8472\n     * ];                                                                                                              // 8473\n     *                                                                                                                 // 8474\n     * var shallow = _.clone(users);                                                                                   // 8475\n     * shallow[0] === users[0];                                                                                        // 8476\n     * // => true                                                                                                      // 8477\n     *                                                                                                                 // 8478\n     * var deep = _.clone(users, true);                                                                                // 8479\n     * deep[0] === users[0];                                                                                           // 8480\n     * // => false                                                                                                     // 8481\n     *                                                                                                                 // 8482\n     * // using a customizer callback                                                                                  // 8483\n     * var el = _.clone(document.body, function(value) {                                                               // 8484\n     *   if (_.isElement(value)) {                                                                                     // 8485\n     *     return value.cloneNode(false);                                                                              // 8486\n     *   }                                                                                                             // 8487\n     * });                                                                                                             // 8488\n     *                                                                                                                 // 8489\n     * el === document.body                                                                                            // 8490\n     * // => false                                                                                                     // 8491\n     * el.nodeName                                                                                                     // 8492\n     * // => BODY                                                                                                      // 8493\n     * el.childNodes.length;                                                                                           // 8494\n     * // => 0                                                                                                         // 8495\n     */                                                                                                                // 8496\n    function clone(value, isDeep, customizer, thisArg) {                                                               // 8497\n      if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {                         // 8498\n        isDeep = false;                                                                                                // 8499\n      }                                                                                                                // 8500\n      else if (typeof isDeep == 'function') {                                                                          // 8501\n        thisArg = customizer;                                                                                          // 8502\n        customizer = isDeep;                                                                                           // 8503\n        isDeep = false;                                                                                                // 8504\n      }                                                                                                                // 8505\n      return typeof customizer == 'function'                                                                           // 8506\n        ? baseClone(value, isDeep, bindCallback(customizer, thisArg, 3))                                               // 8507\n        : baseClone(value, isDeep);                                                                                    // 8508\n    }                                                                                                                  // 8509\n                                                                                                                       // 8510\n    /**                                                                                                                // 8511\n     * Creates a deep clone of `value`. If `customizer` is provided it's invoked                                       // 8512\n     * to produce the cloned values. If `customizer` returns `undefined` cloning                                       // 8513\n     * is handled by the method instead. The `customizer` is bound to `thisArg`                                        // 8514\n     * and invoked with up to three argument; (value [, index|key, object]).                                           // 8515\n     *                                                                                                                 // 8516\n     * **Note:** This method is loosely based on the                                                                   // 8517\n     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).\n     * The enumerable properties of `arguments` objects and objects created by                                         // 8519\n     * constructors other than `Object` are cloned to plain `Object` objects. An                                       // 8520\n     * empty object is returned for uncloneable values such as functions, DOM nodes,                                   // 8521\n     * Maps, Sets, and WeakMaps.                                                                                       // 8522\n     *                                                                                                                 // 8523\n     * @static                                                                                                         // 8524\n     * @memberOf _                                                                                                     // 8525\n     * @category Lang                                                                                                  // 8526\n     * @param {*} value The value to deep clone.                                                                       // 8527\n     * @param {Function} [customizer] The function to customize cloning values.                                        // 8528\n     * @param {*} [thisArg] The `this` binding of `customizer`.                                                        // 8529\n     * @returns {*} Returns the deep cloned value.                                                                     // 8530\n     * @example                                                                                                        // 8531\n     *                                                                                                                 // 8532\n     * var users = [                                                                                                   // 8533\n     *   { 'user': 'barney' },                                                                                         // 8534\n     *   { 'user': 'fred' }                                                                                            // 8535\n     * ];                                                                                                              // 8536\n     *                                                                                                                 // 8537\n     * var deep = _.cloneDeep(users);                                                                                  // 8538\n     * deep[0] === users[0];                                                                                           // 8539\n     * // => false                                                                                                     // 8540\n     *                                                                                                                 // 8541\n     * // using a customizer callback                                                                                  // 8542\n     * var el = _.cloneDeep(document.body, function(value) {                                                           // 8543\n     *   if (_.isElement(value)) {                                                                                     // 8544\n     *     return value.cloneNode(true);                                                                               // 8545\n     *   }                                                                                                             // 8546\n     * });                                                                                                             // 8547\n     *                                                                                                                 // 8548\n     * el === document.body                                                                                            // 8549\n     * // => false                                                                                                     // 8550\n     * el.nodeName                                                                                                     // 8551\n     * // => BODY                                                                                                      // 8552\n     * el.childNodes.length;                                                                                           // 8553\n     * // => 20                                                                                                        // 8554\n     */                                                                                                                // 8555\n    function cloneDeep(value, customizer, thisArg) {                                                                   // 8556\n      return typeof customizer == 'function'                                                                           // 8557\n        ? baseClone(value, true, bindCallback(customizer, thisArg, 3))                                                 // 8558\n        : baseClone(value, true);                                                                                      // 8559\n    }                                                                                                                  // 8560\n                                                                                                                       // 8561\n    /**                                                                                                                // 8562\n     * Checks if `value` is greater than `other`.                                                                      // 8563\n     *                                                                                                                 // 8564\n     * @static                                                                                                         // 8565\n     * @memberOf _                                                                                                     // 8566\n     * @category Lang                                                                                                  // 8567\n     * @param {*} value The value to compare.                                                                          // 8568\n     * @param {*} other The other value to compare.                                                                    // 8569\n     * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.                             // 8570\n     * @example                                                                                                        // 8571\n     *                                                                                                                 // 8572\n     * _.gt(3, 1);                                                                                                     // 8573\n     * // => true                                                                                                      // 8574\n     *                                                                                                                 // 8575\n     * _.gt(3, 3);                                                                                                     // 8576\n     * // => false                                                                                                     // 8577\n     *                                                                                                                 // 8578\n     * _.gt(1, 3);                                                                                                     // 8579\n     * // => false                                                                                                     // 8580\n     */                                                                                                                // 8581\n    function gt(value, other) {                                                                                        // 8582\n      return value > other;                                                                                            // 8583\n    }                                                                                                                  // 8584\n                                                                                                                       // 8585\n    /**                                                                                                                // 8586\n     * Checks if `value` is greater than or equal to `other`.                                                          // 8587\n     *                                                                                                                 // 8588\n     * @static                                                                                                         // 8589\n     * @memberOf _                                                                                                     // 8590\n     * @category Lang                                                                                                  // 8591\n     * @param {*} value The value to compare.                                                                          // 8592\n     * @param {*} other The other value to compare.                                                                    // 8593\n     * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.                 // 8594\n     * @example                                                                                                        // 8595\n     *                                                                                                                 // 8596\n     * _.gte(3, 1);                                                                                                    // 8597\n     * // => true                                                                                                      // 8598\n     *                                                                                                                 // 8599\n     * _.gte(3, 3);                                                                                                    // 8600\n     * // => true                                                                                                      // 8601\n     *                                                                                                                 // 8602\n     * _.gte(1, 3);                                                                                                    // 8603\n     * // => false                                                                                                     // 8604\n     */                                                                                                                // 8605\n    function gte(value, other) {                                                                                       // 8606\n      return value >= other;                                                                                           // 8607\n    }                                                                                                                  // 8608\n                                                                                                                       // 8609\n    /**                                                                                                                // 8610\n     * Checks if `value` is classified as an `arguments` object.                                                       // 8611\n     *                                                                                                                 // 8612\n     * @static                                                                                                         // 8613\n     * @memberOf _                                                                                                     // 8614\n     * @category Lang                                                                                                  // 8615\n     * @param {*} value The value to check.                                                                            // 8616\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 8617\n     * @example                                                                                                        // 8618\n     *                                                                                                                 // 8619\n     * _.isArguments(function() { return arguments; }());                                                              // 8620\n     * // => true                                                                                                      // 8621\n     *                                                                                                                 // 8622\n     * _.isArguments([1, 2, 3]);                                                                                       // 8623\n     * // => false                                                                                                     // 8624\n     */                                                                                                                // 8625\n    function isArguments(value) {                                                                                      // 8626\n      return isObjectLike(value) && isArrayLike(value) &&                                                              // 8627\n        hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');                           // 8628\n    }                                                                                                                  // 8629\n                                                                                                                       // 8630\n    /**                                                                                                                // 8631\n     * Checks if `value` is classified as an `Array` object.                                                           // 8632\n     *                                                                                                                 // 8633\n     * @static                                                                                                         // 8634\n     * @memberOf _                                                                                                     // 8635\n     * @category Lang                                                                                                  // 8636\n     * @param {*} value The value to check.                                                                            // 8637\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 8638\n     * @example                                                                                                        // 8639\n     *                                                                                                                 // 8640\n     * _.isArray([1, 2, 3]);                                                                                           // 8641\n     * // => true                                                                                                      // 8642\n     *                                                                                                                 // 8643\n     * _.isArray(function() { return arguments; }());                                                                  // 8644\n     * // => false                                                                                                     // 8645\n     */                                                                                                                // 8646\n    var isArray = nativeIsArray || function(value) {                                                                   // 8647\n      return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;                     // 8648\n    };                                                                                                                 // 8649\n                                                                                                                       // 8650\n    /**                                                                                                                // 8651\n     * Checks if `value` is classified as a boolean primitive or object.                                               // 8652\n     *                                                                                                                 // 8653\n     * @static                                                                                                         // 8654\n     * @memberOf _                                                                                                     // 8655\n     * @category Lang                                                                                                  // 8656\n     * @param {*} value The value to check.                                                                            // 8657\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 8658\n     * @example                                                                                                        // 8659\n     *                                                                                                                 // 8660\n     * _.isBoolean(false);                                                                                             // 8661\n     * // => true                                                                                                      // 8662\n     *                                                                                                                 // 8663\n     * _.isBoolean(null);                                                                                              // 8664\n     * // => false                                                                                                     // 8665\n     */                                                                                                                // 8666\n    function isBoolean(value) {                                                                                        // 8667\n      return value === true || value === false || (isObjectLike(value) && objToString.call(value) == boolTag);         // 8668\n    }                                                                                                                  // 8669\n                                                                                                                       // 8670\n    /**                                                                                                                // 8671\n     * Checks if `value` is classified as a `Date` object.                                                             // 8672\n     *                                                                                                                 // 8673\n     * @static                                                                                                         // 8674\n     * @memberOf _                                                                                                     // 8675\n     * @category Lang                                                                                                  // 8676\n     * @param {*} value The value to check.                                                                            // 8677\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 8678\n     * @example                                                                                                        // 8679\n     *                                                                                                                 // 8680\n     * _.isDate(new Date);                                                                                             // 8681\n     * // => true                                                                                                      // 8682\n     *                                                                                                                 // 8683\n     * _.isDate('Mon April 23 2012');                                                                                  // 8684\n     * // => false                                                                                                     // 8685\n     */                                                                                                                // 8686\n    function isDate(value) {                                                                                           // 8687\n      return isObjectLike(value) && objToString.call(value) == dateTag;                                                // 8688\n    }                                                                                                                  // 8689\n                                                                                                                       // 8690\n    /**                                                                                                                // 8691\n     * Checks if `value` is a DOM element.                                                                             // 8692\n     *                                                                                                                 // 8693\n     * @static                                                                                                         // 8694\n     * @memberOf _                                                                                                     // 8695\n     * @category Lang                                                                                                  // 8696\n     * @param {*} value The value to check.                                                                            // 8697\n     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.                                    // 8698\n     * @example                                                                                                        // 8699\n     *                                                                                                                 // 8700\n     * _.isElement(document.body);                                                                                     // 8701\n     * // => true                                                                                                      // 8702\n     *                                                                                                                 // 8703\n     * _.isElement('<body>');                                                                                          // 8704\n     * // => false                                                                                                     // 8705\n     */                                                                                                                // 8706\n    function isElement(value) {                                                                                        // 8707\n      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);                          // 8708\n    }                                                                                                                  // 8709\n                                                                                                                       // 8710\n    /**                                                                                                                // 8711\n     * Checks if `value` is empty. A value is considered empty unless it's an                                          // 8712\n     * `arguments` object, array, string, or jQuery-like collection with a length                                      // 8713\n     * greater than `0` or an object with own enumerable properties.                                                   // 8714\n     *                                                                                                                 // 8715\n     * @static                                                                                                         // 8716\n     * @memberOf _                                                                                                     // 8717\n     * @category Lang                                                                                                  // 8718\n     * @param {Array|Object|string} value The value to inspect.                                                        // 8719\n     * @returns {boolean} Returns `true` if `value` is empty, else `false`.                                            // 8720\n     * @example                                                                                                        // 8721\n     *                                                                                                                 // 8722\n     * _.isEmpty(null);                                                                                                // 8723\n     * // => true                                                                                                      // 8724\n     *                                                                                                                 // 8725\n     * _.isEmpty(true);                                                                                                // 8726\n     * // => true                                                                                                      // 8727\n     *                                                                                                                 // 8728\n     * _.isEmpty(1);                                                                                                   // 8729\n     * // => true                                                                                                      // 8730\n     *                                                                                                                 // 8731\n     * _.isEmpty([1, 2, 3]);                                                                                           // 8732\n     * // => false                                                                                                     // 8733\n     *                                                                                                                 // 8734\n     * _.isEmpty({ 'a': 1 });                                                                                          // 8735\n     * // => false                                                                                                     // 8736\n     */                                                                                                                // 8737\n    function isEmpty(value) {                                                                                          // 8738\n      if (value == null) {                                                                                             // 8739\n        return true;                                                                                                   // 8740\n      }                                                                                                                // 8741\n      if (isArrayLike(value) && (isArray(value) || isString(value) || isArguments(value) ||                            // 8742\n          (isObjectLike(value) && isFunction(value.splice)))) {                                                        // 8743\n        return !value.length;                                                                                          // 8744\n      }                                                                                                                // 8745\n      return !keys(value).length;                                                                                      // 8746\n    }                                                                                                                  // 8747\n                                                                                                                       // 8748\n    /**                                                                                                                // 8749\n     * Performs a deep comparison between two values to determine if they are                                          // 8750\n     * equivalent. If `customizer` is provided it's invoked to compare values.                                         // 8751\n     * If `customizer` returns `undefined` comparisons are handled by the method                                       // 8752\n     * instead. The `customizer` is bound to `thisArg` and invoked with up to                                          // 8753\n     * three arguments: (value, other [, index|key]).                                                                  // 8754\n     *                                                                                                                 // 8755\n     * **Note:** This method supports comparing arrays, booleans, `Date` objects,                                      // 8756\n     * numbers, `Object` objects, regexes, and strings. Objects are compared by                                        // 8757\n     * their own, not inherited, enumerable properties. Functions and DOM nodes                                        // 8758\n     * are **not** supported. Provide a customizer function to extend support                                          // 8759\n     * for comparing other values.                                                                                     // 8760\n     *                                                                                                                 // 8761\n     * @static                                                                                                         // 8762\n     * @memberOf _                                                                                                     // 8763\n     * @alias eq                                                                                                       // 8764\n     * @category Lang                                                                                                  // 8765\n     * @param {*} value The value to compare.                                                                          // 8766\n     * @param {*} other The other value to compare.                                                                    // 8767\n     * @param {Function} [customizer] The function to customize value comparisons.                                     // 8768\n     * @param {*} [thisArg] The `this` binding of `customizer`.                                                        // 8769\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.                                   // 8770\n     * @example                                                                                                        // 8771\n     *                                                                                                                 // 8772\n     * var object = { 'user': 'fred' };                                                                                // 8773\n     * var other = { 'user': 'fred' };                                                                                 // 8774\n     *                                                                                                                 // 8775\n     * object == other;                                                                                                // 8776\n     * // => false                                                                                                     // 8777\n     *                                                                                                                 // 8778\n     * _.isEqual(object, other);                                                                                       // 8779\n     * // => true                                                                                                      // 8780\n     *                                                                                                                 // 8781\n     * // using a customizer callback                                                                                  // 8782\n     * var array = ['hello', 'goodbye'];                                                                               // 8783\n     * var other = ['hi', 'goodbye'];                                                                                  // 8784\n     *                                                                                                                 // 8785\n     * _.isEqual(array, other, function(value, other) {                                                                // 8786\n     *   if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {                                        // 8787\n     *     return true;                                                                                                // 8788\n     *   }                                                                                                             // 8789\n     * });                                                                                                             // 8790\n     * // => true                                                                                                      // 8791\n     */                                                                                                                // 8792\n    function isEqual(value, other, customizer, thisArg) {                                                              // 8793\n      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;                 // 8794\n      var result = customizer ? customizer(value, other) : undefined;                                                  // 8795\n      return  result === undefined ? baseIsEqual(value, other, customizer) : !!result;                                 // 8796\n    }                                                                                                                  // 8797\n                                                                                                                       // 8798\n    /**                                                                                                                // 8799\n     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,                                   // 8800\n     * `SyntaxError`, `TypeError`, or `URIError` object.                                                               // 8801\n     *                                                                                                                 // 8802\n     * @static                                                                                                         // 8803\n     * @memberOf _                                                                                                     // 8804\n     * @category Lang                                                                                                  // 8805\n     * @param {*} value The value to check.                                                                            // 8806\n     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.                                  // 8807\n     * @example                                                                                                        // 8808\n     *                                                                                                                 // 8809\n     * _.isError(new Error);                                                                                           // 8810\n     * // => true                                                                                                      // 8811\n     *                                                                                                                 // 8812\n     * _.isError(Error);                                                                                               // 8813\n     * // => false                                                                                                     // 8814\n     */                                                                                                                // 8815\n    function isError(value) {                                                                                          // 8816\n      return isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag;           // 8817\n    }                                                                                                                  // 8818\n                                                                                                                       // 8819\n    /**                                                                                                                // 8820\n     * Checks if `value` is a finite primitive number.                                                                 // 8821\n     *                                                                                                                 // 8822\n     * **Note:** This method is based on [`Number.isFinite`](http://ecma-international.org/ecma-262/6.0/#sec-number.isfinite).\n     *                                                                                                                 // 8824\n     * @static                                                                                                         // 8825\n     * @memberOf _                                                                                                     // 8826\n     * @category Lang                                                                                                  // 8827\n     * @param {*} value The value to check.                                                                            // 8828\n     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.                                  // 8829\n     * @example                                                                                                        // 8830\n     *                                                                                                                 // 8831\n     * _.isFinite(10);                                                                                                 // 8832\n     * // => true                                                                                                      // 8833\n     *                                                                                                                 // 8834\n     * _.isFinite('10');                                                                                               // 8835\n     * // => false                                                                                                     // 8836\n     *                                                                                                                 // 8837\n     * _.isFinite(true);                                                                                               // 8838\n     * // => false                                                                                                     // 8839\n     *                                                                                                                 // 8840\n     * _.isFinite(Object(10));                                                                                         // 8841\n     * // => false                                                                                                     // 8842\n     *                                                                                                                 // 8843\n     * _.isFinite(Infinity);                                                                                           // 8844\n     * // => false                                                                                                     // 8845\n     */                                                                                                                // 8846\n    function isFinite(value) {                                                                                         // 8847\n      return typeof value == 'number' && nativeIsFinite(value);                                                        // 8848\n    }                                                                                                                  // 8849\n                                                                                                                       // 8850\n    /**                                                                                                                // 8851\n     * Checks if `value` is classified as a `Function` object.                                                         // 8852\n     *                                                                                                                 // 8853\n     * @static                                                                                                         // 8854\n     * @memberOf _                                                                                                     // 8855\n     * @category Lang                                                                                                  // 8856\n     * @param {*} value The value to check.                                                                            // 8857\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 8858\n     * @example                                                                                                        // 8859\n     *                                                                                                                 // 8860\n     * _.isFunction(_);                                                                                                // 8861\n     * // => true                                                                                                      // 8862\n     *                                                                                                                 // 8863\n     * _.isFunction(/abc/);                                                                                            // 8864\n     * // => false                                                                                                     // 8865\n     */                                                                                                                // 8866\n    function isFunction(value) {                                                                                       // 8867\n      // The use of `Object#toString` avoids issues with the `typeof` operator                                         // 8868\n      // in older versions of Chrome and Safari which return 'function' for regexes                                    // 8869\n      // and Safari 8 which returns 'object' for typed array constructors.                                             // 8870\n      return isObject(value) && objToString.call(value) == funcTag;                                                    // 8871\n    }                                                                                                                  // 8872\n                                                                                                                       // 8873\n    /**                                                                                                                // 8874\n     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.                                // 8875\n     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)                               // 8876\n     *                                                                                                                 // 8877\n     * @static                                                                                                         // 8878\n     * @memberOf _                                                                                                     // 8879\n     * @category Lang                                                                                                  // 8880\n     * @param {*} value The value to check.                                                                            // 8881\n     * @returns {boolean} Returns `true` if `value` is an object, else `false`.                                        // 8882\n     * @example                                                                                                        // 8883\n     *                                                                                                                 // 8884\n     * _.isObject({});                                                                                                 // 8885\n     * // => true                                                                                                      // 8886\n     *                                                                                                                 // 8887\n     * _.isObject([1, 2, 3]);                                                                                          // 8888\n     * // => true                                                                                                      // 8889\n     *                                                                                                                 // 8890\n     * _.isObject(1);                                                                                                  // 8891\n     * // => false                                                                                                     // 8892\n     */                                                                                                                // 8893\n    function isObject(value) {                                                                                         // 8894\n      // Avoid a V8 JIT bug in Chrome 19-20.                                                                           // 8895\n      // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.                                      // 8896\n      var type = typeof value;                                                                                         // 8897\n      return !!value && (type == 'object' || type == 'function');                                                      // 8898\n    }                                                                                                                  // 8899\n                                                                                                                       // 8900\n    /**                                                                                                                // 8901\n     * Performs a deep comparison between `object` and `source` to determine if                                        // 8902\n     * `object` contains equivalent property values. If `customizer` is provided                                       // 8903\n     * it's invoked to compare values. If `customizer` returns `undefined`                                             // 8904\n     * comparisons are handled by the method instead. The `customizer` is bound                                        // 8905\n     * to `thisArg` and invoked with three arguments: (value, other, index|key).                                       // 8906\n     *                                                                                                                 // 8907\n     * **Note:** This method supports comparing properties of arrays, booleans,                                        // 8908\n     * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions                                      // 8909\n     * and DOM nodes are **not** supported. Provide a customizer function to extend                                    // 8910\n     * support for comparing other values.                                                                             // 8911\n     *                                                                                                                 // 8912\n     * @static                                                                                                         // 8913\n     * @memberOf _                                                                                                     // 8914\n     * @category Lang                                                                                                  // 8915\n     * @param {Object} object The object to inspect.                                                                   // 8916\n     * @param {Object} source The object of property values to match.                                                  // 8917\n     * @param {Function} [customizer] The function to customize value comparisons.                                     // 8918\n     * @param {*} [thisArg] The `this` binding of `customizer`.                                                        // 8919\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.                                         // 8920\n     * @example                                                                                                        // 8921\n     *                                                                                                                 // 8922\n     * var object = { 'user': 'fred', 'age': 40 };                                                                     // 8923\n     *                                                                                                                 // 8924\n     * _.isMatch(object, { 'age': 40 });                                                                               // 8925\n     * // => true                                                                                                      // 8926\n     *                                                                                                                 // 8927\n     * _.isMatch(object, { 'age': 36 });                                                                               // 8928\n     * // => false                                                                                                     // 8929\n     *                                                                                                                 // 8930\n     * // using a customizer callback                                                                                  // 8931\n     * var object = { 'greeting': 'hello' };                                                                           // 8932\n     * var source = { 'greeting': 'hi' };                                                                              // 8933\n     *                                                                                                                 // 8934\n     * _.isMatch(object, source, function(value, other) {                                                              // 8935\n     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;                          // 8936\n     * });                                                                                                             // 8937\n     * // => true                                                                                                      // 8938\n     */                                                                                                                // 8939\n    function isMatch(object, source, customizer, thisArg) {                                                            // 8940\n      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;                 // 8941\n      return baseIsMatch(object, getMatchData(source), customizer);                                                    // 8942\n    }                                                                                                                  // 8943\n                                                                                                                       // 8944\n    /**                                                                                                                // 8945\n     * Checks if `value` is `NaN`.                                                                                     // 8946\n     *                                                                                                                 // 8947\n     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)                            // 8948\n     * which returns `true` for `undefined` and other non-numeric values.                                              // 8949\n     *                                                                                                                 // 8950\n     * @static                                                                                                         // 8951\n     * @memberOf _                                                                                                     // 8952\n     * @category Lang                                                                                                  // 8953\n     * @param {*} value The value to check.                                                                            // 8954\n     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.                                            // 8955\n     * @example                                                                                                        // 8956\n     *                                                                                                                 // 8957\n     * _.isNaN(NaN);                                                                                                   // 8958\n     * // => true                                                                                                      // 8959\n     *                                                                                                                 // 8960\n     * _.isNaN(new Number(NaN));                                                                                       // 8961\n     * // => true                                                                                                      // 8962\n     *                                                                                                                 // 8963\n     * isNaN(undefined);                                                                                               // 8964\n     * // => true                                                                                                      // 8965\n     *                                                                                                                 // 8966\n     * _.isNaN(undefined);                                                                                             // 8967\n     * // => false                                                                                                     // 8968\n     */                                                                                                                // 8969\n    function isNaN(value) {                                                                                            // 8970\n      // An `NaN` primitive is the only value that is not equal to itself.                                             // 8971\n      // Perform the `toStringTag` check first to avoid errors with some host objects in IE.                           // 8972\n      return isNumber(value) && value != +value;                                                                       // 8973\n    }                                                                                                                  // 8974\n                                                                                                                       // 8975\n    /**                                                                                                                // 8976\n     * Checks if `value` is a native function.                                                                         // 8977\n     *                                                                                                                 // 8978\n     * @static                                                                                                         // 8979\n     * @memberOf _                                                                                                     // 8980\n     * @category Lang                                                                                                  // 8981\n     * @param {*} value The value to check.                                                                            // 8982\n     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.                                // 8983\n     * @example                                                                                                        // 8984\n     *                                                                                                                 // 8985\n     * _.isNative(Array.prototype.push);                                                                               // 8986\n     * // => true                                                                                                      // 8987\n     *                                                                                                                 // 8988\n     * _.isNative(_);                                                                                                  // 8989\n     * // => false                                                                                                     // 8990\n     */                                                                                                                // 8991\n    function isNative(value) {                                                                                         // 8992\n      if (value == null) {                                                                                             // 8993\n        return false;                                                                                                  // 8994\n      }                                                                                                                // 8995\n      if (isFunction(value)) {                                                                                         // 8996\n        return reIsNative.test(fnToString.call(value));                                                                // 8997\n      }                                                                                                                // 8998\n      return isObjectLike(value) && (isHostObject(value) ? reIsNative : reIsHostCtor).test(value);                     // 8999\n    }                                                                                                                  // 9000\n                                                                                                                       // 9001\n    /**                                                                                                                // 9002\n     * Checks if `value` is `null`.                                                                                    // 9003\n     *                                                                                                                 // 9004\n     * @static                                                                                                         // 9005\n     * @memberOf _                                                                                                     // 9006\n     * @category Lang                                                                                                  // 9007\n     * @param {*} value The value to check.                                                                            // 9008\n     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.                                           // 9009\n     * @example                                                                                                        // 9010\n     *                                                                                                                 // 9011\n     * _.isNull(null);                                                                                                 // 9012\n     * // => true                                                                                                      // 9013\n     *                                                                                                                 // 9014\n     * _.isNull(void 0);                                                                                               // 9015\n     * // => false                                                                                                     // 9016\n     */                                                                                                                // 9017\n    function isNull(value) {                                                                                           // 9018\n      return value === null;                                                                                           // 9019\n    }                                                                                                                  // 9020\n                                                                                                                       // 9021\n    /**                                                                                                                // 9022\n     * Checks if `value` is classified as a `Number` primitive or object.                                              // 9023\n     *                                                                                                                 // 9024\n     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified                                   // 9025\n     * as numbers, use the `_.isFinite` method.                                                                        // 9026\n     *                                                                                                                 // 9027\n     * @static                                                                                                         // 9028\n     * @memberOf _                                                                                                     // 9029\n     * @category Lang                                                                                                  // 9030\n     * @param {*} value The value to check.                                                                            // 9031\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 9032\n     * @example                                                                                                        // 9033\n     *                                                                                                                 // 9034\n     * _.isNumber(8.4);                                                                                                // 9035\n     * // => true                                                                                                      // 9036\n     *                                                                                                                 // 9037\n     * _.isNumber(NaN);                                                                                                // 9038\n     * // => true                                                                                                      // 9039\n     *                                                                                                                 // 9040\n     * _.isNumber('8.4');                                                                                              // 9041\n     * // => false                                                                                                     // 9042\n     */                                                                                                                // 9043\n    function isNumber(value) {                                                                                         // 9044\n      return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);                // 9045\n    }                                                                                                                  // 9046\n                                                                                                                       // 9047\n    /**                                                                                                                // 9048\n     * Checks if `value` is a plain object, that is, an object created by the                                          // 9049\n     * `Object` constructor or one with a `[[Prototype]]` of `null`.                                                   // 9050\n     *                                                                                                                 // 9051\n     * **Note:** This method assumes objects created by the `Object` constructor                                       // 9052\n     * have no inherited enumerable properties.                                                                        // 9053\n     *                                                                                                                 // 9054\n     * @static                                                                                                         // 9055\n     * @memberOf _                                                                                                     // 9056\n     * @category Lang                                                                                                  // 9057\n     * @param {*} value The value to check.                                                                            // 9058\n     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.                                   // 9059\n     * @example                                                                                                        // 9060\n     *                                                                                                                 // 9061\n     * function Foo() {                                                                                                // 9062\n     *   this.a = 1;                                                                                                   // 9063\n     * }                                                                                                               // 9064\n     *                                                                                                                 // 9065\n     * _.isPlainObject(new Foo);                                                                                       // 9066\n     * // => false                                                                                                     // 9067\n     *                                                                                                                 // 9068\n     * _.isPlainObject([1, 2, 3]);                                                                                     // 9069\n     * // => false                                                                                                     // 9070\n     *                                                                                                                 // 9071\n     * _.isPlainObject({ 'x': 0, 'y': 0 });                                                                            // 9072\n     * // => true                                                                                                      // 9073\n     *                                                                                                                 // 9074\n     * _.isPlainObject(Object.create(null));                                                                           // 9075\n     * // => true                                                                                                      // 9076\n     */                                                                                                                // 9077\n    function isPlainObject(value) {                                                                                    // 9078\n      var Ctor;                                                                                                        // 9079\n                                                                                                                       // 9080\n      // Exit early for non `Object` objects.                                                                          // 9081\n      if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isHostObject(value) && !isArguments(value)) ||\n          (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {\n        return false;                                                                                                  // 9084\n      }                                                                                                                // 9085\n      // IE < 9 iterates inherited properties before own properties. If the first                                      // 9086\n      // iterated property is an object's own property then there are no inherited                                     // 9087\n      // enumerable properties.                                                                                        // 9088\n      var result;                                                                                                      // 9089\n      if (lodash.support.ownLast) {                                                                                    // 9090\n        baseForIn(value, function(subValue, key, object) {                                                             // 9091\n          result = hasOwnProperty.call(object, key);                                                                   // 9092\n          return false;                                                                                                // 9093\n        });                                                                                                            // 9094\n        return result !== false;                                                                                       // 9095\n      }                                                                                                                // 9096\n      // In most environments an object's own properties are iterated before                                           // 9097\n      // its inherited properties. If the last iterated property is an object's                                        // 9098\n      // own property then there are no inherited enumerable properties.                                               // 9099\n      baseForIn(value, function(subValue, key) {                                                                       // 9100\n        result = key;                                                                                                  // 9101\n      });                                                                                                              // 9102\n      return result === undefined || hasOwnProperty.call(value, result);                                               // 9103\n    }                                                                                                                  // 9104\n                                                                                                                       // 9105\n    /**                                                                                                                // 9106\n     * Checks if `value` is classified as a `RegExp` object.                                                           // 9107\n     *                                                                                                                 // 9108\n     * @static                                                                                                         // 9109\n     * @memberOf _                                                                                                     // 9110\n     * @category Lang                                                                                                  // 9111\n     * @param {*} value The value to check.                                                                            // 9112\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 9113\n     * @example                                                                                                        // 9114\n     *                                                                                                                 // 9115\n     * _.isRegExp(/abc/);                                                                                              // 9116\n     * // => true                                                                                                      // 9117\n     *                                                                                                                 // 9118\n     * _.isRegExp('/abc/');                                                                                            // 9119\n     * // => false                                                                                                     // 9120\n     */                                                                                                                // 9121\n    function isRegExp(value) {                                                                                         // 9122\n      return isObject(value) && objToString.call(value) == regexpTag;                                                  // 9123\n    }                                                                                                                  // 9124\n                                                                                                                       // 9125\n    /**                                                                                                                // 9126\n     * Checks if `value` is classified as a `String` primitive or object.                                              // 9127\n     *                                                                                                                 // 9128\n     * @static                                                                                                         // 9129\n     * @memberOf _                                                                                                     // 9130\n     * @category Lang                                                                                                  // 9131\n     * @param {*} value The value to check.                                                                            // 9132\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 9133\n     * @example                                                                                                        // 9134\n     *                                                                                                                 // 9135\n     * _.isString('abc');                                                                                              // 9136\n     * // => true                                                                                                      // 9137\n     *                                                                                                                 // 9138\n     * _.isString(1);                                                                                                  // 9139\n     * // => false                                                                                                     // 9140\n     */                                                                                                                // 9141\n    function isString(value) {                                                                                         // 9142\n      return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);                // 9143\n    }                                                                                                                  // 9144\n                                                                                                                       // 9145\n    /**                                                                                                                // 9146\n     * Checks if `value` is classified as a typed array.                                                               // 9147\n     *                                                                                                                 // 9148\n     * @static                                                                                                         // 9149\n     * @memberOf _                                                                                                     // 9150\n     * @category Lang                                                                                                  // 9151\n     * @param {*} value The value to check.                                                                            // 9152\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 9153\n     * @example                                                                                                        // 9154\n     *                                                                                                                 // 9155\n     * _.isTypedArray(new Uint8Array);                                                                                 // 9156\n     * // => true                                                                                                      // 9157\n     *                                                                                                                 // 9158\n     * _.isTypedArray([]);                                                                                             // 9159\n     * // => false                                                                                                     // 9160\n     */                                                                                                                // 9161\n    function isTypedArray(value) {                                                                                     // 9162\n      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];               // 9163\n    }                                                                                                                  // 9164\n                                                                                                                       // 9165\n    /**                                                                                                                // 9166\n     * Checks if `value` is `undefined`.                                                                               // 9167\n     *                                                                                                                 // 9168\n     * @static                                                                                                         // 9169\n     * @memberOf _                                                                                                     // 9170\n     * @category Lang                                                                                                  // 9171\n     * @param {*} value The value to check.                                                                            // 9172\n     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.                                      // 9173\n     * @example                                                                                                        // 9174\n     *                                                                                                                 // 9175\n     * _.isUndefined(void 0);                                                                                          // 9176\n     * // => true                                                                                                      // 9177\n     *                                                                                                                 // 9178\n     * _.isUndefined(null);                                                                                            // 9179\n     * // => false                                                                                                     // 9180\n     */                                                                                                                // 9181\n    function isUndefined(value) {                                                                                      // 9182\n      return value === undefined;                                                                                      // 9183\n    }                                                                                                                  // 9184\n                                                                                                                       // 9185\n    /**                                                                                                                // 9186\n     * Checks if `value` is less than `other`.                                                                         // 9187\n     *                                                                                                                 // 9188\n     * @static                                                                                                         // 9189\n     * @memberOf _                                                                                                     // 9190\n     * @category Lang                                                                                                  // 9191\n     * @param {*} value The value to compare.                                                                          // 9192\n     * @param {*} other The other value to compare.                                                                    // 9193\n     * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.                                // 9194\n     * @example                                                                                                        // 9195\n     *                                                                                                                 // 9196\n     * _.lt(1, 3);                                                                                                     // 9197\n     * // => true                                                                                                      // 9198\n     *                                                                                                                 // 9199\n     * _.lt(3, 3);                                                                                                     // 9200\n     * // => false                                                                                                     // 9201\n     *                                                                                                                 // 9202\n     * _.lt(3, 1);                                                                                                     // 9203\n     * // => false                                                                                                     // 9204\n     */                                                                                                                // 9205\n    function lt(value, other) {                                                                                        // 9206\n      return value < other;                                                                                            // 9207\n    }                                                                                                                  // 9208\n                                                                                                                       // 9209\n    /**                                                                                                                // 9210\n     * Checks if `value` is less than or equal to `other`.                                                             // 9211\n     *                                                                                                                 // 9212\n     * @static                                                                                                         // 9213\n     * @memberOf _                                                                                                     // 9214\n     * @category Lang                                                                                                  // 9215\n     * @param {*} value The value to compare.                                                                          // 9216\n     * @param {*} other The other value to compare.                                                                    // 9217\n     * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.                    // 9218\n     * @example                                                                                                        // 9219\n     *                                                                                                                 // 9220\n     * _.lte(1, 3);                                                                                                    // 9221\n     * // => true                                                                                                      // 9222\n     *                                                                                                                 // 9223\n     * _.lte(3, 3);                                                                                                    // 9224\n     * // => true                                                                                                      // 9225\n     *                                                                                                                 // 9226\n     * _.lte(3, 1);                                                                                                    // 9227\n     * // => false                                                                                                     // 9228\n     */                                                                                                                // 9229\n    function lte(value, other) {                                                                                       // 9230\n      return value <= other;                                                                                           // 9231\n    }                                                                                                                  // 9232\n                                                                                                                       // 9233\n    /**                                                                                                                // 9234\n     * Converts `value` to an array.                                                                                   // 9235\n     *                                                                                                                 // 9236\n     * @static                                                                                                         // 9237\n     * @memberOf _                                                                                                     // 9238\n     * @category Lang                                                                                                  // 9239\n     * @param {*} value The value to convert.                                                                          // 9240\n     * @returns {Array} Returns the converted array.                                                                   // 9241\n     * @example                                                                                                        // 9242\n     *                                                                                                                 // 9243\n     * (function() {                                                                                                   // 9244\n     *   return _.toArray(arguments).slice(1);                                                                         // 9245\n     * }(1, 2, 3));                                                                                                    // 9246\n     * // => [2, 3]                                                                                                    // 9247\n     */                                                                                                                // 9248\n    function toArray(value) {                                                                                          // 9249\n      var length = value ? getLength(value) : 0;                                                                       // 9250\n      if (!isLength(length)) {                                                                                         // 9251\n        return values(value);                                                                                          // 9252\n      }                                                                                                                // 9253\n      if (!length) {                                                                                                   // 9254\n        return [];                                                                                                     // 9255\n      }                                                                                                                // 9256\n      return (lodash.support.unindexedChars && isString(value))                                                        // 9257\n        ? value.split('')                                                                                              // 9258\n        : arrayCopy(value);                                                                                            // 9259\n    }                                                                                                                  // 9260\n                                                                                                                       // 9261\n    /**                                                                                                                // 9262\n     * Converts `value` to a plain object flattening inherited enumerable                                              // 9263\n     * properties of `value` to own properties of the plain object.                                                    // 9264\n     *                                                                                                                 // 9265\n     * @static                                                                                                         // 9266\n     * @memberOf _                                                                                                     // 9267\n     * @category Lang                                                                                                  // 9268\n     * @param {*} value The value to convert.                                                                          // 9269\n     * @returns {Object} Returns the converted plain object.                                                           // 9270\n     * @example                                                                                                        // 9271\n     *                                                                                                                 // 9272\n     * function Foo() {                                                                                                // 9273\n     *   this.b = 2;                                                                                                   // 9274\n     * }                                                                                                               // 9275\n     *                                                                                                                 // 9276\n     * Foo.prototype.c = 3;                                                                                            // 9277\n     *                                                                                                                 // 9278\n     * _.assign({ 'a': 1 }, new Foo);                                                                                  // 9279\n     * // => { 'a': 1, 'b': 2 }                                                                                        // 9280\n     *                                                                                                                 // 9281\n     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));                                                                 // 9282\n     * // => { 'a': 1, 'b': 2, 'c': 3 }                                                                                // 9283\n     */                                                                                                                // 9284\n    function toPlainObject(value) {                                                                                    // 9285\n      return baseCopy(value, keysIn(value));                                                                           // 9286\n    }                                                                                                                  // 9287\n                                                                                                                       // 9288\n    /*------------------------------------------------------------------------*/                                       // 9289\n                                                                                                                       // 9290\n    /**                                                                                                                // 9291\n     * Recursively merges own enumerable properties of the source object(s), that                                      // 9292\n     * don't resolve to `undefined` into the destination object. Subsequent sources                                    // 9293\n     * overwrite property assignments of previous sources. If `customizer` is                                          // 9294\n     * provided it's invoked to produce the merged values of the destination and                                       // 9295\n     * source properties. If `customizer` returns `undefined` merging is handled                                       // 9296\n     * by the method instead. The `customizer` is bound to `thisArg` and invoked                                       // 9297\n     * with five arguments: (objectValue, sourceValue, key, object, source).                                           // 9298\n     *                                                                                                                 // 9299\n     * @static                                                                                                         // 9300\n     * @memberOf _                                                                                                     // 9301\n     * @category Object                                                                                                // 9302\n     * @param {Object} object The destination object.                                                                  // 9303\n     * @param {...Object} [sources] The source objects.                                                                // 9304\n     * @param {Function} [customizer] The function to customize assigned values.                                       // 9305\n     * @param {*} [thisArg] The `this` binding of `customizer`.                                                        // 9306\n     * @returns {Object} Returns `object`.                                                                             // 9307\n     * @example                                                                                                        // 9308\n     *                                                                                                                 // 9309\n     * var users = {                                                                                                   // 9310\n     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]                                                            // 9311\n     * };                                                                                                              // 9312\n     *                                                                                                                 // 9313\n     * var ages = {                                                                                                    // 9314\n     *   'data': [{ 'age': 36 }, { 'age': 40 }]                                                                        // 9315\n     * };                                                                                                              // 9316\n     *                                                                                                                 // 9317\n     * _.merge(users, ages);                                                                                           // 9318\n     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }                              // 9319\n     *                                                                                                                 // 9320\n     * // using a customizer callback                                                                                  // 9321\n     * var object = {                                                                                                  // 9322\n     *   'fruits': ['apple'],                                                                                          // 9323\n     *   'vegetables': ['beet']                                                                                        // 9324\n     * };                                                                                                              // 9325\n     *                                                                                                                 // 9326\n     * var other = {                                                                                                   // 9327\n     *   'fruits': ['banana'],                                                                                         // 9328\n     *   'vegetables': ['carrot']                                                                                      // 9329\n     * };                                                                                                              // 9330\n     *                                                                                                                 // 9331\n     * _.merge(object, other, function(a, b) {                                                                         // 9332\n     *   if (_.isArray(a)) {                                                                                           // 9333\n     *     return a.concat(b);                                                                                         // 9334\n     *   }                                                                                                             // 9335\n     * });                                                                                                             // 9336\n     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }                                       // 9337\n     */                                                                                                                // 9338\n    var merge = createAssigner(baseMerge);                                                                             // 9339\n                                                                                                                       // 9340\n    /**                                                                                                                // 9341\n     * Assigns own enumerable properties of source object(s) to the destination                                        // 9342\n     * object. Subsequent sources overwrite property assignments of previous sources.                                  // 9343\n     * If `customizer` is provided it's invoked to produce the assigned values.                                        // 9344\n     * The `customizer` is bound to `thisArg` and invoked with five arguments:                                         // 9345\n     * (objectValue, sourceValue, key, object, source).                                                                // 9346\n     *                                                                                                                 // 9347\n     * **Note:** This method mutates `object` and is based on                                                          // 9348\n     * [`Object.assign`](http://ecma-international.org/ecma-262/6.0/#sec-object.assign).                               // 9349\n     *                                                                                                                 // 9350\n     * @static                                                                                                         // 9351\n     * @memberOf _                                                                                                     // 9352\n     * @alias extend                                                                                                   // 9353\n     * @category Object                                                                                                // 9354\n     * @param {Object} object The destination object.                                                                  // 9355\n     * @param {...Object} [sources] The source objects.                                                                // 9356\n     * @param {Function} [customizer] The function to customize assigned values.                                       // 9357\n     * @param {*} [thisArg] The `this` binding of `customizer`.                                                        // 9358\n     * @returns {Object} Returns `object`.                                                                             // 9359\n     * @example                                                                                                        // 9360\n     *                                                                                                                 // 9361\n     * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });                                              // 9362\n     * // => { 'user': 'fred', 'age': 40 }                                                                             // 9363\n     *                                                                                                                 // 9364\n     * // using a customizer callback                                                                                  // 9365\n     * var defaults = _.partialRight(_.assign, function(value, other) {                                                // 9366\n     *   return _.isUndefined(value) ? other : value;                                                                  // 9367\n     * });                                                                                                             // 9368\n     *                                                                                                                 // 9369\n     * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });                                              // 9370\n     * // => { 'user': 'barney', 'age': 36 }                                                                           // 9371\n     */                                                                                                                // 9372\n    var assign = createAssigner(function(object, source, customizer) {                                                 // 9373\n      return customizer                                                                                                // 9374\n        ? assignWith(object, source, customizer)                                                                       // 9375\n        : baseAssign(object, source);                                                                                  // 9376\n    });                                                                                                                // 9377\n                                                                                                                       // 9378\n    /**                                                                                                                // 9379\n     * Creates an object that inherits from the given `prototype` object. If a                                         // 9380\n     * `properties` object is provided its own enumerable properties are assigned                                      // 9381\n     * to the created object.                                                                                          // 9382\n     *                                                                                                                 // 9383\n     * @static                                                                                                         // 9384\n     * @memberOf _                                                                                                     // 9385\n     * @category Object                                                                                                // 9386\n     * @param {Object} prototype The object to inherit from.                                                           // 9387\n     * @param {Object} [properties] The properties to assign to the object.                                            // 9388\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 9389\n     * @returns {Object} Returns the new object.                                                                       // 9390\n     * @example                                                                                                        // 9391\n     *                                                                                                                 // 9392\n     * function Shape() {                                                                                              // 9393\n     *   this.x = 0;                                                                                                   // 9394\n     *   this.y = 0;                                                                                                   // 9395\n     * }                                                                                                               // 9396\n     *                                                                                                                 // 9397\n     * function Circle() {                                                                                             // 9398\n     *   Shape.call(this);                                                                                             // 9399\n     * }                                                                                                               // 9400\n     *                                                                                                                 // 9401\n     * Circle.prototype = _.create(Shape.prototype, {                                                                  // 9402\n     *   'constructor': Circle                                                                                         // 9403\n     * });                                                                                                             // 9404\n     *                                                                                                                 // 9405\n     * var circle = new Circle;                                                                                        // 9406\n     * circle instanceof Circle;                                                                                       // 9407\n     * // => true                                                                                                      // 9408\n     *                                                                                                                 // 9409\n     * circle instanceof Shape;                                                                                        // 9410\n     * // => true                                                                                                      // 9411\n     */                                                                                                                // 9412\n    function create(prototype, properties, guard) {                                                                    // 9413\n      var result = baseCreate(prototype);                                                                              // 9414\n      if (guard && isIterateeCall(prototype, properties, guard)) {                                                     // 9415\n        properties = undefined;                                                                                        // 9416\n      }                                                                                                                // 9417\n      return properties ? baseAssign(result, properties) : result;                                                     // 9418\n    }                                                                                                                  // 9419\n                                                                                                                       // 9420\n    /**                                                                                                                // 9421\n     * Assigns own enumerable properties of source object(s) to the destination                                        // 9422\n     * object for all destination properties that resolve to `undefined`. Once a                                       // 9423\n     * property is set, additional values of the same property are ignored.                                            // 9424\n     *                                                                                                                 // 9425\n     * **Note:** This method mutates `object`.                                                                         // 9426\n     *                                                                                                                 // 9427\n     * @static                                                                                                         // 9428\n     * @memberOf _                                                                                                     // 9429\n     * @category Object                                                                                                // 9430\n     * @param {Object} object The destination object.                                                                  // 9431\n     * @param {...Object} [sources] The source objects.                                                                // 9432\n     * @returns {Object} Returns `object`.                                                                             // 9433\n     * @example                                                                                                        // 9434\n     *                                                                                                                 // 9435\n     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });                                            // 9436\n     * // => { 'user': 'barney', 'age': 36 }                                                                           // 9437\n     */                                                                                                                // 9438\n    var defaults = createDefaults(assign, assignDefaults);                                                             // 9439\n                                                                                                                       // 9440\n    /**                                                                                                                // 9441\n     * This method is like `_.defaults` except that it recursively assigns                                             // 9442\n     * default properties.                                                                                             // 9443\n     *                                                                                                                 // 9444\n     * **Note:** This method mutates `object`.                                                                         // 9445\n     *                                                                                                                 // 9446\n     * @static                                                                                                         // 9447\n     * @memberOf _                                                                                                     // 9448\n     * @category Object                                                                                                // 9449\n     * @param {Object} object The destination object.                                                                  // 9450\n     * @param {...Object} [sources] The source objects.                                                                // 9451\n     * @returns {Object} Returns `object`.                                                                             // 9452\n     * @example                                                                                                        // 9453\n     *                                                                                                                 // 9454\n     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });                    // 9455\n     * // => { 'user': { 'name': 'barney', 'age': 36 } }                                                               // 9456\n     *                                                                                                                 // 9457\n     */                                                                                                                // 9458\n    var defaultsDeep = createDefaults(merge, mergeDefaults);                                                           // 9459\n                                                                                                                       // 9460\n    /**                                                                                                                // 9461\n     * This method is like `_.find` except that it returns the key of the first                                        // 9462\n     * element `predicate` returns truthy for instead of the element itself.                                           // 9463\n     *                                                                                                                 // 9464\n     * If a property name is provided for `predicate` the created `_.property`                                         // 9465\n     * style callback returns the property value of the given element.                                                 // 9466\n     *                                                                                                                 // 9467\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 9468\n     * style callback returns `true` for elements that have a matching property                                        // 9469\n     * value, else `false`.                                                                                            // 9470\n     *                                                                                                                 // 9471\n     * If an object is provided for `predicate` the created `_.matches` style                                          // 9472\n     * callback returns `true` for elements that have the properties of the given                                      // 9473\n     * object, else `false`.                                                                                           // 9474\n     *                                                                                                                 // 9475\n     * @static                                                                                                         // 9476\n     * @memberOf _                                                                                                     // 9477\n     * @category Object                                                                                                // 9478\n     * @param {Object} object The object to search.                                                                    // 9479\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 9480\n     *  per iteration.                                                                                                 // 9481\n     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 9482\n     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.                           // 9483\n     * @example                                                                                                        // 9484\n     *                                                                                                                 // 9485\n     * var users = {                                                                                                   // 9486\n     *   'barney':  { 'age': 36, 'active': true },                                                                     // 9487\n     *   'fred':    { 'age': 40, 'active': false },                                                                    // 9488\n     *   'pebbles': { 'age': 1,  'active': true }                                                                      // 9489\n     * };                                                                                                              // 9490\n     *                                                                                                                 // 9491\n     * _.findKey(users, function(chr) {                                                                                // 9492\n     *   return chr.age < 40;                                                                                          // 9493\n     * });                                                                                                             // 9494\n     * // => 'barney' (iteration order is not guaranteed)                                                              // 9495\n     *                                                                                                                 // 9496\n     * // using the `_.matches` callback shorthand                                                                     // 9497\n     * _.findKey(users, { 'age': 1, 'active': true });                                                                 // 9498\n     * // => 'pebbles'                                                                                                 // 9499\n     *                                                                                                                 // 9500\n     * // using the `_.matchesProperty` callback shorthand                                                             // 9501\n     * _.findKey(users, 'active', false);                                                                              // 9502\n     * // => 'fred'                                                                                                    // 9503\n     *                                                                                                                 // 9504\n     * // using the `_.property` callback shorthand                                                                    // 9505\n     * _.findKey(users, 'active');                                                                                     // 9506\n     * // => 'barney'                                                                                                  // 9507\n     */                                                                                                                // 9508\n    var findKey = createFindKey(baseForOwn);                                                                           // 9509\n                                                                                                                       // 9510\n    /**                                                                                                                // 9511\n     * This method is like `_.findKey` except that it iterates over elements of                                        // 9512\n     * a collection in the opposite order.                                                                             // 9513\n     *                                                                                                                 // 9514\n     * If a property name is provided for `predicate` the created `_.property`                                         // 9515\n     * style callback returns the property value of the given element.                                                 // 9516\n     *                                                                                                                 // 9517\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 9518\n     * style callback returns `true` for elements that have a matching property                                        // 9519\n     * value, else `false`.                                                                                            // 9520\n     *                                                                                                                 // 9521\n     * If an object is provided for `predicate` the created `_.matches` style                                          // 9522\n     * callback returns `true` for elements that have the properties of the given                                      // 9523\n     * object, else `false`.                                                                                           // 9524\n     *                                                                                                                 // 9525\n     * @static                                                                                                         // 9526\n     * @memberOf _                                                                                                     // 9527\n     * @category Object                                                                                                // 9528\n     * @param {Object} object The object to search.                                                                    // 9529\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 9530\n     *  per iteration.                                                                                                 // 9531\n     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 9532\n     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.                           // 9533\n     * @example                                                                                                        // 9534\n     *                                                                                                                 // 9535\n     * var users = {                                                                                                   // 9536\n     *   'barney':  { 'age': 36, 'active': true },                                                                     // 9537\n     *   'fred':    { 'age': 40, 'active': false },                                                                    // 9538\n     *   'pebbles': { 'age': 1,  'active': true }                                                                      // 9539\n     * };                                                                                                              // 9540\n     *                                                                                                                 // 9541\n     * _.findLastKey(users, function(chr) {                                                                            // 9542\n     *   return chr.age < 40;                                                                                          // 9543\n     * });                                                                                                             // 9544\n     * // => returns `pebbles` assuming `_.findKey` returns `barney`                                                   // 9545\n     *                                                                                                                 // 9546\n     * // using the `_.matches` callback shorthand                                                                     // 9547\n     * _.findLastKey(users, { 'age': 36, 'active': true });                                                            // 9548\n     * // => 'barney'                                                                                                  // 9549\n     *                                                                                                                 // 9550\n     * // using the `_.matchesProperty` callback shorthand                                                             // 9551\n     * _.findLastKey(users, 'active', false);                                                                          // 9552\n     * // => 'fred'                                                                                                    // 9553\n     *                                                                                                                 // 9554\n     * // using the `_.property` callback shorthand                                                                    // 9555\n     * _.findLastKey(users, 'active');                                                                                 // 9556\n     * // => 'pebbles'                                                                                                 // 9557\n     */                                                                                                                // 9558\n    var findLastKey = createFindKey(baseForOwnRight);                                                                  // 9559\n                                                                                                                       // 9560\n    /**                                                                                                                // 9561\n     * Iterates over own and inherited enumerable properties of an object invoking                                     // 9562\n     * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked                                  // 9563\n     * with three arguments: (value, key, object). Iteratee functions may exit                                         // 9564\n     * iteration early by explicitly returning `false`.                                                                // 9565\n     *                                                                                                                 // 9566\n     * @static                                                                                                         // 9567\n     * @memberOf _                                                                                                     // 9568\n     * @category Object                                                                                                // 9569\n     * @param {Object} object The object to iterate over.                                                              // 9570\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 9571\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 9572\n     * @returns {Object} Returns `object`.                                                                             // 9573\n     * @example                                                                                                        // 9574\n     *                                                                                                                 // 9575\n     * function Foo() {                                                                                                // 9576\n     *   this.a = 1;                                                                                                   // 9577\n     *   this.b = 2;                                                                                                   // 9578\n     * }                                                                                                               // 9579\n     *                                                                                                                 // 9580\n     * Foo.prototype.c = 3;                                                                                            // 9581\n     *                                                                                                                 // 9582\n     * _.forIn(new Foo, function(value, key) {                                                                         // 9583\n     *   console.log(key);                                                                                             // 9584\n     * });                                                                                                             // 9585\n     * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)                                                // 9586\n     */                                                                                                                // 9587\n    var forIn = createForIn(baseFor);                                                                                  // 9588\n                                                                                                                       // 9589\n    /**                                                                                                                // 9590\n     * This method is like `_.forIn` except that it iterates over properties of                                        // 9591\n     * `object` in the opposite order.                                                                                 // 9592\n     *                                                                                                                 // 9593\n     * @static                                                                                                         // 9594\n     * @memberOf _                                                                                                     // 9595\n     * @category Object                                                                                                // 9596\n     * @param {Object} object The object to iterate over.                                                              // 9597\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 9598\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 9599\n     * @returns {Object} Returns `object`.                                                                             // 9600\n     * @example                                                                                                        // 9601\n     *                                                                                                                 // 9602\n     * function Foo() {                                                                                                // 9603\n     *   this.a = 1;                                                                                                   // 9604\n     *   this.b = 2;                                                                                                   // 9605\n     * }                                                                                                               // 9606\n     *                                                                                                                 // 9607\n     * Foo.prototype.c = 3;                                                                                            // 9608\n     *                                                                                                                 // 9609\n     * _.forInRight(new Foo, function(value, key) {                                                                    // 9610\n     *   console.log(key);                                                                                             // 9611\n     * });                                                                                                             // 9612\n     * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'                                         // 9613\n     */                                                                                                                // 9614\n    var forInRight = createForIn(baseForRight);                                                                        // 9615\n                                                                                                                       // 9616\n    /**                                                                                                                // 9617\n     * Iterates over own enumerable properties of an object invoking `iteratee`                                        // 9618\n     * for each property. The `iteratee` is bound to `thisArg` and invoked with                                        // 9619\n     * three arguments: (value, key, object). Iteratee functions may exit iteration                                    // 9620\n     * early by explicitly returning `false`.                                                                          // 9621\n     *                                                                                                                 // 9622\n     * @static                                                                                                         // 9623\n     * @memberOf _                                                                                                     // 9624\n     * @category Object                                                                                                // 9625\n     * @param {Object} object The object to iterate over.                                                              // 9626\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 9627\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 9628\n     * @returns {Object} Returns `object`.                                                                             // 9629\n     * @example                                                                                                        // 9630\n     *                                                                                                                 // 9631\n     * function Foo() {                                                                                                // 9632\n     *   this.a = 1;                                                                                                   // 9633\n     *   this.b = 2;                                                                                                   // 9634\n     * }                                                                                                               // 9635\n     *                                                                                                                 // 9636\n     * Foo.prototype.c = 3;                                                                                            // 9637\n     *                                                                                                                 // 9638\n     * _.forOwn(new Foo, function(value, key) {                                                                        // 9639\n     *   console.log(key);                                                                                             // 9640\n     * });                                                                                                             // 9641\n     * // => logs 'a' and 'b' (iteration order is not guaranteed)                                                      // 9642\n     */                                                                                                                // 9643\n    var forOwn = createForOwn(baseForOwn);                                                                             // 9644\n                                                                                                                       // 9645\n    /**                                                                                                                // 9646\n     * This method is like `_.forOwn` except that it iterates over properties of                                       // 9647\n     * `object` in the opposite order.                                                                                 // 9648\n     *                                                                                                                 // 9649\n     * @static                                                                                                         // 9650\n     * @memberOf _                                                                                                     // 9651\n     * @category Object                                                                                                // 9652\n     * @param {Object} object The object to iterate over.                                                              // 9653\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 9654\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 9655\n     * @returns {Object} Returns `object`.                                                                             // 9656\n     * @example                                                                                                        // 9657\n     *                                                                                                                 // 9658\n     * function Foo() {                                                                                                // 9659\n     *   this.a = 1;                                                                                                   // 9660\n     *   this.b = 2;                                                                                                   // 9661\n     * }                                                                                                               // 9662\n     *                                                                                                                 // 9663\n     * Foo.prototype.c = 3;                                                                                            // 9664\n     *                                                                                                                 // 9665\n     * _.forOwnRight(new Foo, function(value, key) {                                                                   // 9666\n     *   console.log(key);                                                                                             // 9667\n     * });                                                                                                             // 9668\n     * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'                                                     // 9669\n     */                                                                                                                // 9670\n    var forOwnRight = createForOwn(baseForOwnRight);                                                                   // 9671\n                                                                                                                       // 9672\n    /**                                                                                                                // 9673\n     * Creates an array of function property names from all enumerable properties,                                     // 9674\n     * own and inherited, of `object`.                                                                                 // 9675\n     *                                                                                                                 // 9676\n     * @static                                                                                                         // 9677\n     * @memberOf _                                                                                                     // 9678\n     * @alias methods                                                                                                  // 9679\n     * @category Object                                                                                                // 9680\n     * @param {Object} object The object to inspect.                                                                   // 9681\n     * @returns {Array} Returns the new array of property names.                                                       // 9682\n     * @example                                                                                                        // 9683\n     *                                                                                                                 // 9684\n     * _.functions(_);                                                                                                 // 9685\n     * // => ['after', 'ary', 'assign', ...]                                                                           // 9686\n     */                                                                                                                // 9687\n    function functions(object) {                                                                                       // 9688\n      return baseFunctions(object, keysIn(object));                                                                    // 9689\n    }                                                                                                                  // 9690\n                                                                                                                       // 9691\n    /**                                                                                                                // 9692\n     * Gets the property value at `path` of `object`. If the resolved value is                                         // 9693\n     * `undefined` the `defaultValue` is used in its place.                                                            // 9694\n     *                                                                                                                 // 9695\n     * @static                                                                                                         // 9696\n     * @memberOf _                                                                                                     // 9697\n     * @category Object                                                                                                // 9698\n     * @param {Object} object The object to query.                                                                     // 9699\n     * @param {Array|string} path The path of the property to get.                                                     // 9700\n     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.                              // 9701\n     * @returns {*} Returns the resolved value.                                                                        // 9702\n     * @example                                                                                                        // 9703\n     *                                                                                                                 // 9704\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };                                                                    // 9705\n     *                                                                                                                 // 9706\n     * _.get(object, 'a[0].b.c');                                                                                      // 9707\n     * // => 3                                                                                                         // 9708\n     *                                                                                                                 // 9709\n     * _.get(object, ['a', '0', 'b', 'c']);                                                                            // 9710\n     * // => 3                                                                                                         // 9711\n     *                                                                                                                 // 9712\n     * _.get(object, 'a.b.c', 'default');                                                                              // 9713\n     * // => 'default'                                                                                                 // 9714\n     */                                                                                                                // 9715\n    function get(object, path, defaultValue) {                                                                         // 9716\n      var result = object == null ? undefined : baseGet(object, toPath(path), (path + ''));                            // 9717\n      return result === undefined ? defaultValue : result;                                                             // 9718\n    }                                                                                                                  // 9719\n                                                                                                                       // 9720\n    /**                                                                                                                // 9721\n     * Checks if `path` is a direct property.                                                                          // 9722\n     *                                                                                                                 // 9723\n     * @static                                                                                                         // 9724\n     * @memberOf _                                                                                                     // 9725\n     * @category Object                                                                                                // 9726\n     * @param {Object} object The object to query.                                                                     // 9727\n     * @param {Array|string} path The path to check.                                                                   // 9728\n     * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.                                 // 9729\n     * @example                                                                                                        // 9730\n     *                                                                                                                 // 9731\n     * var object = { 'a': { 'b': { 'c': 3 } } };                                                                      // 9732\n     *                                                                                                                 // 9733\n     * _.has(object, 'a');                                                                                             // 9734\n     * // => true                                                                                                      // 9735\n     *                                                                                                                 // 9736\n     * _.has(object, 'a.b.c');                                                                                         // 9737\n     * // => true                                                                                                      // 9738\n     *                                                                                                                 // 9739\n     * _.has(object, ['a', 'b', 'c']);                                                                                 // 9740\n     * // => true                                                                                                      // 9741\n     */                                                                                                                // 9742\n    function has(object, path) {                                                                                       // 9743\n      if (object == null) {                                                                                            // 9744\n        return false;                                                                                                  // 9745\n      }                                                                                                                // 9746\n      var result = hasOwnProperty.call(object, path);                                                                  // 9747\n      if (!result && !isKey(path)) {                                                                                   // 9748\n        path = toPath(path);                                                                                           // 9749\n        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));                                  // 9750\n        if (object == null) {                                                                                          // 9751\n          return false;                                                                                                // 9752\n        }                                                                                                              // 9753\n        path = last(path);                                                                                             // 9754\n        result = hasOwnProperty.call(object, path);                                                                    // 9755\n      }                                                                                                                // 9756\n      return result || (isLength(object.length) && isIndex(path, object.length) &&                                     // 9757\n        (isArray(object) || isArguments(object) || isString(object)));                                                 // 9758\n    }                                                                                                                  // 9759\n                                                                                                                       // 9760\n    /**                                                                                                                // 9761\n     * Creates an object composed of the inverted keys and values of `object`.                                         // 9762\n     * If `object` contains duplicate values, subsequent values overwrite property                                     // 9763\n     * assignments of previous values unless `multiValue` is `true`.                                                   // 9764\n     *                                                                                                                 // 9765\n     * @static                                                                                                         // 9766\n     * @memberOf _                                                                                                     // 9767\n     * @category Object                                                                                                // 9768\n     * @param {Object} object The object to invert.                                                                    // 9769\n     * @param {boolean} [multiValue] Allow multiple values per key.                                                    // 9770\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 9771\n     * @returns {Object} Returns the new inverted object.                                                              // 9772\n     * @example                                                                                                        // 9773\n     *                                                                                                                 // 9774\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };                                                                        // 9775\n     *                                                                                                                 // 9776\n     * _.invert(object);                                                                                               // 9777\n     * // => { '1': 'c', '2': 'b' }                                                                                    // 9778\n     *                                                                                                                 // 9779\n     * // with `multiValue`                                                                                            // 9780\n     * _.invert(object, true);                                                                                         // 9781\n     * // => { '1': ['a', 'c'], '2': ['b'] }                                                                           // 9782\n     */                                                                                                                // 9783\n    function invert(object, multiValue, guard) {                                                                       // 9784\n      if (guard && isIterateeCall(object, multiValue, guard)) {                                                        // 9785\n        multiValue = undefined;                                                                                        // 9786\n      }                                                                                                                // 9787\n      var index = -1,                                                                                                  // 9788\n          props = keys(object),                                                                                        // 9789\n          length = props.length,                                                                                       // 9790\n          result = {};                                                                                                 // 9791\n                                                                                                                       // 9792\n      while (++index < length) {                                                                                       // 9793\n        var key = props[index],                                                                                        // 9794\n            value = object[key];                                                                                       // 9795\n                                                                                                                       // 9796\n        if (multiValue) {                                                                                              // 9797\n          if (hasOwnProperty.call(result, value)) {                                                                    // 9798\n            result[value].push(key);                                                                                   // 9799\n          } else {                                                                                                     // 9800\n            result[value] = [key];                                                                                     // 9801\n          }                                                                                                            // 9802\n        }                                                                                                              // 9803\n        else {                                                                                                         // 9804\n          result[value] = key;                                                                                         // 9805\n        }                                                                                                              // 9806\n      }                                                                                                                // 9807\n      return result;                                                                                                   // 9808\n    }                                                                                                                  // 9809\n                                                                                                                       // 9810\n    /**                                                                                                                // 9811\n     * Creates an array of the own enumerable property names of `object`.                                              // 9812\n     *                                                                                                                 // 9813\n     * **Note:** Non-object values are coerced to objects. See the                                                     // 9814\n     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)                                          // 9815\n     * for more details.                                                                                               // 9816\n     *                                                                                                                 // 9817\n     * @static                                                                                                         // 9818\n     * @memberOf _                                                                                                     // 9819\n     * @category Object                                                                                                // 9820\n     * @param {Object} object The object to query.                                                                     // 9821\n     * @returns {Array} Returns the array of property names.                                                           // 9822\n     * @example                                                                                                        // 9823\n     *                                                                                                                 // 9824\n     * function Foo() {                                                                                                // 9825\n     *   this.a = 1;                                                                                                   // 9826\n     *   this.b = 2;                                                                                                   // 9827\n     * }                                                                                                               // 9828\n     *                                                                                                                 // 9829\n     * Foo.prototype.c = 3;                                                                                            // 9830\n     *                                                                                                                 // 9831\n     * _.keys(new Foo);                                                                                                // 9832\n     * // => ['a', 'b'] (iteration order is not guaranteed)                                                            // 9833\n     *                                                                                                                 // 9834\n     * _.keys('hi');                                                                                                   // 9835\n     * // => ['0', '1']                                                                                                // 9836\n     */                                                                                                                // 9837\n    var keys = !nativeKeys ? shimKeys : function(object) {                                                             // 9838\n      var Ctor = object == null ? undefined : object.constructor;                                                      // 9839\n      if ((typeof Ctor == 'function' && Ctor.prototype === object) ||                                                  // 9840\n          (typeof object == 'function' ? lodash.support.enumPrototypes : isArrayLike(object))) {                       // 9841\n        return shimKeys(object);                                                                                       // 9842\n      }                                                                                                                // 9843\n      return isObject(object) ? nativeKeys(object) : [];                                                               // 9844\n    };                                                                                                                 // 9845\n                                                                                                                       // 9846\n    /**                                                                                                                // 9847\n     * Creates an array of the own and inherited enumerable property names of `object`.                                // 9848\n     *                                                                                                                 // 9849\n     * **Note:** Non-object values are coerced to objects.                                                             // 9850\n     *                                                                                                                 // 9851\n     * @static                                                                                                         // 9852\n     * @memberOf _                                                                                                     // 9853\n     * @category Object                                                                                                // 9854\n     * @param {Object} object The object to query.                                                                     // 9855\n     * @returns {Array} Returns the array of property names.                                                           // 9856\n     * @example                                                                                                        // 9857\n     *                                                                                                                 // 9858\n     * function Foo() {                                                                                                // 9859\n     *   this.a = 1;                                                                                                   // 9860\n     *   this.b = 2;                                                                                                   // 9861\n     * }                                                                                                               // 9862\n     *                                                                                                                 // 9863\n     * Foo.prototype.c = 3;                                                                                            // 9864\n     *                                                                                                                 // 9865\n     * _.keysIn(new Foo);                                                                                              // 9866\n     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)                                                       // 9867\n     */                                                                                                                // 9868\n    function keysIn(object) {                                                                                          // 9869\n      if (object == null) {                                                                                            // 9870\n        return [];                                                                                                     // 9871\n      }                                                                                                                // 9872\n      if (!isObject(object)) {                                                                                         // 9873\n        object = Object(object);                                                                                       // 9874\n      }                                                                                                                // 9875\n      var length = object.length,                                                                                      // 9876\n          support = lodash.support;                                                                                    // 9877\n                                                                                                                       // 9878\n      length = (length && isLength(length) &&                                                                          // 9879\n        (isArray(object) || isArguments(object) || isString(object)) && length) || 0;                                  // 9880\n                                                                                                                       // 9881\n      var Ctor = object.constructor,                                                                                   // 9882\n          index = -1,                                                                                                  // 9883\n          proto = (isFunction(Ctor) && Ctor.prototype) || objectProto,                                                 // 9884\n          isProto = proto === object,                                                                                  // 9885\n          result = Array(length),                                                                                      // 9886\n          skipIndexes = length > 0,                                                                                    // 9887\n          skipErrorProps = support.enumErrorProps && (object === errorProto || object instanceof Error),               // 9888\n          skipProto = support.enumPrototypes && isFunction(object);                                                    // 9889\n                                                                                                                       // 9890\n      while (++index < length) {                                                                                       // 9891\n        result[index] = (index + '');                                                                                  // 9892\n      }                                                                                                                // 9893\n      // lodash skips the `constructor` property when it infers it's iterating                                         // 9894\n      // over a `prototype` object because IE < 9 can't set the `[[Enumerable]]`                                       // 9895\n      // attribute of an existing property and the `constructor` property of a                                         // 9896\n      // prototype defaults to non-enumerable.                                                                         // 9897\n      for (var key in object) {                                                                                        // 9898\n        if (!(skipProto && key == 'prototype') &&                                                                      // 9899\n            !(skipErrorProps && (key == 'message' || key == 'name')) &&                                                // 9900\n            !(skipIndexes && isIndex(key, length)) &&                                                                  // 9901\n            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {                               // 9902\n          result.push(key);                                                                                            // 9903\n        }                                                                                                              // 9904\n      }                                                                                                                // 9905\n      if (support.nonEnumShadows && object !== objectProto) {                                                          // 9906\n        var tag = object === stringProto ? stringTag : (object === errorProto ? errorTag : objToString.call(object)),  // 9907\n            nonEnums = nonEnumProps[tag] || nonEnumProps[objectTag];                                                   // 9908\n                                                                                                                       // 9909\n        if (tag == objectTag) {                                                                                        // 9910\n          proto = objectProto;                                                                                         // 9911\n        }                                                                                                              // 9912\n        length = shadowProps.length;                                                                                   // 9913\n        while (length--) {                                                                                             // 9914\n          key = shadowProps[length];                                                                                   // 9915\n          var nonEnum = nonEnums[key];                                                                                 // 9916\n          if (!(isProto && nonEnum) &&                                                                                 // 9917\n              (nonEnum ? hasOwnProperty.call(object, key) : object[key] !== proto[key])) {                             // 9918\n            result.push(key);                                                                                          // 9919\n          }                                                                                                            // 9920\n        }                                                                                                              // 9921\n      }                                                                                                                // 9922\n      return result;                                                                                                   // 9923\n    }                                                                                                                  // 9924\n                                                                                                                       // 9925\n    /**                                                                                                                // 9926\n     * The opposite of `_.mapValues`; this method creates an object with the                                           // 9927\n     * same values as `object` and keys generated by running each own enumerable                                       // 9928\n     * property of `object` through `iteratee`.                                                                        // 9929\n     *                                                                                                                 // 9930\n     * @static                                                                                                         // 9931\n     * @memberOf _                                                                                                     // 9932\n     * @category Object                                                                                                // 9933\n     * @param {Object} object The object to iterate over.                                                              // 9934\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked                                      // 9935\n     *  per iteration.                                                                                                 // 9936\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 9937\n     * @returns {Object} Returns the new mapped object.                                                                // 9938\n     * @example                                                                                                        // 9939\n     *                                                                                                                 // 9940\n     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {                                                            // 9941\n     *   return key + value;                                                                                           // 9942\n     * });                                                                                                             // 9943\n     * // => { 'a1': 1, 'b2': 2 }                                                                                      // 9944\n     */                                                                                                                // 9945\n    var mapKeys = createObjectMapper(true);                                                                            // 9946\n                                                                                                                       // 9947\n    /**                                                                                                                // 9948\n     * Creates an object with the same keys as `object` and values generated by                                        // 9949\n     * running each own enumerable property of `object` through `iteratee`. The                                        // 9950\n     * iteratee function is bound to `thisArg` and invoked with three arguments:                                       // 9951\n     * (value, key, object).                                                                                           // 9952\n     *                                                                                                                 // 9953\n     * If a property name is provided for `iteratee` the created `_.property`                                          // 9954\n     * style callback returns the property value of the given element.                                                 // 9955\n     *                                                                                                                 // 9956\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 9957\n     * style callback returns `true` for elements that have a matching property                                        // 9958\n     * value, else `false`.                                                                                            // 9959\n     *                                                                                                                 // 9960\n     * If an object is provided for `iteratee` the created `_.matches` style                                           // 9961\n     * callback returns `true` for elements that have the properties of the given                                      // 9962\n     * object, else `false`.                                                                                           // 9963\n     *                                                                                                                 // 9964\n     * @static                                                                                                         // 9965\n     * @memberOf _                                                                                                     // 9966\n     * @category Object                                                                                                // 9967\n     * @param {Object} object The object to iterate over.                                                              // 9968\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked                                      // 9969\n     *  per iteration.                                                                                                 // 9970\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 9971\n     * @returns {Object} Returns the new mapped object.                                                                // 9972\n     * @example                                                                                                        // 9973\n     *                                                                                                                 // 9974\n     * _.mapValues({ 'a': 1, 'b': 2 }, function(n) {                                                                   // 9975\n     *   return n * 3;                                                                                                 // 9976\n     * });                                                                                                             // 9977\n     * // => { 'a': 3, 'b': 6 }                                                                                        // 9978\n     *                                                                                                                 // 9979\n     * var users = {                                                                                                   // 9980\n     *   'fred':    { 'user': 'fred',    'age': 40 },                                                                  // 9981\n     *   'pebbles': { 'user': 'pebbles', 'age': 1 }                                                                    // 9982\n     * };                                                                                                              // 9983\n     *                                                                                                                 // 9984\n     * // using the `_.property` callback shorthand                                                                    // 9985\n     * _.mapValues(users, 'age');                                                                                      // 9986\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)                                          // 9987\n     */                                                                                                                // 9988\n    var mapValues = createObjectMapper();                                                                              // 9989\n                                                                                                                       // 9990\n    /**                                                                                                                // 9991\n     * The opposite of `_.pick`; this method creates an object composed of the                                         // 9992\n     * own and inherited enumerable properties of `object` that are not omitted.                                       // 9993\n     *                                                                                                                 // 9994\n     * @static                                                                                                         // 9995\n     * @memberOf _                                                                                                     // 9996\n     * @category Object                                                                                                // 9997\n     * @param {Object} object The source object.                                                                       // 9998\n     * @param {Function|...(string|string[])} [predicate] The function invoked per                                     // 9999\n     *  iteration or property names to omit, specified as individual property                                          // 10000\n     *  names or arrays of property names.                                                                             // 10001\n     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 10002\n     * @returns {Object} Returns the new object.                                                                       // 10003\n     * @example                                                                                                        // 10004\n     *                                                                                                                 // 10005\n     * var object = { 'user': 'fred', 'age': 40 };                                                                     // 10006\n     *                                                                                                                 // 10007\n     * _.omit(object, 'age');                                                                                          // 10008\n     * // => { 'user': 'fred' }                                                                                        // 10009\n     *                                                                                                                 // 10010\n     * _.omit(object, _.isNumber);                                                                                     // 10011\n     * // => { 'user': 'fred' }                                                                                        // 10012\n     */                                                                                                                // 10013\n    var omit = restParam(function(object, props) {                                                                     // 10014\n      if (object == null) {                                                                                            // 10015\n        return {};                                                                                                     // 10016\n      }                                                                                                                // 10017\n      if (typeof props[0] != 'function') {                                                                             // 10018\n        var props = arrayMap(baseFlatten(props), String);                                                              // 10019\n        return pickByArray(object, baseDifference(keysIn(object), props));                                             // 10020\n      }                                                                                                                // 10021\n      var predicate = bindCallback(props[0], props[1], 3);                                                             // 10022\n      return pickByCallback(object, function(value, key, object) {                                                     // 10023\n        return !predicate(value, key, object);                                                                         // 10024\n      });                                                                                                              // 10025\n    });                                                                                                                // 10026\n                                                                                                                       // 10027\n    /**                                                                                                                // 10028\n     * Creates a two dimensional array of the key-value pairs for `object`,                                            // 10029\n     * e.g. `[[key1, value1], [key2, value2]]`.                                                                        // 10030\n     *                                                                                                                 // 10031\n     * @static                                                                                                         // 10032\n     * @memberOf _                                                                                                     // 10033\n     * @category Object                                                                                                // 10034\n     * @param {Object} object The object to query.                                                                     // 10035\n     * @returns {Array} Returns the new array of key-value pairs.                                                      // 10036\n     * @example                                                                                                        // 10037\n     *                                                                                                                 // 10038\n     * _.pairs({ 'barney': 36, 'fred': 40 });                                                                          // 10039\n     * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)                                        // 10040\n     */                                                                                                                // 10041\n    function pairs(object) {                                                                                           // 10042\n      object = toObject(object);                                                                                       // 10043\n                                                                                                                       // 10044\n      var index = -1,                                                                                                  // 10045\n          props = keys(object),                                                                                        // 10046\n          length = props.length,                                                                                       // 10047\n          result = Array(length);                                                                                      // 10048\n                                                                                                                       // 10049\n      while (++index < length) {                                                                                       // 10050\n        var key = props[index];                                                                                        // 10051\n        result[index] = [key, object[key]];                                                                            // 10052\n      }                                                                                                                // 10053\n      return result;                                                                                                   // 10054\n    }                                                                                                                  // 10055\n                                                                                                                       // 10056\n    /**                                                                                                                // 10057\n     * Creates an object composed of the picked `object` properties. Property                                          // 10058\n     * names may be specified as individual arguments or as arrays of property                                         // 10059\n     * names. If `predicate` is provided it's invoked for each property of `object`                                    // 10060\n     * picking the properties `predicate` returns truthy for. The predicate is                                         // 10061\n     * bound to `thisArg` and invoked with three arguments: (value, key, object).                                      // 10062\n     *                                                                                                                 // 10063\n     * @static                                                                                                         // 10064\n     * @memberOf _                                                                                                     // 10065\n     * @category Object                                                                                                // 10066\n     * @param {Object} object The source object.                                                                       // 10067\n     * @param {Function|...(string|string[])} [predicate] The function invoked per                                     // 10068\n     *  iteration or property names to pick, specified as individual property                                          // 10069\n     *  names or arrays of property names.                                                                             // 10070\n     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 10071\n     * @returns {Object} Returns the new object.                                                                       // 10072\n     * @example                                                                                                        // 10073\n     *                                                                                                                 // 10074\n     * var object = { 'user': 'fred', 'age': 40 };                                                                     // 10075\n     *                                                                                                                 // 10076\n     * _.pick(object, 'user');                                                                                         // 10077\n     * // => { 'user': 'fred' }                                                                                        // 10078\n     *                                                                                                                 // 10079\n     * _.pick(object, _.isString);                                                                                     // 10080\n     * // => { 'user': 'fred' }                                                                                        // 10081\n     */                                                                                                                // 10082\n    var pick = restParam(function(object, props) {                                                                     // 10083\n      if (object == null) {                                                                                            // 10084\n        return {};                                                                                                     // 10085\n      }                                                                                                                // 10086\n      return typeof props[0] == 'function'                                                                             // 10087\n        ? pickByCallback(object, bindCallback(props[0], props[1], 3))                                                  // 10088\n        : pickByArray(object, baseFlatten(props));                                                                     // 10089\n    });                                                                                                                // 10090\n                                                                                                                       // 10091\n    /**                                                                                                                // 10092\n     * This method is like `_.get` except that if the resolved value is a function                                     // 10093\n     * it's invoked with the `this` binding of its parent object and its result                                        // 10094\n     * is returned.                                                                                                    // 10095\n     *                                                                                                                 // 10096\n     * @static                                                                                                         // 10097\n     * @memberOf _                                                                                                     // 10098\n     * @category Object                                                                                                // 10099\n     * @param {Object} object The object to query.                                                                     // 10100\n     * @param {Array|string} path The path of the property to resolve.                                                 // 10101\n     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.                              // 10102\n     * @returns {*} Returns the resolved value.                                                                        // 10103\n     * @example                                                                                                        // 10104\n     *                                                                                                                 // 10105\n     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };                                              // 10106\n     *                                                                                                                 // 10107\n     * _.result(object, 'a[0].b.c1');                                                                                  // 10108\n     * // => 3                                                                                                         // 10109\n     *                                                                                                                 // 10110\n     * _.result(object, 'a[0].b.c2');                                                                                  // 10111\n     * // => 4                                                                                                         // 10112\n     *                                                                                                                 // 10113\n     * _.result(object, 'a.b.c', 'default');                                                                           // 10114\n     * // => 'default'                                                                                                 // 10115\n     *                                                                                                                 // 10116\n     * _.result(object, 'a.b.c', _.constant('default'));                                                               // 10117\n     * // => 'default'                                                                                                 // 10118\n     */                                                                                                                // 10119\n    function result(object, path, defaultValue) {                                                                      // 10120\n      var result = object == null ? undefined : toObject(object)[path];                                                // 10121\n      if (result === undefined) {                                                                                      // 10122\n        if (object != null && !isKey(path, object)) {                                                                  // 10123\n          path = toPath(path);                                                                                         // 10124\n          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));                                // 10125\n          result = object == null ? undefined : toObject(object)[last(path)];                                          // 10126\n        }                                                                                                              // 10127\n        result = result === undefined ? defaultValue : result;                                                         // 10128\n      }                                                                                                                // 10129\n      return isFunction(result) ? result.call(object) : result;                                                        // 10130\n    }                                                                                                                  // 10131\n                                                                                                                       // 10132\n    /**                                                                                                                // 10133\n     * Sets the property value of `path` on `object`. If a portion of `path`                                           // 10134\n     * does not exist it's created.                                                                                    // 10135\n     *                                                                                                                 // 10136\n     * @static                                                                                                         // 10137\n     * @memberOf _                                                                                                     // 10138\n     * @category Object                                                                                                // 10139\n     * @param {Object} object The object to augment.                                                                   // 10140\n     * @param {Array|string} path The path of the property to set.                                                     // 10141\n     * @param {*} value The value to set.                                                                              // 10142\n     * @returns {Object} Returns `object`.                                                                             // 10143\n     * @example                                                                                                        // 10144\n     *                                                                                                                 // 10145\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };                                                                    // 10146\n     *                                                                                                                 // 10147\n     * _.set(object, 'a[0].b.c', 4);                                                                                   // 10148\n     * console.log(object.a[0].b.c);                                                                                   // 10149\n     * // => 4                                                                                                         // 10150\n     *                                                                                                                 // 10151\n     * _.set(object, 'x[0].y.z', 5);                                                                                   // 10152\n     * console.log(object.x[0].y.z);                                                                                   // 10153\n     * // => 5                                                                                                         // 10154\n     */                                                                                                                // 10155\n    function set(object, path, value) {                                                                                // 10156\n      if (object == null) {                                                                                            // 10157\n        return object;                                                                                                 // 10158\n      }                                                                                                                // 10159\n      var pathKey = (path + '');                                                                                       // 10160\n      path = (object[pathKey] != null || isKey(path, object)) ? [pathKey] : toPath(path);                              // 10161\n                                                                                                                       // 10162\n      var index = -1,                                                                                                  // 10163\n          length = path.length,                                                                                        // 10164\n          lastIndex = length - 1,                                                                                      // 10165\n          nested = object;                                                                                             // 10166\n                                                                                                                       // 10167\n      while (nested != null && ++index < length) {                                                                     // 10168\n        var key = path[index];                                                                                         // 10169\n        if (isObject(nested)) {                                                                                        // 10170\n          if (index == lastIndex) {                                                                                    // 10171\n            nested[key] = value;                                                                                       // 10172\n          } else if (nested[key] == null) {                                                                            // 10173\n            nested[key] = isIndex(path[index + 1]) ? [] : {};                                                          // 10174\n          }                                                                                                            // 10175\n        }                                                                                                              // 10176\n        nested = nested[key];                                                                                          // 10177\n      }                                                                                                                // 10178\n      return object;                                                                                                   // 10179\n    }                                                                                                                  // 10180\n                                                                                                                       // 10181\n    /**                                                                                                                // 10182\n     * An alternative to `_.reduce`; this method transforms `object` to a new                                          // 10183\n     * `accumulator` object which is the result of running each of its own enumerable                                  // 10184\n     * properties through `iteratee`, with each invocation potentially mutating                                        // 10185\n     * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked                                      // 10186\n     * with four arguments: (accumulator, value, key, object). Iteratee functions                                      // 10187\n     * may exit iteration early by explicitly returning `false`.                                                       // 10188\n     *                                                                                                                 // 10189\n     * @static                                                                                                         // 10190\n     * @memberOf _                                                                                                     // 10191\n     * @category Object                                                                                                // 10192\n     * @param {Array|Object} object The object to iterate over.                                                        // 10193\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 10194\n     * @param {*} [accumulator] The custom accumulator value.                                                          // 10195\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 10196\n     * @returns {*} Returns the accumulated value.                                                                     // 10197\n     * @example                                                                                                        // 10198\n     *                                                                                                                 // 10199\n     * _.transform([2, 3, 4], function(result, n) {                                                                    // 10200\n     *   result.push(n *= n);                                                                                          // 10201\n     *   return n % 2 == 0;                                                                                            // 10202\n     * });                                                                                                             // 10203\n     * // => [4, 9]                                                                                                    // 10204\n     *                                                                                                                 // 10205\n     * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {                                                      // 10206\n     *   result[key] = n * 3;                                                                                          // 10207\n     * });                                                                                                             // 10208\n     * // => { 'a': 3, 'b': 6 }                                                                                        // 10209\n     */                                                                                                                // 10210\n    function transform(object, iteratee, accumulator, thisArg) {                                                       // 10211\n      var isArr = isArray(object) || isTypedArray(object);                                                             // 10212\n      iteratee = getCallback(iteratee, thisArg, 4);                                                                    // 10213\n                                                                                                                       // 10214\n      if (accumulator == null) {                                                                                       // 10215\n        if (isArr || isObject(object)) {                                                                               // 10216\n          var Ctor = object.constructor;                                                                               // 10217\n          if (isArr) {                                                                                                 // 10218\n            accumulator = isArray(object) ? new Ctor : [];                                                             // 10219\n          } else {                                                                                                     // 10220\n            accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);                                   // 10221\n          }                                                                                                            // 10222\n        } else {                                                                                                       // 10223\n          accumulator = {};                                                                                            // 10224\n        }                                                                                                              // 10225\n      }                                                                                                                // 10226\n      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {                                        // 10227\n        return iteratee(accumulator, value, index, object);                                                            // 10228\n      });                                                                                                              // 10229\n      return accumulator;                                                                                              // 10230\n    }                                                                                                                  // 10231\n                                                                                                                       // 10232\n    /**                                                                                                                // 10233\n     * Creates an array of the own enumerable property values of `object`.                                             // 10234\n     *                                                                                                                 // 10235\n     * **Note:** Non-object values are coerced to objects.                                                             // 10236\n     *                                                                                                                 // 10237\n     * @static                                                                                                         // 10238\n     * @memberOf _                                                                                                     // 10239\n     * @category Object                                                                                                // 10240\n     * @param {Object} object The object to query.                                                                     // 10241\n     * @returns {Array} Returns the array of property values.                                                          // 10242\n     * @example                                                                                                        // 10243\n     *                                                                                                                 // 10244\n     * function Foo() {                                                                                                // 10245\n     *   this.a = 1;                                                                                                   // 10246\n     *   this.b = 2;                                                                                                   // 10247\n     * }                                                                                                               // 10248\n     *                                                                                                                 // 10249\n     * Foo.prototype.c = 3;                                                                                            // 10250\n     *                                                                                                                 // 10251\n     * _.values(new Foo);                                                                                              // 10252\n     * // => [1, 2] (iteration order is not guaranteed)                                                                // 10253\n     *                                                                                                                 // 10254\n     * _.values('hi');                                                                                                 // 10255\n     * // => ['h', 'i']                                                                                                // 10256\n     */                                                                                                                // 10257\n    function values(object) {                                                                                          // 10258\n      return baseValues(object, keys(object));                                                                         // 10259\n    }                                                                                                                  // 10260\n                                                                                                                       // 10261\n    /**                                                                                                                // 10262\n     * Creates an array of the own and inherited enumerable property values                                            // 10263\n     * of `object`.                                                                                                    // 10264\n     *                                                                                                                 // 10265\n     * **Note:** Non-object values are coerced to objects.                                                             // 10266\n     *                                                                                                                 // 10267\n     * @static                                                                                                         // 10268\n     * @memberOf _                                                                                                     // 10269\n     * @category Object                                                                                                // 10270\n     * @param {Object} object The object to query.                                                                     // 10271\n     * @returns {Array} Returns the array of property values.                                                          // 10272\n     * @example                                                                                                        // 10273\n     *                                                                                                                 // 10274\n     * function Foo() {                                                                                                // 10275\n     *   this.a = 1;                                                                                                   // 10276\n     *   this.b = 2;                                                                                                   // 10277\n     * }                                                                                                               // 10278\n     *                                                                                                                 // 10279\n     * Foo.prototype.c = 3;                                                                                            // 10280\n     *                                                                                                                 // 10281\n     * _.valuesIn(new Foo);                                                                                            // 10282\n     * // => [1, 2, 3] (iteration order is not guaranteed)                                                             // 10283\n     */                                                                                                                // 10284\n    function valuesIn(object) {                                                                                        // 10285\n      return baseValues(object, keysIn(object));                                                                       // 10286\n    }                                                                                                                  // 10287\n                                                                                                                       // 10288\n    /*------------------------------------------------------------------------*/                                       // 10289\n                                                                                                                       // 10290\n    /**                                                                                                                // 10291\n     * Checks if `n` is between `start` and up to but not including, `end`. If                                         // 10292\n     * `end` is not specified it's set to `start` with `start` then set to `0`.                                        // 10293\n     *                                                                                                                 // 10294\n     * @static                                                                                                         // 10295\n     * @memberOf _                                                                                                     // 10296\n     * @category Number                                                                                                // 10297\n     * @param {number} n The number to check.                                                                          // 10298\n     * @param {number} [start=0] The start of the range.                                                               // 10299\n     * @param {number} end The end of the range.                                                                       // 10300\n     * @returns {boolean} Returns `true` if `n` is in the range, else `false`.                                         // 10301\n     * @example                                                                                                        // 10302\n     *                                                                                                                 // 10303\n     * _.inRange(3, 2, 4);                                                                                             // 10304\n     * // => true                                                                                                      // 10305\n     *                                                                                                                 // 10306\n     * _.inRange(4, 8);                                                                                                // 10307\n     * // => true                                                                                                      // 10308\n     *                                                                                                                 // 10309\n     * _.inRange(4, 2);                                                                                                // 10310\n     * // => false                                                                                                     // 10311\n     *                                                                                                                 // 10312\n     * _.inRange(2, 2);                                                                                                // 10313\n     * // => false                                                                                                     // 10314\n     *                                                                                                                 // 10315\n     * _.inRange(1.2, 2);                                                                                              // 10316\n     * // => true                                                                                                      // 10317\n     *                                                                                                                 // 10318\n     * _.inRange(5.2, 4);                                                                                              // 10319\n     * // => false                                                                                                     // 10320\n     */                                                                                                                // 10321\n    function inRange(value, start, end) {                                                                              // 10322\n      start = +start || 0;                                                                                             // 10323\n      if (end === undefined) {                                                                                         // 10324\n        end = start;                                                                                                   // 10325\n        start = 0;                                                                                                     // 10326\n      } else {                                                                                                         // 10327\n        end = +end || 0;                                                                                               // 10328\n      }                                                                                                                // 10329\n      return value >= nativeMin(start, end) && value < nativeMax(start, end);                                          // 10330\n    }                                                                                                                  // 10331\n                                                                                                                       // 10332\n    /**                                                                                                                // 10333\n     * Produces a random number between `min` and `max` (inclusive). If only one                                       // 10334\n     * argument is provided a number between `0` and the given number is returned.                                     // 10335\n     * If `floating` is `true`, or either `min` or `max` are floats, a floating-point                                  // 10336\n     * number is returned instead of an integer.                                                                       // 10337\n     *                                                                                                                 // 10338\n     * @static                                                                                                         // 10339\n     * @memberOf _                                                                                                     // 10340\n     * @category Number                                                                                                // 10341\n     * @param {number} [min=0] The minimum possible value.                                                             // 10342\n     * @param {number} [max=1] The maximum possible value.                                                             // 10343\n     * @param {boolean} [floating] Specify returning a floating-point number.                                          // 10344\n     * @returns {number} Returns the random number.                                                                    // 10345\n     * @example                                                                                                        // 10346\n     *                                                                                                                 // 10347\n     * _.random(0, 5);                                                                                                 // 10348\n     * // => an integer between 0 and 5                                                                                // 10349\n     *                                                                                                                 // 10350\n     * _.random(5);                                                                                                    // 10351\n     * // => also an integer between 0 and 5                                                                           // 10352\n     *                                                                                                                 // 10353\n     * _.random(5, true);                                                                                              // 10354\n     * // => a floating-point number between 0 and 5                                                                   // 10355\n     *                                                                                                                 // 10356\n     * _.random(1.2, 5.2);                                                                                             // 10357\n     * // => a floating-point number between 1.2 and 5.2                                                               // 10358\n     */                                                                                                                // 10359\n    function random(min, max, floating) {                                                                              // 10360\n      if (floating && isIterateeCall(min, max, floating)) {                                                            // 10361\n        max = floating = undefined;                                                                                    // 10362\n      }                                                                                                                // 10363\n      var noMin = min == null,                                                                                         // 10364\n          noMax = max == null;                                                                                         // 10365\n                                                                                                                       // 10366\n      if (floating == null) {                                                                                          // 10367\n        if (noMax && typeof min == 'boolean') {                                                                        // 10368\n          floating = min;                                                                                              // 10369\n          min = 1;                                                                                                     // 10370\n        }                                                                                                              // 10371\n        else if (typeof max == 'boolean') {                                                                            // 10372\n          floating = max;                                                                                              // 10373\n          noMax = true;                                                                                                // 10374\n        }                                                                                                              // 10375\n      }                                                                                                                // 10376\n      if (noMin && noMax) {                                                                                            // 10377\n        max = 1;                                                                                                       // 10378\n        noMax = false;                                                                                                 // 10379\n      }                                                                                                                // 10380\n      min = +min || 0;                                                                                                 // 10381\n      if (noMax) {                                                                                                     // 10382\n        max = min;                                                                                                     // 10383\n        min = 0;                                                                                                       // 10384\n      } else {                                                                                                         // 10385\n        max = +max || 0;                                                                                               // 10386\n      }                                                                                                                // 10387\n      if (floating || min % 1 || max % 1) {                                                                            // 10388\n        var rand = nativeRandom();                                                                                     // 10389\n        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand + '').length - 1)))), max);              // 10390\n      }                                                                                                                // 10391\n      return baseRandom(min, max);                                                                                     // 10392\n    }                                                                                                                  // 10393\n                                                                                                                       // 10394\n    /*------------------------------------------------------------------------*/                                       // 10395\n                                                                                                                       // 10396\n    /**                                                                                                                // 10397\n     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).                                     // 10398\n     *                                                                                                                 // 10399\n     * @static                                                                                                         // 10400\n     * @memberOf _                                                                                                     // 10401\n     * @category String                                                                                                // 10402\n     * @param {string} [string=''] The string to convert.                                                              // 10403\n     * @returns {string} Returns the camel cased string.                                                               // 10404\n     * @example                                                                                                        // 10405\n     *                                                                                                                 // 10406\n     * _.camelCase('Foo Bar');                                                                                         // 10407\n     * // => 'fooBar'                                                                                                  // 10408\n     *                                                                                                                 // 10409\n     * _.camelCase('--foo-bar');                                                                                       // 10410\n     * // => 'fooBar'                                                                                                  // 10411\n     *                                                                                                                 // 10412\n     * _.camelCase('__foo_bar__');                                                                                     // 10413\n     * // => 'fooBar'                                                                                                  // 10414\n     */                                                                                                                // 10415\n    var camelCase = createCompounder(function(result, word, index) {                                                   // 10416\n      word = word.toLowerCase();                                                                                       // 10417\n      return result + (index ? (word.charAt(0).toUpperCase() + word.slice(1)) : word);                                 // 10418\n    });                                                                                                                // 10419\n                                                                                                                       // 10420\n    /**                                                                                                                // 10421\n     * Capitalizes the first character of `string`.                                                                    // 10422\n     *                                                                                                                 // 10423\n     * @static                                                                                                         // 10424\n     * @memberOf _                                                                                                     // 10425\n     * @category String                                                                                                // 10426\n     * @param {string} [string=''] The string to capitalize.                                                           // 10427\n     * @returns {string} Returns the capitalized string.                                                               // 10428\n     * @example                                                                                                        // 10429\n     *                                                                                                                 // 10430\n     * _.capitalize('fred');                                                                                           // 10431\n     * // => 'Fred'                                                                                                    // 10432\n     */                                                                                                                // 10433\n    function capitalize(string) {                                                                                      // 10434\n      string = baseToString(string);                                                                                   // 10435\n      return string && (string.charAt(0).toUpperCase() + string.slice(1));                                             // 10436\n    }                                                                                                                  // 10437\n                                                                                                                       // 10438\n    /**                                                                                                                // 10439\n     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n     *                                                                                                                 // 10442\n     * @static                                                                                                         // 10443\n     * @memberOf _                                                                                                     // 10444\n     * @category String                                                                                                // 10445\n     * @param {string} [string=''] The string to deburr.                                                               // 10446\n     * @returns {string} Returns the deburred string.                                                                  // 10447\n     * @example                                                                                                        // 10448\n     *                                                                                                                 // 10449\n     * _.deburr('déjà vu');                                                                                            // 10450\n     * // => 'deja vu'                                                                                                 // 10451\n     */                                                                                                                // 10452\n    function deburr(string) {                                                                                          // 10453\n      string = baseToString(string);                                                                                   // 10454\n      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');                                // 10455\n    }                                                                                                                  // 10456\n                                                                                                                       // 10457\n    /**                                                                                                                // 10458\n     * Checks if `string` ends with the given target string.                                                           // 10459\n     *                                                                                                                 // 10460\n     * @static                                                                                                         // 10461\n     * @memberOf _                                                                                                     // 10462\n     * @category String                                                                                                // 10463\n     * @param {string} [string=''] The string to search.                                                               // 10464\n     * @param {string} [target] The string to search for.                                                              // 10465\n     * @param {number} [position=string.length] The position to search from.                                           // 10466\n     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.                                 // 10467\n     * @example                                                                                                        // 10468\n     *                                                                                                                 // 10469\n     * _.endsWith('abc', 'c');                                                                                         // 10470\n     * // => true                                                                                                      // 10471\n     *                                                                                                                 // 10472\n     * _.endsWith('abc', 'b');                                                                                         // 10473\n     * // => false                                                                                                     // 10474\n     *                                                                                                                 // 10475\n     * _.endsWith('abc', 'b', 2);                                                                                      // 10476\n     * // => true                                                                                                      // 10477\n     */                                                                                                                // 10478\n    function endsWith(string, target, position) {                                                                      // 10479\n      string = baseToString(string);                                                                                   // 10480\n      target = (target + '');                                                                                          // 10481\n                                                                                                                       // 10482\n      var length = string.length;                                                                                      // 10483\n      position = position === undefined                                                                                // 10484\n        ? length                                                                                                       // 10485\n        : nativeMin(position < 0 ? 0 : (+position || 0), length);                                                      // 10486\n                                                                                                                       // 10487\n      position -= target.length;                                                                                       // 10488\n      return position >= 0 && string.indexOf(target, position) == position;                                            // 10489\n    }                                                                                                                  // 10490\n                                                                                                                       // 10491\n    /**                                                                                                                // 10492\n     * Converts the characters \"&\", \"<\", \">\", '\"', \"'\", and \"\\`\", in `string` to                                       // 10493\n     * their corresponding HTML entities.                                                                              // 10494\n     *                                                                                                                 // 10495\n     * **Note:** No other characters are escaped. To escape additional characters                                      // 10496\n     * use a third-party library like [_he_](https://mths.be/he).                                                      // 10497\n     *                                                                                                                 // 10498\n     * Though the \">\" character is escaped for symmetry, characters like                                               // 10499\n     * \">\" and \"/\" don't need escaping in HTML and have no special meaning                                             // 10500\n     * unless they're part of a tag or unquoted attribute value.                                                       // 10501\n     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)                             // 10502\n     * (under \"semi-related fun fact\") for more details.                                                               // 10503\n     *                                                                                                                 // 10504\n     * Backticks are escaped because in Internet Explorer < 9, they can break out                                      // 10505\n     * of attribute values or HTML comments. See [#59](https://html5sec.org/#59),                                      // 10506\n     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and                                       // 10507\n     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)                     // 10508\n     * for more details.                                                                                               // 10509\n     *                                                                                                                 // 10510\n     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)          // 10511\n     * to reduce XSS vectors.                                                                                          // 10512\n     *                                                                                                                 // 10513\n     * @static                                                                                                         // 10514\n     * @memberOf _                                                                                                     // 10515\n     * @category String                                                                                                // 10516\n     * @param {string} [string=''] The string to escape.                                                               // 10517\n     * @returns {string} Returns the escaped string.                                                                   // 10518\n     * @example                                                                                                        // 10519\n     *                                                                                                                 // 10520\n     * _.escape('fred, barney, & pebbles');                                                                            // 10521\n     * // => 'fred, barney, &amp; pebbles'                                                                             // 10522\n     */                                                                                                                // 10523\n    function escape(string) {                                                                                          // 10524\n      // Reset `lastIndex` because in IE < 9 `String#replace` does not.                                                // 10525\n      string = baseToString(string);                                                                                   // 10526\n      return (string && reHasUnescapedHtml.test(string))                                                               // 10527\n        ? string.replace(reUnescapedHtml, escapeHtmlChar)                                                              // 10528\n        : string;                                                                                                      // 10529\n    }                                                                                                                  // 10530\n                                                                                                                       // 10531\n    /**                                                                                                                // 10532\n     * Escapes the `RegExp` special characters \"\\\", \"/\", \"^\", \"$\", \".\", \"|\", \"?\",                                      // 10533\n     * \"*\", \"+\", \"(\", \")\", \"[\", \"]\", \"{\" and \"}\" in `string`.                                                          // 10534\n     *                                                                                                                 // 10535\n     * @static                                                                                                         // 10536\n     * @memberOf _                                                                                                     // 10537\n     * @category String                                                                                                // 10538\n     * @param {string} [string=''] The string to escape.                                                               // 10539\n     * @returns {string} Returns the escaped string.                                                                   // 10540\n     * @example                                                                                                        // 10541\n     *                                                                                                                 // 10542\n     * _.escapeRegExp('[lodash](https://lodash.com/)');                                                                // 10543\n     * // => '\\[lodash\\]\\(https:\\/\\/lodash\\.com\\/\\)'                                                                   // 10544\n     */                                                                                                                // 10545\n    function escapeRegExp(string) {                                                                                    // 10546\n      string = baseToString(string);                                                                                   // 10547\n      return (string && reHasRegExpChars.test(string))                                                                 // 10548\n        ? string.replace(reRegExpChars, escapeRegExpChar)                                                              // 10549\n        : (string || '(?:)');                                                                                          // 10550\n    }                                                                                                                  // 10551\n                                                                                                                       // 10552\n    /**                                                                                                                // 10553\n     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).               // 10554\n     *                                                                                                                 // 10555\n     * @static                                                                                                         // 10556\n     * @memberOf _                                                                                                     // 10557\n     * @category String                                                                                                // 10558\n     * @param {string} [string=''] The string to convert.                                                              // 10559\n     * @returns {string} Returns the kebab cased string.                                                               // 10560\n     * @example                                                                                                        // 10561\n     *                                                                                                                 // 10562\n     * _.kebabCase('Foo Bar');                                                                                         // 10563\n     * // => 'foo-bar'                                                                                                 // 10564\n     *                                                                                                                 // 10565\n     * _.kebabCase('fooBar');                                                                                          // 10566\n     * // => 'foo-bar'                                                                                                 // 10567\n     *                                                                                                                 // 10568\n     * _.kebabCase('__foo_bar__');                                                                                     // 10569\n     * // => 'foo-bar'                                                                                                 // 10570\n     */                                                                                                                // 10571\n    var kebabCase = createCompounder(function(result, word, index) {                                                   // 10572\n      return result + (index ? '-' : '') + word.toLowerCase();                                                         // 10573\n    });                                                                                                                // 10574\n                                                                                                                       // 10575\n    /**                                                                                                                // 10576\n     * Pads `string` on the left and right sides if it's shorter than `length`.                                        // 10577\n     * Padding characters are truncated if they can't be evenly divided by `length`.                                   // 10578\n     *                                                                                                                 // 10579\n     * @static                                                                                                         // 10580\n     * @memberOf _                                                                                                     // 10581\n     * @category String                                                                                                // 10582\n     * @param {string} [string=''] The string to pad.                                                                  // 10583\n     * @param {number} [length=0] The padding length.                                                                  // 10584\n     * @param {string} [chars=' '] The string used as padding.                                                         // 10585\n     * @returns {string} Returns the padded string.                                                                    // 10586\n     * @example                                                                                                        // 10587\n     *                                                                                                                 // 10588\n     * _.pad('abc', 8);                                                                                                // 10589\n     * // => '  abc   '                                                                                                // 10590\n     *                                                                                                                 // 10591\n     * _.pad('abc', 8, '_-');                                                                                          // 10592\n     * // => '_-abc_-_'                                                                                                // 10593\n     *                                                                                                                 // 10594\n     * _.pad('abc', 3);                                                                                                // 10595\n     * // => 'abc'                                                                                                     // 10596\n     */                                                                                                                // 10597\n    function pad(string, length, chars) {                                                                              // 10598\n      string = baseToString(string);                                                                                   // 10599\n      length = +length;                                                                                                // 10600\n                                                                                                                       // 10601\n      var strLength = string.length;                                                                                   // 10602\n      if (strLength >= length || !nativeIsFinite(length)) {                                                            // 10603\n        return string;                                                                                                 // 10604\n      }                                                                                                                // 10605\n      var mid = (length - strLength) / 2,                                                                              // 10606\n          leftLength = nativeFloor(mid),                                                                               // 10607\n          rightLength = nativeCeil(mid);                                                                               // 10608\n                                                                                                                       // 10609\n      chars = createPadding('', rightLength, chars);                                                                   // 10610\n      return chars.slice(0, leftLength) + string + chars;                                                              // 10611\n    }                                                                                                                  // 10612\n                                                                                                                       // 10613\n    /**                                                                                                                // 10614\n     * Pads `string` on the left side if it's shorter than `length`. Padding                                           // 10615\n     * characters are truncated if they exceed `length`.                                                               // 10616\n     *                                                                                                                 // 10617\n     * @static                                                                                                         // 10618\n     * @memberOf _                                                                                                     // 10619\n     * @category String                                                                                                // 10620\n     * @param {string} [string=''] The string to pad.                                                                  // 10621\n     * @param {number} [length=0] The padding length.                                                                  // 10622\n     * @param {string} [chars=' '] The string used as padding.                                                         // 10623\n     * @returns {string} Returns the padded string.                                                                    // 10624\n     * @example                                                                                                        // 10625\n     *                                                                                                                 // 10626\n     * _.padLeft('abc', 6);                                                                                            // 10627\n     * // => '   abc'                                                                                                  // 10628\n     *                                                                                                                 // 10629\n     * _.padLeft('abc', 6, '_-');                                                                                      // 10630\n     * // => '_-_abc'                                                                                                  // 10631\n     *                                                                                                                 // 10632\n     * _.padLeft('abc', 3);                                                                                            // 10633\n     * // => 'abc'                                                                                                     // 10634\n     */                                                                                                                // 10635\n    var padLeft = createPadDir();                                                                                      // 10636\n                                                                                                                       // 10637\n    /**                                                                                                                // 10638\n     * Pads `string` on the right side if it's shorter than `length`. Padding                                          // 10639\n     * characters are truncated if they exceed `length`.                                                               // 10640\n     *                                                                                                                 // 10641\n     * @static                                                                                                         // 10642\n     * @memberOf _                                                                                                     // 10643\n     * @category String                                                                                                // 10644\n     * @param {string} [string=''] The string to pad.                                                                  // 10645\n     * @param {number} [length=0] The padding length.                                                                  // 10646\n     * @param {string} [chars=' '] The string used as padding.                                                         // 10647\n     * @returns {string} Returns the padded string.                                                                    // 10648\n     * @example                                                                                                        // 10649\n     *                                                                                                                 // 10650\n     * _.padRight('abc', 6);                                                                                           // 10651\n     * // => 'abc   '                                                                                                  // 10652\n     *                                                                                                                 // 10653\n     * _.padRight('abc', 6, '_-');                                                                                     // 10654\n     * // => 'abc_-_'                                                                                                  // 10655\n     *                                                                                                                 // 10656\n     * _.padRight('abc', 3);                                                                                           // 10657\n     * // => 'abc'                                                                                                     // 10658\n     */                                                                                                                // 10659\n    var padRight = createPadDir(true);                                                                                 // 10660\n                                                                                                                       // 10661\n    /**                                                                                                                // 10662\n     * Converts `string` to an integer of the specified radix. If `radix` is                                           // 10663\n     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,                                  // 10664\n     * in which case a `radix` of `16` is used.                                                                        // 10665\n     *                                                                                                                 // 10666\n     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)                            // 10667\n     * of `parseInt`.                                                                                                  // 10668\n     *                                                                                                                 // 10669\n     * @static                                                                                                         // 10670\n     * @memberOf _                                                                                                     // 10671\n     * @category String                                                                                                // 10672\n     * @param {string} string The string to convert.                                                                   // 10673\n     * @param {number} [radix] The radix to interpret `value` by.                                                      // 10674\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 10675\n     * @returns {number} Returns the converted integer.                                                                // 10676\n     * @example                                                                                                        // 10677\n     *                                                                                                                 // 10678\n     * _.parseInt('08');                                                                                               // 10679\n     * // => 8                                                                                                         // 10680\n     *                                                                                                                 // 10681\n     * _.map(['6', '08', '10'], _.parseInt);                                                                           // 10682\n     * // => [6, 8, 10]                                                                                                // 10683\n     */                                                                                                                // 10684\n    function parseInt(string, radix, guard) {                                                                          // 10685\n      // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.                                                        // 10686\n      // Chrome fails to trim leading <BOM> whitespace characters.                                                     // 10687\n      // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.                                      // 10688\n      if (guard ? isIterateeCall(string, radix, guard) : radix == null) {                                              // 10689\n        radix = 0;                                                                                                     // 10690\n      } else if (radix) {                                                                                              // 10691\n        radix = +radix;                                                                                                // 10692\n      }                                                                                                                // 10693\n      string = trim(string);                                                                                           // 10694\n      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));                                 // 10695\n    }                                                                                                                  // 10696\n                                                                                                                       // 10697\n    /**                                                                                                                // 10698\n     * Repeats the given string `n` times.                                                                             // 10699\n     *                                                                                                                 // 10700\n     * @static                                                                                                         // 10701\n     * @memberOf _                                                                                                     // 10702\n     * @category String                                                                                                // 10703\n     * @param {string} [string=''] The string to repeat.                                                               // 10704\n     * @param {number} [n=0] The number of times to repeat the string.                                                 // 10705\n     * @returns {string} Returns the repeated string.                                                                  // 10706\n     * @example                                                                                                        // 10707\n     *                                                                                                                 // 10708\n     * _.repeat('*', 3);                                                                                               // 10709\n     * // => '***'                                                                                                     // 10710\n     *                                                                                                                 // 10711\n     * _.repeat('abc', 2);                                                                                             // 10712\n     * // => 'abcabc'                                                                                                  // 10713\n     *                                                                                                                 // 10714\n     * _.repeat('abc', 0);                                                                                             // 10715\n     * // => ''                                                                                                        // 10716\n     */                                                                                                                // 10717\n    function repeat(string, n) {                                                                                       // 10718\n      var result = '';                                                                                                 // 10719\n      string = baseToString(string);                                                                                   // 10720\n      n = +n;                                                                                                          // 10721\n      if (n < 1 || !string || !nativeIsFinite(n)) {                                                                    // 10722\n        return result;                                                                                                 // 10723\n      }                                                                                                                // 10724\n      // Leverage the exponentiation by squaring algorithm for a faster repeat.                                        // 10725\n      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.                                // 10726\n      do {                                                                                                             // 10727\n        if (n % 2) {                                                                                                   // 10728\n          result += string;                                                                                            // 10729\n        }                                                                                                              // 10730\n        n = nativeFloor(n / 2);                                                                                        // 10731\n        string += string;                                                                                              // 10732\n      } while (n);                                                                                                     // 10733\n                                                                                                                       // 10734\n      return result;                                                                                                   // 10735\n    }                                                                                                                  // 10736\n                                                                                                                       // 10737\n    /**                                                                                                                // 10738\n     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).                                    // 10739\n     *                                                                                                                 // 10740\n     * @static                                                                                                         // 10741\n     * @memberOf _                                                                                                     // 10742\n     * @category String                                                                                                // 10743\n     * @param {string} [string=''] The string to convert.                                                              // 10744\n     * @returns {string} Returns the snake cased string.                                                               // 10745\n     * @example                                                                                                        // 10746\n     *                                                                                                                 // 10747\n     * _.snakeCase('Foo Bar');                                                                                         // 10748\n     * // => 'foo_bar'                                                                                                 // 10749\n     *                                                                                                                 // 10750\n     * _.snakeCase('fooBar');                                                                                          // 10751\n     * // => 'foo_bar'                                                                                                 // 10752\n     *                                                                                                                 // 10753\n     * _.snakeCase('--foo-bar');                                                                                       // 10754\n     * // => 'foo_bar'                                                                                                 // 10755\n     */                                                                                                                // 10756\n    var snakeCase = createCompounder(function(result, word, index) {                                                   // 10757\n      return result + (index ? '_' : '') + word.toLowerCase();                                                         // 10758\n    });                                                                                                                // 10759\n                                                                                                                       // 10760\n    /**                                                                                                                // 10761\n     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).    // 10762\n     *                                                                                                                 // 10763\n     * @static                                                                                                         // 10764\n     * @memberOf _                                                                                                     // 10765\n     * @category String                                                                                                // 10766\n     * @param {string} [string=''] The string to convert.                                                              // 10767\n     * @returns {string} Returns the start cased string.                                                               // 10768\n     * @example                                                                                                        // 10769\n     *                                                                                                                 // 10770\n     * _.startCase('--foo-bar');                                                                                       // 10771\n     * // => 'Foo Bar'                                                                                                 // 10772\n     *                                                                                                                 // 10773\n     * _.startCase('fooBar');                                                                                          // 10774\n     * // => 'Foo Bar'                                                                                                 // 10775\n     *                                                                                                                 // 10776\n     * _.startCase('__foo_bar__');                                                                                     // 10777\n     * // => 'Foo Bar'                                                                                                 // 10778\n     */                                                                                                                // 10779\n    var startCase = createCompounder(function(result, word, index) {                                                   // 10780\n      return result + (index ? ' ' : '') + (word.charAt(0).toUpperCase() + word.slice(1));                             // 10781\n    });                                                                                                                // 10782\n                                                                                                                       // 10783\n    /**                                                                                                                // 10784\n     * Checks if `string` starts with the given target string.                                                         // 10785\n     *                                                                                                                 // 10786\n     * @static                                                                                                         // 10787\n     * @memberOf _                                                                                                     // 10788\n     * @category String                                                                                                // 10789\n     * @param {string} [string=''] The string to search.                                                               // 10790\n     * @param {string} [target] The string to search for.                                                              // 10791\n     * @param {number} [position=0] The position to search from.                                                       // 10792\n     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.                               // 10793\n     * @example                                                                                                        // 10794\n     *                                                                                                                 // 10795\n     * _.startsWith('abc', 'a');                                                                                       // 10796\n     * // => true                                                                                                      // 10797\n     *                                                                                                                 // 10798\n     * _.startsWith('abc', 'b');                                                                                       // 10799\n     * // => false                                                                                                     // 10800\n     *                                                                                                                 // 10801\n     * _.startsWith('abc', 'b', 1);                                                                                    // 10802\n     * // => true                                                                                                      // 10803\n     */                                                                                                                // 10804\n    function startsWith(string, target, position) {                                                                    // 10805\n      string = baseToString(string);                                                                                   // 10806\n      position = position == null                                                                                      // 10807\n        ? 0                                                                                                            // 10808\n        : nativeMin(position < 0 ? 0 : (+position || 0), string.length);                                               // 10809\n                                                                                                                       // 10810\n      return string.lastIndexOf(target, position) == position;                                                         // 10811\n    }                                                                                                                  // 10812\n                                                                                                                       // 10813\n    /**                                                                                                                // 10814\n     * Creates a compiled template function that can interpolate data properties                                       // 10815\n     * in \"interpolate\" delimiters, HTML-escape interpolated data properties in                                        // 10816\n     * \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data                                      // 10817\n     * properties may be accessed as free variables in the template. If a setting                                      // 10818\n     * object is provided it takes precedence over `_.templateSettings` values.                                        // 10819\n     *                                                                                                                 // 10820\n     * **Note:** In the development build `_.template` utilizes                                                        // 10821\n     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)                   // 10822\n     * for easier debugging.                                                                                           // 10823\n     *                                                                                                                 // 10824\n     * For more information on precompiling templates see                                                              // 10825\n     * [lodash's custom builds documentation](https://lodash.com/custom-builds).                                       // 10826\n     *                                                                                                                 // 10827\n     * For more information on Chrome extension sandboxes see                                                          // 10828\n     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).                    // 10829\n     *                                                                                                                 // 10830\n     * @static                                                                                                         // 10831\n     * @memberOf _                                                                                                     // 10832\n     * @category String                                                                                                // 10833\n     * @param {string} [string=''] The template string.                                                                // 10834\n     * @param {Object} [options] The options object.                                                                   // 10835\n     * @param {RegExp} [options.escape] The HTML \"escape\" delimiter.                                                   // 10836\n     * @param {RegExp} [options.evaluate] The \"evaluate\" delimiter.                                                    // 10837\n     * @param {Object} [options.imports] An object to import into the template as free variables.                      // 10838\n     * @param {RegExp} [options.interpolate] The \"interpolate\" delimiter.                                              // 10839\n     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.                            // 10840\n     * @param {string} [options.variable] The data object variable name.                                               // 10841\n     * @param- {Object} [otherOptions] Enables the legacy `options` param signature.                                   // 10842\n     * @returns {Function} Returns the compiled template function.                                                     // 10843\n     * @example                                                                                                        // 10844\n     *                                                                                                                 // 10845\n     * // using the \"interpolate\" delimiter to create a compiled template                                              // 10846\n     * var compiled = _.template('hello <%= user %>!');                                                                // 10847\n     * compiled({ 'user': 'fred' });                                                                                   // 10848\n     * // => 'hello fred!'                                                                                             // 10849\n     *                                                                                                                 // 10850\n     * // using the HTML \"escape\" delimiter to escape data property values                                             // 10851\n     * var compiled = _.template('<b><%- value %></b>');                                                               // 10852\n     * compiled({ 'value': '<script>' });                                                                              // 10853\n     * // => '<b>&lt;script&gt;</b>'                                                                                   // 10854\n     *                                                                                                                 // 10855\n     * // using the \"evaluate\" delimiter to execute JavaScript and generate HTML                                       // 10856\n     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');              // 10857\n     * compiled({ 'users': ['fred', 'barney'] });                                                                      // 10858\n     * // => '<li>fred</li><li>barney</li>'                                                                            // 10859\n     *                                                                                                                 // 10860\n     * // using the internal `print` function in \"evaluate\" delimiters                                                 // 10861\n     * var compiled = _.template('<% print(\"hello \" + user); %>!');                                                    // 10862\n     * compiled({ 'user': 'barney' });                                                                                 // 10863\n     * // => 'hello barney!'                                                                                           // 10864\n     *                                                                                                                 // 10865\n     * // using the ES delimiter as an alternative to the default \"interpolate\" delimiter                              // 10866\n     * var compiled = _.template('hello ${ user }!');                                                                  // 10867\n     * compiled({ 'user': 'pebbles' });                                                                                // 10868\n     * // => 'hello pebbles!'                                                                                          // 10869\n     *                                                                                                                 // 10870\n     * // using custom template delimiters                                                                             // 10871\n     * _.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;                                                             // 10872\n     * var compiled = _.template('hello {{ user }}!');                                                                 // 10873\n     * compiled({ 'user': 'mustache' });                                                                               // 10874\n     * // => 'hello mustache!'                                                                                         // 10875\n     *                                                                                                                 // 10876\n     * // using backslashes to treat delimiters as plain text                                                          // 10877\n     * var compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');                                                         // 10878\n     * compiled({ 'value': 'ignored' });                                                                               // 10879\n     * // => '<%- value %>'                                                                                            // 10880\n     *                                                                                                                 // 10881\n     * // using the `imports` option to import `jQuery` as `jq`                                                        // 10882\n     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';                                // 10883\n     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });                                               // 10884\n     * compiled({ 'users': ['fred', 'barney'] });                                                                      // 10885\n     * // => '<li>fred</li><li>barney</li>'                                                                            // 10886\n     *                                                                                                                 // 10887\n     * // using the `sourceURL` option to specify a custom sourceURL for the template                                  // 10888\n     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });                        // 10889\n     * compiled(data);                                                                                                 // 10890\n     * // => find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector           // 10891\n     *                                                                                                                 // 10892\n     * // using the `variable` option to ensure a with-statement isn't used in the compiled template                   // 10893\n     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });                                      // 10894\n     * compiled.source;                                                                                                // 10895\n     * // => function(data) {                                                                                          // 10896\n     * //   var __t, __p = '';                                                                                         // 10897\n     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';                                           // 10898\n     * //   return __p;                                                                                                // 10899\n     * // }                                                                                                            // 10900\n     *                                                                                                                 // 10901\n     * // using the `source` property to inline compiled templates for meaningful                                      // 10902\n     * // line numbers in error messages and a stack trace                                                             // 10903\n     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\\\n     *   var JST = {\\\n     *     \"main\": ' + _.template(mainText).source + '\\\n     *   };\\\n     * ');                                                                                                             // 10908\n     */                                                                                                                // 10909\n    function template(string, options, otherOptions) {                                                                 // 10910\n      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)              // 10911\n      // and Laura Doktorova's doT.js (https://github.com/olado/doT).                                                  // 10912\n      var settings = lodash.templateSettings;                                                                          // 10913\n                                                                                                                       // 10914\n      if (otherOptions && isIterateeCall(string, options, otherOptions)) {                                             // 10915\n        options = otherOptions = undefined;                                                                            // 10916\n      }                                                                                                                // 10917\n      string = baseToString(string);                                                                                   // 10918\n      options = assignWith(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);                      // 10919\n                                                                                                                       // 10920\n      var imports = assignWith(baseAssign({}, options.imports), settings.imports, assignOwnDefaults),                  // 10921\n          importsKeys = keys(imports),                                                                                 // 10922\n          importsValues = baseValues(imports, importsKeys);                                                            // 10923\n                                                                                                                       // 10924\n      var isEscaping,                                                                                                  // 10925\n          isEvaluating,                                                                                                // 10926\n          index = 0,                                                                                                   // 10927\n          interpolate = options.interpolate || reNoMatch,                                                              // 10928\n          source = \"__p += '\";                                                                                         // 10929\n                                                                                                                       // 10930\n      // Compile the regexp to match each delimiter.                                                                   // 10931\n      var reDelimiters = RegExp(                                                                                       // 10932\n        (options.escape || reNoMatch).source + '|' +                                                                   // 10933\n        interpolate.source + '|' +                                                                                     // 10934\n        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +                                      // 10935\n        (options.evaluate || reNoMatch).source + '|$'                                                                  // 10936\n      , 'g');                                                                                                          // 10937\n                                                                                                                       // 10938\n      // Use a sourceURL for easier debugging.                                                                         // 10939\n      var sourceURL = '//# sourceURL=' +                                                                               // 10940\n        ('sourceURL' in options                                                                                        // 10941\n          ? options.sourceURL                                                                                          // 10942\n          : ('lodash.templateSources[' + (++templateCounter) + ']')                                                    // 10943\n        ) + '\\n';                                                                                                      // 10944\n                                                                                                                       // 10945\n      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n        interpolateValue || (interpolateValue = esTemplateValue);                                                      // 10947\n                                                                                                                       // 10948\n        // Escape characters that can't be included in string literals.                                                // 10949\n        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);                            // 10950\n                                                                                                                       // 10951\n        // Replace delimiters with snippets.                                                                           // 10952\n        if (escapeValue) {                                                                                             // 10953\n          isEscaping = true;                                                                                           // 10954\n          source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";                                                              // 10955\n        }                                                                                                              // 10956\n        if (evaluateValue) {                                                                                           // 10957\n          isEvaluating = true;                                                                                         // 10958\n          source += \"';\\n\" + evaluateValue + \";\\n__p += '\";                                                            // 10959\n        }                                                                                                              // 10960\n        if (interpolateValue) {                                                                                        // 10961\n          source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";                               // 10962\n        }                                                                                                              // 10963\n        index = offset + match.length;                                                                                 // 10964\n                                                                                                                       // 10965\n        // The JS engine embedded in Adobe products requires returning the `match`                                     // 10966\n        // string in order to produce the correct `offset` value.                                                      // 10967\n        return match;                                                                                                  // 10968\n      });                                                                                                              // 10969\n                                                                                                                       // 10970\n      source += \"';\\n\";                                                                                                // 10971\n                                                                                                                       // 10972\n      // If `variable` is not specified wrap a with-statement around the generated                                     // 10973\n      // code to add the data object to the top of the scope chain.                                                    // 10974\n      var variable = options.variable;                                                                                 // 10975\n      if (!variable) {                                                                                                 // 10976\n        source = 'with (obj) {\\n' + source + '\\n}\\n';                                                                  // 10977\n      }                                                                                                                // 10978\n      // Cleanup code by stripping empty strings.                                                                      // 10979\n      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)                                      // 10980\n        .replace(reEmptyStringMiddle, '$1')                                                                            // 10981\n        .replace(reEmptyStringTrailing, '$1;');                                                                        // 10982\n                                                                                                                       // 10983\n      // Frame code as the function body.                                                                              // 10984\n      source = 'function(' + (variable || 'obj') + ') {\\n' +                                                           // 10985\n        (variable                                                                                                      // 10986\n          ? ''                                                                                                         // 10987\n          : 'obj || (obj = {});\\n'                                                                                     // 10988\n        ) +                                                                                                            // 10989\n        \"var __t, __p = ''\" +                                                                                          // 10990\n        (isEscaping                                                                                                    // 10991\n           ? ', __e = _.escape'                                                                                        // 10992\n           : ''                                                                                                        // 10993\n        ) +                                                                                                            // 10994\n        (isEvaluating                                                                                                  // 10995\n          ? ', __j = Array.prototype.join;\\n' +                                                                        // 10996\n            \"function print() { __p += __j.call(arguments, '') }\\n\"                                                    // 10997\n          : ';\\n'                                                                                                      // 10998\n        ) +                                                                                                            // 10999\n        source +                                                                                                       // 11000\n        'return __p\\n}';                                                                                               // 11001\n                                                                                                                       // 11002\n      var result = attempt(function() {                                                                                // 11003\n        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);                  // 11004\n      });                                                                                                              // 11005\n                                                                                                                       // 11006\n      // Provide the compiled function's source by its `toString` method or                                            // 11007\n      // the `source` property as a convenience for inlining compiled templates.                                       // 11008\n      result.source = source;                                                                                          // 11009\n      if (isError(result)) {                                                                                           // 11010\n        throw result;                                                                                                  // 11011\n      }                                                                                                                // 11012\n      return result;                                                                                                   // 11013\n    }                                                                                                                  // 11014\n                                                                                                                       // 11015\n    /**                                                                                                                // 11016\n     * Removes leading and trailing whitespace or specified characters from `string`.                                  // 11017\n     *                                                                                                                 // 11018\n     * @static                                                                                                         // 11019\n     * @memberOf _                                                                                                     // 11020\n     * @category String                                                                                                // 11021\n     * @param {string} [string=''] The string to trim.                                                                 // 11022\n     * @param {string} [chars=whitespace] The characters to trim.                                                      // 11023\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 11024\n     * @returns {string} Returns the trimmed string.                                                                   // 11025\n     * @example                                                                                                        // 11026\n     *                                                                                                                 // 11027\n     * _.trim('  abc  ');                                                                                              // 11028\n     * // => 'abc'                                                                                                     // 11029\n     *                                                                                                                 // 11030\n     * _.trim('-_-abc-_-', '_-');                                                                                      // 11031\n     * // => 'abc'                                                                                                     // 11032\n     *                                                                                                                 // 11033\n     * _.map(['  foo  ', '  bar  '], _.trim);                                                                          // 11034\n     * // => ['foo', 'bar']                                                                                            // 11035\n     */                                                                                                                // 11036\n    function trim(string, chars, guard) {                                                                              // 11037\n      var value = string;                                                                                              // 11038\n      string = baseToString(string);                                                                                   // 11039\n      if (!string) {                                                                                                   // 11040\n        return string;                                                                                                 // 11041\n      }                                                                                                                // 11042\n      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {                                               // 11043\n        return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);                                  // 11044\n      }                                                                                                                // 11045\n      chars = (chars + '');                                                                                            // 11046\n      return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);                          // 11047\n    }                                                                                                                  // 11048\n                                                                                                                       // 11049\n    /**                                                                                                                // 11050\n     * Removes leading whitespace or specified characters from `string`.                                               // 11051\n     *                                                                                                                 // 11052\n     * @static                                                                                                         // 11053\n     * @memberOf _                                                                                                     // 11054\n     * @category String                                                                                                // 11055\n     * @param {string} [string=''] The string to trim.                                                                 // 11056\n     * @param {string} [chars=whitespace] The characters to trim.                                                      // 11057\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 11058\n     * @returns {string} Returns the trimmed string.                                                                   // 11059\n     * @example                                                                                                        // 11060\n     *                                                                                                                 // 11061\n     * _.trimLeft('  abc  ');                                                                                          // 11062\n     * // => 'abc  '                                                                                                   // 11063\n     *                                                                                                                 // 11064\n     * _.trimLeft('-_-abc-_-', '_-');                                                                                  // 11065\n     * // => 'abc-_-'                                                                                                  // 11066\n     */                                                                                                                // 11067\n    function trimLeft(string, chars, guard) {                                                                          // 11068\n      var value = string;                                                                                              // 11069\n      string = baseToString(string);                                                                                   // 11070\n      if (!string) {                                                                                                   // 11071\n        return string;                                                                                                 // 11072\n      }                                                                                                                // 11073\n      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {                                               // 11074\n        return string.slice(trimmedLeftIndex(string));                                                                 // 11075\n      }                                                                                                                // 11076\n      return string.slice(charsLeftIndex(string, (chars + '')));                                                       // 11077\n    }                                                                                                                  // 11078\n                                                                                                                       // 11079\n    /**                                                                                                                // 11080\n     * Removes trailing whitespace or specified characters from `string`.                                              // 11081\n     *                                                                                                                 // 11082\n     * @static                                                                                                         // 11083\n     * @memberOf _                                                                                                     // 11084\n     * @category String                                                                                                // 11085\n     * @param {string} [string=''] The string to trim.                                                                 // 11086\n     * @param {string} [chars=whitespace] The characters to trim.                                                      // 11087\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 11088\n     * @returns {string} Returns the trimmed string.                                                                   // 11089\n     * @example                                                                                                        // 11090\n     *                                                                                                                 // 11091\n     * _.trimRight('  abc  ');                                                                                         // 11092\n     * // => '  abc'                                                                                                   // 11093\n     *                                                                                                                 // 11094\n     * _.trimRight('-_-abc-_-', '_-');                                                                                 // 11095\n     * // => '-_-abc'                                                                                                  // 11096\n     */                                                                                                                // 11097\n    function trimRight(string, chars, guard) {                                                                         // 11098\n      var value = string;                                                                                              // 11099\n      string = baseToString(string);                                                                                   // 11100\n      if (!string) {                                                                                                   // 11101\n        return string;                                                                                                 // 11102\n      }                                                                                                                // 11103\n      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {                                               // 11104\n        return string.slice(0, trimmedRightIndex(string) + 1);                                                         // 11105\n      }                                                                                                                // 11106\n      return string.slice(0, charsRightIndex(string, (chars + '')) + 1);                                               // 11107\n    }                                                                                                                  // 11108\n                                                                                                                       // 11109\n    /**                                                                                                                // 11110\n     * Truncates `string` if it's longer than the given maximum string length.                                         // 11111\n     * The last characters of the truncated string are replaced with the omission                                      // 11112\n     * string which defaults to \"...\".                                                                                 // 11113\n     *                                                                                                                 // 11114\n     * @static                                                                                                         // 11115\n     * @memberOf _                                                                                                     // 11116\n     * @category String                                                                                                // 11117\n     * @param {string} [string=''] The string to truncate.                                                             // 11118\n     * @param {Object|number} [options] The options object or maximum string length.                                   // 11119\n     * @param {number} [options.length=30] The maximum string length.                                                  // 11120\n     * @param {string} [options.omission='...'] The string to indicate text is omitted.                                // 11121\n     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.                                // 11122\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 11123\n     * @returns {string} Returns the truncated string.                                                                 // 11124\n     * @example                                                                                                        // 11125\n     *                                                                                                                 // 11126\n     * _.trunc('hi-diddly-ho there, neighborino');                                                                     // 11127\n     * // => 'hi-diddly-ho there, neighbo...'                                                                          // 11128\n     *                                                                                                                 // 11129\n     * _.trunc('hi-diddly-ho there, neighborino', 24);                                                                 // 11130\n     * // => 'hi-diddly-ho there, n...'                                                                                // 11131\n     *                                                                                                                 // 11132\n     * _.trunc('hi-diddly-ho there, neighborino', {                                                                    // 11133\n     *   'length': 24,                                                                                                 // 11134\n     *   'separator': ' '                                                                                              // 11135\n     * });                                                                                                             // 11136\n     * // => 'hi-diddly-ho there,...'                                                                                  // 11137\n     *                                                                                                                 // 11138\n     * _.trunc('hi-diddly-ho there, neighborino', {                                                                    // 11139\n     *   'length': 24,                                                                                                 // 11140\n     *   'separator': /,? +/                                                                                           // 11141\n     * });                                                                                                             // 11142\n     * // => 'hi-diddly-ho there...'                                                                                   // 11143\n     *                                                                                                                 // 11144\n     * _.trunc('hi-diddly-ho there, neighborino', {                                                                    // 11145\n     *   'omission': ' [...]'                                                                                          // 11146\n     * });                                                                                                             // 11147\n     * // => 'hi-diddly-ho there, neig [...]'                                                                          // 11148\n     */                                                                                                                // 11149\n    function trunc(string, options, guard) {                                                                           // 11150\n      if (guard && isIterateeCall(string, options, guard)) {                                                           // 11151\n        options = undefined;                                                                                           // 11152\n      }                                                                                                                // 11153\n      var length = DEFAULT_TRUNC_LENGTH,                                                                               // 11154\n          omission = DEFAULT_TRUNC_OMISSION;                                                                           // 11155\n                                                                                                                       // 11156\n      if (options != null) {                                                                                           // 11157\n        if (isObject(options)) {                                                                                       // 11158\n          var separator = 'separator' in options ? options.separator : separator;                                      // 11159\n          length = 'length' in options ? (+options.length || 0) : length;                                              // 11160\n          omission = 'omission' in options ? baseToString(options.omission) : omission;                                // 11161\n        } else {                                                                                                       // 11162\n          length = +options || 0;                                                                                      // 11163\n        }                                                                                                              // 11164\n      }                                                                                                                // 11165\n      string = baseToString(string);                                                                                   // 11166\n      if (length >= string.length) {                                                                                   // 11167\n        return string;                                                                                                 // 11168\n      }                                                                                                                // 11169\n      var end = length - omission.length;                                                                              // 11170\n      if (end < 1) {                                                                                                   // 11171\n        return omission;                                                                                               // 11172\n      }                                                                                                                // 11173\n      var result = string.slice(0, end);                                                                               // 11174\n      if (separator == null) {                                                                                         // 11175\n        return result + omission;                                                                                      // 11176\n      }                                                                                                                // 11177\n      if (isRegExp(separator)) {                                                                                       // 11178\n        if (string.slice(end).search(separator)) {                                                                     // 11179\n          var match,                                                                                                   // 11180\n              newEnd,                                                                                                  // 11181\n              substring = string.slice(0, end);                                                                        // 11182\n                                                                                                                       // 11183\n          if (!separator.global) {                                                                                     // 11184\n            separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');                               // 11185\n          }                                                                                                            // 11186\n          separator.lastIndex = 0;                                                                                     // 11187\n          while ((match = separator.exec(substring))) {                                                                // 11188\n            newEnd = match.index;                                                                                      // 11189\n          }                                                                                                            // 11190\n          result = result.slice(0, newEnd == null ? end : newEnd);                                                     // 11191\n        }                                                                                                              // 11192\n      } else if (string.indexOf(separator, end) != end) {                                                              // 11193\n        var index = result.lastIndexOf(separator);                                                                     // 11194\n        if (index > -1) {                                                                                              // 11195\n          result = result.slice(0, index);                                                                             // 11196\n        }                                                                                                              // 11197\n      }                                                                                                                // 11198\n      return result + omission;                                                                                        // 11199\n    }                                                                                                                  // 11200\n                                                                                                                       // 11201\n    /**                                                                                                                // 11202\n     * The inverse of `_.escape`; this method converts the HTML entities                                               // 11203\n     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their                                    // 11204\n     * corresponding characters.                                                                                       // 11205\n     *                                                                                                                 // 11206\n     * **Note:** No other HTML entities are unescaped. To unescape additional HTML                                     // 11207\n     * entities use a third-party library like [_he_](https://mths.be/he).                                             // 11208\n     *                                                                                                                 // 11209\n     * @static                                                                                                         // 11210\n     * @memberOf _                                                                                                     // 11211\n     * @category String                                                                                                // 11212\n     * @param {string} [string=''] The string to unescape.                                                             // 11213\n     * @returns {string} Returns the unescaped string.                                                                 // 11214\n     * @example                                                                                                        // 11215\n     *                                                                                                                 // 11216\n     * _.unescape('fred, barney, &amp; pebbles');                                                                      // 11217\n     * // => 'fred, barney, & pebbles'                                                                                 // 11218\n     */                                                                                                                // 11219\n    function unescape(string) {                                                                                        // 11220\n      string = baseToString(string);                                                                                   // 11221\n      return (string && reHasEscapedHtml.test(string))                                                                 // 11222\n        ? string.replace(reEscapedHtml, unescapeHtmlChar)                                                              // 11223\n        : string;                                                                                                      // 11224\n    }                                                                                                                  // 11225\n                                                                                                                       // 11226\n    /**                                                                                                                // 11227\n     * Splits `string` into an array of its words.                                                                     // 11228\n     *                                                                                                                 // 11229\n     * @static                                                                                                         // 11230\n     * @memberOf _                                                                                                     // 11231\n     * @category String                                                                                                // 11232\n     * @param {string} [string=''] The string to inspect.                                                              // 11233\n     * @param {RegExp|string} [pattern] The pattern to match words.                                                    // 11234\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 11235\n     * @returns {Array} Returns the words of `string`.                                                                 // 11236\n     * @example                                                                                                        // 11237\n     *                                                                                                                 // 11238\n     * _.words('fred, barney, & pebbles');                                                                             // 11239\n     * // => ['fred', 'barney', 'pebbles']                                                                             // 11240\n     *                                                                                                                 // 11241\n     * _.words('fred, barney, & pebbles', /[^, ]+/g);                                                                  // 11242\n     * // => ['fred', 'barney', '&', 'pebbles']                                                                        // 11243\n     */                                                                                                                // 11244\n    function words(string, pattern, guard) {                                                                           // 11245\n      if (guard && isIterateeCall(string, pattern, guard)) {                                                           // 11246\n        pattern = undefined;                                                                                           // 11247\n      }                                                                                                                // 11248\n      string = baseToString(string);                                                                                   // 11249\n      return string.match(pattern || reWords) || [];                                                                   // 11250\n    }                                                                                                                  // 11251\n                                                                                                                       // 11252\n    /*------------------------------------------------------------------------*/                                       // 11253\n                                                                                                                       // 11254\n    /**                                                                                                                // 11255\n     * Attempts to invoke `func`, returning either the result or the caught error                                      // 11256\n     * object. Any additional arguments are provided to `func` when it's invoked.                                      // 11257\n     *                                                                                                                 // 11258\n     * @static                                                                                                         // 11259\n     * @memberOf _                                                                                                     // 11260\n     * @category Utility                                                                                               // 11261\n     * @param {Function} func The function to attempt.                                                                 // 11262\n     * @returns {*} Returns the `func` result or error object.                                                         // 11263\n     * @example                                                                                                        // 11264\n     *                                                                                                                 // 11265\n     * // avoid throwing errors for invalid selectors                                                                  // 11266\n     * var elements = _.attempt(function(selector) {                                                                   // 11267\n     *   return document.querySelectorAll(selector);                                                                   // 11268\n     * }, '>_>');                                                                                                      // 11269\n     *                                                                                                                 // 11270\n     * if (_.isError(elements)) {                                                                                      // 11271\n     *   elements = [];                                                                                                // 11272\n     * }                                                                                                               // 11273\n     */                                                                                                                // 11274\n    var attempt = restParam(function(func, args) {                                                                     // 11275\n      try {                                                                                                            // 11276\n        return func.apply(undefined, args);                                                                            // 11277\n      } catch(e) {                                                                                                     // 11278\n        return isError(e) ? e : new Error(e);                                                                          // 11279\n      }                                                                                                                // 11280\n    });                                                                                                                // 11281\n                                                                                                                       // 11282\n    /**                                                                                                                // 11283\n     * Creates a function that invokes `func` with the `this` binding of `thisArg`                                     // 11284\n     * and arguments of the created function. If `func` is a property name the                                         // 11285\n     * created callback returns the property value for a given element. If `func`                                      // 11286\n     * is an object the created callback returns `true` for elements that contain                                      // 11287\n     * the equivalent object properties, otherwise it returns `false`.                                                 // 11288\n     *                                                                                                                 // 11289\n     * @static                                                                                                         // 11290\n     * @memberOf _                                                                                                     // 11291\n     * @alias iteratee                                                                                                 // 11292\n     * @category Utility                                                                                               // 11293\n     * @param {*} [func=_.identity] The value to convert to a callback.                                                // 11294\n     * @param {*} [thisArg] The `this` binding of `func`.                                                              // 11295\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 11296\n     * @returns {Function} Returns the callback.                                                                       // 11297\n     * @example                                                                                                        // 11298\n     *                                                                                                                 // 11299\n     * var users = [                                                                                                   // 11300\n     *   { 'user': 'barney', 'age': 36 },                                                                              // 11301\n     *   { 'user': 'fred',   'age': 40 }                                                                               // 11302\n     * ];                                                                                                              // 11303\n     *                                                                                                                 // 11304\n     * // wrap to create custom callback shorthands                                                                    // 11305\n     * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {                                             // 11306\n     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);                                                                // 11307\n     *   if (!match) {                                                                                                 // 11308\n     *     return callback(func, thisArg);                                                                             // 11309\n     *   }                                                                                                             // 11310\n     *   return function(object) {                                                                                     // 11311\n     *     return match[2] == 'gt'                                                                                     // 11312\n     *       ? object[match[1]] > match[3]                                                                             // 11313\n     *       : object[match[1]] < match[3];                                                                            // 11314\n     *   };                                                                                                            // 11315\n     * });                                                                                                             // 11316\n     *                                                                                                                 // 11317\n     * _.filter(users, 'age__gt36');                                                                                   // 11318\n     * // => [{ 'user': 'fred', 'age': 40 }]                                                                           // 11319\n     */                                                                                                                // 11320\n    function callback(func, thisArg, guard) {                                                                          // 11321\n      if (guard && isIterateeCall(func, thisArg, guard)) {                                                             // 11322\n        thisArg = undefined;                                                                                           // 11323\n      }                                                                                                                // 11324\n      return isObjectLike(func)                                                                                        // 11325\n        ? matches(func)                                                                                                // 11326\n        : baseCallback(func, thisArg);                                                                                 // 11327\n    }                                                                                                                  // 11328\n                                                                                                                       // 11329\n    /**                                                                                                                // 11330\n     * Creates a function that returns `value`.                                                                        // 11331\n     *                                                                                                                 // 11332\n     * @static                                                                                                         // 11333\n     * @memberOf _                                                                                                     // 11334\n     * @category Utility                                                                                               // 11335\n     * @param {*} value The value to return from the new function.                                                     // 11336\n     * @returns {Function} Returns the new function.                                                                   // 11337\n     * @example                                                                                                        // 11338\n     *                                                                                                                 // 11339\n     * var object = { 'user': 'fred' };                                                                                // 11340\n     * var getter = _.constant(object);                                                                                // 11341\n     *                                                                                                                 // 11342\n     * getter() === object;                                                                                            // 11343\n     * // => true                                                                                                      // 11344\n     */                                                                                                                // 11345\n    function constant(value) {                                                                                         // 11346\n      return function() {                                                                                              // 11347\n        return value;                                                                                                  // 11348\n      };                                                                                                               // 11349\n    }                                                                                                                  // 11350\n                                                                                                                       // 11351\n    /**                                                                                                                // 11352\n     * This method returns the first argument provided to it.                                                          // 11353\n     *                                                                                                                 // 11354\n     * @static                                                                                                         // 11355\n     * @memberOf _                                                                                                     // 11356\n     * @category Utility                                                                                               // 11357\n     * @param {*} value Any value.                                                                                     // 11358\n     * @returns {*} Returns `value`.                                                                                   // 11359\n     * @example                                                                                                        // 11360\n     *                                                                                                                 // 11361\n     * var object = { 'user': 'fred' };                                                                                // 11362\n     *                                                                                                                 // 11363\n     * _.identity(object) === object;                                                                                  // 11364\n     * // => true                                                                                                      // 11365\n     */                                                                                                                // 11366\n    function identity(value) {                                                                                         // 11367\n      return value;                                                                                                    // 11368\n    }                                                                                                                  // 11369\n                                                                                                                       // 11370\n    /**                                                                                                                // 11371\n     * Creates a function that performs a deep comparison between a given object                                       // 11372\n     * and `source`, returning `true` if the given object has equivalent property                                      // 11373\n     * values, else `false`.                                                                                           // 11374\n     *                                                                                                                 // 11375\n     * **Note:** This method supports comparing arrays, booleans, `Date` objects,                                      // 11376\n     * numbers, `Object` objects, regexes, and strings. Objects are compared by                                        // 11377\n     * their own, not inherited, enumerable properties. For comparing a single                                         // 11378\n     * own or inherited property value see `_.matchesProperty`.                                                        // 11379\n     *                                                                                                                 // 11380\n     * @static                                                                                                         // 11381\n     * @memberOf _                                                                                                     // 11382\n     * @category Utility                                                                                               // 11383\n     * @param {Object} source The object of property values to match.                                                  // 11384\n     * @returns {Function} Returns the new function.                                                                   // 11385\n     * @example                                                                                                        // 11386\n     *                                                                                                                 // 11387\n     * var users = [                                                                                                   // 11388\n     *   { 'user': 'barney', 'age': 36, 'active': true },                                                              // 11389\n     *   { 'user': 'fred',   'age': 40, 'active': false }                                                              // 11390\n     * ];                                                                                                              // 11391\n     *                                                                                                                 // 11392\n     * _.filter(users, _.matches({ 'age': 40, 'active': false }));                                                     // 11393\n     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]                                                          // 11394\n     */                                                                                                                // 11395\n    function matches(source) {                                                                                         // 11396\n      return baseMatches(baseClone(source, true));                                                                     // 11397\n    }                                                                                                                  // 11398\n                                                                                                                       // 11399\n    /**                                                                                                                // 11400\n     * Creates a function that compares the property value of `path` on a given                                        // 11401\n     * object to `value`.                                                                                              // 11402\n     *                                                                                                                 // 11403\n     * **Note:** This method supports comparing arrays, booleans, `Date` objects,                                      // 11404\n     * numbers, `Object` objects, regexes, and strings. Objects are compared by                                        // 11405\n     * their own, not inherited, enumerable properties.                                                                // 11406\n     *                                                                                                                 // 11407\n     * @static                                                                                                         // 11408\n     * @memberOf _                                                                                                     // 11409\n     * @category Utility                                                                                               // 11410\n     * @param {Array|string} path The path of the property to get.                                                     // 11411\n     * @param {*} srcValue The value to match.                                                                         // 11412\n     * @returns {Function} Returns the new function.                                                                   // 11413\n     * @example                                                                                                        // 11414\n     *                                                                                                                 // 11415\n     * var users = [                                                                                                   // 11416\n     *   { 'user': 'barney' },                                                                                         // 11417\n     *   { 'user': 'fred' }                                                                                            // 11418\n     * ];                                                                                                              // 11419\n     *                                                                                                                 // 11420\n     * _.find(users, _.matchesProperty('user', 'fred'));                                                               // 11421\n     * // => { 'user': 'fred' }                                                                                        // 11422\n     */                                                                                                                // 11423\n    function matchesProperty(path, srcValue) {                                                                         // 11424\n      return baseMatchesProperty(path, baseClone(srcValue, true));                                                     // 11425\n    }                                                                                                                  // 11426\n                                                                                                                       // 11427\n    /**                                                                                                                // 11428\n     * Creates a function that invokes the method at `path` on a given object.                                         // 11429\n     * Any additional arguments are provided to the invoked method.                                                    // 11430\n     *                                                                                                                 // 11431\n     * @static                                                                                                         // 11432\n     * @memberOf _                                                                                                     // 11433\n     * @category Utility                                                                                               // 11434\n     * @param {Array|string} path The path of the method to invoke.                                                    // 11435\n     * @param {...*} [args] The arguments to invoke the method with.                                                   // 11436\n     * @returns {Function} Returns the new function.                                                                   // 11437\n     * @example                                                                                                        // 11438\n     *                                                                                                                 // 11439\n     * var objects = [                                                                                                 // 11440\n     *   { 'a': { 'b': { 'c': _.constant(2) } } },                                                                     // 11441\n     *   { 'a': { 'b': { 'c': _.constant(1) } } }                                                                      // 11442\n     * ];                                                                                                              // 11443\n     *                                                                                                                 // 11444\n     * _.map(objects, _.method('a.b.c'));                                                                              // 11445\n     * // => [2, 1]                                                                                                    // 11446\n     *                                                                                                                 // 11447\n     * _.invoke(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');                                                // 11448\n     * // => [1, 2]                                                                                                    // 11449\n     */                                                                                                                // 11450\n    var method = restParam(function(path, args) {                                                                      // 11451\n      return function(object) {                                                                                        // 11452\n        return invokePath(object, path, args);                                                                         // 11453\n      };                                                                                                               // 11454\n    });                                                                                                                // 11455\n                                                                                                                       // 11456\n    /**                                                                                                                // 11457\n     * The opposite of `_.method`; this method creates a function that invokes                                         // 11458\n     * the method at a given path on `object`. Any additional arguments are                                            // 11459\n     * provided to the invoked method.                                                                                 // 11460\n     *                                                                                                                 // 11461\n     * @static                                                                                                         // 11462\n     * @memberOf _                                                                                                     // 11463\n     * @category Utility                                                                                               // 11464\n     * @param {Object} object The object to query.                                                                     // 11465\n     * @param {...*} [args] The arguments to invoke the method with.                                                   // 11466\n     * @returns {Function} Returns the new function.                                                                   // 11467\n     * @example                                                                                                        // 11468\n     *                                                                                                                 // 11469\n     * var array = _.times(3, _.constant),                                                                             // 11470\n     *     object = { 'a': array, 'b': array, 'c': array };                                                            // 11471\n     *                                                                                                                 // 11472\n     * _.map(['a[2]', 'c[0]'], _.methodOf(object));                                                                    // 11473\n     * // => [2, 0]                                                                                                    // 11474\n     *                                                                                                                 // 11475\n     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));                                                            // 11476\n     * // => [2, 0]                                                                                                    // 11477\n     */                                                                                                                // 11478\n    var methodOf = restParam(function(object, args) {                                                                  // 11479\n      return function(path) {                                                                                          // 11480\n        return invokePath(object, path, args);                                                                         // 11481\n      };                                                                                                               // 11482\n    });                                                                                                                // 11483\n                                                                                                                       // 11484\n    /**                                                                                                                // 11485\n     * Adds all own enumerable function properties of a source object to the                                           // 11486\n     * destination object. If `object` is a function then methods are added to                                         // 11487\n     * its prototype as well.                                                                                          // 11488\n     *                                                                                                                 // 11489\n     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to                                        // 11490\n     * avoid conflicts caused by modifying the original.                                                               // 11491\n     *                                                                                                                 // 11492\n     * @static                                                                                                         // 11493\n     * @memberOf _                                                                                                     // 11494\n     * @category Utility                                                                                               // 11495\n     * @param {Function|Object} [object=lodash] The destination object.                                                // 11496\n     * @param {Object} source The object of functions to add.                                                          // 11497\n     * @param {Object} [options] The options object.                                                                   // 11498\n     * @param {boolean} [options.chain=true] Specify whether the functions added                                       // 11499\n     *  are chainable.                                                                                                 // 11500\n     * @returns {Function|Object} Returns `object`.                                                                    // 11501\n     * @example                                                                                                        // 11502\n     *                                                                                                                 // 11503\n     * function vowels(string) {                                                                                       // 11504\n     *   return _.filter(string, function(v) {                                                                         // 11505\n     *     return /[aeiou]/i.test(v);                                                                                  // 11506\n     *   });                                                                                                           // 11507\n     * }                                                                                                               // 11508\n     *                                                                                                                 // 11509\n     * _.mixin({ 'vowels': vowels });                                                                                  // 11510\n     * _.vowels('fred');                                                                                               // 11511\n     * // => ['e']                                                                                                     // 11512\n     *                                                                                                                 // 11513\n     * _('fred').vowels().value();                                                                                     // 11514\n     * // => ['e']                                                                                                     // 11515\n     *                                                                                                                 // 11516\n     * _.mixin({ 'vowels': vowels }, { 'chain': false });                                                              // 11517\n     * _('fred').vowels();                                                                                             // 11518\n     * // => ['e']                                                                                                     // 11519\n     */                                                                                                                // 11520\n    function mixin(object, source, options) {                                                                          // 11521\n      if (options == null) {                                                                                           // 11522\n        var isObj = isObject(source),                                                                                  // 11523\n            props = isObj ? keys(source) : undefined,                                                                  // 11524\n            methodNames = (props && props.length) ? baseFunctions(source, props) : undefined;                          // 11525\n                                                                                                                       // 11526\n        if (!(methodNames ? methodNames.length : isObj)) {                                                             // 11527\n          methodNames = false;                                                                                         // 11528\n          options = source;                                                                                            // 11529\n          source = object;                                                                                             // 11530\n          object = this;                                                                                               // 11531\n        }                                                                                                              // 11532\n      }                                                                                                                // 11533\n      if (!methodNames) {                                                                                              // 11534\n        methodNames = baseFunctions(source, keys(source));                                                             // 11535\n      }                                                                                                                // 11536\n      var chain = true,                                                                                                // 11537\n          index = -1,                                                                                                  // 11538\n          isFunc = isFunction(object),                                                                                 // 11539\n          length = methodNames.length;                                                                                 // 11540\n                                                                                                                       // 11541\n      if (options === false) {                                                                                         // 11542\n        chain = false;                                                                                                 // 11543\n      } else if (isObject(options) && 'chain' in options) {                                                            // 11544\n        chain = options.chain;                                                                                         // 11545\n      }                                                                                                                // 11546\n      while (++index < length) {                                                                                       // 11547\n        var methodName = methodNames[index],                                                                           // 11548\n            func = source[methodName];                                                                                 // 11549\n                                                                                                                       // 11550\n        object[methodName] = func;                                                                                     // 11551\n        if (isFunc) {                                                                                                  // 11552\n          object.prototype[methodName] = (function(func) {                                                             // 11553\n            return function() {                                                                                        // 11554\n              var chainAll = this.__chain__;                                                                           // 11555\n              if (chain || chainAll) {                                                                                 // 11556\n                var result = object(this.__wrapped__),                                                                 // 11557\n                    actions = result.__actions__ = arrayCopy(this.__actions__);                                        // 11558\n                                                                                                                       // 11559\n                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });                                  // 11560\n                result.__chain__ = chainAll;                                                                           // 11561\n                return result;                                                                                         // 11562\n              }                                                                                                        // 11563\n              return func.apply(object, arrayPush([this.value()], arguments));                                         // 11564\n            };                                                                                                         // 11565\n          }(func));                                                                                                    // 11566\n        }                                                                                                              // 11567\n      }                                                                                                                // 11568\n      return object;                                                                                                   // 11569\n    }                                                                                                                  // 11570\n                                                                                                                       // 11571\n    /**                                                                                                                // 11572\n     * Reverts the `_` variable to its previous value and returns a reference to                                       // 11573\n     * the `lodash` function.                                                                                          // 11574\n     *                                                                                                                 // 11575\n     * @static                                                                                                         // 11576\n     * @memberOf _                                                                                                     // 11577\n     * @category Utility                                                                                               // 11578\n     * @returns {Function} Returns the `lodash` function.                                                              // 11579\n     * @example                                                                                                        // 11580\n     *                                                                                                                 // 11581\n     * var lodash = _.noConflict();                                                                                    // 11582\n     */                                                                                                                // 11583\n    function noConflict() {                                                                                            // 11584\n      root._ = oldDash;                                                                                                // 11585\n      return this;                                                                                                     // 11586\n    }                                                                                                                  // 11587\n                                                                                                                       // 11588\n    /**                                                                                                                // 11589\n     * A no-operation function that returns `undefined` regardless of the                                              // 11590\n     * arguments it receives.                                                                                          // 11591\n     *                                                                                                                 // 11592\n     * @static                                                                                                         // 11593\n     * @memberOf _                                                                                                     // 11594\n     * @category Utility                                                                                               // 11595\n     * @example                                                                                                        // 11596\n     *                                                                                                                 // 11597\n     * var object = { 'user': 'fred' };                                                                                // 11598\n     *                                                                                                                 // 11599\n     * _.noop(object) === undefined;                                                                                   // 11600\n     * // => true                                                                                                      // 11601\n     */                                                                                                                // 11602\n    function noop() {                                                                                                  // 11603\n      // No operation performed.                                                                                       // 11604\n    }                                                                                                                  // 11605\n                                                                                                                       // 11606\n    /**                                                                                                                // 11607\n     * Creates a function that returns the property value at `path` on a                                               // 11608\n     * given object.                                                                                                   // 11609\n     *                                                                                                                 // 11610\n     * @static                                                                                                         // 11611\n     * @memberOf _                                                                                                     // 11612\n     * @category Utility                                                                                               // 11613\n     * @param {Array|string} path The path of the property to get.                                                     // 11614\n     * @returns {Function} Returns the new function.                                                                   // 11615\n     * @example                                                                                                        // 11616\n     *                                                                                                                 // 11617\n     * var objects = [                                                                                                 // 11618\n     *   { 'a': { 'b': { 'c': 2 } } },                                                                                 // 11619\n     *   { 'a': { 'b': { 'c': 1 } } }                                                                                  // 11620\n     * ];                                                                                                              // 11621\n     *                                                                                                                 // 11622\n     * _.map(objects, _.property('a.b.c'));                                                                            // 11623\n     * // => [2, 1]                                                                                                    // 11624\n     *                                                                                                                 // 11625\n     * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');                                               // 11626\n     * // => [1, 2]                                                                                                    // 11627\n     */                                                                                                                // 11628\n    function property(path) {                                                                                          // 11629\n      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);                                                // 11630\n    }                                                                                                                  // 11631\n                                                                                                                       // 11632\n    /**                                                                                                                // 11633\n     * The opposite of `_.property`; this method creates a function that returns                                       // 11634\n     * the property value at a given path on `object`.                                                                 // 11635\n     *                                                                                                                 // 11636\n     * @static                                                                                                         // 11637\n     * @memberOf _                                                                                                     // 11638\n     * @category Utility                                                                                               // 11639\n     * @param {Object} object The object to query.                                                                     // 11640\n     * @returns {Function} Returns the new function.                                                                   // 11641\n     * @example                                                                                                        // 11642\n     *                                                                                                                 // 11643\n     * var array = [0, 1, 2],                                                                                          // 11644\n     *     object = { 'a': array, 'b': array, 'c': array };                                                            // 11645\n     *                                                                                                                 // 11646\n     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));                                                                  // 11647\n     * // => [2, 0]                                                                                                    // 11648\n     *                                                                                                                 // 11649\n     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));                                                          // 11650\n     * // => [2, 0]                                                                                                    // 11651\n     */                                                                                                                // 11652\n    function propertyOf(object) {                                                                                      // 11653\n      return function(path) {                                                                                          // 11654\n        return baseGet(object, toPath(path), (path + ''));                                                             // 11655\n      };                                                                                                               // 11656\n    }                                                                                                                  // 11657\n                                                                                                                       // 11658\n    /**                                                                                                                // 11659\n     * Creates an array of numbers (positive and/or negative) progressing from                                         // 11660\n     * `start` up to, but not including, `end`. If `end` is not specified it's                                         // 11661\n     * set to `start` with `start` then set to `0`. If `end` is less than `start`                                      // 11662\n     * a zero-length range is created unless a negative `step` is specified.                                           // 11663\n     *                                                                                                                 // 11664\n     * @static                                                                                                         // 11665\n     * @memberOf _                                                                                                     // 11666\n     * @category Utility                                                                                               // 11667\n     * @param {number} [start=0] The start of the range.                                                               // 11668\n     * @param {number} end The end of the range.                                                                       // 11669\n     * @param {number} [step=1] The value to increment or decrement by.                                                // 11670\n     * @returns {Array} Returns the new array of numbers.                                                              // 11671\n     * @example                                                                                                        // 11672\n     *                                                                                                                 // 11673\n     * _.range(4);                                                                                                     // 11674\n     * // => [0, 1, 2, 3]                                                                                              // 11675\n     *                                                                                                                 // 11676\n     * _.range(1, 5);                                                                                                  // 11677\n     * // => [1, 2, 3, 4]                                                                                              // 11678\n     *                                                                                                                 // 11679\n     * _.range(0, 20, 5);                                                                                              // 11680\n     * // => [0, 5, 10, 15]                                                                                            // 11681\n     *                                                                                                                 // 11682\n     * _.range(0, -4, -1);                                                                                             // 11683\n     * // => [0, -1, -2, -3]                                                                                           // 11684\n     *                                                                                                                 // 11685\n     * _.range(1, 4, 0);                                                                                               // 11686\n     * // => [1, 1, 1]                                                                                                 // 11687\n     *                                                                                                                 // 11688\n     * _.range(0);                                                                                                     // 11689\n     * // => []                                                                                                        // 11690\n     */                                                                                                                // 11691\n    function range(start, end, step) {                                                                                 // 11692\n      if (step && isIterateeCall(start, end, step)) {                                                                  // 11693\n        end = step = undefined;                                                                                        // 11694\n      }                                                                                                                // 11695\n      start = +start || 0;                                                                                             // 11696\n      step = step == null ? 1 : (+step || 0);                                                                          // 11697\n                                                                                                                       // 11698\n      if (end == null) {                                                                                               // 11699\n        end = start;                                                                                                   // 11700\n        start = 0;                                                                                                     // 11701\n      } else {                                                                                                         // 11702\n        end = +end || 0;                                                                                               // 11703\n      }                                                                                                                // 11704\n      // Use `Array(length)` so engines like Chakra and V8 avoid slower modes.                                         // 11705\n      // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.                                                   // 11706\n      var index = -1,                                                                                                  // 11707\n          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),                                              // 11708\n          result = Array(length);                                                                                      // 11709\n                                                                                                                       // 11710\n      while (++index < length) {                                                                                       // 11711\n        result[index] = start;                                                                                         // 11712\n        start += step;                                                                                                 // 11713\n      }                                                                                                                // 11714\n      return result;                                                                                                   // 11715\n    }                                                                                                                  // 11716\n                                                                                                                       // 11717\n    /**                                                                                                                // 11718\n     * Invokes the iteratee function `n` times, returning an array of the results                                      // 11719\n     * of each invocation. The `iteratee` is bound to `thisArg` and invoked with                                       // 11720\n     * one argument; (index).                                                                                          // 11721\n     *                                                                                                                 // 11722\n     * @static                                                                                                         // 11723\n     * @memberOf _                                                                                                     // 11724\n     * @category Utility                                                                                               // 11725\n     * @param {number} n The number of times to invoke `iteratee`.                                                     // 11726\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 11727\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 11728\n     * @returns {Array} Returns the array of results.                                                                  // 11729\n     * @example                                                                                                        // 11730\n     *                                                                                                                 // 11731\n     * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));                                                   // 11732\n     * // => [3, 6, 4]                                                                                                 // 11733\n     *                                                                                                                 // 11734\n     * _.times(3, function(n) {                                                                                        // 11735\n     *   mage.castSpell(n);                                                                                            // 11736\n     * });                                                                                                             // 11737\n     * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2`                                     // 11738\n     *                                                                                                                 // 11739\n     * _.times(3, function(n) {                                                                                        // 11740\n     *   this.cast(n);                                                                                                 // 11741\n     * }, mage);                                                                                                       // 11742\n     * // => also invokes `mage.castSpell(n)` three times                                                              // 11743\n     */                                                                                                                // 11744\n    function times(n, iteratee, thisArg) {                                                                             // 11745\n      n = nativeFloor(n);                                                                                              // 11746\n                                                                                                                       // 11747\n      // Exit early to avoid a JSC JIT bug in Safari 8                                                                 // 11748\n      // where `Array(0)` is treated as `Array(1)`.                                                                    // 11749\n      if (n < 1 || !nativeIsFinite(n)) {                                                                               // 11750\n        return [];                                                                                                     // 11751\n      }                                                                                                                // 11752\n      var index = -1,                                                                                                  // 11753\n          result = Array(nativeMin(n, MAX_ARRAY_LENGTH));                                                              // 11754\n                                                                                                                       // 11755\n      iteratee = bindCallback(iteratee, thisArg, 1);                                                                   // 11756\n      while (++index < n) {                                                                                            // 11757\n        if (index < MAX_ARRAY_LENGTH) {                                                                                // 11758\n          result[index] = iteratee(index);                                                                             // 11759\n        } else {                                                                                                       // 11760\n          iteratee(index);                                                                                             // 11761\n        }                                                                                                              // 11762\n      }                                                                                                                // 11763\n      return result;                                                                                                   // 11764\n    }                                                                                                                  // 11765\n                                                                                                                       // 11766\n    /**                                                                                                                // 11767\n     * Generates a unique ID. If `prefix` is provided the ID is appended to it.                                        // 11768\n     *                                                                                                                 // 11769\n     * @static                                                                                                         // 11770\n     * @memberOf _                                                                                                     // 11771\n     * @category Utility                                                                                               // 11772\n     * @param {string} [prefix] The value to prefix the ID with.                                                       // 11773\n     * @returns {string} Returns the unique ID.                                                                        // 11774\n     * @example                                                                                                        // 11775\n     *                                                                                                                 // 11776\n     * _.uniqueId('contact_');                                                                                         // 11777\n     * // => 'contact_104'                                                                                             // 11778\n     *                                                                                                                 // 11779\n     * _.uniqueId();                                                                                                   // 11780\n     * // => '105'                                                                                                     // 11781\n     */                                                                                                                // 11782\n    function uniqueId(prefix) {                                                                                        // 11783\n      var id = ++idCounter;                                                                                            // 11784\n      return baseToString(prefix) + id;                                                                                // 11785\n    }                                                                                                                  // 11786\n                                                                                                                       // 11787\n    /*------------------------------------------------------------------------*/                                       // 11788\n                                                                                                                       // 11789\n    /**                                                                                                                // 11790\n     * Adds two numbers.                                                                                               // 11791\n     *                                                                                                                 // 11792\n     * @static                                                                                                         // 11793\n     * @memberOf _                                                                                                     // 11794\n     * @category Math                                                                                                  // 11795\n     * @param {number} augend The first number to add.                                                                 // 11796\n     * @param {number} addend The second number to add.                                                                // 11797\n     * @returns {number} Returns the sum.                                                                              // 11798\n     * @example                                                                                                        // 11799\n     *                                                                                                                 // 11800\n     * _.add(6, 4);                                                                                                    // 11801\n     * // => 10                                                                                                        // 11802\n     */                                                                                                                // 11803\n    function add(augend, addend) {                                                                                     // 11804\n      return (+augend || 0) + (+addend || 0);                                                                          // 11805\n    }                                                                                                                  // 11806\n                                                                                                                       // 11807\n    /**                                                                                                                // 11808\n     * Calculates `n` rounded up to `precision`.                                                                       // 11809\n     *                                                                                                                 // 11810\n     * @static                                                                                                         // 11811\n     * @memberOf _                                                                                                     // 11812\n     * @category Math                                                                                                  // 11813\n     * @param {number} n The number to round up.                                                                       // 11814\n     * @param {number} [precision=0] The precision to round up to.                                                     // 11815\n     * @returns {number} Returns the rounded up number.                                                                // 11816\n     * @example                                                                                                        // 11817\n     *                                                                                                                 // 11818\n     * _.ceil(4.006);                                                                                                  // 11819\n     * // => 5                                                                                                         // 11820\n     *                                                                                                                 // 11821\n     * _.ceil(6.004, 2);                                                                                               // 11822\n     * // => 6.01                                                                                                      // 11823\n     *                                                                                                                 // 11824\n     * _.ceil(6040, -2);                                                                                               // 11825\n     * // => 6100                                                                                                      // 11826\n     */                                                                                                                // 11827\n    var ceil = createRound('ceil');                                                                                    // 11828\n                                                                                                                       // 11829\n    /**                                                                                                                // 11830\n     * Calculates `n` rounded down to `precision`.                                                                     // 11831\n     *                                                                                                                 // 11832\n     * @static                                                                                                         // 11833\n     * @memberOf _                                                                                                     // 11834\n     * @category Math                                                                                                  // 11835\n     * @param {number} n The number to round down.                                                                     // 11836\n     * @param {number} [precision=0] The precision to round down to.                                                   // 11837\n     * @returns {number} Returns the rounded down number.                                                              // 11838\n     * @example                                                                                                        // 11839\n     *                                                                                                                 // 11840\n     * _.floor(4.006);                                                                                                 // 11841\n     * // => 4                                                                                                         // 11842\n     *                                                                                                                 // 11843\n     * _.floor(0.046, 2);                                                                                              // 11844\n     * // => 0.04                                                                                                      // 11845\n     *                                                                                                                 // 11846\n     * _.floor(4060, -2);                                                                                              // 11847\n     * // => 4000                                                                                                      // 11848\n     */                                                                                                                // 11849\n    var floor = createRound('floor');                                                                                  // 11850\n                                                                                                                       // 11851\n    /**                                                                                                                // 11852\n     * Gets the maximum value of `collection`. If `collection` is empty or falsey                                      // 11853\n     * `-Infinity` is returned. If an iteratee function is provided it's invoked                                       // 11854\n     * for each value in `collection` to generate the criterion by which the value                                     // 11855\n     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three                                          // 11856\n     * arguments: (value, index, collection).                                                                          // 11857\n     *                                                                                                                 // 11858\n     * If a property name is provided for `iteratee` the created `_.property`                                          // 11859\n     * style callback returns the property value of the given element.                                                 // 11860\n     *                                                                                                                 // 11861\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 11862\n     * style callback returns `true` for elements that have a matching property                                        // 11863\n     * value, else `false`.                                                                                            // 11864\n     *                                                                                                                 // 11865\n     * If an object is provided for `iteratee` the created `_.matches` style                                           // 11866\n     * callback returns `true` for elements that have the properties of the given                                      // 11867\n     * object, else `false`.                                                                                           // 11868\n     *                                                                                                                 // 11869\n     * @static                                                                                                         // 11870\n     * @memberOf _                                                                                                     // 11871\n     * @category Math                                                                                                  // 11872\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 11873\n     * @param {Function|Object|string} [iteratee] The function invoked per iteration.                                  // 11874\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 11875\n     * @returns {*} Returns the maximum value.                                                                         // 11876\n     * @example                                                                                                        // 11877\n     *                                                                                                                 // 11878\n     * _.max([4, 2, 8, 6]);                                                                                            // 11879\n     * // => 8                                                                                                         // 11880\n     *                                                                                                                 // 11881\n     * _.max([]);                                                                                                      // 11882\n     * // => -Infinity                                                                                                 // 11883\n     *                                                                                                                 // 11884\n     * var users = [                                                                                                   // 11885\n     *   { 'user': 'barney', 'age': 36 },                                                                              // 11886\n     *   { 'user': 'fred',   'age': 40 }                                                                               // 11887\n     * ];                                                                                                              // 11888\n     *                                                                                                                 // 11889\n     * _.max(users, function(chr) {                                                                                    // 11890\n     *   return chr.age;                                                                                               // 11891\n     * });                                                                                                             // 11892\n     * // => { 'user': 'fred', 'age': 40 }                                                                             // 11893\n     *                                                                                                                 // 11894\n     * // using the `_.property` callback shorthand                                                                    // 11895\n     * _.max(users, 'age');                                                                                            // 11896\n     * // => { 'user': 'fred', 'age': 40 }                                                                             // 11897\n     */                                                                                                                // 11898\n    var max = createExtremum(gt, NEGATIVE_INFINITY);                                                                   // 11899\n                                                                                                                       // 11900\n    /**                                                                                                                // 11901\n     * Gets the minimum value of `collection`. If `collection` is empty or falsey                                      // 11902\n     * `Infinity` is returned. If an iteratee function is provided it's invoked                                        // 11903\n     * for each value in `collection` to generate the criterion by which the value                                     // 11904\n     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three                                          // 11905\n     * arguments: (value, index, collection).                                                                          // 11906\n     *                                                                                                                 // 11907\n     * If a property name is provided for `iteratee` the created `_.property`                                          // 11908\n     * style callback returns the property value of the given element.                                                 // 11909\n     *                                                                                                                 // 11910\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 11911\n     * style callback returns `true` for elements that have a matching property                                        // 11912\n     * value, else `false`.                                                                                            // 11913\n     *                                                                                                                 // 11914\n     * If an object is provided for `iteratee` the created `_.matches` style                                           // 11915\n     * callback returns `true` for elements that have the properties of the given                                      // 11916\n     * object, else `false`.                                                                                           // 11917\n     *                                                                                                                 // 11918\n     * @static                                                                                                         // 11919\n     * @memberOf _                                                                                                     // 11920\n     * @category Math                                                                                                  // 11921\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 11922\n     * @param {Function|Object|string} [iteratee] The function invoked per iteration.                                  // 11923\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 11924\n     * @returns {*} Returns the minimum value.                                                                         // 11925\n     * @example                                                                                                        // 11926\n     *                                                                                                                 // 11927\n     * _.min([4, 2, 8, 6]);                                                                                            // 11928\n     * // => 2                                                                                                         // 11929\n     *                                                                                                                 // 11930\n     * _.min([]);                                                                                                      // 11931\n     * // => Infinity                                                                                                  // 11932\n     *                                                                                                                 // 11933\n     * var users = [                                                                                                   // 11934\n     *   { 'user': 'barney', 'age': 36 },                                                                              // 11935\n     *   { 'user': 'fred',   'age': 40 }                                                                               // 11936\n     * ];                                                                                                              // 11937\n     *                                                                                                                 // 11938\n     * _.min(users, function(chr) {                                                                                    // 11939\n     *   return chr.age;                                                                                               // 11940\n     * });                                                                                                             // 11941\n     * // => { 'user': 'barney', 'age': 36 }                                                                           // 11942\n     *                                                                                                                 // 11943\n     * // using the `_.property` callback shorthand                                                                    // 11944\n     * _.min(users, 'age');                                                                                            // 11945\n     * // => { 'user': 'barney', 'age': 36 }                                                                           // 11946\n     */                                                                                                                // 11947\n    var min = createExtremum(lt, POSITIVE_INFINITY);                                                                   // 11948\n                                                                                                                       // 11949\n    /**                                                                                                                // 11950\n     * Calculates `n` rounded to `precision`.                                                                          // 11951\n     *                                                                                                                 // 11952\n     * @static                                                                                                         // 11953\n     * @memberOf _                                                                                                     // 11954\n     * @category Math                                                                                                  // 11955\n     * @param {number} n The number to round.                                                                          // 11956\n     * @param {number} [precision=0] The precision to round to.                                                        // 11957\n     * @returns {number} Returns the rounded number.                                                                   // 11958\n     * @example                                                                                                        // 11959\n     *                                                                                                                 // 11960\n     * _.round(4.006);                                                                                                 // 11961\n     * // => 4                                                                                                         // 11962\n     *                                                                                                                 // 11963\n     * _.round(4.006, 2);                                                                                              // 11964\n     * // => 4.01                                                                                                      // 11965\n     *                                                                                                                 // 11966\n     * _.round(4060, -2);                                                                                              // 11967\n     * // => 4100                                                                                                      // 11968\n     */                                                                                                                // 11969\n    var round = createRound('round');                                                                                  // 11970\n                                                                                                                       // 11971\n    /**                                                                                                                // 11972\n     * Gets the sum of the values in `collection`.                                                                     // 11973\n     *                                                                                                                 // 11974\n     * @static                                                                                                         // 11975\n     * @memberOf _                                                                                                     // 11976\n     * @category Math                                                                                                  // 11977\n     * @param {Array|Object|string} collection The collection to iterate over.                                         // 11978\n     * @param {Function|Object|string} [iteratee] The function invoked per iteration.                                  // 11979\n     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 11980\n     * @returns {number} Returns the sum.                                                                              // 11981\n     * @example                                                                                                        // 11982\n     *                                                                                                                 // 11983\n     * _.sum([4, 6]);                                                                                                  // 11984\n     * // => 10                                                                                                        // 11985\n     *                                                                                                                 // 11986\n     * _.sum({ 'a': 4, 'b': 6 });                                                                                      // 11987\n     * // => 10                                                                                                        // 11988\n     *                                                                                                                 // 11989\n     * var objects = [                                                                                                 // 11990\n     *   { 'n': 4 },                                                                                                   // 11991\n     *   { 'n': 6 }                                                                                                    // 11992\n     * ];                                                                                                              // 11993\n     *                                                                                                                 // 11994\n     * _.sum(objects, function(object) {                                                                               // 11995\n     *   return object.n;                                                                                              // 11996\n     * });                                                                                                             // 11997\n     * // => 10                                                                                                        // 11998\n     *                                                                                                                 // 11999\n     * // using the `_.property` callback shorthand                                                                    // 12000\n     * _.sum(objects, 'n');                                                                                            // 12001\n     * // => 10                                                                                                        // 12002\n     */                                                                                                                // 12003\n    function sum(collection, iteratee, thisArg) {                                                                      // 12004\n      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {                                                  // 12005\n        iteratee = undefined;                                                                                          // 12006\n      }                                                                                                                // 12007\n      iteratee = getCallback(iteratee, thisArg, 3);                                                                    // 12008\n      return iteratee.length == 1                                                                                      // 12009\n        ? arraySum(isArray(collection) ? collection : toIterable(collection), iteratee)                                // 12010\n        : baseSum(collection, iteratee);                                                                               // 12011\n    }                                                                                                                  // 12012\n                                                                                                                       // 12013\n    /*------------------------------------------------------------------------*/                                       // 12014\n                                                                                                                       // 12015\n    // Ensure wrappers are instances of `baseLodash`.                                                                  // 12016\n    lodash.prototype = baseLodash.prototype;                                                                           // 12017\n                                                                                                                       // 12018\n    LodashWrapper.prototype = baseCreate(baseLodash.prototype);                                                        // 12019\n    LodashWrapper.prototype.constructor = LodashWrapper;                                                               // 12020\n                                                                                                                       // 12021\n    LazyWrapper.prototype = baseCreate(baseLodash.prototype);                                                          // 12022\n    LazyWrapper.prototype.constructor = LazyWrapper;                                                                   // 12023\n                                                                                                                       // 12024\n    // Add functions to the `Map` cache.                                                                               // 12025\n    MapCache.prototype['delete'] = mapDelete;                                                                          // 12026\n    MapCache.prototype.get = mapGet;                                                                                   // 12027\n    MapCache.prototype.has = mapHas;                                                                                   // 12028\n    MapCache.prototype.set = mapSet;                                                                                   // 12029\n                                                                                                                       // 12030\n    // Add functions to the `Set` cache.                                                                               // 12031\n    SetCache.prototype.push = cachePush;                                                                               // 12032\n                                                                                                                       // 12033\n    // Assign cache to `_.memoize`.                                                                                    // 12034\n    memoize.Cache = MapCache;                                                                                          // 12035\n                                                                                                                       // 12036\n    // Add functions that return wrapped values when chaining.                                                         // 12037\n    lodash.after = after;                                                                                              // 12038\n    lodash.ary = ary;                                                                                                  // 12039\n    lodash.assign = assign;                                                                                            // 12040\n    lodash.at = at;                                                                                                    // 12041\n    lodash.before = before;                                                                                            // 12042\n    lodash.bind = bind;                                                                                                // 12043\n    lodash.bindAll = bindAll;                                                                                          // 12044\n    lodash.bindKey = bindKey;                                                                                          // 12045\n    lodash.callback = callback;                                                                                        // 12046\n    lodash.chain = chain;                                                                                              // 12047\n    lodash.chunk = chunk;                                                                                              // 12048\n    lodash.compact = compact;                                                                                          // 12049\n    lodash.constant = constant;                                                                                        // 12050\n    lodash.countBy = countBy;                                                                                          // 12051\n    lodash.create = create;                                                                                            // 12052\n    lodash.curry = curry;                                                                                              // 12053\n    lodash.curryRight = curryRight;                                                                                    // 12054\n    lodash.debounce = debounce;                                                                                        // 12055\n    lodash.defaults = defaults;                                                                                        // 12056\n    lodash.defaultsDeep = defaultsDeep;                                                                                // 12057\n    lodash.defer = defer;                                                                                              // 12058\n    lodash.delay = delay;                                                                                              // 12059\n    lodash.difference = difference;                                                                                    // 12060\n    lodash.drop = drop;                                                                                                // 12061\n    lodash.dropRight = dropRight;                                                                                      // 12062\n    lodash.dropRightWhile = dropRightWhile;                                                                            // 12063\n    lodash.dropWhile = dropWhile;                                                                                      // 12064\n    lodash.fill = fill;                                                                                                // 12065\n    lodash.filter = filter;                                                                                            // 12066\n    lodash.flatten = flatten;                                                                                          // 12067\n    lodash.flattenDeep = flattenDeep;                                                                                  // 12068\n    lodash.flow = flow;                                                                                                // 12069\n    lodash.flowRight = flowRight;                                                                                      // 12070\n    lodash.forEach = forEach;                                                                                          // 12071\n    lodash.forEachRight = forEachRight;                                                                                // 12072\n    lodash.forIn = forIn;                                                                                              // 12073\n    lodash.forInRight = forInRight;                                                                                    // 12074\n    lodash.forOwn = forOwn;                                                                                            // 12075\n    lodash.forOwnRight = forOwnRight;                                                                                  // 12076\n    lodash.functions = functions;                                                                                      // 12077\n    lodash.groupBy = groupBy;                                                                                          // 12078\n    lodash.indexBy = indexBy;                                                                                          // 12079\n    lodash.initial = initial;                                                                                          // 12080\n    lodash.intersection = intersection;                                                                                // 12081\n    lodash.invert = invert;                                                                                            // 12082\n    lodash.invoke = invoke;                                                                                            // 12083\n    lodash.keys = keys;                                                                                                // 12084\n    lodash.keysIn = keysIn;                                                                                            // 12085\n    lodash.map = map;                                                                                                  // 12086\n    lodash.mapKeys = mapKeys;                                                                                          // 12087\n    lodash.mapValues = mapValues;                                                                                      // 12088\n    lodash.matches = matches;                                                                                          // 12089\n    lodash.matchesProperty = matchesProperty;                                                                          // 12090\n    lodash.memoize = memoize;                                                                                          // 12091\n    lodash.merge = merge;                                                                                              // 12092\n    lodash.method = method;                                                                                            // 12093\n    lodash.methodOf = methodOf;                                                                                        // 12094\n    lodash.mixin = mixin;                                                                                              // 12095\n    lodash.modArgs = modArgs;                                                                                          // 12096\n    lodash.negate = negate;                                                                                            // 12097\n    lodash.omit = omit;                                                                                                // 12098\n    lodash.once = once;                                                                                                // 12099\n    lodash.pairs = pairs;                                                                                              // 12100\n    lodash.partial = partial;                                                                                          // 12101\n    lodash.partialRight = partialRight;                                                                                // 12102\n    lodash.partition = partition;                                                                                      // 12103\n    lodash.pick = pick;                                                                                                // 12104\n    lodash.pluck = pluck;                                                                                              // 12105\n    lodash.property = property;                                                                                        // 12106\n    lodash.propertyOf = propertyOf;                                                                                    // 12107\n    lodash.pull = pull;                                                                                                // 12108\n    lodash.pullAt = pullAt;                                                                                            // 12109\n    lodash.range = range;                                                                                              // 12110\n    lodash.rearg = rearg;                                                                                              // 12111\n    lodash.reject = reject;                                                                                            // 12112\n    lodash.remove = remove;                                                                                            // 12113\n    lodash.rest = rest;                                                                                                // 12114\n    lodash.restParam = restParam;                                                                                      // 12115\n    lodash.set = set;                                                                                                  // 12116\n    lodash.shuffle = shuffle;                                                                                          // 12117\n    lodash.slice = slice;                                                                                              // 12118\n    lodash.sortBy = sortBy;                                                                                            // 12119\n    lodash.sortByAll = sortByAll;                                                                                      // 12120\n    lodash.sortByOrder = sortByOrder;                                                                                  // 12121\n    lodash.spread = spread;                                                                                            // 12122\n    lodash.take = take;                                                                                                // 12123\n    lodash.takeRight = takeRight;                                                                                      // 12124\n    lodash.takeRightWhile = takeRightWhile;                                                                            // 12125\n    lodash.takeWhile = takeWhile;                                                                                      // 12126\n    lodash.tap = tap;                                                                                                  // 12127\n    lodash.throttle = throttle;                                                                                        // 12128\n    lodash.thru = thru;                                                                                                // 12129\n    lodash.times = times;                                                                                              // 12130\n    lodash.toArray = toArray;                                                                                          // 12131\n    lodash.toPlainObject = toPlainObject;                                                                              // 12132\n    lodash.transform = transform;                                                                                      // 12133\n    lodash.union = union;                                                                                              // 12134\n    lodash.uniq = uniq;                                                                                                // 12135\n    lodash.unzip = unzip;                                                                                              // 12136\n    lodash.unzipWith = unzipWith;                                                                                      // 12137\n    lodash.values = values;                                                                                            // 12138\n    lodash.valuesIn = valuesIn;                                                                                        // 12139\n    lodash.where = where;                                                                                              // 12140\n    lodash.without = without;                                                                                          // 12141\n    lodash.wrap = wrap;                                                                                                // 12142\n    lodash.xor = xor;                                                                                                  // 12143\n    lodash.zip = zip;                                                                                                  // 12144\n    lodash.zipObject = zipObject;                                                                                      // 12145\n    lodash.zipWith = zipWith;                                                                                          // 12146\n                                                                                                                       // 12147\n    // Add aliases.                                                                                                    // 12148\n    lodash.backflow = flowRight;                                                                                       // 12149\n    lodash.collect = map;                                                                                              // 12150\n    lodash.compose = flowRight;                                                                                        // 12151\n    lodash.each = forEach;                                                                                             // 12152\n    lodash.eachRight = forEachRight;                                                                                   // 12153\n    lodash.extend = assign;                                                                                            // 12154\n    lodash.iteratee = callback;                                                                                        // 12155\n    lodash.methods = functions;                                                                                        // 12156\n    lodash.object = zipObject;                                                                                         // 12157\n    lodash.select = filter;                                                                                            // 12158\n    lodash.tail = rest;                                                                                                // 12159\n    lodash.unique = uniq;                                                                                              // 12160\n                                                                                                                       // 12161\n    // Add functions to `lodash.prototype`.                                                                            // 12162\n    mixin(lodash, lodash);                                                                                             // 12163\n                                                                                                                       // 12164\n    /*------------------------------------------------------------------------*/                                       // 12165\n                                                                                                                       // 12166\n    // Add functions that return unwrapped values when chaining.                                                       // 12167\n    lodash.add = add;                                                                                                  // 12168\n    lodash.attempt = attempt;                                                                                          // 12169\n    lodash.camelCase = camelCase;                                                                                      // 12170\n    lodash.capitalize = capitalize;                                                                                    // 12171\n    lodash.ceil = ceil;                                                                                                // 12172\n    lodash.clone = clone;                                                                                              // 12173\n    lodash.cloneDeep = cloneDeep;                                                                                      // 12174\n    lodash.deburr = deburr;                                                                                            // 12175\n    lodash.endsWith = endsWith;                                                                                        // 12176\n    lodash.escape = escape;                                                                                            // 12177\n    lodash.escapeRegExp = escapeRegExp;                                                                                // 12178\n    lodash.every = every;                                                                                              // 12179\n    lodash.find = find;                                                                                                // 12180\n    lodash.findIndex = findIndex;                                                                                      // 12181\n    lodash.findKey = findKey;                                                                                          // 12182\n    lodash.findLast = findLast;                                                                                        // 12183\n    lodash.findLastIndex = findLastIndex;                                                                              // 12184\n    lodash.findLastKey = findLastKey;                                                                                  // 12185\n    lodash.findWhere = findWhere;                                                                                      // 12186\n    lodash.first = first;                                                                                              // 12187\n    lodash.floor = floor;                                                                                              // 12188\n    lodash.get = get;                                                                                                  // 12189\n    lodash.gt = gt;                                                                                                    // 12190\n    lodash.gte = gte;                                                                                                  // 12191\n    lodash.has = has;                                                                                                  // 12192\n    lodash.identity = identity;                                                                                        // 12193\n    lodash.includes = includes;                                                                                        // 12194\n    lodash.indexOf = indexOf;                                                                                          // 12195\n    lodash.inRange = inRange;                                                                                          // 12196\n    lodash.isArguments = isArguments;                                                                                  // 12197\n    lodash.isArray = isArray;                                                                                          // 12198\n    lodash.isBoolean = isBoolean;                                                                                      // 12199\n    lodash.isDate = isDate;                                                                                            // 12200\n    lodash.isElement = isElement;                                                                                      // 12201\n    lodash.isEmpty = isEmpty;                                                                                          // 12202\n    lodash.isEqual = isEqual;                                                                                          // 12203\n    lodash.isError = isError;                                                                                          // 12204\n    lodash.isFinite = isFinite;                                                                                        // 12205\n    lodash.isFunction = isFunction;                                                                                    // 12206\n    lodash.isMatch = isMatch;                                                                                          // 12207\n    lodash.isNaN = isNaN;                                                                                              // 12208\n    lodash.isNative = isNative;                                                                                        // 12209\n    lodash.isNull = isNull;                                                                                            // 12210\n    lodash.isNumber = isNumber;                                                                                        // 12211\n    lodash.isObject = isObject;                                                                                        // 12212\n    lodash.isPlainObject = isPlainObject;                                                                              // 12213\n    lodash.isRegExp = isRegExp;                                                                                        // 12214\n    lodash.isString = isString;                                                                                        // 12215\n    lodash.isTypedArray = isTypedArray;                                                                                // 12216\n    lodash.isUndefined = isUndefined;                                                                                  // 12217\n    lodash.kebabCase = kebabCase;                                                                                      // 12218\n    lodash.last = last;                                                                                                // 12219\n    lodash.lastIndexOf = lastIndexOf;                                                                                  // 12220\n    lodash.lt = lt;                                                                                                    // 12221\n    lodash.lte = lte;                                                                                                  // 12222\n    lodash.max = max;                                                                                                  // 12223\n    lodash.min = min;                                                                                                  // 12224\n    lodash.noConflict = noConflict;                                                                                    // 12225\n    lodash.noop = noop;                                                                                                // 12226\n    lodash.now = now;                                                                                                  // 12227\n    lodash.pad = pad;                                                                                                  // 12228\n    lodash.padLeft = padLeft;                                                                                          // 12229\n    lodash.padRight = padRight;                                                                                        // 12230\n    lodash.parseInt = parseInt;                                                                                        // 12231\n    lodash.random = random;                                                                                            // 12232\n    lodash.reduce = reduce;                                                                                            // 12233\n    lodash.reduceRight = reduceRight;                                                                                  // 12234\n    lodash.repeat = repeat;                                                                                            // 12235\n    lodash.result = result;                                                                                            // 12236\n    lodash.round = round;                                                                                              // 12237\n    lodash.runInContext = runInContext;                                                                                // 12238\n    lodash.size = size;                                                                                                // 12239\n    lodash.snakeCase = snakeCase;                                                                                      // 12240\n    lodash.some = some;                                                                                                // 12241\n    lodash.sortedIndex = sortedIndex;                                                                                  // 12242\n    lodash.sortedLastIndex = sortedLastIndex;                                                                          // 12243\n    lodash.startCase = startCase;                                                                                      // 12244\n    lodash.startsWith = startsWith;                                                                                    // 12245\n    lodash.sum = sum;                                                                                                  // 12246\n    lodash.template = template;                                                                                        // 12247\n    lodash.trim = trim;                                                                                                // 12248\n    lodash.trimLeft = trimLeft;                                                                                        // 12249\n    lodash.trimRight = trimRight;                                                                                      // 12250\n    lodash.trunc = trunc;                                                                                              // 12251\n    lodash.unescape = unescape;                                                                                        // 12252\n    lodash.uniqueId = uniqueId;                                                                                        // 12253\n    lodash.words = words;                                                                                              // 12254\n                                                                                                                       // 12255\n    // Add aliases.                                                                                                    // 12256\n    lodash.all = every;                                                                                                // 12257\n    lodash.any = some;                                                                                                 // 12258\n    lodash.contains = includes;                                                                                        // 12259\n    lodash.eq = isEqual;                                                                                               // 12260\n    lodash.detect = find;                                                                                              // 12261\n    lodash.foldl = reduce;                                                                                             // 12262\n    lodash.foldr = reduceRight;                                                                                        // 12263\n    lodash.head = first;                                                                                               // 12264\n    lodash.include = includes;                                                                                         // 12265\n    lodash.inject = reduce;                                                                                            // 12266\n                                                                                                                       // 12267\n    mixin(lodash, (function() {                                                                                        // 12268\n      var source = {};                                                                                                 // 12269\n      baseForOwn(lodash, function(func, methodName) {                                                                  // 12270\n        if (!lodash.prototype[methodName]) {                                                                           // 12271\n          source[methodName] = func;                                                                                   // 12272\n        }                                                                                                              // 12273\n      });                                                                                                              // 12274\n      return source;                                                                                                   // 12275\n    }()), false);                                                                                                      // 12276\n                                                                                                                       // 12277\n    /*------------------------------------------------------------------------*/                                       // 12278\n                                                                                                                       // 12279\n    // Add functions capable of returning wrapped and unwrapped values when chaining.                                  // 12280\n    lodash.sample = sample;                                                                                            // 12281\n                                                                                                                       // 12282\n    lodash.prototype.sample = function(n) {                                                                            // 12283\n      if (!this.__chain__ && n == null) {                                                                              // 12284\n        return sample(this.value());                                                                                   // 12285\n      }                                                                                                                // 12286\n      return this.thru(function(value) {                                                                               // 12287\n        return sample(value, n);                                                                                       // 12288\n      });                                                                                                              // 12289\n    };                                                                                                                 // 12290\n                                                                                                                       // 12291\n    /*------------------------------------------------------------------------*/                                       // 12292\n                                                                                                                       // 12293\n    /**                                                                                                                // 12294\n     * The semantic version number.                                                                                    // 12295\n     *                                                                                                                 // 12296\n     * @static                                                                                                         // 12297\n     * @memberOf _                                                                                                     // 12298\n     * @type string                                                                                                    // 12299\n     */                                                                                                                // 12300\n    lodash.VERSION = VERSION;                                                                                          // 12301\n                                                                                                                       // 12302\n    // Assign default placeholders.                                                                                    // 12303\n    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {            // 12304\n      lodash[methodName].placeholder = lodash;                                                                         // 12305\n    });                                                                                                                // 12306\n                                                                                                                       // 12307\n    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.                                                   // 12308\n    arrayEach(['drop', 'take'], function(methodName, index) {                                                          // 12309\n      LazyWrapper.prototype[methodName] = function(n) {                                                                // 12310\n        var filtered = this.__filtered__;                                                                              // 12311\n        if (filtered && !index) {                                                                                      // 12312\n          return new LazyWrapper(this);                                                                                // 12313\n        }                                                                                                              // 12314\n        n = n == null ? 1 : nativeMax(nativeFloor(n) || 0, 0);                                                         // 12315\n                                                                                                                       // 12316\n        var result = this.clone();                                                                                     // 12317\n        if (filtered) {                                                                                                // 12318\n          result.__takeCount__ = nativeMin(result.__takeCount__, n);                                                   // 12319\n        } else {                                                                                                       // 12320\n          result.__views__.push({ 'size': n, 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });              // 12321\n        }                                                                                                              // 12322\n        return result;                                                                                                 // 12323\n      };                                                                                                               // 12324\n                                                                                                                       // 12325\n      LazyWrapper.prototype[methodName + 'Right'] = function(n) {                                                      // 12326\n        return this.reverse()[methodName](n).reverse();                                                                // 12327\n      };                                                                                                               // 12328\n    });                                                                                                                // 12329\n                                                                                                                       // 12330\n    // Add `LazyWrapper` methods that accept an `iteratee` value.                                                      // 12331\n    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {                                            // 12332\n      var type = index + 1,                                                                                            // 12333\n          isFilter = type != LAZY_MAP_FLAG;                                                                            // 12334\n                                                                                                                       // 12335\n      LazyWrapper.prototype[methodName] = function(iteratee, thisArg) {                                                // 12336\n        var result = this.clone();                                                                                     // 12337\n        result.__iteratees__.push({ 'iteratee': getCallback(iteratee, thisArg, 1), 'type': type });                    // 12338\n        result.__filtered__ = result.__filtered__ || isFilter;                                                         // 12339\n        return result;                                                                                                 // 12340\n      };                                                                                                               // 12341\n    });                                                                                                                // 12342\n                                                                                                                       // 12343\n    // Add `LazyWrapper` methods for `_.first` and `_.last`.                                                           // 12344\n    arrayEach(['first', 'last'], function(methodName, index) {                                                         // 12345\n      var takeName = 'take' + (index ? 'Right' : '');                                                                  // 12346\n                                                                                                                       // 12347\n      LazyWrapper.prototype[methodName] = function() {                                                                 // 12348\n        return this[takeName](1).value()[0];                                                                           // 12349\n      };                                                                                                               // 12350\n    });                                                                                                                // 12351\n                                                                                                                       // 12352\n    // Add `LazyWrapper` methods for `_.initial` and `_.rest`.                                                         // 12353\n    arrayEach(['initial', 'rest'], function(methodName, index) {                                                       // 12354\n      var dropName = 'drop' + (index ? '' : 'Right');                                                                  // 12355\n                                                                                                                       // 12356\n      LazyWrapper.prototype[methodName] = function() {                                                                 // 12357\n        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);                                          // 12358\n      };                                                                                                               // 12359\n    });                                                                                                                // 12360\n                                                                                                                       // 12361\n    // Add `LazyWrapper` methods for `_.pluck` and `_.where`.                                                          // 12362\n    arrayEach(['pluck', 'where'], function(methodName, index) {                                                        // 12363\n      var operationName = index ? 'filter' : 'map',                                                                    // 12364\n          createCallback = index ? baseMatches : property;                                                             // 12365\n                                                                                                                       // 12366\n      LazyWrapper.prototype[methodName] = function(value) {                                                            // 12367\n        return this[operationName](createCallback(value));                                                             // 12368\n      };                                                                                                               // 12369\n    });                                                                                                                // 12370\n                                                                                                                       // 12371\n    LazyWrapper.prototype.compact = function() {                                                                       // 12372\n      return this.filter(identity);                                                                                    // 12373\n    };                                                                                                                 // 12374\n                                                                                                                       // 12375\n    LazyWrapper.prototype.reject = function(predicate, thisArg) {                                                      // 12376\n      predicate = getCallback(predicate, thisArg, 1);                                                                  // 12377\n      return this.filter(function(value) {                                                                             // 12378\n        return !predicate(value);                                                                                      // 12379\n      });                                                                                                              // 12380\n    };                                                                                                                 // 12381\n                                                                                                                       // 12382\n    LazyWrapper.prototype.slice = function(start, end) {                                                               // 12383\n      start = start == null ? 0 : (+start || 0);                                                                       // 12384\n                                                                                                                       // 12385\n      var result = this;                                                                                               // 12386\n      if (result.__filtered__ && (start > 0 || end < 0)) {                                                             // 12387\n        return new LazyWrapper(result);                                                                                // 12388\n      }                                                                                                                // 12389\n      if (start < 0) {                                                                                                 // 12390\n        result = result.takeRight(-start);                                                                             // 12391\n      } else if (start) {                                                                                              // 12392\n        result = result.drop(start);                                                                                   // 12393\n      }                                                                                                                // 12394\n      if (end !== undefined) {                                                                                         // 12395\n        end = (+end || 0);                                                                                             // 12396\n        result = end < 0 ? result.dropRight(-end) : result.take(end - start);                                          // 12397\n      }                                                                                                                // 12398\n      return result;                                                                                                   // 12399\n    };                                                                                                                 // 12400\n                                                                                                                       // 12401\n    LazyWrapper.prototype.takeRightWhile = function(predicate, thisArg) {                                              // 12402\n      return this.reverse().takeWhile(predicate, thisArg).reverse();                                                   // 12403\n    };                                                                                                                 // 12404\n                                                                                                                       // 12405\n    LazyWrapper.prototype.toArray = function() {                                                                       // 12406\n      return this.take(POSITIVE_INFINITY);                                                                             // 12407\n    };                                                                                                                 // 12408\n                                                                                                                       // 12409\n    // Add `LazyWrapper` methods to `lodash.prototype`.                                                                // 12410\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {                                                     // 12411\n      var checkIteratee = /^(?:filter|map|reject)|While$/.test(methodName),                                            // 12412\n          retUnwrapped = /^(?:first|last)$/.test(methodName),                                                          // 12413\n          lodashFunc = lodash[retUnwrapped ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName];           // 12414\n                                                                                                                       // 12415\n      if (!lodashFunc) {                                                                                               // 12416\n        return;                                                                                                        // 12417\n      }                                                                                                                // 12418\n      lodash.prototype[methodName] = function() {                                                                      // 12419\n        var args = retUnwrapped ? [1] : arguments,                                                                     // 12420\n            chainAll = this.__chain__,                                                                                 // 12421\n            value = this.__wrapped__,                                                                                  // 12422\n            isHybrid = !!this.__actions__.length,                                                                      // 12423\n            isLazy = value instanceof LazyWrapper,                                                                     // 12424\n            iteratee = args[0],                                                                                        // 12425\n            useLazy = isLazy || isArray(value);                                                                        // 12426\n                                                                                                                       // 12427\n        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {                       // 12428\n          // Avoid lazy use if the iteratee has a \"length\" value other than `1`.                                       // 12429\n          isLazy = useLazy = false;                                                                                    // 12430\n        }                                                                                                              // 12431\n        var interceptor = function(value) {                                                                            // 12432\n          return (retUnwrapped && chainAll)                                                                            // 12433\n            ? lodashFunc(value, 1)[0]                                                                                  // 12434\n            : lodashFunc.apply(undefined, arrayPush([value], args));                                                   // 12435\n        };                                                                                                             // 12436\n                                                                                                                       // 12437\n        var action = { 'func': thru, 'args': [interceptor], 'thisArg': undefined },                                    // 12438\n            onlyLazy = isLazy && !isHybrid;                                                                            // 12439\n                                                                                                                       // 12440\n        if (retUnwrapped && !chainAll) {                                                                               // 12441\n          if (onlyLazy) {                                                                                              // 12442\n            value = value.clone();                                                                                     // 12443\n            value.__actions__.push(action);                                                                            // 12444\n            return func.call(value);                                                                                   // 12445\n          }                                                                                                            // 12446\n          return lodashFunc.call(undefined, this.value())[0];                                                          // 12447\n        }                                                                                                              // 12448\n        if (!retUnwrapped && useLazy) {                                                                                // 12449\n          value = onlyLazy ? value : new LazyWrapper(this);                                                            // 12450\n          var result = func.apply(value, args);                                                                        // 12451\n          result.__actions__.push(action);                                                                             // 12452\n          return new LodashWrapper(result, chainAll);                                                                  // 12453\n        }                                                                                                              // 12454\n        return this.thru(interceptor);                                                                                 // 12455\n      };                                                                                                               // 12456\n    });                                                                                                                // 12457\n                                                                                                                       // 12458\n    // Add `Array` and `String` methods to `lodash.prototype`.                                                         // 12459\n    arrayEach(['join', 'pop', 'push', 'replace', 'shift', 'sort', 'splice', 'split', 'unshift'], function(methodName) {\n      var protoFunc = (/^(?:replace|split)$/.test(methodName) ? stringProto : arrayProto)[methodName],                 // 12461\n          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',                                     // 12462\n          fixObjects = !support.spliceObjects && /^(?:pop|shift|splice)$/.test(methodName),                            // 12463\n          retUnwrapped = /^(?:join|pop|replace|shift)$/.test(methodName);                                              // 12464\n                                                                                                                       // 12465\n      // Avoid array-like object bugs with `Array#shift` and `Array#splice` in                                         // 12466\n      // IE < 9, Firefox < 10, and RingoJS.                                                                            // 12467\n      var func = !fixObjects ? protoFunc : function() {                                                                // 12468\n        var result = protoFunc.apply(this, arguments);                                                                 // 12469\n        if (this.length === 0) {                                                                                       // 12470\n          delete this[0];                                                                                              // 12471\n        }                                                                                                              // 12472\n        return result;                                                                                                 // 12473\n      };                                                                                                               // 12474\n                                                                                                                       // 12475\n      lodash.prototype[methodName] = function() {                                                                      // 12476\n        var args = arguments;                                                                                          // 12477\n        if (retUnwrapped && !this.__chain__) {                                                                         // 12478\n          return func.apply(this.value(), args);                                                                       // 12479\n        }                                                                                                              // 12480\n        return this[chainName](function(value) {                                                                       // 12481\n          return func.apply(value, args);                                                                              // 12482\n        });                                                                                                            // 12483\n      };                                                                                                               // 12484\n    });                                                                                                                // 12485\n                                                                                                                       // 12486\n    // Map minified function names to their real names.                                                                // 12487\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {                                                     // 12488\n      var lodashFunc = lodash[methodName];                                                                             // 12489\n      if (lodashFunc) {                                                                                                // 12490\n        var key = (lodashFunc.name + ''),                                                                              // 12491\n            names = realNames[key] || (realNames[key] = []);                                                           // 12492\n                                                                                                                       // 12493\n        names.push({ 'name': methodName, 'func': lodashFunc });                                                        // 12494\n      }                                                                                                                // 12495\n    });                                                                                                                // 12496\n                                                                                                                       // 12497\n    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{ 'name': 'wrapper', 'func': undefined }];        // 12498\n                                                                                                                       // 12499\n    // Add functions to the lazy wrapper.                                                                              // 12500\n    LazyWrapper.prototype.clone = lazyClone;                                                                           // 12501\n    LazyWrapper.prototype.reverse = lazyReverse;                                                                       // 12502\n    LazyWrapper.prototype.value = lazyValue;                                                                           // 12503\n                                                                                                                       // 12504\n    // Add chaining functions to the `lodash` wrapper.                                                                 // 12505\n    lodash.prototype.chain = wrapperChain;                                                                             // 12506\n    lodash.prototype.commit = wrapperCommit;                                                                           // 12507\n    lodash.prototype.concat = wrapperConcat;                                                                           // 12508\n    lodash.prototype.plant = wrapperPlant;                                                                             // 12509\n    lodash.prototype.reverse = wrapperReverse;                                                                         // 12510\n    lodash.prototype.toString = wrapperToString;                                                                       // 12511\n    lodash.prototype.run = lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue; // 12512\n                                                                                                                       // 12513\n    // Add function aliases to the `lodash` wrapper.                                                                   // 12514\n    lodash.prototype.collect = lodash.prototype.map;                                                                   // 12515\n    lodash.prototype.head = lodash.prototype.first;                                                                    // 12516\n    lodash.prototype.select = lodash.prototype.filter;                                                                 // 12517\n    lodash.prototype.tail = lodash.prototype.rest;                                                                     // 12518\n                                                                                                                       // 12519\n    return lodash;                                                                                                     // 12520\n  }                                                                                                                    // 12521\n                                                                                                                       // 12522\n  /*--------------------------------------------------------------------------*/                                       // 12523\n                                                                                                                       // 12524\n  // Export lodash.                                                                                                    // 12525\n  var _ = runInContext();                                                                                              // 12526\n                                                                                                                       // 12527\n  // Some AMD build optimizers like r.js check for condition patterns like the following:                              // 12528\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {                                    // 12529\n    // Expose lodash to the global object when an AMD loader is present to avoid                                       // 12530\n    // errors in cases where lodash is loaded by a script tag and not intended                                         // 12531\n    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for                                        // 12532\n    // more details.                                                                                                   // 12533\n    root._ = _;                                                                                                        // 12534\n                                                                                                                       // 12535\n    // Define as an anonymous module so, through path mapping, it can be                                               // 12536\n    // referenced as the \"underscore\" module.                                                                          // 12537\n    define(function() {                                                                                                // 12538\n      return _;                                                                                                        // 12539\n    });                                                                                                                // 12540\n  }                                                                                                                    // 12541\n  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.                            // 12542\n  else if (freeExports && freeModule) {                                                                                // 12543\n    // Export for Node.js or RingoJS.                                                                                  // 12544\n    if (moduleExports) {                                                                                               // 12545\n      (freeModule.exports = _)._ = _;                                                                                  // 12546\n    }                                                                                                                  // 12547\n    // Export for Rhino with CommonJS support.                                                                         // 12548\n    else {                                                                                                             // 12549\n      freeExports._ = _;                                                                                               // 12550\n    }                                                                                                                  // 12551\n  }                                                                                                                    // 12552\n  else {                                                                                                               // 12553\n    // Export for a browser or Rhino.                                                                                  // 12554\n    root._ = _;                                                                                                        // 12555\n  }                                                                                                                    // 12556\n}.call(this));                                                                                                         // 12557\n                                                                                                                       // 12558\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/stevezhu:lodash/client.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlodash = this._;                                                                                                       // 1\ndelete this._;                                                                                                         // 2\n                                                                                                                       // 3\n_ = lodash;                                                                                                            // 4\n                                                                                                                       // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n///////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['stevezhu:lodash'] = {}, {\n  lodash: lodash,\n  _: _\n});\n\n})();\n","servePath":"/packages/stevezhu_lodash.js"}]