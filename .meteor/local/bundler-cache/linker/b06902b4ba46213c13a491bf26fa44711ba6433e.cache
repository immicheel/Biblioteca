[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\n\n/* Package-scope variables */\nvar NProgress;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/mrt_nprogress/packages/mrt_nprogress.js                                                           //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n(function () {                                                                                                // 1\n                                                                                                              // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////     // 3\n//                                                                                                     //     // 4\n// packages/mrt:nprogress/lib/nprogress/nprogress.js                                                   //     // 5\n//                                                                                                     //     // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////     // 7\n                                                                                                       //     // 8\n/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress                         // 1   // 9\n * @license MIT */                                                                                     // 2   // 10\n                                                                                                       // 3   // 11\n;(function(root, factory) {                                                                            // 4   // 12\n                                                                                                       // 5   // 13\n  if (typeof define === 'function' && define.amd) {                                                    // 6   // 14\n    define(factory);                                                                                   // 7   // 15\n  } else if (typeof exports === 'object') {                                                            // 8   // 16\n    module.exports = factory();                                                                        // 9   // 17\n  } else {                                                                                             // 10  // 18\n    root.NProgress = factory();                                                                        // 11  // 19\n  }                                                                                                    // 12  // 20\n                                                                                                       // 13  // 21\n})(this, function() {                                                                                  // 14  // 22\n  var NProgress = {};                                                                                  // 15  // 23\n                                                                                                       // 16  // 24\n  NProgress.version = '0.2.0';                                                                         // 17  // 25\n                                                                                                       // 18  // 26\n  var Settings = NProgress.settings = {                                                                // 19  // 27\n    minimum: 0.08,                                                                                     // 20  // 28\n    easing: 'ease',                                                                                    // 21  // 29\n    positionUsing: '',                                                                                 // 22  // 30\n    speed: 200,                                                                                        // 23  // 31\n    trickle: true,                                                                                     // 24  // 32\n    trickleRate: 0.02,                                                                                 // 25  // 33\n    trickleSpeed: 800,                                                                                 // 26  // 34\n    showSpinner: true,                                                                                 // 27  // 35\n    barSelector: '[role=\"bar\"]',                                                                       // 28  // 36\n    spinnerSelector: '[role=\"spinner\"]',                                                               // 29  // 37\n    parent: 'body',                                                                                    // 30  // 38\n    template: '<div class=\"bar\" role=\"bar\"><div class=\"peg\"></div></div><div class=\"spinner\" role=\"spinner\"><div class=\"spinner-icon\"></div></div>'\n  };                                                                                                   // 32  // 40\n                                                                                                       // 33  // 41\n  /**                                                                                                  // 34  // 42\n   * Updates configuration.                                                                            // 35  // 43\n   *                                                                                                   // 36  // 44\n   *     NProgress.configure({                                                                         // 37  // 45\n   *       minimum: 0.1                                                                                // 38  // 46\n   *     });                                                                                           // 39  // 47\n   */                                                                                                  // 40  // 48\n  NProgress.configure = function(options) {                                                            // 41  // 49\n    var key, value;                                                                                    // 42  // 50\n    for (key in options) {                                                                             // 43  // 51\n      value = options[key];                                                                            // 44  // 52\n      if (value !== undefined && options.hasOwnProperty(key)) Settings[key] = value;                   // 45  // 53\n    }                                                                                                  // 46  // 54\n                                                                                                       // 47  // 55\n    return this;                                                                                       // 48  // 56\n  };                                                                                                   // 49  // 57\n                                                                                                       // 50  // 58\n  /**                                                                                                  // 51  // 59\n   * Last number.                                                                                      // 52  // 60\n   */                                                                                                  // 53  // 61\n                                                                                                       // 54  // 62\n  NProgress.status = null;                                                                             // 55  // 63\n                                                                                                       // 56  // 64\n  /**                                                                                                  // 57  // 65\n   * Sets the progress bar status, where `n` is a number from `0.0` to `1.0`.                          // 58  // 66\n   *                                                                                                   // 59  // 67\n   *     NProgress.set(0.4);                                                                           // 60  // 68\n   *     NProgress.set(1.0);                                                                           // 61  // 69\n   */                                                                                                  // 62  // 70\n                                                                                                       // 63  // 71\n  NProgress.set = function(n) {                                                                        // 64  // 72\n    var started = NProgress.isStarted();                                                               // 65  // 73\n                                                                                                       // 66  // 74\n    n = clamp(n, Settings.minimum, 1);                                                                 // 67  // 75\n    NProgress.status = (n === 1 ? null : n);                                                           // 68  // 76\n                                                                                                       // 69  // 77\n    var progress = NProgress.render(!started),                                                         // 70  // 78\n        bar      = progress.querySelector(Settings.barSelector),                                       // 71  // 79\n        speed    = Settings.speed,                                                                     // 72  // 80\n        ease     = Settings.easing;                                                                    // 73  // 81\n                                                                                                       // 74  // 82\n    progress.offsetWidth; /* Repaint */                                                                // 75  // 83\n                                                                                                       // 76  // 84\n    queue(function(next) {                                                                             // 77  // 85\n      // Set positionUsing if it hasn't already been set                                               // 78  // 86\n      if (Settings.positionUsing === '') Settings.positionUsing = NProgress.getPositioningCSS();       // 79  // 87\n                                                                                                       // 80  // 88\n      // Add transition                                                                                // 81  // 89\n      css(bar, barPositionCSS(n, speed, ease));                                                        // 82  // 90\n                                                                                                       // 83  // 91\n      if (n === 1) {                                                                                   // 84  // 92\n        // Fade out                                                                                    // 85  // 93\n        css(progress, {                                                                                // 86  // 94\n          transition: 'none',                                                                          // 87  // 95\n          opacity: 1                                                                                   // 88  // 96\n        });                                                                                            // 89  // 97\n        progress.offsetWidth; /* Repaint */                                                            // 90  // 98\n                                                                                                       // 91  // 99\n        setTimeout(function() {                                                                        // 92  // 100\n          css(progress, {                                                                              // 93  // 101\n            transition: 'all ' + speed + 'ms linear',                                                  // 94  // 102\n            opacity: 0                                                                                 // 95  // 103\n          });                                                                                          // 96  // 104\n          setTimeout(function() {                                                                      // 97  // 105\n            NProgress.remove();                                                                        // 98  // 106\n            next();                                                                                    // 99  // 107\n          }, speed);                                                                                   // 100\n        }, speed);                                                                                     // 101\n      } else {                                                                                         // 102\n        setTimeout(next, speed);                                                                       // 103\n      }                                                                                                // 104\n    });                                                                                                // 105\n                                                                                                       // 106\n    return this;                                                                                       // 107\n  };                                                                                                   // 108\n                                                                                                       // 109\n  NProgress.isStarted = function() {                                                                   // 110\n    return typeof NProgress.status === 'number';                                                       // 111\n  };                                                                                                   // 112\n                                                                                                       // 113\n  /**                                                                                                  // 114\n   * Shows the progress bar.                                                                           // 115\n   * This is the same as setting the status to 0%, except that it doesn't go backwards.                // 116\n   *                                                                                                   // 117\n   *     NProgress.start();                                                                            // 118\n   *                                                                                                   // 119\n   */                                                                                                  // 120\n  NProgress.start = function() {                                                                       // 121\n    if (!NProgress.status) NProgress.set(0);                                                           // 122\n                                                                                                       // 123\n    var work = function() {                                                                            // 124\n      setTimeout(function() {                                                                          // 125\n        if (!NProgress.status) return;                                                                 // 126\n        NProgress.trickle();                                                                           // 127\n        work();                                                                                        // 128\n      }, Settings.trickleSpeed);                                                                       // 129\n    };                                                                                                 // 130\n                                                                                                       // 131\n    if (Settings.trickle) work();                                                                      // 132\n                                                                                                       // 133\n    return this;                                                                                       // 134\n  };                                                                                                   // 135\n                                                                                                       // 136\n  /**                                                                                                  // 137\n   * Hides the progress bar.                                                                           // 138\n   * This is the *sort of* the same as setting the status to 100%, with the                            // 139\n   * difference being `done()` makes some placebo effect of some realistic motion.                     // 140\n   *                                                                                                   // 141\n   *     NProgress.done();                                                                             // 142\n   *                                                                                                   // 143\n   * If `true` is passed, it will show the progress bar even if its hidden.                            // 144\n   *                                                                                                   // 145\n   *     NProgress.done(true);                                                                         // 146\n   */                                                                                                  // 147\n                                                                                                       // 148\n  NProgress.done = function(force) {                                                                   // 149\n    if (!force && !NProgress.status) return this;                                                      // 150\n                                                                                                       // 151\n    return NProgress.inc(0.3 + 0.5 * Math.random()).set(1);                                            // 152\n  };                                                                                                   // 153\n                                                                                                       // 154\n  /**                                                                                                  // 155\n   * Increments by a random amount.                                                                    // 156\n   */                                                                                                  // 157\n                                                                                                       // 158\n  NProgress.inc = function(amount) {                                                                   // 159\n    var n = NProgress.status;                                                                          // 160\n                                                                                                       // 161\n    if (!n) {                                                                                          // 162\n      return NProgress.start();                                                                        // 163\n    } else {                                                                                           // 164\n      if (typeof amount !== 'number') {                                                                // 165\n        amount = (1 - n) * clamp(Math.random() * n, 0.1, 0.95);                                        // 166\n      }                                                                                                // 167\n                                                                                                       // 168\n      n = clamp(n + amount, 0, 0.994);                                                                 // 169\n      return NProgress.set(n);                                                                         // 170\n    }                                                                                                  // 171\n  };                                                                                                   // 172\n                                                                                                       // 173\n  NProgress.trickle = function() {                                                                     // 174\n    return NProgress.inc(Math.random() * Settings.trickleRate);                                        // 175\n  };                                                                                                   // 176\n                                                                                                       // 177\n  /**                                                                                                  // 178\n   * Waits for all supplied jQuery promises and                                                        // 179\n   * increases the progress as the promises resolve.                                                   // 180\n   *                                                                                                   // 181\n   * @param $promise jQUery Promise                                                                    // 182\n   */                                                                                                  // 183\n  (function() {                                                                                        // 184\n    var initial = 0, current = 0;                                                                      // 185\n                                                                                                       // 186\n    NProgress.promise = function($promise) {                                                           // 187\n      if (!$promise || $promise.state() === \"resolved\") {                                              // 188\n        return this;                                                                                   // 189\n      }                                                                                                // 190\n                                                                                                       // 191\n      if (current === 0) {                                                                             // 192\n        NProgress.start();                                                                             // 193\n      }                                                                                                // 194\n                                                                                                       // 195\n      initial++;                                                                                       // 196\n      current++;                                                                                       // 197\n                                                                                                       // 198\n      $promise.always(function() {                                                                     // 199\n        current--;                                                                                     // 200\n        if (current === 0) {                                                                           // 201\n            initial = 0;                                                                               // 202\n            NProgress.done();                                                                          // 203\n        } else {                                                                                       // 204\n            NProgress.set((initial - current) / initial);                                              // 205\n        }                                                                                              // 206\n      });                                                                                              // 207\n                                                                                                       // 208\n      return this;                                                                                     // 209\n    };                                                                                                 // 210\n                                                                                                       // 211\n  })();                                                                                                // 212\n                                                                                                       // 213\n  /**                                                                                                  // 214\n   * (Internal) renders the progress bar markup based on the `template`                                // 215\n   * setting.                                                                                          // 216\n   */                                                                                                  // 217\n                                                                                                       // 218\n  NProgress.render = function(fromStart) {                                                             // 219\n    if (NProgress.isRendered()) return document.getElementById('nprogress');                           // 220\n                                                                                                       // 221\n    addClass(document.documentElement, 'nprogress-busy');                                              // 222\n                                                                                                       // 223\n    var progress = document.createElement('div');                                                      // 224\n    progress.id = 'nprogress';                                                                         // 225\n    progress.innerHTML = Settings.template;                                                            // 226\n                                                                                                       // 227\n    var bar      = progress.querySelector(Settings.barSelector),                                       // 228\n        perc     = fromStart ? '-100' : toBarPerc(NProgress.status || 0),                              // 229\n        parent   = document.querySelector(Settings.parent),                                            // 230\n        spinner;                                                                                       // 231\n                                                                                                       // 232\n    css(bar, {                                                                                         // 233\n      transition: 'all 0 linear',                                                                      // 234\n      transform: 'translate3d(' + perc + '%,0,0)'                                                      // 235\n    });                                                                                                // 236\n                                                                                                       // 237\n    if (!Settings.showSpinner) {                                                                       // 238\n      spinner = progress.querySelector(Settings.spinnerSelector);                                      // 239\n      spinner && removeElement(spinner);                                                               // 240\n    }                                                                                                  // 241\n                                                                                                       // 242\n    if (parent != document.body) {                                                                     // 243\n      addClass(parent, 'nprogress-custom-parent');                                                     // 244\n    }                                                                                                  // 245\n                                                                                                       // 246\n    parent.appendChild(progress);                                                                      // 247\n    return progress;                                                                                   // 248\n  };                                                                                                   // 249\n                                                                                                       // 250\n  /**                                                                                                  // 251\n   * Removes the element. Opposite of render().                                                        // 252\n   */                                                                                                  // 253\n                                                                                                       // 254\n  NProgress.remove = function() {                                                                      // 255\n    removeClass(document.documentElement, 'nprogress-busy');                                           // 256\n    removeClass(document.querySelector(Settings.parent), 'nprogress-custom-parent');                   // 257\n    var progress = document.getElementById('nprogress');                                               // 258\n    progress && removeElement(progress);                                                               // 259\n  };                                                                                                   // 260\n                                                                                                       // 261\n  /**                                                                                                  // 262\n   * Checks if the progress bar is rendered.                                                           // 263\n   */                                                                                                  // 264\n                                                                                                       // 265\n  NProgress.isRendered = function() {                                                                  // 266\n    return !!document.getElementById('nprogress');                                                     // 267\n  };                                                                                                   // 268\n                                                                                                       // 269\n  /**                                                                                                  // 270\n   * Determine which positioning CSS rule to use.                                                      // 271\n   */                                                                                                  // 272\n                                                                                                       // 273\n  NProgress.getPositioningCSS = function() {                                                           // 274\n    // Sniff on document.body.style                                                                    // 275\n    var bodyStyle = document.body.style;                                                               // 276\n                                                                                                       // 277\n    // Sniff prefixes                                                                                  // 278\n    var vendorPrefix = ('WebkitTransform' in bodyStyle) ? 'Webkit' :                                   // 279\n                       ('MozTransform' in bodyStyle) ? 'Moz' :                                         // 280\n                       ('msTransform' in bodyStyle) ? 'ms' :                                           // 281\n                       ('OTransform' in bodyStyle) ? 'O' : '';                                         // 282\n                                                                                                       // 283\n    if (vendorPrefix + 'Perspective' in bodyStyle) {                                                   // 284\n      // Modern browsers with 3D support, e.g. Webkit, IE10                                            // 285\n      return 'translate3d';                                                                            // 286\n    } else if (vendorPrefix + 'Transform' in bodyStyle) {                                              // 287\n      // Browsers without 3D support, e.g. IE9                                                         // 288\n      return 'translate';                                                                              // 289\n    } else {                                                                                           // 290\n      // Browsers without translate() support, e.g. IE7-8                                              // 291\n      return 'margin';                                                                                 // 292\n    }                                                                                                  // 293\n  };                                                                                                   // 294\n                                                                                                       // 295\n  /**                                                                                                  // 296\n   * Helpers                                                                                           // 297\n   */                                                                                                  // 298\n                                                                                                       // 299\n  function clamp(n, min, max) {                                                                        // 300\n    if (n < min) return min;                                                                           // 301\n    if (n > max) return max;                                                                           // 302\n    return n;                                                                                          // 303\n  }                                                                                                    // 304\n                                                                                                       // 305\n  /**                                                                                                  // 306\n   * (Internal) converts a percentage (`0..1`) to a bar translateX                                     // 307\n   * percentage (`-100%..0%`).                                                                         // 308\n   */                                                                                                  // 309\n                                                                                                       // 310\n  function toBarPerc(n) {                                                                              // 311\n    return (-1 + n) * 100;                                                                             // 312\n  }                                                                                                    // 313\n                                                                                                       // 314\n                                                                                                       // 315\n  /**                                                                                                  // 316\n   * (Internal) returns the correct CSS for changing the bar's                                         // 317\n   * position given an n percentage, and speed and ease from Settings                                  // 318\n   */                                                                                                  // 319\n                                                                                                       // 320\n  function barPositionCSS(n, speed, ease) {                                                            // 321\n    var barCSS;                                                                                        // 322\n                                                                                                       // 323\n    if (Settings.positionUsing === 'translate3d') {                                                    // 324\n      barCSS = { transform: 'translate3d('+toBarPerc(n)+'%,0,0)' };                                    // 325\n    } else if (Settings.positionUsing === 'translate') {                                               // 326\n      barCSS = { transform: 'translate('+toBarPerc(n)+'%,0)' };                                        // 327\n    } else {                                                                                           // 328\n      barCSS = { 'margin-left': toBarPerc(n)+'%' };                                                    // 329\n    }                                                                                                  // 330\n                                                                                                       // 331\n    barCSS.transition = 'all '+speed+'ms '+ease;                                                       // 332\n                                                                                                       // 333\n    return barCSS;                                                                                     // 334\n  }                                                                                                    // 335\n                                                                                                       // 336\n  /**                                                                                                  // 337\n   * (Internal) Queues a function to be executed.                                                      // 338\n   */                                                                                                  // 339\n                                                                                                       // 340\n  var queue = (function() {                                                                            // 341\n    var pending = [];                                                                                  // 342\n                                                                                                       // 343\n    function next() {                                                                                  // 344\n      var fn = pending.shift();                                                                        // 345\n      if (fn) {                                                                                        // 346\n        fn(next);                                                                                      // 347\n      }                                                                                                // 348\n    }                                                                                                  // 349\n                                                                                                       // 350\n    return function(fn) {                                                                              // 351\n      pending.push(fn);                                                                                // 352\n      if (pending.length == 1) next();                                                                 // 353\n    };                                                                                                 // 354\n  })();                                                                                                // 355\n                                                                                                       // 356\n  /**                                                                                                  // 357\n   * (Internal) Applies css properties to an element, similar to the jQuery                            // 358\n   * css method.                                                                                       // 359\n   *                                                                                                   // 360\n   * While this helper does assist with vendor prefixed property names, it                             // 361\n   * does not perform any manipulation of values prior to setting styles.                              // 362\n   */                                                                                                  // 363\n                                                                                                       // 364\n  var css = (function() {                                                                              // 365\n    var cssPrefixes = [ 'Webkit', 'O', 'Moz', 'ms' ],                                                  // 366\n        cssProps    = {};                                                                              // 367\n                                                                                                       // 368\n    function camelCase(string) {                                                                       // 369\n      return string.replace(/^-ms-/, 'ms-').replace(/-([\\da-z])/gi, function(match, letter) {          // 370\n        return letter.toUpperCase();                                                                   // 371\n      });                                                                                              // 372\n    }                                                                                                  // 373\n                                                                                                       // 374\n    function getVendorProp(name) {                                                                     // 375\n      var style = document.body.style;                                                                 // 376\n      if (name in style) return name;                                                                  // 377\n                                                                                                       // 378\n      var i = cssPrefixes.length,                                                                      // 379\n          capName = name.charAt(0).toUpperCase() + name.slice(1),                                      // 380\n          vendorName;                                                                                  // 381\n      while (i--) {                                                                                    // 382\n        vendorName = cssPrefixes[i] + capName;                                                         // 383\n        if (vendorName in style) return vendorName;                                                    // 384\n      }                                                                                                // 385\n                                                                                                       // 386\n      return name;                                                                                     // 387\n    }                                                                                                  // 388\n                                                                                                       // 389\n    function getStyleProp(name) {                                                                      // 390\n      name = camelCase(name);                                                                          // 391\n      return cssProps[name] || (cssProps[name] = getVendorProp(name));                                 // 392\n    }                                                                                                  // 393\n                                                                                                       // 394\n    function applyCss(element, prop, value) {                                                          // 395\n      prop = getStyleProp(prop);                                                                       // 396\n      element.style[prop] = value;                                                                     // 397\n    }                                                                                                  // 398\n                                                                                                       // 399\n    return function(element, properties) {                                                             // 400\n      var args = arguments,                                                                            // 401\n          prop,                                                                                        // 402\n          value;                                                                                       // 403\n                                                                                                       // 404\n      if (args.length == 2) {                                                                          // 405\n        for (prop in properties) {                                                                     // 406\n          value = properties[prop];                                                                    // 407\n          if (value !== undefined && properties.hasOwnProperty(prop)) applyCss(element, prop, value);  // 408\n        }                                                                                              // 409\n      } else {                                                                                         // 410\n        applyCss(element, args[1], args[2]);                                                           // 411\n      }                                                                                                // 412\n    }                                                                                                  // 413\n  })();                                                                                                // 414\n                                                                                                       // 415\n  /**                                                                                                  // 416\n   * (Internal) Determines if an element or space separated list of class names contains a class name. // 417\n   */                                                                                                  // 418\n                                                                                                       // 419\n  function hasClass(element, name) {                                                                   // 420\n    var list = typeof element == 'string' ? element : classList(element);                              // 421\n    return list.indexOf(' ' + name + ' ') >= 0;                                                        // 422\n  }                                                                                                    // 423\n                                                                                                       // 424\n  /**                                                                                                  // 425\n   * (Internal) Adds a class to an element.                                                            // 426\n   */                                                                                                  // 427\n                                                                                                       // 428\n  function addClass(element, name) {                                                                   // 429\n    var oldList = classList(element),                                                                  // 430\n        newList = oldList + name;                                                                      // 431\n                                                                                                       // 432\n    if (hasClass(oldList, name)) return;                                                               // 433\n                                                                                                       // 434\n    // Trim the opening space.                                                                         // 435\n    element.className = newList.substring(1);                                                          // 436\n  }                                                                                                    // 437\n                                                                                                       // 438\n  /**                                                                                                  // 439\n   * (Internal) Removes a class from an element.                                                       // 440\n   */                                                                                                  // 441\n                                                                                                       // 442\n  function removeClass(element, name) {                                                                // 443\n    var oldList = classList(element),                                                                  // 444\n        newList;                                                                                       // 445\n                                                                                                       // 446\n    if (!hasClass(element, name)) return;                                                              // 447\n                                                                                                       // 448\n    // Replace the class name.                                                                         // 449\n    newList = oldList.replace(' ' + name + ' ', ' ');                                                  // 450\n                                                                                                       // 451\n    // Trim the opening and closing spaces.                                                            // 452\n    element.className = newList.substring(1, newList.length - 1);                                      // 453\n  }                                                                                                    // 454\n                                                                                                       // 455\n  /**                                                                                                  // 456\n   * (Internal) Gets a space separated list of the class names on the element.                         // 457\n   * The list is wrapped with a single space on each end to facilitate finding                         // 458\n   * matches within the list.                                                                          // 459\n   */                                                                                                  // 460\n                                                                                                       // 461\n  function classList(element) {                                                                        // 462\n    return (' ' + (element.className || '') + ' ').replace(/\\s+/gi, ' ');                              // 463\n  }                                                                                                    // 464\n                                                                                                       // 465\n  /**                                                                                                  // 466\n   * (Internal) Removes an element from the DOM.                                                       // 467\n   */                                                                                                  // 468\n                                                                                                       // 469\n  function removeElement(element) {                                                                    // 470\n    element && element.parentNode && element.parentNode.removeChild(element);                          // 471\n  }                                                                                                    // 472\n                                                                                                       // 473\n  return NProgress;                                                                                    // 474\n});                                                                                                    // 475\n                                                                                                       // 476\n                                                                                                       // 477\n/////////////////////////////////////////////////////////////////////////////////////////////////////////     // 486\n                                                                                                              // 487\n}).call(this);                                                                                                // 488\n                                                                                                              // 489\n                                                                                                              // 490\n                                                                                                              // 491\n                                                                                                              // 492\n                                                                                                              // 493\n                                                                                                              // 494\n(function () {                                                                                                // 495\n                                                                                                              // 496\n/////////////////////////////////////////////////////////////////////////////////////////////////////////     // 497\n//                                                                                                     //     // 498\n// packages/mrt:nprogress/lib/main.js                                                                  //     // 499\n//                                                                                                     //     // 500\n/////////////////////////////////////////////////////////////////////////////////////////////////////////     // 501\n                                                                                                       //     // 502\nif (typeof Package !== \"undefined\") NProgress = this.NProgress;                                        // 1   // 503\n                                                                                                       // 2   // 504\n/////////////////////////////////////////////////////////////////////////////////////////////////////////     // 505\n                                                                                                              // 506\n}).call(this);                                                                                                // 507\n                                                                                                              // 508\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['mrt:nprogress'] = {}, {\n  NProgress: NProgress\n});\n\n})();\n","servePath":"/packages/mrt_nprogress.js"}]