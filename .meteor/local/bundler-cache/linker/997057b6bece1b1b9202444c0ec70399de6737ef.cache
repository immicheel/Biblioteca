[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\n\n/* Package-scope variables */\nvar moment;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/momentjs_moment/moment.js                                                                                //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n//! moment.js                                                                                                        // 1\n//! version : 2.17.1                                                                                                 // 2\n//! authors : Tim Wood, Iskren Chernev, Moment.js contributors                                                       // 3\n//! license : MIT                                                                                                    // 4\n//! momentjs.com                                                                                                     // 5\n                                                                                                                     // 6\n;(function (global, factory) {                                                                                       // 7\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :                      // 8\n    typeof define === 'function' && define.amd ? define(factory) :                                                   // 9\n    global.moment = factory()                                                                                        // 10\n}(this, (function () { 'use strict';                                                                                 // 11\n                                                                                                                     // 12\nvar hookCallback;                                                                                                    // 13\n                                                                                                                     // 14\nfunction hooks () {                                                                                                  // 15\n    return hookCallback.apply(null, arguments);                                                                      // 16\n}                                                                                                                    // 17\n                                                                                                                     // 18\n// This is done to register the method called with moment()                                                          // 19\n// without creating circular dependencies.                                                                           // 20\nfunction setHookCallback (callback) {                                                                                // 21\n    hookCallback = callback;                                                                                         // 22\n}                                                                                                                    // 23\n                                                                                                                     // 24\nfunction isArray(input) {                                                                                            // 25\n    return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';                     // 26\n}                                                                                                                    // 27\n                                                                                                                     // 28\nfunction isObject(input) {                                                                                           // 29\n    // IE8 will treat undefined and null as object if it wasn't for                                                  // 30\n    // input != null                                                                                                 // 31\n    return input != null && Object.prototype.toString.call(input) === '[object Object]';                             // 32\n}                                                                                                                    // 33\n                                                                                                                     // 34\nfunction isObjectEmpty(obj) {                                                                                        // 35\n    var k;                                                                                                           // 36\n    for (k in obj) {                                                                                                 // 37\n        // even if its not own property I'd still call it non-empty                                                  // 38\n        return false;                                                                                                // 39\n    }                                                                                                                // 40\n    return true;                                                                                                     // 41\n}                                                                                                                    // 42\n                                                                                                                     // 43\nfunction isNumber(input) {                                                                                           // 44\n    return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';                 // 45\n}                                                                                                                    // 46\n                                                                                                                     // 47\nfunction isDate(input) {                                                                                             // 48\n    return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';                       // 49\n}                                                                                                                    // 50\n                                                                                                                     // 51\nfunction map(arr, fn) {                                                                                              // 52\n    var res = [], i;                                                                                                 // 53\n    for (i = 0; i < arr.length; ++i) {                                                                               // 54\n        res.push(fn(arr[i], i));                                                                                     // 55\n    }                                                                                                                // 56\n    return res;                                                                                                      // 57\n}                                                                                                                    // 58\n                                                                                                                     // 59\nfunction hasOwnProp(a, b) {                                                                                          // 60\n    return Object.prototype.hasOwnProperty.call(a, b);                                                               // 61\n}                                                                                                                    // 62\n                                                                                                                     // 63\nfunction extend(a, b) {                                                                                              // 64\n    for (var i in b) {                                                                                               // 65\n        if (hasOwnProp(b, i)) {                                                                                      // 66\n            a[i] = b[i];                                                                                             // 67\n        }                                                                                                            // 68\n    }                                                                                                                // 69\n                                                                                                                     // 70\n    if (hasOwnProp(b, 'toString')) {                                                                                 // 71\n        a.toString = b.toString;                                                                                     // 72\n    }                                                                                                                // 73\n                                                                                                                     // 74\n    if (hasOwnProp(b, 'valueOf')) {                                                                                  // 75\n        a.valueOf = b.valueOf;                                                                                       // 76\n    }                                                                                                                // 77\n                                                                                                                     // 78\n    return a;                                                                                                        // 79\n}                                                                                                                    // 80\n                                                                                                                     // 81\nfunction createUTC (input, format, locale, strict) {                                                                 // 82\n    return createLocalOrUTC(input, format, locale, strict, true).utc();                                              // 83\n}                                                                                                                    // 84\n                                                                                                                     // 85\nfunction defaultParsingFlags() {                                                                                     // 86\n    // We need to deep clone this object.                                                                            // 87\n    return {                                                                                                         // 88\n        empty           : false,                                                                                     // 89\n        unusedTokens    : [],                                                                                        // 90\n        unusedInput     : [],                                                                                        // 91\n        overflow        : -2,                                                                                        // 92\n        charsLeftOver   : 0,                                                                                         // 93\n        nullInput       : false,                                                                                     // 94\n        invalidMonth    : null,                                                                                      // 95\n        invalidFormat   : false,                                                                                     // 96\n        userInvalidated : false,                                                                                     // 97\n        iso             : false,                                                                                     // 98\n        parsedDateParts : [],                                                                                        // 99\n        meridiem        : null                                                                                       // 100\n    };                                                                                                               // 101\n}                                                                                                                    // 102\n                                                                                                                     // 103\nfunction getParsingFlags(m) {                                                                                        // 104\n    if (m._pf == null) {                                                                                             // 105\n        m._pf = defaultParsingFlags();                                                                               // 106\n    }                                                                                                                // 107\n    return m._pf;                                                                                                    // 108\n}                                                                                                                    // 109\n                                                                                                                     // 110\nvar some;                                                                                                            // 111\nif (Array.prototype.some) {                                                                                          // 112\n    some = Array.prototype.some;                                                                                     // 113\n} else {                                                                                                             // 114\n    some = function (fun) {                                                                                          // 115\n        var t = Object(this);                                                                                        // 116\n        var len = t.length >>> 0;                                                                                    // 117\n                                                                                                                     // 118\n        for (var i = 0; i < len; i++) {                                                                              // 119\n            if (i in t && fun.call(this, t[i], i, t)) {                                                              // 120\n                return true;                                                                                         // 121\n            }                                                                                                        // 122\n        }                                                                                                            // 123\n                                                                                                                     // 124\n        return false;                                                                                                // 125\n    };                                                                                                               // 126\n}                                                                                                                    // 127\n                                                                                                                     // 128\nvar some$1 = some;                                                                                                   // 129\n                                                                                                                     // 130\nfunction isValid(m) {                                                                                                // 131\n    if (m._isValid == null) {                                                                                        // 132\n        var flags = getParsingFlags(m);                                                                              // 133\n        var parsedParts = some$1.call(flags.parsedDateParts, function (i) {                                          // 134\n            return i != null;                                                                                        // 135\n        });                                                                                                          // 136\n        var isNowValid = !isNaN(m._d.getTime()) &&                                                                   // 137\n            flags.overflow < 0 &&                                                                                    // 138\n            !flags.empty &&                                                                                          // 139\n            !flags.invalidMonth &&                                                                                   // 140\n            !flags.invalidWeekday &&                                                                                 // 141\n            !flags.nullInput &&                                                                                      // 142\n            !flags.invalidFormat &&                                                                                  // 143\n            !flags.userInvalidated &&                                                                                // 144\n            (!flags.meridiem || (flags.meridiem && parsedParts));                                                    // 145\n                                                                                                                     // 146\n        if (m._strict) {                                                                                             // 147\n            isNowValid = isNowValid &&                                                                               // 148\n                flags.charsLeftOver === 0 &&                                                                         // 149\n                flags.unusedTokens.length === 0 &&                                                                   // 150\n                flags.bigHour === undefined;                                                                         // 151\n        }                                                                                                            // 152\n                                                                                                                     // 153\n        if (Object.isFrozen == null || !Object.isFrozen(m)) {                                                        // 154\n            m._isValid = isNowValid;                                                                                 // 155\n        }                                                                                                            // 156\n        else {                                                                                                       // 157\n            return isNowValid;                                                                                       // 158\n        }                                                                                                            // 159\n    }                                                                                                                // 160\n    return m._isValid;                                                                                               // 161\n}                                                                                                                    // 162\n                                                                                                                     // 163\nfunction createInvalid (flags) {                                                                                     // 164\n    var m = createUTC(NaN);                                                                                          // 165\n    if (flags != null) {                                                                                             // 166\n        extend(getParsingFlags(m), flags);                                                                           // 167\n    }                                                                                                                // 168\n    else {                                                                                                           // 169\n        getParsingFlags(m).userInvalidated = true;                                                                   // 170\n    }                                                                                                                // 171\n                                                                                                                     // 172\n    return m;                                                                                                        // 173\n}                                                                                                                    // 174\n                                                                                                                     // 175\nfunction isUndefined(input) {                                                                                        // 176\n    return input === void 0;                                                                                         // 177\n}                                                                                                                    // 178\n                                                                                                                     // 179\n// Plugins that add properties should also add the key here (null value),                                            // 180\n// so we can properly clone ourselves.                                                                               // 181\nvar momentProperties = hooks.momentProperties = [];                                                                  // 182\n                                                                                                                     // 183\nfunction copyConfig(to, from) {                                                                                      // 184\n    var i, prop, val;                                                                                                // 185\n                                                                                                                     // 186\n    if (!isUndefined(from._isAMomentObject)) {                                                                       // 187\n        to._isAMomentObject = from._isAMomentObject;                                                                 // 188\n    }                                                                                                                // 189\n    if (!isUndefined(from._i)) {                                                                                     // 190\n        to._i = from._i;                                                                                             // 191\n    }                                                                                                                // 192\n    if (!isUndefined(from._f)) {                                                                                     // 193\n        to._f = from._f;                                                                                             // 194\n    }                                                                                                                // 195\n    if (!isUndefined(from._l)) {                                                                                     // 196\n        to._l = from._l;                                                                                             // 197\n    }                                                                                                                // 198\n    if (!isUndefined(from._strict)) {                                                                                // 199\n        to._strict = from._strict;                                                                                   // 200\n    }                                                                                                                // 201\n    if (!isUndefined(from._tzm)) {                                                                                   // 202\n        to._tzm = from._tzm;                                                                                         // 203\n    }                                                                                                                // 204\n    if (!isUndefined(from._isUTC)) {                                                                                 // 205\n        to._isUTC = from._isUTC;                                                                                     // 206\n    }                                                                                                                // 207\n    if (!isUndefined(from._offset)) {                                                                                // 208\n        to._offset = from._offset;                                                                                   // 209\n    }                                                                                                                // 210\n    if (!isUndefined(from._pf)) {                                                                                    // 211\n        to._pf = getParsingFlags(from);                                                                              // 212\n    }                                                                                                                // 213\n    if (!isUndefined(from._locale)) {                                                                                // 214\n        to._locale = from._locale;                                                                                   // 215\n    }                                                                                                                // 216\n                                                                                                                     // 217\n    if (momentProperties.length > 0) {                                                                               // 218\n        for (i in momentProperties) {                                                                                // 219\n            prop = momentProperties[i];                                                                              // 220\n            val = from[prop];                                                                                        // 221\n            if (!isUndefined(val)) {                                                                                 // 222\n                to[prop] = val;                                                                                      // 223\n            }                                                                                                        // 224\n        }                                                                                                            // 225\n    }                                                                                                                // 226\n                                                                                                                     // 227\n    return to;                                                                                                       // 228\n}                                                                                                                    // 229\n                                                                                                                     // 230\nvar updateInProgress = false;                                                                                        // 231\n                                                                                                                     // 232\n// Moment prototype object                                                                                           // 233\nfunction Moment(config) {                                                                                            // 234\n    copyConfig(this, config);                                                                                        // 235\n    this._d = new Date(config._d != null ? config._d.getTime() : NaN);                                               // 236\n    if (!this.isValid()) {                                                                                           // 237\n        this._d = new Date(NaN);                                                                                     // 238\n    }                                                                                                                // 239\n    // Prevent infinite loop in case updateOffset creates new moment                                                 // 240\n    // objects.                                                                                                      // 241\n    if (updateInProgress === false) {                                                                                // 242\n        updateInProgress = true;                                                                                     // 243\n        hooks.updateOffset(this);                                                                                    // 244\n        updateInProgress = false;                                                                                    // 245\n    }                                                                                                                // 246\n}                                                                                                                    // 247\n                                                                                                                     // 248\nfunction isMoment (obj) {                                                                                            // 249\n    return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);                                   // 250\n}                                                                                                                    // 251\n                                                                                                                     // 252\nfunction absFloor (number) {                                                                                         // 253\n    if (number < 0) {                                                                                                // 254\n        // -0 -> 0                                                                                                   // 255\n        return Math.ceil(number) || 0;                                                                               // 256\n    } else {                                                                                                         // 257\n        return Math.floor(number);                                                                                   // 258\n    }                                                                                                                // 259\n}                                                                                                                    // 260\n                                                                                                                     // 261\nfunction toInt(argumentForCoercion) {                                                                                // 262\n    var coercedNumber = +argumentForCoercion,                                                                        // 263\n        value = 0;                                                                                                   // 264\n                                                                                                                     // 265\n    if (coercedNumber !== 0 && isFinite(coercedNumber)) {                                                            // 266\n        value = absFloor(coercedNumber);                                                                             // 267\n    }                                                                                                                // 268\n                                                                                                                     // 269\n    return value;                                                                                                    // 270\n}                                                                                                                    // 271\n                                                                                                                     // 272\n// compare two arrays, return the number of differences                                                              // 273\nfunction compareArrays(array1, array2, dontConvert) {                                                                // 274\n    var len = Math.min(array1.length, array2.length),                                                                // 275\n        lengthDiff = Math.abs(array1.length - array2.length),                                                        // 276\n        diffs = 0,                                                                                                   // 277\n        i;                                                                                                           // 278\n    for (i = 0; i < len; i++) {                                                                                      // 279\n        if ((dontConvert && array1[i] !== array2[i]) ||                                                              // 280\n            (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {                                               // 281\n            diffs++;                                                                                                 // 282\n        }                                                                                                            // 283\n    }                                                                                                                // 284\n    return diffs + lengthDiff;                                                                                       // 285\n}                                                                                                                    // 286\n                                                                                                                     // 287\nfunction warn(msg) {                                                                                                 // 288\n    if (hooks.suppressDeprecationWarnings === false &&                                                               // 289\n            (typeof console !==  'undefined') && console.warn) {                                                     // 290\n        console.warn('Deprecation warning: ' + msg);                                                                 // 291\n    }                                                                                                                // 292\n}                                                                                                                    // 293\n                                                                                                                     // 294\nfunction deprecate(msg, fn) {                                                                                        // 295\n    var firstTime = true;                                                                                            // 296\n                                                                                                                     // 297\n    return extend(function () {                                                                                      // 298\n        if (hooks.deprecationHandler != null) {                                                                      // 299\n            hooks.deprecationHandler(null, msg);                                                                     // 300\n        }                                                                                                            // 301\n        if (firstTime) {                                                                                             // 302\n            var args = [];                                                                                           // 303\n            var arg;                                                                                                 // 304\n            for (var i = 0; i < arguments.length; i++) {                                                             // 305\n                arg = '';                                                                                            // 306\n                if (typeof arguments[i] === 'object') {                                                              // 307\n                    arg += '\\n[' + i + '] ';                                                                         // 308\n                    for (var key in arguments[0]) {                                                                  // 309\n                        arg += key + ': ' + arguments[0][key] + ', ';                                                // 310\n                    }                                                                                                // 311\n                    arg = arg.slice(0, -2); // Remove trailing comma and space                                       // 312\n                } else {                                                                                             // 313\n                    arg = arguments[i];                                                                              // 314\n                }                                                                                                    // 315\n                args.push(arg);                                                                                      // 316\n            }                                                                                                        // 317\n            warn(msg + '\\nArguments: ' + Array.prototype.slice.call(args).join('') + '\\n' + (new Error()).stack);    // 318\n            firstTime = false;                                                                                       // 319\n        }                                                                                                            // 320\n        return fn.apply(this, arguments);                                                                            // 321\n    }, fn);                                                                                                          // 322\n}                                                                                                                    // 323\n                                                                                                                     // 324\nvar deprecations = {};                                                                                               // 325\n                                                                                                                     // 326\nfunction deprecateSimple(name, msg) {                                                                                // 327\n    if (hooks.deprecationHandler != null) {                                                                          // 328\n        hooks.deprecationHandler(name, msg);                                                                         // 329\n    }                                                                                                                // 330\n    if (!deprecations[name]) {                                                                                       // 331\n        warn(msg);                                                                                                   // 332\n        deprecations[name] = true;                                                                                   // 333\n    }                                                                                                                // 334\n}                                                                                                                    // 335\n                                                                                                                     // 336\nhooks.suppressDeprecationWarnings = false;                                                                           // 337\nhooks.deprecationHandler = null;                                                                                     // 338\n                                                                                                                     // 339\nfunction isFunction(input) {                                                                                         // 340\n    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';               // 341\n}                                                                                                                    // 342\n                                                                                                                     // 343\nfunction set (config) {                                                                                              // 344\n    var prop, i;                                                                                                     // 345\n    for (i in config) {                                                                                              // 346\n        prop = config[i];                                                                                            // 347\n        if (isFunction(prop)) {                                                                                      // 348\n            this[i] = prop;                                                                                          // 349\n        } else {                                                                                                     // 350\n            this['_' + i] = prop;                                                                                    // 351\n        }                                                                                                            // 352\n    }                                                                                                                // 353\n    this._config = config;                                                                                           // 354\n    // Lenient ordinal parsing accepts just a number in addition to                                                  // 355\n    // number + (possibly) stuff coming from _ordinalParseLenient.                                                   // 356\n    this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\\d{1,2}/).source);                    // 357\n}                                                                                                                    // 358\n                                                                                                                     // 359\nfunction mergeConfigs(parentConfig, childConfig) {                                                                   // 360\n    var res = extend({}, parentConfig), prop;                                                                        // 361\n    for (prop in childConfig) {                                                                                      // 362\n        if (hasOwnProp(childConfig, prop)) {                                                                         // 363\n            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {                                       // 364\n                res[prop] = {};                                                                                      // 365\n                extend(res[prop], parentConfig[prop]);                                                               // 366\n                extend(res[prop], childConfig[prop]);                                                                // 367\n            } else if (childConfig[prop] != null) {                                                                  // 368\n                res[prop] = childConfig[prop];                                                                       // 369\n            } else {                                                                                                 // 370\n                delete res[prop];                                                                                    // 371\n            }                                                                                                        // 372\n        }                                                                                                            // 373\n    }                                                                                                                // 374\n    for (prop in parentConfig) {                                                                                     // 375\n        if (hasOwnProp(parentConfig, prop) &&                                                                        // 376\n                !hasOwnProp(childConfig, prop) &&                                                                    // 377\n                isObject(parentConfig[prop])) {                                                                      // 378\n            // make sure changes to properties don't modify parent config                                            // 379\n            res[prop] = extend({}, res[prop]);                                                                       // 380\n        }                                                                                                            // 381\n    }                                                                                                                // 382\n    return res;                                                                                                      // 383\n}                                                                                                                    // 384\n                                                                                                                     // 385\nfunction Locale(config) {                                                                                            // 386\n    if (config != null) {                                                                                            // 387\n        this.set(config);                                                                                            // 388\n    }                                                                                                                // 389\n}                                                                                                                    // 390\n                                                                                                                     // 391\nvar keys;                                                                                                            // 392\n                                                                                                                     // 393\nif (Object.keys) {                                                                                                   // 394\n    keys = Object.keys;                                                                                              // 395\n} else {                                                                                                             // 396\n    keys = function (obj) {                                                                                          // 397\n        var i, res = [];                                                                                             // 398\n        for (i in obj) {                                                                                             // 399\n            if (hasOwnProp(obj, i)) {                                                                                // 400\n                res.push(i);                                                                                         // 401\n            }                                                                                                        // 402\n        }                                                                                                            // 403\n        return res;                                                                                                  // 404\n    };                                                                                                               // 405\n}                                                                                                                    // 406\n                                                                                                                     // 407\nvar keys$1 = keys;                                                                                                   // 408\n                                                                                                                     // 409\nvar defaultCalendar = {                                                                                              // 410\n    sameDay : '[Today at] LT',                                                                                       // 411\n    nextDay : '[Tomorrow at] LT',                                                                                    // 412\n    nextWeek : 'dddd [at] LT',                                                                                       // 413\n    lastDay : '[Yesterday at] LT',                                                                                   // 414\n    lastWeek : '[Last] dddd [at] LT',                                                                                // 415\n    sameElse : 'L'                                                                                                   // 416\n};                                                                                                                   // 417\n                                                                                                                     // 418\nfunction calendar (key, mom, now) {                                                                                  // 419\n    var output = this._calendar[key] || this._calendar['sameElse'];                                                  // 420\n    return isFunction(output) ? output.call(mom, now) : output;                                                      // 421\n}                                                                                                                    // 422\n                                                                                                                     // 423\nvar defaultLongDateFormat = {                                                                                        // 424\n    LTS  : 'h:mm:ss A',                                                                                              // 425\n    LT   : 'h:mm A',                                                                                                 // 426\n    L    : 'MM/DD/YYYY',                                                                                             // 427\n    LL   : 'MMMM D, YYYY',                                                                                           // 428\n    LLL  : 'MMMM D, YYYY h:mm A',                                                                                    // 429\n    LLLL : 'dddd, MMMM D, YYYY h:mm A'                                                                               // 430\n};                                                                                                                   // 431\n                                                                                                                     // 432\nfunction longDateFormat (key) {                                                                                      // 433\n    var format = this._longDateFormat[key],                                                                          // 434\n        formatUpper = this._longDateFormat[key.toUpperCase()];                                                       // 435\n                                                                                                                     // 436\n    if (format || !formatUpper) {                                                                                    // 437\n        return format;                                                                                               // 438\n    }                                                                                                                // 439\n                                                                                                                     // 440\n    this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {                             // 441\n        return val.slice(1);                                                                                         // 442\n    });                                                                                                              // 443\n                                                                                                                     // 444\n    return this._longDateFormat[key];                                                                                // 445\n}                                                                                                                    // 446\n                                                                                                                     // 447\nvar defaultInvalidDate = 'Invalid date';                                                                             // 448\n                                                                                                                     // 449\nfunction invalidDate () {                                                                                            // 450\n    return this._invalidDate;                                                                                        // 451\n}                                                                                                                    // 452\n                                                                                                                     // 453\nvar defaultOrdinal = '%d';                                                                                           // 454\nvar defaultOrdinalParse = /\\d{1,2}/;                                                                                 // 455\n                                                                                                                     // 456\nfunction ordinal (number) {                                                                                          // 457\n    return this._ordinal.replace('%d', number);                                                                      // 458\n}                                                                                                                    // 459\n                                                                                                                     // 460\nvar defaultRelativeTime = {                                                                                          // 461\n    future : 'in %s',                                                                                                // 462\n    past   : '%s ago',                                                                                               // 463\n    s  : 'a few seconds',                                                                                            // 464\n    m  : 'a minute',                                                                                                 // 465\n    mm : '%d minutes',                                                                                               // 466\n    h  : 'an hour',                                                                                                  // 467\n    hh : '%d hours',                                                                                                 // 468\n    d  : 'a day',                                                                                                    // 469\n    dd : '%d days',                                                                                                  // 470\n    M  : 'a month',                                                                                                  // 471\n    MM : '%d months',                                                                                                // 472\n    y  : 'a year',                                                                                                   // 473\n    yy : '%d years'                                                                                                  // 474\n};                                                                                                                   // 475\n                                                                                                                     // 476\nfunction relativeTime (number, withoutSuffix, string, isFuture) {                                                    // 477\n    var output = this._relativeTime[string];                                                                         // 478\n    return (isFunction(output)) ?                                                                                    // 479\n        output(number, withoutSuffix, string, isFuture) :                                                            // 480\n        output.replace(/%d/i, number);                                                                               // 481\n}                                                                                                                    // 482\n                                                                                                                     // 483\nfunction pastFuture (diff, output) {                                                                                 // 484\n    var format = this._relativeTime[diff > 0 ? 'future' : 'past'];                                                   // 485\n    return isFunction(format) ? format(output) : format.replace(/%s/i, output);                                      // 486\n}                                                                                                                    // 487\n                                                                                                                     // 488\nvar aliases = {};                                                                                                    // 489\n                                                                                                                     // 490\nfunction addUnitAlias (unit, shorthand) {                                                                            // 491\n    var lowerCase = unit.toLowerCase();                                                                              // 492\n    aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;                                       // 493\n}                                                                                                                    // 494\n                                                                                                                     // 495\nfunction normalizeUnits(units) {                                                                                     // 496\n    return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;                   // 497\n}                                                                                                                    // 498\n                                                                                                                     // 499\nfunction normalizeObjectUnits(inputObject) {                                                                         // 500\n    var normalizedInput = {},                                                                                        // 501\n        normalizedProp,                                                                                              // 502\n        prop;                                                                                                        // 503\n                                                                                                                     // 504\n    for (prop in inputObject) {                                                                                      // 505\n        if (hasOwnProp(inputObject, prop)) {                                                                         // 506\n            normalizedProp = normalizeUnits(prop);                                                                   // 507\n            if (normalizedProp) {                                                                                    // 508\n                normalizedInput[normalizedProp] = inputObject[prop];                                                 // 509\n            }                                                                                                        // 510\n        }                                                                                                            // 511\n    }                                                                                                                // 512\n                                                                                                                     // 513\n    return normalizedInput;                                                                                          // 514\n}                                                                                                                    // 515\n                                                                                                                     // 516\nvar priorities = {};                                                                                                 // 517\n                                                                                                                     // 518\nfunction addUnitPriority(unit, priority) {                                                                           // 519\n    priorities[unit] = priority;                                                                                     // 520\n}                                                                                                                    // 521\n                                                                                                                     // 522\nfunction getPrioritizedUnits(unitsObj) {                                                                             // 523\n    var units = [];                                                                                                  // 524\n    for (var u in unitsObj) {                                                                                        // 525\n        units.push({unit: u, priority: priorities[u]});                                                              // 526\n    }                                                                                                                // 527\n    units.sort(function (a, b) {                                                                                     // 528\n        return a.priority - b.priority;                                                                              // 529\n    });                                                                                                              // 530\n    return units;                                                                                                    // 531\n}                                                                                                                    // 532\n                                                                                                                     // 533\nfunction makeGetSet (unit, keepTime) {                                                                               // 534\n    return function (value) {                                                                                        // 535\n        if (value != null) {                                                                                         // 536\n            set$1(this, unit, value);                                                                                // 537\n            hooks.updateOffset(this, keepTime);                                                                      // 538\n            return this;                                                                                             // 539\n        } else {                                                                                                     // 540\n            return get(this, unit);                                                                                  // 541\n        }                                                                                                            // 542\n    };                                                                                                               // 543\n}                                                                                                                    // 544\n                                                                                                                     // 545\nfunction get (mom, unit) {                                                                                           // 546\n    return mom.isValid() ?                                                                                           // 547\n        mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;                                                    // 548\n}                                                                                                                    // 549\n                                                                                                                     // 550\nfunction set$1 (mom, unit, value) {                                                                                  // 551\n    if (mom.isValid()) {                                                                                             // 552\n        mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);                                                     // 553\n    }                                                                                                                // 554\n}                                                                                                                    // 555\n                                                                                                                     // 556\n// MOMENTS                                                                                                           // 557\n                                                                                                                     // 558\nfunction stringGet (units) {                                                                                         // 559\n    units = normalizeUnits(units);                                                                                   // 560\n    if (isFunction(this[units])) {                                                                                   // 561\n        return this[units]();                                                                                        // 562\n    }                                                                                                                // 563\n    return this;                                                                                                     // 564\n}                                                                                                                    // 565\n                                                                                                                     // 566\n                                                                                                                     // 567\nfunction stringSet (units, value) {                                                                                  // 568\n    if (typeof units === 'object') {                                                                                 // 569\n        units = normalizeObjectUnits(units);                                                                         // 570\n        var prioritized = getPrioritizedUnits(units);                                                                // 571\n        for (var i = 0; i < prioritized.length; i++) {                                                               // 572\n            this[prioritized[i].unit](units[prioritized[i].unit]);                                                   // 573\n        }                                                                                                            // 574\n    } else {                                                                                                         // 575\n        units = normalizeUnits(units);                                                                               // 576\n        if (isFunction(this[units])) {                                                                               // 577\n            return this[units](value);                                                                               // 578\n        }                                                                                                            // 579\n    }                                                                                                                // 580\n    return this;                                                                                                     // 581\n}                                                                                                                    // 582\n                                                                                                                     // 583\nfunction zeroFill(number, targetLength, forceSign) {                                                                 // 584\n    var absNumber = '' + Math.abs(number),                                                                           // 585\n        zerosToFill = targetLength - absNumber.length,                                                               // 586\n        sign = number >= 0;                                                                                          // 587\n    return (sign ? (forceSign ? '+' : '') : '-') +                                                                   // 588\n        Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;                                     // 589\n}                                                                                                                    // 590\n                                                                                                                     // 591\nvar formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;\n                                                                                                                     // 593\nvar localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g;                                            // 594\n                                                                                                                     // 595\nvar formatFunctions = {};                                                                                            // 596\n                                                                                                                     // 597\nvar formatTokenFunctions = {};                                                                                       // 598\n                                                                                                                     // 599\n// token:    'M'                                                                                                     // 600\n// padded:   ['MM', 2]                                                                                               // 601\n// ordinal:  'Mo'                                                                                                    // 602\n// callback: function () { this.month() + 1 }                                                                        // 603\nfunction addFormatToken (token, padded, ordinal, callback) {                                                         // 604\n    var func = callback;                                                                                             // 605\n    if (typeof callback === 'string') {                                                                              // 606\n        func = function () {                                                                                         // 607\n            return this[callback]();                                                                                 // 608\n        };                                                                                                           // 609\n    }                                                                                                                // 610\n    if (token) {                                                                                                     // 611\n        formatTokenFunctions[token] = func;                                                                          // 612\n    }                                                                                                                // 613\n    if (padded) {                                                                                                    // 614\n        formatTokenFunctions[padded[0]] = function () {                                                              // 615\n            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);                                      // 616\n        };                                                                                                           // 617\n    }                                                                                                                // 618\n    if (ordinal) {                                                                                                   // 619\n        formatTokenFunctions[ordinal] = function () {                                                                // 620\n            return this.localeData().ordinal(func.apply(this, arguments), token);                                    // 621\n        };                                                                                                           // 622\n    }                                                                                                                // 623\n}                                                                                                                    // 624\n                                                                                                                     // 625\nfunction removeFormattingTokens(input) {                                                                             // 626\n    if (input.match(/\\[[\\s\\S]/)) {                                                                                   // 627\n        return input.replace(/^\\[|\\]$/g, '');                                                                        // 628\n    }                                                                                                                // 629\n    return input.replace(/\\\\/g, '');                                                                                 // 630\n}                                                                                                                    // 631\n                                                                                                                     // 632\nfunction makeFormatFunction(format) {                                                                                // 633\n    var array = format.match(formattingTokens), i, length;                                                           // 634\n                                                                                                                     // 635\n    for (i = 0, length = array.length; i < length; i++) {                                                            // 636\n        if (formatTokenFunctions[array[i]]) {                                                                        // 637\n            array[i] = formatTokenFunctions[array[i]];                                                               // 638\n        } else {                                                                                                     // 639\n            array[i] = removeFormattingTokens(array[i]);                                                             // 640\n        }                                                                                                            // 641\n    }                                                                                                                // 642\n                                                                                                                     // 643\n    return function (mom) {                                                                                          // 644\n        var output = '', i;                                                                                          // 645\n        for (i = 0; i < length; i++) {                                                                               // 646\n            output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];                          // 647\n        }                                                                                                            // 648\n        return output;                                                                                               // 649\n    };                                                                                                               // 650\n}                                                                                                                    // 651\n                                                                                                                     // 652\n// format date using native date object                                                                              // 653\nfunction formatMoment(m, format) {                                                                                   // 654\n    if (!m.isValid()) {                                                                                              // 655\n        return m.localeData().invalidDate();                                                                         // 656\n    }                                                                                                                // 657\n                                                                                                                     // 658\n    format = expandFormat(format, m.localeData());                                                                   // 659\n    formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);                                 // 660\n                                                                                                                     // 661\n    return formatFunctions[format](m);                                                                               // 662\n}                                                                                                                    // 663\n                                                                                                                     // 664\nfunction expandFormat(format, locale) {                                                                              // 665\n    var i = 5;                                                                                                       // 666\n                                                                                                                     // 667\n    function replaceLongDateFormatTokens(input) {                                                                    // 668\n        return locale.longDateFormat(input) || input;                                                                // 669\n    }                                                                                                                // 670\n                                                                                                                     // 671\n    localFormattingTokens.lastIndex = 0;                                                                             // 672\n    while (i >= 0 && localFormattingTokens.test(format)) {                                                           // 673\n        format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);                                 // 674\n        localFormattingTokens.lastIndex = 0;                                                                         // 675\n        i -= 1;                                                                                                      // 676\n    }                                                                                                                // 677\n                                                                                                                     // 678\n    return format;                                                                                                   // 679\n}                                                                                                                    // 680\n                                                                                                                     // 681\nvar match1         = /\\d/;            //       0 - 9                                                                 // 682\nvar match2         = /\\d\\d/;          //      00 - 99                                                                // 683\nvar match3         = /\\d{3}/;         //     000 - 999                                                               // 684\nvar match4         = /\\d{4}/;         //    0000 - 9999                                                              // 685\nvar match6         = /[+-]?\\d{6}/;    // -999999 - 999999                                                            // 686\nvar match1to2      = /\\d\\d?/;         //       0 - 99                                                                // 687\nvar match3to4      = /\\d\\d\\d\\d?/;     //     999 - 9999                                                              // 688\nvar match5to6      = /\\d\\d\\d\\d\\d\\d?/; //   99999 - 999999                                                            // 689\nvar match1to3      = /\\d{1,3}/;       //       0 - 999                                                               // 690\nvar match1to4      = /\\d{1,4}/;       //       0 - 9999                                                              // 691\nvar match1to6      = /[+-]?\\d{1,6}/;  // -999999 - 999999                                                            // 692\n                                                                                                                     // 693\nvar matchUnsigned  = /\\d+/;           //       0 - inf                                                               // 694\nvar matchSigned    = /[+-]?\\d+/;      //    -inf - inf                                                               // 695\n                                                                                                                     // 696\nvar matchOffset    = /Z|[+-]\\d\\d:?\\d\\d/gi; // +00:00 -00:00 +0000 -0000 or Z                                         // 697\nvar matchShortOffset = /Z|[+-]\\d\\d(?::?\\d\\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z                          // 698\n                                                                                                                     // 699\nvar matchTimestamp = /[+-]?\\d+(\\.\\d{1,3})?/; // 123456789 123456789.123                                              // 700\n                                                                                                                     // 701\n// any word (or two) characters or numbers including two/three word month in arabic.                                 // 702\n// includes scottish gaelic two word and hyphenated months                                                           // 703\nvar matchWord = /[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i;\n                                                                                                                     // 705\n                                                                                                                     // 706\nvar regexes = {};                                                                                                    // 707\n                                                                                                                     // 708\nfunction addRegexToken (token, regex, strictRegex) {                                                                 // 709\n    regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {                                   // 710\n        return (isStrict && strictRegex) ? strictRegex : regex;                                                      // 711\n    };                                                                                                               // 712\n}                                                                                                                    // 713\n                                                                                                                     // 714\nfunction getParseRegexForToken (token, config) {                                                                     // 715\n    if (!hasOwnProp(regexes, token)) {                                                                               // 716\n        return new RegExp(unescapeFormat(token));                                                                    // 717\n    }                                                                                                                // 718\n                                                                                                                     // 719\n    return regexes[token](config._strict, config._locale);                                                           // 720\n}                                                                                                                    // 721\n                                                                                                                     // 722\n// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript              // 723\nfunction unescapeFormat(s) {                                                                                         // 724\n    return regexEscape(s.replace('\\\\', '').replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (matched, p1, p2, p3, p4) {\n        return p1 || p2 || p3 || p4;                                                                                 // 726\n    }));                                                                                                             // 727\n}                                                                                                                    // 728\n                                                                                                                     // 729\nfunction regexEscape(s) {                                                                                            // 730\n    return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');                                                              // 731\n}                                                                                                                    // 732\n                                                                                                                     // 733\nvar tokens = {};                                                                                                     // 734\n                                                                                                                     // 735\nfunction addParseToken (token, callback) {                                                                           // 736\n    var i, func = callback;                                                                                          // 737\n    if (typeof token === 'string') {                                                                                 // 738\n        token = [token];                                                                                             // 739\n    }                                                                                                                // 740\n    if (isNumber(callback)) {                                                                                        // 741\n        func = function (input, array) {                                                                             // 742\n            array[callback] = toInt(input);                                                                          // 743\n        };                                                                                                           // 744\n    }                                                                                                                // 745\n    for (i = 0; i < token.length; i++) {                                                                             // 746\n        tokens[token[i]] = func;                                                                                     // 747\n    }                                                                                                                // 748\n}                                                                                                                    // 749\n                                                                                                                     // 750\nfunction addWeekParseToken (token, callback) {                                                                       // 751\n    addParseToken(token, function (input, array, config, token) {                                                    // 752\n        config._w = config._w || {};                                                                                 // 753\n        callback(input, config._w, config, token);                                                                   // 754\n    });                                                                                                              // 755\n}                                                                                                                    // 756\n                                                                                                                     // 757\nfunction addTimeToArrayFromToken(token, input, config) {                                                             // 758\n    if (input != null && hasOwnProp(tokens, token)) {                                                                // 759\n        tokens[token](input, config._a, config, token);                                                              // 760\n    }                                                                                                                // 761\n}                                                                                                                    // 762\n                                                                                                                     // 763\nvar YEAR = 0;                                                                                                        // 764\nvar MONTH = 1;                                                                                                       // 765\nvar DATE = 2;                                                                                                        // 766\nvar HOUR = 3;                                                                                                        // 767\nvar MINUTE = 4;                                                                                                      // 768\nvar SECOND = 5;                                                                                                      // 769\nvar MILLISECOND = 6;                                                                                                 // 770\nvar WEEK = 7;                                                                                                        // 771\nvar WEEKDAY = 8;                                                                                                     // 772\n                                                                                                                     // 773\nvar indexOf;                                                                                                         // 774\n                                                                                                                     // 775\nif (Array.prototype.indexOf) {                                                                                       // 776\n    indexOf = Array.prototype.indexOf;                                                                               // 777\n} else {                                                                                                             // 778\n    indexOf = function (o) {                                                                                         // 779\n        // I know                                                                                                    // 780\n        var i;                                                                                                       // 781\n        for (i = 0; i < this.length; ++i) {                                                                          // 782\n            if (this[i] === o) {                                                                                     // 783\n                return i;                                                                                            // 784\n            }                                                                                                        // 785\n        }                                                                                                            // 786\n        return -1;                                                                                                   // 787\n    };                                                                                                               // 788\n}                                                                                                                    // 789\n                                                                                                                     // 790\nvar indexOf$1 = indexOf;                                                                                             // 791\n                                                                                                                     // 792\nfunction daysInMonth(year, month) {                                                                                  // 793\n    return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();                                                      // 794\n}                                                                                                                    // 795\n                                                                                                                     // 796\n// FORMATTING                                                                                                        // 797\n                                                                                                                     // 798\naddFormatToken('M', ['MM', 2], 'Mo', function () {                                                                   // 799\n    return this.month() + 1;                                                                                         // 800\n});                                                                                                                  // 801\n                                                                                                                     // 802\naddFormatToken('MMM', 0, 0, function (format) {                                                                      // 803\n    return this.localeData().monthsShort(this, format);                                                              // 804\n});                                                                                                                  // 805\n                                                                                                                     // 806\naddFormatToken('MMMM', 0, 0, function (format) {                                                                     // 807\n    return this.localeData().months(this, format);                                                                   // 808\n});                                                                                                                  // 809\n                                                                                                                     // 810\n// ALIASES                                                                                                           // 811\n                                                                                                                     // 812\naddUnitAlias('month', 'M');                                                                                          // 813\n                                                                                                                     // 814\n// PRIORITY                                                                                                          // 815\n                                                                                                                     // 816\naddUnitPriority('month', 8);                                                                                         // 817\n                                                                                                                     // 818\n// PARSING                                                                                                           // 819\n                                                                                                                     // 820\naddRegexToken('M',    match1to2);                                                                                    // 821\naddRegexToken('MM',   match1to2, match2);                                                                            // 822\naddRegexToken('MMM',  function (isStrict, locale) {                                                                  // 823\n    return locale.monthsShortRegex(isStrict);                                                                        // 824\n});                                                                                                                  // 825\naddRegexToken('MMMM', function (isStrict, locale) {                                                                  // 826\n    return locale.monthsRegex(isStrict);                                                                             // 827\n});                                                                                                                  // 828\n                                                                                                                     // 829\naddParseToken(['M', 'MM'], function (input, array) {                                                                 // 830\n    array[MONTH] = toInt(input) - 1;                                                                                 // 831\n});                                                                                                                  // 832\n                                                                                                                     // 833\naddParseToken(['MMM', 'MMMM'], function (input, array, config, token) {                                              // 834\n    var month = config._locale.monthsParse(input, token, config._strict);                                            // 835\n    // if we didn't find a month name, mark the date as invalid.                                                     // 836\n    if (month != null) {                                                                                             // 837\n        array[MONTH] = month;                                                                                        // 838\n    } else {                                                                                                         // 839\n        getParsingFlags(config).invalidMonth = input;                                                                // 840\n    }                                                                                                                // 841\n});                                                                                                                  // 842\n                                                                                                                     // 843\n// LOCALES                                                                                                           // 844\n                                                                                                                     // 845\nvar MONTHS_IN_FORMAT = /D[oD]?(\\[[^\\[\\]]*\\]|\\s)+MMMM?/;                                                              // 846\nvar defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');\nfunction localeMonths (m, format) {                                                                                  // 848\n    if (!m) {                                                                                                        // 849\n        return this._months;                                                                                         // 850\n    }                                                                                                                // 851\n    return isArray(this._months) ? this._months[m.month()] :                                                         // 852\n        this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];\n}                                                                                                                    // 854\n                                                                                                                     // 855\nvar defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');                         // 856\nfunction localeMonthsShort (m, format) {                                                                             // 857\n    if (!m) {                                                                                                        // 858\n        return this._monthsShort;                                                                                    // 859\n    }                                                                                                                // 860\n    return isArray(this._monthsShort) ? this._monthsShort[m.month()] :                                               // 861\n        this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];                       // 862\n}                                                                                                                    // 863\n                                                                                                                     // 864\nfunction handleStrictParse(monthName, format, strict) {                                                              // 865\n    var i, ii, mom, llc = monthName.toLocaleLowerCase();                                                             // 866\n    if (!this._monthsParse) {                                                                                        // 867\n        // this is not used                                                                                          // 868\n        this._monthsParse = [];                                                                                      // 869\n        this._longMonthsParse = [];                                                                                  // 870\n        this._shortMonthsParse = [];                                                                                 // 871\n        for (i = 0; i < 12; ++i) {                                                                                   // 872\n            mom = createUTC([2000, i]);                                                                              // 873\n            this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();                               // 874\n            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();                                     // 875\n        }                                                                                                            // 876\n    }                                                                                                                // 877\n                                                                                                                     // 878\n    if (strict) {                                                                                                    // 879\n        if (format === 'MMM') {                                                                                      // 880\n            ii = indexOf$1.call(this._shortMonthsParse, llc);                                                        // 881\n            return ii !== -1 ? ii : null;                                                                            // 882\n        } else {                                                                                                     // 883\n            ii = indexOf$1.call(this._longMonthsParse, llc);                                                         // 884\n            return ii !== -1 ? ii : null;                                                                            // 885\n        }                                                                                                            // 886\n    } else {                                                                                                         // 887\n        if (format === 'MMM') {                                                                                      // 888\n            ii = indexOf$1.call(this._shortMonthsParse, llc);                                                        // 889\n            if (ii !== -1) {                                                                                         // 890\n                return ii;                                                                                           // 891\n            }                                                                                                        // 892\n            ii = indexOf$1.call(this._longMonthsParse, llc);                                                         // 893\n            return ii !== -1 ? ii : null;                                                                            // 894\n        } else {                                                                                                     // 895\n            ii = indexOf$1.call(this._longMonthsParse, llc);                                                         // 896\n            if (ii !== -1) {                                                                                         // 897\n                return ii;                                                                                           // 898\n            }                                                                                                        // 899\n            ii = indexOf$1.call(this._shortMonthsParse, llc);                                                        // 900\n            return ii !== -1 ? ii : null;                                                                            // 901\n        }                                                                                                            // 902\n    }                                                                                                                // 903\n}                                                                                                                    // 904\n                                                                                                                     // 905\nfunction localeMonthsParse (monthName, format, strict) {                                                             // 906\n    var i, mom, regex;                                                                                               // 907\n                                                                                                                     // 908\n    if (this._monthsParseExact) {                                                                                    // 909\n        return handleStrictParse.call(this, monthName, format, strict);                                              // 910\n    }                                                                                                                // 911\n                                                                                                                     // 912\n    if (!this._monthsParse) {                                                                                        // 913\n        this._monthsParse = [];                                                                                      // 914\n        this._longMonthsParse = [];                                                                                  // 915\n        this._shortMonthsParse = [];                                                                                 // 916\n    }                                                                                                                // 917\n                                                                                                                     // 918\n    // TODO: add sorting                                                                                             // 919\n    // Sorting makes sure if one month (or abbr) is a prefix of another                                              // 920\n    // see sorting in computeMonthsParse                                                                             // 921\n    for (i = 0; i < 12; i++) {                                                                                       // 922\n        // make the regex if we don't have it already                                                                // 923\n        mom = createUTC([2000, i]);                                                                                  // 924\n        if (strict && !this._longMonthsParse[i]) {                                                                   // 925\n            this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');           // 926\n            this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');     // 927\n        }                                                                                                            // 928\n        if (!strict && !this._monthsParse[i]) {                                                                      // 929\n            regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');                                   // 930\n            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');                                          // 931\n        }                                                                                                            // 932\n        // test the regex                                                                                            // 933\n        if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {                               // 934\n            return i;                                                                                                // 935\n        } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {                        // 936\n            return i;                                                                                                // 937\n        } else if (!strict && this._monthsParse[i].test(monthName)) {                                                // 938\n            return i;                                                                                                // 939\n        }                                                                                                            // 940\n    }                                                                                                                // 941\n}                                                                                                                    // 942\n                                                                                                                     // 943\n// MOMENTS                                                                                                           // 944\n                                                                                                                     // 945\nfunction setMonth (mom, value) {                                                                                     // 946\n    var dayOfMonth;                                                                                                  // 947\n                                                                                                                     // 948\n    if (!mom.isValid()) {                                                                                            // 949\n        // No op                                                                                                     // 950\n        return mom;                                                                                                  // 951\n    }                                                                                                                // 952\n                                                                                                                     // 953\n    if (typeof value === 'string') {                                                                                 // 954\n        if (/^\\d+$/.test(value)) {                                                                                   // 955\n            value = toInt(value);                                                                                    // 956\n        } else {                                                                                                     // 957\n            value = mom.localeData().monthsParse(value);                                                             // 958\n            // TODO: Another silent failure?                                                                         // 959\n            if (!isNumber(value)) {                                                                                  // 960\n                return mom;                                                                                          // 961\n            }                                                                                                        // 962\n        }                                                                                                            // 963\n    }                                                                                                                // 964\n                                                                                                                     // 965\n    dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));                                               // 966\n    mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);                                          // 967\n    return mom;                                                                                                      // 968\n}                                                                                                                    // 969\n                                                                                                                     // 970\nfunction getSetMonth (value) {                                                                                       // 971\n    if (value != null) {                                                                                             // 972\n        setMonth(this, value);                                                                                       // 973\n        hooks.updateOffset(this, true);                                                                              // 974\n        return this;                                                                                                 // 975\n    } else {                                                                                                         // 976\n        return get(this, 'Month');                                                                                   // 977\n    }                                                                                                                // 978\n}                                                                                                                    // 979\n                                                                                                                     // 980\nfunction getDaysInMonth () {                                                                                         // 981\n    return daysInMonth(this.year(), this.month());                                                                   // 982\n}                                                                                                                    // 983\n                                                                                                                     // 984\nvar defaultMonthsShortRegex = matchWord;                                                                             // 985\nfunction monthsShortRegex (isStrict) {                                                                               // 986\n    if (this._monthsParseExact) {                                                                                    // 987\n        if (!hasOwnProp(this, '_monthsRegex')) {                                                                     // 988\n            computeMonthsParse.call(this);                                                                           // 989\n        }                                                                                                            // 990\n        if (isStrict) {                                                                                              // 991\n            return this._monthsShortStrictRegex;                                                                     // 992\n        } else {                                                                                                     // 993\n            return this._monthsShortRegex;                                                                           // 994\n        }                                                                                                            // 995\n    } else {                                                                                                         // 996\n        if (!hasOwnProp(this, '_monthsShortRegex')) {                                                                // 997\n            this._monthsShortRegex = defaultMonthsShortRegex;                                                        // 998\n        }                                                                                                            // 999\n        return this._monthsShortStrictRegex && isStrict ?                                                            // 1000\n            this._monthsShortStrictRegex : this._monthsShortRegex;                                                   // 1001\n    }                                                                                                                // 1002\n}                                                                                                                    // 1003\n                                                                                                                     // 1004\nvar defaultMonthsRegex = matchWord;                                                                                  // 1005\nfunction monthsRegex (isStrict) {                                                                                    // 1006\n    if (this._monthsParseExact) {                                                                                    // 1007\n        if (!hasOwnProp(this, '_monthsRegex')) {                                                                     // 1008\n            computeMonthsParse.call(this);                                                                           // 1009\n        }                                                                                                            // 1010\n        if (isStrict) {                                                                                              // 1011\n            return this._monthsStrictRegex;                                                                          // 1012\n        } else {                                                                                                     // 1013\n            return this._monthsRegex;                                                                                // 1014\n        }                                                                                                            // 1015\n    } else {                                                                                                         // 1016\n        if (!hasOwnProp(this, '_monthsRegex')) {                                                                     // 1017\n            this._monthsRegex = defaultMonthsRegex;                                                                  // 1018\n        }                                                                                                            // 1019\n        return this._monthsStrictRegex && isStrict ?                                                                 // 1020\n            this._monthsStrictRegex : this._monthsRegex;                                                             // 1021\n    }                                                                                                                // 1022\n}                                                                                                                    // 1023\n                                                                                                                     // 1024\nfunction computeMonthsParse () {                                                                                     // 1025\n    function cmpLenRev(a, b) {                                                                                       // 1026\n        return b.length - a.length;                                                                                  // 1027\n    }                                                                                                                // 1028\n                                                                                                                     // 1029\n    var shortPieces = [], longPieces = [], mixedPieces = [],                                                         // 1030\n        i, mom;                                                                                                      // 1031\n    for (i = 0; i < 12; i++) {                                                                                       // 1032\n        // make the regex if we don't have it already                                                                // 1033\n        mom = createUTC([2000, i]);                                                                                  // 1034\n        shortPieces.push(this.monthsShort(mom, ''));                                                                 // 1035\n        longPieces.push(this.months(mom, ''));                                                                       // 1036\n        mixedPieces.push(this.months(mom, ''));                                                                      // 1037\n        mixedPieces.push(this.monthsShort(mom, ''));                                                                 // 1038\n    }                                                                                                                // 1039\n    // Sorting makes sure if one month (or abbr) is a prefix of another it                                           // 1040\n    // will match the longer piece.                                                                                  // 1041\n    shortPieces.sort(cmpLenRev);                                                                                     // 1042\n    longPieces.sort(cmpLenRev);                                                                                      // 1043\n    mixedPieces.sort(cmpLenRev);                                                                                     // 1044\n    for (i = 0; i < 12; i++) {                                                                                       // 1045\n        shortPieces[i] = regexEscape(shortPieces[i]);                                                                // 1046\n        longPieces[i] = regexEscape(longPieces[i]);                                                                  // 1047\n    }                                                                                                                // 1048\n    for (i = 0; i < 24; i++) {                                                                                       // 1049\n        mixedPieces[i] = regexEscape(mixedPieces[i]);                                                                // 1050\n    }                                                                                                                // 1051\n                                                                                                                     // 1052\n    this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');                                         // 1053\n    this._monthsShortRegex = this._monthsRegex;                                                                      // 1054\n    this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');                                    // 1055\n    this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');                              // 1056\n}                                                                                                                    // 1057\n                                                                                                                     // 1058\n// FORMATTING                                                                                                        // 1059\n                                                                                                                     // 1060\naddFormatToken('Y', 0, 0, function () {                                                                              // 1061\n    var y = this.year();                                                                                             // 1062\n    return y <= 9999 ? '' + y : '+' + y;                                                                             // 1063\n});                                                                                                                  // 1064\n                                                                                                                     // 1065\naddFormatToken(0, ['YY', 2], 0, function () {                                                                        // 1066\n    return this.year() % 100;                                                                                        // 1067\n});                                                                                                                  // 1068\n                                                                                                                     // 1069\naddFormatToken(0, ['YYYY',   4],       0, 'year');                                                                   // 1070\naddFormatToken(0, ['YYYYY',  5],       0, 'year');                                                                   // 1071\naddFormatToken(0, ['YYYYYY', 6, true], 0, 'year');                                                                   // 1072\n                                                                                                                     // 1073\n// ALIASES                                                                                                           // 1074\n                                                                                                                     // 1075\naddUnitAlias('year', 'y');                                                                                           // 1076\n                                                                                                                     // 1077\n// PRIORITIES                                                                                                        // 1078\n                                                                                                                     // 1079\naddUnitPriority('year', 1);                                                                                          // 1080\n                                                                                                                     // 1081\n// PARSING                                                                                                           // 1082\n                                                                                                                     // 1083\naddRegexToken('Y',      matchSigned);                                                                                // 1084\naddRegexToken('YY',     match1to2, match2);                                                                          // 1085\naddRegexToken('YYYY',   match1to4, match4);                                                                          // 1086\naddRegexToken('YYYYY',  match1to6, match6);                                                                          // 1087\naddRegexToken('YYYYYY', match1to6, match6);                                                                          // 1088\n                                                                                                                     // 1089\naddParseToken(['YYYYY', 'YYYYYY'], YEAR);                                                                            // 1090\naddParseToken('YYYY', function (input, array) {                                                                      // 1091\n    array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);                                // 1092\n});                                                                                                                  // 1093\naddParseToken('YY', function (input, array) {                                                                        // 1094\n    array[YEAR] = hooks.parseTwoDigitYear(input);                                                                    // 1095\n});                                                                                                                  // 1096\naddParseToken('Y', function (input, array) {                                                                         // 1097\n    array[YEAR] = parseInt(input, 10);                                                                               // 1098\n});                                                                                                                  // 1099\n                                                                                                                     // 1100\n// HELPERS                                                                                                           // 1101\n                                                                                                                     // 1102\nfunction daysInYear(year) {                                                                                          // 1103\n    return isLeapYear(year) ? 366 : 365;                                                                             // 1104\n}                                                                                                                    // 1105\n                                                                                                                     // 1106\nfunction isLeapYear(year) {                                                                                          // 1107\n    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;                                                 // 1108\n}                                                                                                                    // 1109\n                                                                                                                     // 1110\n// HOOKS                                                                                                             // 1111\n                                                                                                                     // 1112\nhooks.parseTwoDigitYear = function (input) {                                                                         // 1113\n    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);                                                         // 1114\n};                                                                                                                   // 1115\n                                                                                                                     // 1116\n// MOMENTS                                                                                                           // 1117\n                                                                                                                     // 1118\nvar getSetYear = makeGetSet('FullYear', true);                                                                       // 1119\n                                                                                                                     // 1120\nfunction getIsLeapYear () {                                                                                          // 1121\n    return isLeapYear(this.year());                                                                                  // 1122\n}                                                                                                                    // 1123\n                                                                                                                     // 1124\nfunction createDate (y, m, d, h, M, s, ms) {                                                                         // 1125\n    //can't just apply() to create a date:                                                                           // 1126\n    //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply\n    var date = new Date(y, m, d, h, M, s, ms);                                                                       // 1128\n                                                                                                                     // 1129\n    //the date constructor remaps years 0-99 to 1900-1999                                                            // 1130\n    if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {                                                         // 1131\n        date.setFullYear(y);                                                                                         // 1132\n    }                                                                                                                // 1133\n    return date;                                                                                                     // 1134\n}                                                                                                                    // 1135\n                                                                                                                     // 1136\nfunction createUTCDate (y) {                                                                                         // 1137\n    var date = new Date(Date.UTC.apply(null, arguments));                                                            // 1138\n                                                                                                                     // 1139\n    //the Date.UTC function remaps years 0-99 to 1900-1999                                                           // 1140\n    if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {                                                      // 1141\n        date.setUTCFullYear(y);                                                                                      // 1142\n    }                                                                                                                // 1143\n    return date;                                                                                                     // 1144\n}                                                                                                                    // 1145\n                                                                                                                     // 1146\n// start-of-first-week - start-of-year                                                                               // 1147\nfunction firstWeekOffset(year, dow, doy) {                                                                           // 1148\n    var // first-week day -- which january is always in the first week (4 for iso, 1 for other)                      // 1149\n        fwd = 7 + dow - doy,                                                                                         // 1150\n        // first-week day local weekday -- which local weekday is fwd                                                // 1151\n        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;                                             // 1152\n                                                                                                                     // 1153\n    return -fwdlw + fwd - 1;                                                                                         // 1154\n}                                                                                                                    // 1155\n                                                                                                                     // 1156\n//http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday            // 1157\nfunction dayOfYearFromWeeks(year, week, weekday, dow, doy) {                                                         // 1158\n    var localWeekday = (7 + weekday - dow) % 7,                                                                      // 1159\n        weekOffset = firstWeekOffset(year, dow, doy),                                                                // 1160\n        dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,                                                  // 1161\n        resYear, resDayOfYear;                                                                                       // 1162\n                                                                                                                     // 1163\n    if (dayOfYear <= 0) {                                                                                            // 1164\n        resYear = year - 1;                                                                                          // 1165\n        resDayOfYear = daysInYear(resYear) + dayOfYear;                                                              // 1166\n    } else if (dayOfYear > daysInYear(year)) {                                                                       // 1167\n        resYear = year + 1;                                                                                          // 1168\n        resDayOfYear = dayOfYear - daysInYear(year);                                                                 // 1169\n    } else {                                                                                                         // 1170\n        resYear = year;                                                                                              // 1171\n        resDayOfYear = dayOfYear;                                                                                    // 1172\n    }                                                                                                                // 1173\n                                                                                                                     // 1174\n    return {                                                                                                         // 1175\n        year: resYear,                                                                                               // 1176\n        dayOfYear: resDayOfYear                                                                                      // 1177\n    };                                                                                                               // 1178\n}                                                                                                                    // 1179\n                                                                                                                     // 1180\nfunction weekOfYear(mom, dow, doy) {                                                                                 // 1181\n    var weekOffset = firstWeekOffset(mom.year(), dow, doy),                                                          // 1182\n        week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,                                               // 1183\n        resWeek, resYear;                                                                                            // 1184\n                                                                                                                     // 1185\n    if (week < 1) {                                                                                                  // 1186\n        resYear = mom.year() - 1;                                                                                    // 1187\n        resWeek = week + weeksInYear(resYear, dow, doy);                                                             // 1188\n    } else if (week > weeksInYear(mom.year(), dow, doy)) {                                                           // 1189\n        resWeek = week - weeksInYear(mom.year(), dow, doy);                                                          // 1190\n        resYear = mom.year() + 1;                                                                                    // 1191\n    } else {                                                                                                         // 1192\n        resYear = mom.year();                                                                                        // 1193\n        resWeek = week;                                                                                              // 1194\n    }                                                                                                                // 1195\n                                                                                                                     // 1196\n    return {                                                                                                         // 1197\n        week: resWeek,                                                                                               // 1198\n        year: resYear                                                                                                // 1199\n    };                                                                                                               // 1200\n}                                                                                                                    // 1201\n                                                                                                                     // 1202\nfunction weeksInYear(year, dow, doy) {                                                                               // 1203\n    var weekOffset = firstWeekOffset(year, dow, doy),                                                                // 1204\n        weekOffsetNext = firstWeekOffset(year + 1, dow, doy);                                                        // 1205\n    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;                                                     // 1206\n}                                                                                                                    // 1207\n                                                                                                                     // 1208\n// FORMATTING                                                                                                        // 1209\n                                                                                                                     // 1210\naddFormatToken('w', ['ww', 2], 'wo', 'week');                                                                        // 1211\naddFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');                                                                     // 1212\n                                                                                                                     // 1213\n// ALIASES                                                                                                           // 1214\n                                                                                                                     // 1215\naddUnitAlias('week', 'w');                                                                                           // 1216\naddUnitAlias('isoWeek', 'W');                                                                                        // 1217\n                                                                                                                     // 1218\n// PRIORITIES                                                                                                        // 1219\n                                                                                                                     // 1220\naddUnitPriority('week', 5);                                                                                          // 1221\naddUnitPriority('isoWeek', 5);                                                                                       // 1222\n                                                                                                                     // 1223\n// PARSING                                                                                                           // 1224\n                                                                                                                     // 1225\naddRegexToken('w',  match1to2);                                                                                      // 1226\naddRegexToken('ww', match1to2, match2);                                                                              // 1227\naddRegexToken('W',  match1to2);                                                                                      // 1228\naddRegexToken('WW', match1to2, match2);                                                                              // 1229\n                                                                                                                     // 1230\naddWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {                                    // 1231\n    week[token.substr(0, 1)] = toInt(input);                                                                         // 1232\n});                                                                                                                  // 1233\n                                                                                                                     // 1234\n// HELPERS                                                                                                           // 1235\n                                                                                                                     // 1236\n// LOCALES                                                                                                           // 1237\n                                                                                                                     // 1238\nfunction localeWeek (mom) {                                                                                          // 1239\n    return weekOfYear(mom, this._week.dow, this._week.doy).week;                                                     // 1240\n}                                                                                                                    // 1241\n                                                                                                                     // 1242\nvar defaultLocaleWeek = {                                                                                            // 1243\n    dow : 0, // Sunday is the first day of the week.                                                                 // 1244\n    doy : 6  // The week that contains Jan 1st is the first week of the year.                                        // 1245\n};                                                                                                                   // 1246\n                                                                                                                     // 1247\nfunction localeFirstDayOfWeek () {                                                                                   // 1248\n    return this._week.dow;                                                                                           // 1249\n}                                                                                                                    // 1250\n                                                                                                                     // 1251\nfunction localeFirstDayOfYear () {                                                                                   // 1252\n    return this._week.doy;                                                                                           // 1253\n}                                                                                                                    // 1254\n                                                                                                                     // 1255\n// MOMENTS                                                                                                           // 1256\n                                                                                                                     // 1257\nfunction getSetWeek (input) {                                                                                        // 1258\n    var week = this.localeData().week(this);                                                                         // 1259\n    return input == null ? week : this.add((input - week) * 7, 'd');                                                 // 1260\n}                                                                                                                    // 1261\n                                                                                                                     // 1262\nfunction getSetISOWeek (input) {                                                                                     // 1263\n    var week = weekOfYear(this, 1, 4).week;                                                                          // 1264\n    return input == null ? week : this.add((input - week) * 7, 'd');                                                 // 1265\n}                                                                                                                    // 1266\n                                                                                                                     // 1267\n// FORMATTING                                                                                                        // 1268\n                                                                                                                     // 1269\naddFormatToken('d', 0, 'do', 'day');                                                                                 // 1270\n                                                                                                                     // 1271\naddFormatToken('dd', 0, 0, function (format) {                                                                       // 1272\n    return this.localeData().weekdaysMin(this, format);                                                              // 1273\n});                                                                                                                  // 1274\n                                                                                                                     // 1275\naddFormatToken('ddd', 0, 0, function (format) {                                                                      // 1276\n    return this.localeData().weekdaysShort(this, format);                                                            // 1277\n});                                                                                                                  // 1278\n                                                                                                                     // 1279\naddFormatToken('dddd', 0, 0, function (format) {                                                                     // 1280\n    return this.localeData().weekdays(this, format);                                                                 // 1281\n});                                                                                                                  // 1282\n                                                                                                                     // 1283\naddFormatToken('e', 0, 0, 'weekday');                                                                                // 1284\naddFormatToken('E', 0, 0, 'isoWeekday');                                                                             // 1285\n                                                                                                                     // 1286\n// ALIASES                                                                                                           // 1287\n                                                                                                                     // 1288\naddUnitAlias('day', 'd');                                                                                            // 1289\naddUnitAlias('weekday', 'e');                                                                                        // 1290\naddUnitAlias('isoWeekday', 'E');                                                                                     // 1291\n                                                                                                                     // 1292\n// PRIORITY                                                                                                          // 1293\naddUnitPriority('day', 11);                                                                                          // 1294\naddUnitPriority('weekday', 11);                                                                                      // 1295\naddUnitPriority('isoWeekday', 11);                                                                                   // 1296\n                                                                                                                     // 1297\n// PARSING                                                                                                           // 1298\n                                                                                                                     // 1299\naddRegexToken('d',    match1to2);                                                                                    // 1300\naddRegexToken('e',    match1to2);                                                                                    // 1301\naddRegexToken('E',    match1to2);                                                                                    // 1302\naddRegexToken('dd',   function (isStrict, locale) {                                                                  // 1303\n    return locale.weekdaysMinRegex(isStrict);                                                                        // 1304\n});                                                                                                                  // 1305\naddRegexToken('ddd',   function (isStrict, locale) {                                                                 // 1306\n    return locale.weekdaysShortRegex(isStrict);                                                                      // 1307\n});                                                                                                                  // 1308\naddRegexToken('dddd',   function (isStrict, locale) {                                                                // 1309\n    return locale.weekdaysRegex(isStrict);                                                                           // 1310\n});                                                                                                                  // 1311\n                                                                                                                     // 1312\naddWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {                                     // 1313\n    var weekday = config._locale.weekdaysParse(input, token, config._strict);                                        // 1314\n    // if we didn't get a weekday name, mark the date as invalid                                                     // 1315\n    if (weekday != null) {                                                                                           // 1316\n        week.d = weekday;                                                                                            // 1317\n    } else {                                                                                                         // 1318\n        getParsingFlags(config).invalidWeekday = input;                                                              // 1319\n    }                                                                                                                // 1320\n});                                                                                                                  // 1321\n                                                                                                                     // 1322\naddWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {                                           // 1323\n    week[token] = toInt(input);                                                                                      // 1324\n});                                                                                                                  // 1325\n                                                                                                                     // 1326\n// HELPERS                                                                                                           // 1327\n                                                                                                                     // 1328\nfunction parseWeekday(input, locale) {                                                                               // 1329\n    if (typeof input !== 'string') {                                                                                 // 1330\n        return input;                                                                                                // 1331\n    }                                                                                                                // 1332\n                                                                                                                     // 1333\n    if (!isNaN(input)) {                                                                                             // 1334\n        return parseInt(input, 10);                                                                                  // 1335\n    }                                                                                                                // 1336\n                                                                                                                     // 1337\n    input = locale.weekdaysParse(input);                                                                             // 1338\n    if (typeof input === 'number') {                                                                                 // 1339\n        return input;                                                                                                // 1340\n    }                                                                                                                // 1341\n                                                                                                                     // 1342\n    return null;                                                                                                     // 1343\n}                                                                                                                    // 1344\n                                                                                                                     // 1345\nfunction parseIsoWeekday(input, locale) {                                                                            // 1346\n    if (typeof input === 'string') {                                                                                 // 1347\n        return locale.weekdaysParse(input) % 7 || 7;                                                                 // 1348\n    }                                                                                                                // 1349\n    return isNaN(input) ? null : input;                                                                              // 1350\n}                                                                                                                    // 1351\n                                                                                                                     // 1352\n// LOCALES                                                                                                           // 1353\n                                                                                                                     // 1354\nvar defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');                   // 1355\nfunction localeWeekdays (m, format) {                                                                                // 1356\n    if (!m) {                                                                                                        // 1357\n        return this._weekdays;                                                                                       // 1358\n    }                                                                                                                // 1359\n    return isArray(this._weekdays) ? this._weekdays[m.day()] :                                                       // 1360\n        this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];                     // 1361\n}                                                                                                                    // 1362\n                                                                                                                     // 1363\nvar defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');                                           // 1364\nfunction localeWeekdaysShort (m) {                                                                                   // 1365\n    return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;                                                 // 1366\n}                                                                                                                    // 1367\n                                                                                                                     // 1368\nvar defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');                                                    // 1369\nfunction localeWeekdaysMin (m) {                                                                                     // 1370\n    return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;                                                     // 1371\n}                                                                                                                    // 1372\n                                                                                                                     // 1373\nfunction handleStrictParse$1(weekdayName, format, strict) {                                                          // 1374\n    var i, ii, mom, llc = weekdayName.toLocaleLowerCase();                                                           // 1375\n    if (!this._weekdaysParse) {                                                                                      // 1376\n        this._weekdaysParse = [];                                                                                    // 1377\n        this._shortWeekdaysParse = [];                                                                               // 1378\n        this._minWeekdaysParse = [];                                                                                 // 1379\n                                                                                                                     // 1380\n        for (i = 0; i < 7; ++i) {                                                                                    // 1381\n            mom = createUTC([2000, 1]).day(i);                                                                       // 1382\n            this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();                               // 1383\n            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();                           // 1384\n            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();                                     // 1385\n        }                                                                                                            // 1386\n    }                                                                                                                // 1387\n                                                                                                                     // 1388\n    if (strict) {                                                                                                    // 1389\n        if (format === 'dddd') {                                                                                     // 1390\n            ii = indexOf$1.call(this._weekdaysParse, llc);                                                           // 1391\n            return ii !== -1 ? ii : null;                                                                            // 1392\n        } else if (format === 'ddd') {                                                                               // 1393\n            ii = indexOf$1.call(this._shortWeekdaysParse, llc);                                                      // 1394\n            return ii !== -1 ? ii : null;                                                                            // 1395\n        } else {                                                                                                     // 1396\n            ii = indexOf$1.call(this._minWeekdaysParse, llc);                                                        // 1397\n            return ii !== -1 ? ii : null;                                                                            // 1398\n        }                                                                                                            // 1399\n    } else {                                                                                                         // 1400\n        if (format === 'dddd') {                                                                                     // 1401\n            ii = indexOf$1.call(this._weekdaysParse, llc);                                                           // 1402\n            if (ii !== -1) {                                                                                         // 1403\n                return ii;                                                                                           // 1404\n            }                                                                                                        // 1405\n            ii = indexOf$1.call(this._shortWeekdaysParse, llc);                                                      // 1406\n            if (ii !== -1) {                                                                                         // 1407\n                return ii;                                                                                           // 1408\n            }                                                                                                        // 1409\n            ii = indexOf$1.call(this._minWeekdaysParse, llc);                                                        // 1410\n            return ii !== -1 ? ii : null;                                                                            // 1411\n        } else if (format === 'ddd') {                                                                               // 1412\n            ii = indexOf$1.call(this._shortWeekdaysParse, llc);                                                      // 1413\n            if (ii !== -1) {                                                                                         // 1414\n                return ii;                                                                                           // 1415\n            }                                                                                                        // 1416\n            ii = indexOf$1.call(this._weekdaysParse, llc);                                                           // 1417\n            if (ii !== -1) {                                                                                         // 1418\n                return ii;                                                                                           // 1419\n            }                                                                                                        // 1420\n            ii = indexOf$1.call(this._minWeekdaysParse, llc);                                                        // 1421\n            return ii !== -1 ? ii : null;                                                                            // 1422\n        } else {                                                                                                     // 1423\n            ii = indexOf$1.call(this._minWeekdaysParse, llc);                                                        // 1424\n            if (ii !== -1) {                                                                                         // 1425\n                return ii;                                                                                           // 1426\n            }                                                                                                        // 1427\n            ii = indexOf$1.call(this._weekdaysParse, llc);                                                           // 1428\n            if (ii !== -1) {                                                                                         // 1429\n                return ii;                                                                                           // 1430\n            }                                                                                                        // 1431\n            ii = indexOf$1.call(this._shortWeekdaysParse, llc);                                                      // 1432\n            return ii !== -1 ? ii : null;                                                                            // 1433\n        }                                                                                                            // 1434\n    }                                                                                                                // 1435\n}                                                                                                                    // 1436\n                                                                                                                     // 1437\nfunction localeWeekdaysParse (weekdayName, format, strict) {                                                         // 1438\n    var i, mom, regex;                                                                                               // 1439\n                                                                                                                     // 1440\n    if (this._weekdaysParseExact) {                                                                                  // 1441\n        return handleStrictParse$1.call(this, weekdayName, format, strict);                                          // 1442\n    }                                                                                                                // 1443\n                                                                                                                     // 1444\n    if (!this._weekdaysParse) {                                                                                      // 1445\n        this._weekdaysParse = [];                                                                                    // 1446\n        this._minWeekdaysParse = [];                                                                                 // 1447\n        this._shortWeekdaysParse = [];                                                                               // 1448\n        this._fullWeekdaysParse = [];                                                                                // 1449\n    }                                                                                                                // 1450\n                                                                                                                     // 1451\n    for (i = 0; i < 7; i++) {                                                                                        // 1452\n        // make the regex if we don't have it already                                                                // 1453\n                                                                                                                     // 1454\n        mom = createUTC([2000, 1]).day(i);                                                                           // 1455\n        if (strict && !this._fullWeekdaysParse[i]) {                                                                 // 1456\n            this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');    // 1457\n            this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');\n            this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');  // 1459\n        }                                                                                                            // 1460\n        if (!this._weekdaysParse[i]) {                                                                               // 1461\n            regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');\n            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');                                        // 1463\n        }                                                                                                            // 1464\n        // test the regex                                                                                            // 1465\n        if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {                           // 1466\n            return i;                                                                                                // 1467\n        } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {                    // 1468\n            return i;                                                                                                // 1469\n        } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {                       // 1470\n            return i;                                                                                                // 1471\n        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {                                            // 1472\n            return i;                                                                                                // 1473\n        }                                                                                                            // 1474\n    }                                                                                                                // 1475\n}                                                                                                                    // 1476\n                                                                                                                     // 1477\n// MOMENTS                                                                                                           // 1478\n                                                                                                                     // 1479\nfunction getSetDayOfWeek (input) {                                                                                   // 1480\n    if (!this.isValid()) {                                                                                           // 1481\n        return input != null ? this : NaN;                                                                           // 1482\n    }                                                                                                                // 1483\n    var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();                                                  // 1484\n    if (input != null) {                                                                                             // 1485\n        input = parseWeekday(input, this.localeData());                                                              // 1486\n        return this.add(input - day, 'd');                                                                           // 1487\n    } else {                                                                                                         // 1488\n        return day;                                                                                                  // 1489\n    }                                                                                                                // 1490\n}                                                                                                                    // 1491\n                                                                                                                     // 1492\nfunction getSetLocaleDayOfWeek (input) {                                                                             // 1493\n    if (!this.isValid()) {                                                                                           // 1494\n        return input != null ? this : NaN;                                                                           // 1495\n    }                                                                                                                // 1496\n    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;                                                // 1497\n    return input == null ? weekday : this.add(input - weekday, 'd');                                                 // 1498\n}                                                                                                                    // 1499\n                                                                                                                     // 1500\nfunction getSetISODayOfWeek (input) {                                                                                // 1501\n    if (!this.isValid()) {                                                                                           // 1502\n        return input != null ? this : NaN;                                                                           // 1503\n    }                                                                                                                // 1504\n                                                                                                                     // 1505\n    // behaves the same as moment#day except                                                                         // 1506\n    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)                                                // 1507\n    // as a setter, sunday should belong to the previous week.                                                       // 1508\n                                                                                                                     // 1509\n    if (input != null) {                                                                                             // 1510\n        var weekday = parseIsoWeekday(input, this.localeData());                                                     // 1511\n        return this.day(this.day() % 7 ? weekday : weekday - 7);                                                     // 1512\n    } else {                                                                                                         // 1513\n        return this.day() || 7;                                                                                      // 1514\n    }                                                                                                                // 1515\n}                                                                                                                    // 1516\n                                                                                                                     // 1517\nvar defaultWeekdaysRegex = matchWord;                                                                                // 1518\nfunction weekdaysRegex (isStrict) {                                                                                  // 1519\n    if (this._weekdaysParseExact) {                                                                                  // 1520\n        if (!hasOwnProp(this, '_weekdaysRegex')) {                                                                   // 1521\n            computeWeekdaysParse.call(this);                                                                         // 1522\n        }                                                                                                            // 1523\n        if (isStrict) {                                                                                              // 1524\n            return this._weekdaysStrictRegex;                                                                        // 1525\n        } else {                                                                                                     // 1526\n            return this._weekdaysRegex;                                                                              // 1527\n        }                                                                                                            // 1528\n    } else {                                                                                                         // 1529\n        if (!hasOwnProp(this, '_weekdaysRegex')) {                                                                   // 1530\n            this._weekdaysRegex = defaultWeekdaysRegex;                                                              // 1531\n        }                                                                                                            // 1532\n        return this._weekdaysStrictRegex && isStrict ?                                                               // 1533\n            this._weekdaysStrictRegex : this._weekdaysRegex;                                                         // 1534\n    }                                                                                                                // 1535\n}                                                                                                                    // 1536\n                                                                                                                     // 1537\nvar defaultWeekdaysShortRegex = matchWord;                                                                           // 1538\nfunction weekdaysShortRegex (isStrict) {                                                                             // 1539\n    if (this._weekdaysParseExact) {                                                                                  // 1540\n        if (!hasOwnProp(this, '_weekdaysRegex')) {                                                                   // 1541\n            computeWeekdaysParse.call(this);                                                                         // 1542\n        }                                                                                                            // 1543\n        if (isStrict) {                                                                                              // 1544\n            return this._weekdaysShortStrictRegex;                                                                   // 1545\n        } else {                                                                                                     // 1546\n            return this._weekdaysShortRegex;                                                                         // 1547\n        }                                                                                                            // 1548\n    } else {                                                                                                         // 1549\n        if (!hasOwnProp(this, '_weekdaysShortRegex')) {                                                              // 1550\n            this._weekdaysShortRegex = defaultWeekdaysShortRegex;                                                    // 1551\n        }                                                                                                            // 1552\n        return this._weekdaysShortStrictRegex && isStrict ?                                                          // 1553\n            this._weekdaysShortStrictRegex : this._weekdaysShortRegex;                                               // 1554\n    }                                                                                                                // 1555\n}                                                                                                                    // 1556\n                                                                                                                     // 1557\nvar defaultWeekdaysMinRegex = matchWord;                                                                             // 1558\nfunction weekdaysMinRegex (isStrict) {                                                                               // 1559\n    if (this._weekdaysParseExact) {                                                                                  // 1560\n        if (!hasOwnProp(this, '_weekdaysRegex')) {                                                                   // 1561\n            computeWeekdaysParse.call(this);                                                                         // 1562\n        }                                                                                                            // 1563\n        if (isStrict) {                                                                                              // 1564\n            return this._weekdaysMinStrictRegex;                                                                     // 1565\n        } else {                                                                                                     // 1566\n            return this._weekdaysMinRegex;                                                                           // 1567\n        }                                                                                                            // 1568\n    } else {                                                                                                         // 1569\n        if (!hasOwnProp(this, '_weekdaysMinRegex')) {                                                                // 1570\n            this._weekdaysMinRegex = defaultWeekdaysMinRegex;                                                        // 1571\n        }                                                                                                            // 1572\n        return this._weekdaysMinStrictRegex && isStrict ?                                                            // 1573\n            this._weekdaysMinStrictRegex : this._weekdaysMinRegex;                                                   // 1574\n    }                                                                                                                // 1575\n}                                                                                                                    // 1576\n                                                                                                                     // 1577\n                                                                                                                     // 1578\nfunction computeWeekdaysParse () {                                                                                   // 1579\n    function cmpLenRev(a, b) {                                                                                       // 1580\n        return b.length - a.length;                                                                                  // 1581\n    }                                                                                                                // 1582\n                                                                                                                     // 1583\n    var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],                                         // 1584\n        i, mom, minp, shortp, longp;                                                                                 // 1585\n    for (i = 0; i < 7; i++) {                                                                                        // 1586\n        // make the regex if we don't have it already                                                                // 1587\n        mom = createUTC([2000, 1]).day(i);                                                                           // 1588\n        minp = this.weekdaysMin(mom, '');                                                                            // 1589\n        shortp = this.weekdaysShort(mom, '');                                                                        // 1590\n        longp = this.weekdays(mom, '');                                                                              // 1591\n        minPieces.push(minp);                                                                                        // 1592\n        shortPieces.push(shortp);                                                                                    // 1593\n        longPieces.push(longp);                                                                                      // 1594\n        mixedPieces.push(minp);                                                                                      // 1595\n        mixedPieces.push(shortp);                                                                                    // 1596\n        mixedPieces.push(longp);                                                                                     // 1597\n    }                                                                                                                // 1598\n    // Sorting makes sure if one weekday (or abbr) is a prefix of another it                                         // 1599\n    // will match the longer piece.                                                                                  // 1600\n    minPieces.sort(cmpLenRev);                                                                                       // 1601\n    shortPieces.sort(cmpLenRev);                                                                                     // 1602\n    longPieces.sort(cmpLenRev);                                                                                      // 1603\n    mixedPieces.sort(cmpLenRev);                                                                                     // 1604\n    for (i = 0; i < 7; i++) {                                                                                        // 1605\n        shortPieces[i] = regexEscape(shortPieces[i]);                                                                // 1606\n        longPieces[i] = regexEscape(longPieces[i]);                                                                  // 1607\n        mixedPieces[i] = regexEscape(mixedPieces[i]);                                                                // 1608\n    }                                                                                                                // 1609\n                                                                                                                     // 1610\n    this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');                                       // 1611\n    this._weekdaysShortRegex = this._weekdaysRegex;                                                                  // 1612\n    this._weekdaysMinRegex = this._weekdaysRegex;                                                                    // 1613\n                                                                                                                     // 1614\n    this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');                                  // 1615\n    this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');                            // 1616\n    this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');                                // 1617\n}                                                                                                                    // 1618\n                                                                                                                     // 1619\n// FORMATTING                                                                                                        // 1620\n                                                                                                                     // 1621\nfunction hFormat() {                                                                                                 // 1622\n    return this.hours() % 12 || 12;                                                                                  // 1623\n}                                                                                                                    // 1624\n                                                                                                                     // 1625\nfunction kFormat() {                                                                                                 // 1626\n    return this.hours() || 24;                                                                                       // 1627\n}                                                                                                                    // 1628\n                                                                                                                     // 1629\naddFormatToken('H', ['HH', 2], 0, 'hour');                                                                           // 1630\naddFormatToken('h', ['hh', 2], 0, hFormat);                                                                          // 1631\naddFormatToken('k', ['kk', 2], 0, kFormat);                                                                          // 1632\n                                                                                                                     // 1633\naddFormatToken('hmm', 0, 0, function () {                                                                            // 1634\n    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);                                                   // 1635\n});                                                                                                                  // 1636\n                                                                                                                     // 1637\naddFormatToken('hmmss', 0, 0, function () {                                                                          // 1638\n    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +                                                  // 1639\n        zeroFill(this.seconds(), 2);                                                                                 // 1640\n});                                                                                                                  // 1641\n                                                                                                                     // 1642\naddFormatToken('Hmm', 0, 0, function () {                                                                            // 1643\n    return '' + this.hours() + zeroFill(this.minutes(), 2);                                                          // 1644\n});                                                                                                                  // 1645\n                                                                                                                     // 1646\naddFormatToken('Hmmss', 0, 0, function () {                                                                          // 1647\n    return '' + this.hours() + zeroFill(this.minutes(), 2) +                                                         // 1648\n        zeroFill(this.seconds(), 2);                                                                                 // 1649\n});                                                                                                                  // 1650\n                                                                                                                     // 1651\nfunction meridiem (token, lowercase) {                                                                               // 1652\n    addFormatToken(token, 0, 0, function () {                                                                        // 1653\n        return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);                                  // 1654\n    });                                                                                                              // 1655\n}                                                                                                                    // 1656\n                                                                                                                     // 1657\nmeridiem('a', true);                                                                                                 // 1658\nmeridiem('A', false);                                                                                                // 1659\n                                                                                                                     // 1660\n// ALIASES                                                                                                           // 1661\n                                                                                                                     // 1662\naddUnitAlias('hour', 'h');                                                                                           // 1663\n                                                                                                                     // 1664\n// PRIORITY                                                                                                          // 1665\naddUnitPriority('hour', 13);                                                                                         // 1666\n                                                                                                                     // 1667\n// PARSING                                                                                                           // 1668\n                                                                                                                     // 1669\nfunction matchMeridiem (isStrict, locale) {                                                                          // 1670\n    return locale._meridiemParse;                                                                                    // 1671\n}                                                                                                                    // 1672\n                                                                                                                     // 1673\naddRegexToken('a',  matchMeridiem);                                                                                  // 1674\naddRegexToken('A',  matchMeridiem);                                                                                  // 1675\naddRegexToken('H',  match1to2);                                                                                      // 1676\naddRegexToken('h',  match1to2);                                                                                      // 1677\naddRegexToken('HH', match1to2, match2);                                                                              // 1678\naddRegexToken('hh', match1to2, match2);                                                                              // 1679\n                                                                                                                     // 1680\naddRegexToken('hmm', match3to4);                                                                                     // 1681\naddRegexToken('hmmss', match5to6);                                                                                   // 1682\naddRegexToken('Hmm', match3to4);                                                                                     // 1683\naddRegexToken('Hmmss', match5to6);                                                                                   // 1684\n                                                                                                                     // 1685\naddParseToken(['H', 'HH'], HOUR);                                                                                    // 1686\naddParseToken(['a', 'A'], function (input, array, config) {                                                          // 1687\n    config._isPm = config._locale.isPM(input);                                                                       // 1688\n    config._meridiem = input;                                                                                        // 1689\n});                                                                                                                  // 1690\naddParseToken(['h', 'hh'], function (input, array, config) {                                                         // 1691\n    array[HOUR] = toInt(input);                                                                                      // 1692\n    getParsingFlags(config).bigHour = true;                                                                          // 1693\n});                                                                                                                  // 1694\naddParseToken('hmm', function (input, array, config) {                                                               // 1695\n    var pos = input.length - 2;                                                                                      // 1696\n    array[HOUR] = toInt(input.substr(0, pos));                                                                       // 1697\n    array[MINUTE] = toInt(input.substr(pos));                                                                        // 1698\n    getParsingFlags(config).bigHour = true;                                                                          // 1699\n});                                                                                                                  // 1700\naddParseToken('hmmss', function (input, array, config) {                                                             // 1701\n    var pos1 = input.length - 4;                                                                                     // 1702\n    var pos2 = input.length - 2;                                                                                     // 1703\n    array[HOUR] = toInt(input.substr(0, pos1));                                                                      // 1704\n    array[MINUTE] = toInt(input.substr(pos1, 2));                                                                    // 1705\n    array[SECOND] = toInt(input.substr(pos2));                                                                       // 1706\n    getParsingFlags(config).bigHour = true;                                                                          // 1707\n});                                                                                                                  // 1708\naddParseToken('Hmm', function (input, array, config) {                                                               // 1709\n    var pos = input.length - 2;                                                                                      // 1710\n    array[HOUR] = toInt(input.substr(0, pos));                                                                       // 1711\n    array[MINUTE] = toInt(input.substr(pos));                                                                        // 1712\n});                                                                                                                  // 1713\naddParseToken('Hmmss', function (input, array, config) {                                                             // 1714\n    var pos1 = input.length - 4;                                                                                     // 1715\n    var pos2 = input.length - 2;                                                                                     // 1716\n    array[HOUR] = toInt(input.substr(0, pos1));                                                                      // 1717\n    array[MINUTE] = toInt(input.substr(pos1, 2));                                                                    // 1718\n    array[SECOND] = toInt(input.substr(pos2));                                                                       // 1719\n});                                                                                                                  // 1720\n                                                                                                                     // 1721\n// LOCALES                                                                                                           // 1722\n                                                                                                                     // 1723\nfunction localeIsPM (input) {                                                                                        // 1724\n    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays                               // 1725\n    // Using charAt should be more compatible.                                                                       // 1726\n    return ((input + '').toLowerCase().charAt(0) === 'p');                                                           // 1727\n}                                                                                                                    // 1728\n                                                                                                                     // 1729\nvar defaultLocaleMeridiemParse = /[ap]\\.?m?\\.?/i;                                                                    // 1730\nfunction localeMeridiem (hours, minutes, isLower) {                                                                  // 1731\n    if (hours > 11) {                                                                                                // 1732\n        return isLower ? 'pm' : 'PM';                                                                                // 1733\n    } else {                                                                                                         // 1734\n        return isLower ? 'am' : 'AM';                                                                                // 1735\n    }                                                                                                                // 1736\n}                                                                                                                    // 1737\n                                                                                                                     // 1738\n                                                                                                                     // 1739\n// MOMENTS                                                                                                           // 1740\n                                                                                                                     // 1741\n// Setting the hour should keep the time, because the user explicitly                                                // 1742\n// specified which hour he wants. So trying to maintain the same hour (in                                            // 1743\n// a new timezone) makes sense. Adding/subtracting hours does not follow                                             // 1744\n// this rule.                                                                                                        // 1745\nvar getSetHour = makeGetSet('Hours', true);                                                                          // 1746\n                                                                                                                     // 1747\n// months                                                                                                            // 1748\n// week                                                                                                              // 1749\n// weekdays                                                                                                          // 1750\n// meridiem                                                                                                          // 1751\nvar baseConfig = {                                                                                                   // 1752\n    calendar: defaultCalendar,                                                                                       // 1753\n    longDateFormat: defaultLongDateFormat,                                                                           // 1754\n    invalidDate: defaultInvalidDate,                                                                                 // 1755\n    ordinal: defaultOrdinal,                                                                                         // 1756\n    ordinalParse: defaultOrdinalParse,                                                                               // 1757\n    relativeTime: defaultRelativeTime,                                                                               // 1758\n                                                                                                                     // 1759\n    months: defaultLocaleMonths,                                                                                     // 1760\n    monthsShort: defaultLocaleMonthsShort,                                                                           // 1761\n                                                                                                                     // 1762\n    week: defaultLocaleWeek,                                                                                         // 1763\n                                                                                                                     // 1764\n    weekdays: defaultLocaleWeekdays,                                                                                 // 1765\n    weekdaysMin: defaultLocaleWeekdaysMin,                                                                           // 1766\n    weekdaysShort: defaultLocaleWeekdaysShort,                                                                       // 1767\n                                                                                                                     // 1768\n    meridiemParse: defaultLocaleMeridiemParse                                                                        // 1769\n};                                                                                                                   // 1770\n                                                                                                                     // 1771\n// internal storage for locale config files                                                                          // 1772\nvar locales = {};                                                                                                    // 1773\nvar localeFamilies = {};                                                                                             // 1774\nvar globalLocale;                                                                                                    // 1775\n                                                                                                                     // 1776\nfunction normalizeLocale(key) {                                                                                      // 1777\n    return key ? key.toLowerCase().replace('_', '-') : key;                                                          // 1778\n}                                                                                                                    // 1779\n                                                                                                                     // 1780\n// pick the locale from the array                                                                                    // 1781\n// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each                         // 1782\n// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\nfunction chooseLocale(names) {                                                                                       // 1784\n    var i = 0, j, next, locale, split;                                                                               // 1785\n                                                                                                                     // 1786\n    while (i < names.length) {                                                                                       // 1787\n        split = normalizeLocale(names[i]).split('-');                                                                // 1788\n        j = split.length;                                                                                            // 1789\n        next = normalizeLocale(names[i + 1]);                                                                        // 1790\n        next = next ? next.split('-') : null;                                                                        // 1791\n        while (j > 0) {                                                                                              // 1792\n            locale = loadLocale(split.slice(0, j).join('-'));                                                        // 1793\n            if (locale) {                                                                                            // 1794\n                return locale;                                                                                       // 1795\n            }                                                                                                        // 1796\n            if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {                             // 1797\n                //the next array item is better than a shallower substring of this one                               // 1798\n                break;                                                                                               // 1799\n            }                                                                                                        // 1800\n            j--;                                                                                                     // 1801\n        }                                                                                                            // 1802\n        i++;                                                                                                         // 1803\n    }                                                                                                                // 1804\n    return null;                                                                                                     // 1805\n}                                                                                                                    // 1806\n                                                                                                                     // 1807\nfunction loadLocale(name) {                                                                                          // 1808\n    var oldLocale = null;                                                                                            // 1809\n    // TODO: Find a better way to register and load all the locales in Node                                          // 1810\n    if (!locales[name] && (typeof module !== 'undefined') &&                                                         // 1811\n            module && module.exports) {                                                                              // 1812\n        try {                                                                                                        // 1813\n            oldLocale = globalLocale._abbr;                                                                          // 1814\n            require('./locale/' + name);                                                                             // 1815\n            // because defineLocale currently also sets the global locale, we                                        // 1816\n            // want to undo that for lazy loaded locales                                                             // 1817\n            getSetGlobalLocale(oldLocale);                                                                           // 1818\n        } catch (e) { }                                                                                              // 1819\n    }                                                                                                                // 1820\n    return locales[name];                                                                                            // 1821\n}                                                                                                                    // 1822\n                                                                                                                     // 1823\n// This function will load locale and then set the global locale.  If                                                // 1824\n// no arguments are passed in, it will simply return the current global                                              // 1825\n// locale key.                                                                                                       // 1826\nfunction getSetGlobalLocale (key, values) {                                                                          // 1827\n    var data;                                                                                                        // 1828\n    if (key) {                                                                                                       // 1829\n        if (isUndefined(values)) {                                                                                   // 1830\n            data = getLocale(key);                                                                                   // 1831\n        }                                                                                                            // 1832\n        else {                                                                                                       // 1833\n            data = defineLocale(key, values);                                                                        // 1834\n        }                                                                                                            // 1835\n                                                                                                                     // 1836\n        if (data) {                                                                                                  // 1837\n            // moment.duration._locale = moment._locale = data;                                                      // 1838\n            globalLocale = data;                                                                                     // 1839\n        }                                                                                                            // 1840\n    }                                                                                                                // 1841\n                                                                                                                     // 1842\n    return globalLocale._abbr;                                                                                       // 1843\n}                                                                                                                    // 1844\n                                                                                                                     // 1845\nfunction defineLocale (name, config) {                                                                               // 1846\n    if (config !== null) {                                                                                           // 1847\n        var parentConfig = baseConfig;                                                                               // 1848\n        config.abbr = name;                                                                                          // 1849\n        if (locales[name] != null) {                                                                                 // 1850\n            deprecateSimple('defineLocaleOverride',                                                                  // 1851\n                    'use moment.updateLocale(localeName, config) to change ' +                                       // 1852\n                    'an existing locale. moment.defineLocale(localeName, ' +                                         // 1853\n                    'config) should only be used for creating a new locale ' +                                       // 1854\n                    'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');                      // 1855\n            parentConfig = locales[name]._config;                                                                    // 1856\n        } else if (config.parentLocale != null) {                                                                    // 1857\n            if (locales[config.parentLocale] != null) {                                                              // 1858\n                parentConfig = locales[config.parentLocale]._config;                                                 // 1859\n            } else {                                                                                                 // 1860\n                if (!localeFamilies[config.parentLocale]) {                                                          // 1861\n                    localeFamilies[config.parentLocale] = [];                                                        // 1862\n                }                                                                                                    // 1863\n                localeFamilies[config.parentLocale].push({                                                           // 1864\n                    name: name,                                                                                      // 1865\n                    config: config                                                                                   // 1866\n                });                                                                                                  // 1867\n                return null;                                                                                         // 1868\n            }                                                                                                        // 1869\n        }                                                                                                            // 1870\n        locales[name] = new Locale(mergeConfigs(parentConfig, config));                                              // 1871\n                                                                                                                     // 1872\n        if (localeFamilies[name]) {                                                                                  // 1873\n            localeFamilies[name].forEach(function (x) {                                                              // 1874\n                defineLocale(x.name, x.config);                                                                      // 1875\n            });                                                                                                      // 1876\n        }                                                                                                            // 1877\n                                                                                                                     // 1878\n        // backwards compat for now: also set the locale                                                             // 1879\n        // make sure we set the locale AFTER all child locales have been                                             // 1880\n        // created, so we won't end up with the child locale set.                                                    // 1881\n        getSetGlobalLocale(name);                                                                                    // 1882\n                                                                                                                     // 1883\n                                                                                                                     // 1884\n        return locales[name];                                                                                        // 1885\n    } else {                                                                                                         // 1886\n        // useful for testing                                                                                        // 1887\n        delete locales[name];                                                                                        // 1888\n        return null;                                                                                                 // 1889\n    }                                                                                                                // 1890\n}                                                                                                                    // 1891\n                                                                                                                     // 1892\nfunction updateLocale(name, config) {                                                                                // 1893\n    if (config != null) {                                                                                            // 1894\n        var locale, parentConfig = baseConfig;                                                                       // 1895\n        // MERGE                                                                                                     // 1896\n        if (locales[name] != null) {                                                                                 // 1897\n            parentConfig = locales[name]._config;                                                                    // 1898\n        }                                                                                                            // 1899\n        config = mergeConfigs(parentConfig, config);                                                                 // 1900\n        locale = new Locale(config);                                                                                 // 1901\n        locale.parentLocale = locales[name];                                                                         // 1902\n        locales[name] = locale;                                                                                      // 1903\n                                                                                                                     // 1904\n        // backwards compat for now: also set the locale                                                             // 1905\n        getSetGlobalLocale(name);                                                                                    // 1906\n    } else {                                                                                                         // 1907\n        // pass null for config to unupdate, useful for tests                                                        // 1908\n        if (locales[name] != null) {                                                                                 // 1909\n            if (locales[name].parentLocale != null) {                                                                // 1910\n                locales[name] = locales[name].parentLocale;                                                          // 1911\n            } else if (locales[name] != null) {                                                                      // 1912\n                delete locales[name];                                                                                // 1913\n            }                                                                                                        // 1914\n        }                                                                                                            // 1915\n    }                                                                                                                // 1916\n    return locales[name];                                                                                            // 1917\n}                                                                                                                    // 1918\n                                                                                                                     // 1919\n// returns locale data                                                                                               // 1920\nfunction getLocale (key) {                                                                                           // 1921\n    var locale;                                                                                                      // 1922\n                                                                                                                     // 1923\n    if (key && key._locale && key._locale._abbr) {                                                                   // 1924\n        key = key._locale._abbr;                                                                                     // 1925\n    }                                                                                                                // 1926\n                                                                                                                     // 1927\n    if (!key) {                                                                                                      // 1928\n        return globalLocale;                                                                                         // 1929\n    }                                                                                                                // 1930\n                                                                                                                     // 1931\n    if (!isArray(key)) {                                                                                             // 1932\n        //short-circuit everything else                                                                              // 1933\n        locale = loadLocale(key);                                                                                    // 1934\n        if (locale) {                                                                                                // 1935\n            return locale;                                                                                           // 1936\n        }                                                                                                            // 1937\n        key = [key];                                                                                                 // 1938\n    }                                                                                                                // 1939\n                                                                                                                     // 1940\n    return chooseLocale(key);                                                                                        // 1941\n}                                                                                                                    // 1942\n                                                                                                                     // 1943\nfunction listLocales() {                                                                                             // 1944\n    return keys$1(locales);                                                                                          // 1945\n}                                                                                                                    // 1946\n                                                                                                                     // 1947\nfunction checkOverflow (m) {                                                                                         // 1948\n    var overflow;                                                                                                    // 1949\n    var a = m._a;                                                                                                    // 1950\n                                                                                                                     // 1951\n    if (a && getParsingFlags(m).overflow === -2) {                                                                   // 1952\n        overflow =                                                                                                   // 1953\n            a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :                                                     // 1954\n            a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :                           // 1955\n            a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :\n            a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :                                                    // 1957\n            a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :                                                    // 1958\n            a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :                                               // 1959\n            -1;                                                                                                      // 1960\n                                                                                                                     // 1961\n        if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {                         // 1962\n            overflow = DATE;                                                                                         // 1963\n        }                                                                                                            // 1964\n        if (getParsingFlags(m)._overflowWeeks && overflow === -1) {                                                  // 1965\n            overflow = WEEK;                                                                                         // 1966\n        }                                                                                                            // 1967\n        if (getParsingFlags(m)._overflowWeekday && overflow === -1) {                                                // 1968\n            overflow = WEEKDAY;                                                                                      // 1969\n        }                                                                                                            // 1970\n                                                                                                                     // 1971\n        getParsingFlags(m).overflow = overflow;                                                                      // 1972\n    }                                                                                                                // 1973\n                                                                                                                     // 1974\n    return m;                                                                                                        // 1975\n}                                                                                                                    // 1976\n                                                                                                                     // 1977\n// iso 8601 regex                                                                                                    // 1978\n// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)         // 1979\nvar extendedIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\nvar basicIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\n                                                                                                                     // 1982\nvar tzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/;                                                                               // 1983\n                                                                                                                     // 1984\nvar isoDates = [                                                                                                     // 1985\n    ['YYYYYY-MM-DD', /[+-]\\d{6}-\\d\\d-\\d\\d/],                                                                         // 1986\n    ['YYYY-MM-DD', /\\d{4}-\\d\\d-\\d\\d/],                                                                               // 1987\n    ['GGGG-[W]WW-E', /\\d{4}-W\\d\\d-\\d/],                                                                              // 1988\n    ['GGGG-[W]WW', /\\d{4}-W\\d\\d/, false],                                                                            // 1989\n    ['YYYY-DDD', /\\d{4}-\\d{3}/],                                                                                     // 1990\n    ['YYYY-MM', /\\d{4}-\\d\\d/, false],                                                                                // 1991\n    ['YYYYYYMMDD', /[+-]\\d{10}/],                                                                                    // 1992\n    ['YYYYMMDD', /\\d{8}/],                                                                                           // 1993\n    // YYYYMM is NOT allowed by the standard                                                                         // 1994\n    ['GGGG[W]WWE', /\\d{4}W\\d{3}/],                                                                                   // 1995\n    ['GGGG[W]WW', /\\d{4}W\\d{2}/, false],                                                                             // 1996\n    ['YYYYDDD', /\\d{7}/]                                                                                             // 1997\n];                                                                                                                   // 1998\n                                                                                                                     // 1999\n// iso time formats and regexes                                                                                      // 2000\nvar isoTimes = [                                                                                                     // 2001\n    ['HH:mm:ss.SSSS', /\\d\\d:\\d\\d:\\d\\d\\.\\d+/],                                                                        // 2002\n    ['HH:mm:ss,SSSS', /\\d\\d:\\d\\d:\\d\\d,\\d+/],                                                                         // 2003\n    ['HH:mm:ss', /\\d\\d:\\d\\d:\\d\\d/],                                                                                  // 2004\n    ['HH:mm', /\\d\\d:\\d\\d/],                                                                                          // 2005\n    ['HHmmss.SSSS', /\\d\\d\\d\\d\\d\\d\\.\\d+/],                                                                            // 2006\n    ['HHmmss,SSSS', /\\d\\d\\d\\d\\d\\d,\\d+/],                                                                             // 2007\n    ['HHmmss', /\\d\\d\\d\\d\\d\\d/],                                                                                      // 2008\n    ['HHmm', /\\d\\d\\d\\d/],                                                                                            // 2009\n    ['HH', /\\d\\d/]                                                                                                   // 2010\n];                                                                                                                   // 2011\n                                                                                                                     // 2012\nvar aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i;                                                                         // 2013\n                                                                                                                     // 2014\n// date from iso format                                                                                              // 2015\nfunction configFromISO(config) {                                                                                     // 2016\n    var i, l,                                                                                                        // 2017\n        string = config._i,                                                                                          // 2018\n        match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),                                         // 2019\n        allowTime, dateFormat, timeFormat, tzFormat;                                                                 // 2020\n                                                                                                                     // 2021\n    if (match) {                                                                                                     // 2022\n        getParsingFlags(config).iso = true;                                                                          // 2023\n                                                                                                                     // 2024\n        for (i = 0, l = isoDates.length; i < l; i++) {                                                               // 2025\n            if (isoDates[i][1].exec(match[1])) {                                                                     // 2026\n                dateFormat = isoDates[i][0];                                                                         // 2027\n                allowTime = isoDates[i][2] !== false;                                                                // 2028\n                break;                                                                                               // 2029\n            }                                                                                                        // 2030\n        }                                                                                                            // 2031\n        if (dateFormat == null) {                                                                                    // 2032\n            config._isValid = false;                                                                                 // 2033\n            return;                                                                                                  // 2034\n        }                                                                                                            // 2035\n        if (match[3]) {                                                                                              // 2036\n            for (i = 0, l = isoTimes.length; i < l; i++) {                                                           // 2037\n                if (isoTimes[i][1].exec(match[3])) {                                                                 // 2038\n                    // match[2] should be 'T' or space                                                               // 2039\n                    timeFormat = (match[2] || ' ') + isoTimes[i][0];                                                 // 2040\n                    break;                                                                                           // 2041\n                }                                                                                                    // 2042\n            }                                                                                                        // 2043\n            if (timeFormat == null) {                                                                                // 2044\n                config._isValid = false;                                                                             // 2045\n                return;                                                                                              // 2046\n            }                                                                                                        // 2047\n        }                                                                                                            // 2048\n        if (!allowTime && timeFormat != null) {                                                                      // 2049\n            config._isValid = false;                                                                                 // 2050\n            return;                                                                                                  // 2051\n        }                                                                                                            // 2052\n        if (match[4]) {                                                                                              // 2053\n            if (tzRegex.exec(match[4])) {                                                                            // 2054\n                tzFormat = 'Z';                                                                                      // 2055\n            } else {                                                                                                 // 2056\n                config._isValid = false;                                                                             // 2057\n                return;                                                                                              // 2058\n            }                                                                                                        // 2059\n        }                                                                                                            // 2060\n        config._f = dateFormat + (timeFormat || '') + (tzFormat || '');                                              // 2061\n        configFromStringAndFormat(config);                                                                           // 2062\n    } else {                                                                                                         // 2063\n        config._isValid = false;                                                                                     // 2064\n    }                                                                                                                // 2065\n}                                                                                                                    // 2066\n                                                                                                                     // 2067\n// date from iso format or fallback                                                                                  // 2068\nfunction configFromString(config) {                                                                                  // 2069\n    var matched = aspNetJsonRegex.exec(config._i);                                                                   // 2070\n                                                                                                                     // 2071\n    if (matched !== null) {                                                                                          // 2072\n        config._d = new Date(+matched[1]);                                                                           // 2073\n        return;                                                                                                      // 2074\n    }                                                                                                                // 2075\n                                                                                                                     // 2076\n    configFromISO(config);                                                                                           // 2077\n    if (config._isValid === false) {                                                                                 // 2078\n        delete config._isValid;                                                                                      // 2079\n        hooks.createFromInputFallback(config);                                                                       // 2080\n    }                                                                                                                // 2081\n}                                                                                                                    // 2082\n                                                                                                                     // 2083\nhooks.createFromInputFallback = deprecate(                                                                           // 2084\n    'value provided is not in a recognized ISO format. moment construction falls back to js Date(), ' +              // 2085\n    'which is not reliable across all browsers and versions. Non ISO date formats are ' +                            // 2086\n    'discouraged and will be removed in an upcoming major release. Please refer to ' +                               // 2087\n    'http://momentjs.com/guides/#/warnings/js-date/ for more info.',                                                 // 2088\n    function (config) {                                                                                              // 2089\n        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));                                            // 2090\n    }                                                                                                                // 2091\n);                                                                                                                   // 2092\n                                                                                                                     // 2093\n// Pick the first defined of two or three arguments.                                                                 // 2094\nfunction defaults(a, b, c) {                                                                                         // 2095\n    if (a != null) {                                                                                                 // 2096\n        return a;                                                                                                    // 2097\n    }                                                                                                                // 2098\n    if (b != null) {                                                                                                 // 2099\n        return b;                                                                                                    // 2100\n    }                                                                                                                // 2101\n    return c;                                                                                                        // 2102\n}                                                                                                                    // 2103\n                                                                                                                     // 2104\nfunction currentDateArray(config) {                                                                                  // 2105\n    // hooks is actually the exported moment object                                                                  // 2106\n    var nowValue = new Date(hooks.now());                                                                            // 2107\n    if (config._useUTC) {                                                                                            // 2108\n        return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];                           // 2109\n    }                                                                                                                // 2110\n    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];                                        // 2111\n}                                                                                                                    // 2112\n                                                                                                                     // 2113\n// convert an array to a date.                                                                                       // 2114\n// the array should mirror the parameters below                                                                      // 2115\n// note: all values past the year are optional and will default to the lowest possible value.                        // 2116\n// [year, month, day , hour, minute, second, millisecond]                                                            // 2117\nfunction configFromArray (config) {                                                                                  // 2118\n    var i, date, input = [], currentDate, yearToUse;                                                                 // 2119\n                                                                                                                     // 2120\n    if (config._d) {                                                                                                 // 2121\n        return;                                                                                                      // 2122\n    }                                                                                                                // 2123\n                                                                                                                     // 2124\n    currentDate = currentDateArray(config);                                                                          // 2125\n                                                                                                                     // 2126\n    //compute day of the year from weeks and weekdays                                                                // 2127\n    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {                                          // 2128\n        dayOfYearFromWeekInfo(config);                                                                               // 2129\n    }                                                                                                                // 2130\n                                                                                                                     // 2131\n    //if the day of the year is set, figure out what it is                                                           // 2132\n    if (config._dayOfYear) {                                                                                         // 2133\n        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);                                                    // 2134\n                                                                                                                     // 2135\n        if (config._dayOfYear > daysInYear(yearToUse)) {                                                             // 2136\n            getParsingFlags(config)._overflowDayOfYear = true;                                                       // 2137\n        }                                                                                                            // 2138\n                                                                                                                     // 2139\n        date = createUTCDate(yearToUse, 0, config._dayOfYear);                                                       // 2140\n        config._a[MONTH] = date.getUTCMonth();                                                                       // 2141\n        config._a[DATE] = date.getUTCDate();                                                                         // 2142\n    }                                                                                                                // 2143\n                                                                                                                     // 2144\n    // Default to current date.                                                                                      // 2145\n    // * if no year, month, day of month are given, default to today                                                 // 2146\n    // * if day of month is given, default month and year                                                            // 2147\n    // * if month is given, default only year                                                                        // 2148\n    // * if year is given, don't default anything                                                                    // 2149\n    for (i = 0; i < 3 && config._a[i] == null; ++i) {                                                                // 2150\n        config._a[i] = input[i] = currentDate[i];                                                                    // 2151\n    }                                                                                                                // 2152\n                                                                                                                     // 2153\n    // Zero out whatever was not defaulted, including time                                                           // 2154\n    for (; i < 7; i++) {                                                                                             // 2155\n        config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];                         // 2156\n    }                                                                                                                // 2157\n                                                                                                                     // 2158\n    // Check for 24:00:00.000                                                                                        // 2159\n    if (config._a[HOUR] === 24 &&                                                                                    // 2160\n            config._a[MINUTE] === 0 &&                                                                               // 2161\n            config._a[SECOND] === 0 &&                                                                               // 2162\n            config._a[MILLISECOND] === 0) {                                                                          // 2163\n        config._nextDay = true;                                                                                      // 2164\n        config._a[HOUR] = 0;                                                                                         // 2165\n    }                                                                                                                // 2166\n                                                                                                                     // 2167\n    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);                                    // 2168\n    // Apply timezone offset from input. The actual utcOffset can be changed                                         // 2169\n    // with parseZone.                                                                                               // 2170\n    if (config._tzm != null) {                                                                                       // 2171\n        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);                                            // 2172\n    }                                                                                                                // 2173\n                                                                                                                     // 2174\n    if (config._nextDay) {                                                                                           // 2175\n        config._a[HOUR] = 24;                                                                                        // 2176\n    }                                                                                                                // 2177\n}                                                                                                                    // 2178\n                                                                                                                     // 2179\nfunction dayOfYearFromWeekInfo(config) {                                                                             // 2180\n    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;                                                 // 2181\n                                                                                                                     // 2182\n    w = config._w;                                                                                                   // 2183\n    if (w.GG != null || w.W != null || w.E != null) {                                                                // 2184\n        dow = 1;                                                                                                     // 2185\n        doy = 4;                                                                                                     // 2186\n                                                                                                                     // 2187\n        // TODO: We need to take the current isoWeekYear, but that depends on                                        // 2188\n        // how we interpret now (local, utc, fixed offset). So create                                                // 2189\n        // a now version of current config (take local/utc/offset flags, and                                         // 2190\n        // create now).                                                                                              // 2191\n        weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);                            // 2192\n        week = defaults(w.W, 1);                                                                                     // 2193\n        weekday = defaults(w.E, 1);                                                                                  // 2194\n        if (weekday < 1 || weekday > 7) {                                                                            // 2195\n            weekdayOverflow = true;                                                                                  // 2196\n        }                                                                                                            // 2197\n    } else {                                                                                                         // 2198\n        dow = config._locale._week.dow;                                                                              // 2199\n        doy = config._locale._week.doy;                                                                              // 2200\n                                                                                                                     // 2201\n        var curWeek = weekOfYear(createLocal(), dow, doy);                                                           // 2202\n                                                                                                                     // 2203\n        weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);                                                    // 2204\n                                                                                                                     // 2205\n        // Default to current week.                                                                                  // 2206\n        week = defaults(w.w, curWeek.week);                                                                          // 2207\n                                                                                                                     // 2208\n        if (w.d != null) {                                                                                           // 2209\n            // weekday -- low day numbers are considered next week                                                   // 2210\n            weekday = w.d;                                                                                           // 2211\n            if (weekday < 0 || weekday > 6) {                                                                        // 2212\n                weekdayOverflow = true;                                                                              // 2213\n            }                                                                                                        // 2214\n        } else if (w.e != null) {                                                                                    // 2215\n            // local weekday -- counting starts from begining of week                                                // 2216\n            weekday = w.e + dow;                                                                                     // 2217\n            if (w.e < 0 || w.e > 6) {                                                                                // 2218\n                weekdayOverflow = true;                                                                              // 2219\n            }                                                                                                        // 2220\n        } else {                                                                                                     // 2221\n            // default to begining of week                                                                           // 2222\n            weekday = dow;                                                                                           // 2223\n        }                                                                                                            // 2224\n    }                                                                                                                // 2225\n    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {                                                        // 2226\n        getParsingFlags(config)._overflowWeeks = true;                                                               // 2227\n    } else if (weekdayOverflow != null) {                                                                            // 2228\n        getParsingFlags(config)._overflowWeekday = true;                                                             // 2229\n    } else {                                                                                                         // 2230\n        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);                                                // 2231\n        config._a[YEAR] = temp.year;                                                                                 // 2232\n        config._dayOfYear = temp.dayOfYear;                                                                          // 2233\n    }                                                                                                                // 2234\n}                                                                                                                    // 2235\n                                                                                                                     // 2236\n// constant that refers to the ISO standard                                                                          // 2237\nhooks.ISO_8601 = function () {};                                                                                     // 2238\n                                                                                                                     // 2239\n// date from string and format string                                                                                // 2240\nfunction configFromStringAndFormat(config) {                                                                         // 2241\n    // TODO: Move this to another part of the creation flow to prevent circular deps                                 // 2242\n    if (config._f === hooks.ISO_8601) {                                                                              // 2243\n        configFromISO(config);                                                                                       // 2244\n        return;                                                                                                      // 2245\n    }                                                                                                                // 2246\n                                                                                                                     // 2247\n    config._a = [];                                                                                                  // 2248\n    getParsingFlags(config).empty = true;                                                                            // 2249\n                                                                                                                     // 2250\n    // This array is used to make a Date, either with `new Date` or `Date.UTC`                                       // 2251\n    var string = '' + config._i,                                                                                     // 2252\n        i, parsedInput, tokens, token, skipped,                                                                      // 2253\n        stringLength = string.length,                                                                                // 2254\n        totalParsedInputLength = 0;                                                                                  // 2255\n                                                                                                                     // 2256\n    tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];                                  // 2257\n                                                                                                                     // 2258\n    for (i = 0; i < tokens.length; i++) {                                                                            // 2259\n        token = tokens[i];                                                                                           // 2260\n        parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];                                 // 2261\n        // console.log('token', token, 'parsedInput', parsedInput,                                                   // 2262\n        //         'regex', getParseRegexForToken(token, config));                                                   // 2263\n        if (parsedInput) {                                                                                           // 2264\n            skipped = string.substr(0, string.indexOf(parsedInput));                                                 // 2265\n            if (skipped.length > 0) {                                                                                // 2266\n                getParsingFlags(config).unusedInput.push(skipped);                                                   // 2267\n            }                                                                                                        // 2268\n            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);                                 // 2269\n            totalParsedInputLength += parsedInput.length;                                                            // 2270\n        }                                                                                                            // 2271\n        // don't parse if it's not a known token                                                                     // 2272\n        if (formatTokenFunctions[token]) {                                                                           // 2273\n            if (parsedInput) {                                                                                       // 2274\n                getParsingFlags(config).empty = false;                                                               // 2275\n            }                                                                                                        // 2276\n            else {                                                                                                   // 2277\n                getParsingFlags(config).unusedTokens.push(token);                                                    // 2278\n            }                                                                                                        // 2279\n            addTimeToArrayFromToken(token, parsedInput, config);                                                     // 2280\n        }                                                                                                            // 2281\n        else if (config._strict && !parsedInput) {                                                                   // 2282\n            getParsingFlags(config).unusedTokens.push(token);                                                        // 2283\n        }                                                                                                            // 2284\n    }                                                                                                                // 2285\n                                                                                                                     // 2286\n    // add remaining unparsed input length to the string                                                             // 2287\n    getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;                                   // 2288\n    if (string.length > 0) {                                                                                         // 2289\n        getParsingFlags(config).unusedInput.push(string);                                                            // 2290\n    }                                                                                                                // 2291\n                                                                                                                     // 2292\n    // clear _12h flag if hour is <= 12                                                                              // 2293\n    if (config._a[HOUR] <= 12 &&                                                                                     // 2294\n        getParsingFlags(config).bigHour === true &&                                                                  // 2295\n        config._a[HOUR] > 0) {                                                                                       // 2296\n        getParsingFlags(config).bigHour = undefined;                                                                 // 2297\n    }                                                                                                                // 2298\n                                                                                                                     // 2299\n    getParsingFlags(config).parsedDateParts = config._a.slice(0);                                                    // 2300\n    getParsingFlags(config).meridiem = config._meridiem;                                                             // 2301\n    // handle meridiem                                                                                               // 2302\n    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);                            // 2303\n                                                                                                                     // 2304\n    configFromArray(config);                                                                                         // 2305\n    checkOverflow(config);                                                                                           // 2306\n}                                                                                                                    // 2307\n                                                                                                                     // 2308\n                                                                                                                     // 2309\nfunction meridiemFixWrap (locale, hour, meridiem) {                                                                  // 2310\n    var isPm;                                                                                                        // 2311\n                                                                                                                     // 2312\n    if (meridiem == null) {                                                                                          // 2313\n        // nothing to do                                                                                             // 2314\n        return hour;                                                                                                 // 2315\n    }                                                                                                                // 2316\n    if (locale.meridiemHour != null) {                                                                               // 2317\n        return locale.meridiemHour(hour, meridiem);                                                                  // 2318\n    } else if (locale.isPM != null) {                                                                                // 2319\n        // Fallback                                                                                                  // 2320\n        isPm = locale.isPM(meridiem);                                                                                // 2321\n        if (isPm && hour < 12) {                                                                                     // 2322\n            hour += 12;                                                                                              // 2323\n        }                                                                                                            // 2324\n        if (!isPm && hour === 12) {                                                                                  // 2325\n            hour = 0;                                                                                                // 2326\n        }                                                                                                            // 2327\n        return hour;                                                                                                 // 2328\n    } else {                                                                                                         // 2329\n        // this is not supposed to happen                                                                            // 2330\n        return hour;                                                                                                 // 2331\n    }                                                                                                                // 2332\n}                                                                                                                    // 2333\n                                                                                                                     // 2334\n// date from string and array of format strings                                                                      // 2335\nfunction configFromStringAndArray(config) {                                                                          // 2336\n    var tempConfig,                                                                                                  // 2337\n        bestMoment,                                                                                                  // 2338\n                                                                                                                     // 2339\n        scoreToBeat,                                                                                                 // 2340\n        i,                                                                                                           // 2341\n        currentScore;                                                                                                // 2342\n                                                                                                                     // 2343\n    if (config._f.length === 0) {                                                                                    // 2344\n        getParsingFlags(config).invalidFormat = true;                                                                // 2345\n        config._d = new Date(NaN);                                                                                   // 2346\n        return;                                                                                                      // 2347\n    }                                                                                                                // 2348\n                                                                                                                     // 2349\n    for (i = 0; i < config._f.length; i++) {                                                                         // 2350\n        currentScore = 0;                                                                                            // 2351\n        tempConfig = copyConfig({}, config);                                                                         // 2352\n        if (config._useUTC != null) {                                                                                // 2353\n            tempConfig._useUTC = config._useUTC;                                                                     // 2354\n        }                                                                                                            // 2355\n        tempConfig._f = config._f[i];                                                                                // 2356\n        configFromStringAndFormat(tempConfig);                                                                       // 2357\n                                                                                                                     // 2358\n        if (!isValid(tempConfig)) {                                                                                  // 2359\n            continue;                                                                                                // 2360\n        }                                                                                                            // 2361\n                                                                                                                     // 2362\n        // if there is any input that was not parsed add a penalty for that format                                   // 2363\n        currentScore += getParsingFlags(tempConfig).charsLeftOver;                                                   // 2364\n                                                                                                                     // 2365\n        //or tokens                                                                                                  // 2366\n        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;                                        // 2367\n                                                                                                                     // 2368\n        getParsingFlags(tempConfig).score = currentScore;                                                            // 2369\n                                                                                                                     // 2370\n        if (scoreToBeat == null || currentScore < scoreToBeat) {                                                     // 2371\n            scoreToBeat = currentScore;                                                                              // 2372\n            bestMoment = tempConfig;                                                                                 // 2373\n        }                                                                                                            // 2374\n    }                                                                                                                // 2375\n                                                                                                                     // 2376\n    extend(config, bestMoment || tempConfig);                                                                        // 2377\n}                                                                                                                    // 2378\n                                                                                                                     // 2379\nfunction configFromObject(config) {                                                                                  // 2380\n    if (config._d) {                                                                                                 // 2381\n        return;                                                                                                      // 2382\n    }                                                                                                                // 2383\n                                                                                                                     // 2384\n    var i = normalizeObjectUnits(config._i);                                                                         // 2385\n    config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {  // 2386\n        return obj && parseInt(obj, 10);                                                                             // 2387\n    });                                                                                                              // 2388\n                                                                                                                     // 2389\n    configFromArray(config);                                                                                         // 2390\n}                                                                                                                    // 2391\n                                                                                                                     // 2392\nfunction createFromConfig (config) {                                                                                 // 2393\n    var res = new Moment(checkOverflow(prepareConfig(config)));                                                      // 2394\n    if (res._nextDay) {                                                                                              // 2395\n        // Adding is smart enough around DST                                                                         // 2396\n        res.add(1, 'd');                                                                                             // 2397\n        res._nextDay = undefined;                                                                                    // 2398\n    }                                                                                                                // 2399\n                                                                                                                     // 2400\n    return res;                                                                                                      // 2401\n}                                                                                                                    // 2402\n                                                                                                                     // 2403\nfunction prepareConfig (config) {                                                                                    // 2404\n    var input = config._i,                                                                                           // 2405\n        format = config._f;                                                                                          // 2406\n                                                                                                                     // 2407\n    config._locale = config._locale || getLocale(config._l);                                                         // 2408\n                                                                                                                     // 2409\n    if (input === null || (format === undefined && input === '')) {                                                  // 2410\n        return createInvalid({nullInput: true});                                                                     // 2411\n    }                                                                                                                // 2412\n                                                                                                                     // 2413\n    if (typeof input === 'string') {                                                                                 // 2414\n        config._i = input = config._locale.preparse(input);                                                          // 2415\n    }                                                                                                                // 2416\n                                                                                                                     // 2417\n    if (isMoment(input)) {                                                                                           // 2418\n        return new Moment(checkOverflow(input));                                                                     // 2419\n    } else if (isDate(input)) {                                                                                      // 2420\n        config._d = input;                                                                                           // 2421\n    } else if (isArray(format)) {                                                                                    // 2422\n        configFromStringAndArray(config);                                                                            // 2423\n    } else if (format) {                                                                                             // 2424\n        configFromStringAndFormat(config);                                                                           // 2425\n    }  else {                                                                                                        // 2426\n        configFromInput(config);                                                                                     // 2427\n    }                                                                                                                // 2428\n                                                                                                                     // 2429\n    if (!isValid(config)) {                                                                                          // 2430\n        config._d = null;                                                                                            // 2431\n    }                                                                                                                // 2432\n                                                                                                                     // 2433\n    return config;                                                                                                   // 2434\n}                                                                                                                    // 2435\n                                                                                                                     // 2436\nfunction configFromInput(config) {                                                                                   // 2437\n    var input = config._i;                                                                                           // 2438\n    if (input === undefined) {                                                                                       // 2439\n        config._d = new Date(hooks.now());                                                                           // 2440\n    } else if (isDate(input)) {                                                                                      // 2441\n        config._d = new Date(input.valueOf());                                                                       // 2442\n    } else if (typeof input === 'string') {                                                                          // 2443\n        configFromString(config);                                                                                    // 2444\n    } else if (isArray(input)) {                                                                                     // 2445\n        config._a = map(input.slice(0), function (obj) {                                                             // 2446\n            return parseInt(obj, 10);                                                                                // 2447\n        });                                                                                                          // 2448\n        configFromArray(config);                                                                                     // 2449\n    } else if (typeof(input) === 'object') {                                                                         // 2450\n        configFromObject(config);                                                                                    // 2451\n    } else if (isNumber(input)) {                                                                                    // 2452\n        // from milliseconds                                                                                         // 2453\n        config._d = new Date(input);                                                                                 // 2454\n    } else {                                                                                                         // 2455\n        hooks.createFromInputFallback(config);                                                                       // 2456\n    }                                                                                                                // 2457\n}                                                                                                                    // 2458\n                                                                                                                     // 2459\nfunction createLocalOrUTC (input, format, locale, strict, isUTC) {                                                   // 2460\n    var c = {};                                                                                                      // 2461\n                                                                                                                     // 2462\n    if (locale === true || locale === false) {                                                                       // 2463\n        strict = locale;                                                                                             // 2464\n        locale = undefined;                                                                                          // 2465\n    }                                                                                                                // 2466\n                                                                                                                     // 2467\n    if ((isObject(input) && isObjectEmpty(input)) ||                                                                 // 2468\n            (isArray(input) && input.length === 0)) {                                                                // 2469\n        input = undefined;                                                                                           // 2470\n    }                                                                                                                // 2471\n    // object construction must be done this way.                                                                    // 2472\n    // https://github.com/moment/moment/issues/1423                                                                  // 2473\n    c._isAMomentObject = true;                                                                                       // 2474\n    c._useUTC = c._isUTC = isUTC;                                                                                    // 2475\n    c._l = locale;                                                                                                   // 2476\n    c._i = input;                                                                                                    // 2477\n    c._f = format;                                                                                                   // 2478\n    c._strict = strict;                                                                                              // 2479\n                                                                                                                     // 2480\n    return createFromConfig(c);                                                                                      // 2481\n}                                                                                                                    // 2482\n                                                                                                                     // 2483\nfunction createLocal (input, format, locale, strict) {                                                               // 2484\n    return createLocalOrUTC(input, format, locale, strict, false);                                                   // 2485\n}                                                                                                                    // 2486\n                                                                                                                     // 2487\nvar prototypeMin = deprecate(                                                                                        // 2488\n    'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',            // 2489\n    function () {                                                                                                    // 2490\n        var other = createLocal.apply(null, arguments);                                                              // 2491\n        if (this.isValid() && other.isValid()) {                                                                     // 2492\n            return other < this ? this : other;                                                                      // 2493\n        } else {                                                                                                     // 2494\n            return createInvalid();                                                                                  // 2495\n        }                                                                                                            // 2496\n    }                                                                                                                // 2497\n);                                                                                                                   // 2498\n                                                                                                                     // 2499\nvar prototypeMax = deprecate(                                                                                        // 2500\n    'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',            // 2501\n    function () {                                                                                                    // 2502\n        var other = createLocal.apply(null, arguments);                                                              // 2503\n        if (this.isValid() && other.isValid()) {                                                                     // 2504\n            return other > this ? this : other;                                                                      // 2505\n        } else {                                                                                                     // 2506\n            return createInvalid();                                                                                  // 2507\n        }                                                                                                            // 2508\n    }                                                                                                                // 2509\n);                                                                                                                   // 2510\n                                                                                                                     // 2511\n// Pick a moment m from moments so that m[fn](other) is true for all                                                 // 2512\n// other. This relies on the function fn to be transitive.                                                           // 2513\n//                                                                                                                   // 2514\n// moments should either be an array of moment objects or an array, whose                                            // 2515\n// first element is an array of moment objects.                                                                      // 2516\nfunction pickBy(fn, moments) {                                                                                       // 2517\n    var res, i;                                                                                                      // 2518\n    if (moments.length === 1 && isArray(moments[0])) {                                                               // 2519\n        moments = moments[0];                                                                                        // 2520\n    }                                                                                                                // 2521\n    if (!moments.length) {                                                                                           // 2522\n        return createLocal();                                                                                        // 2523\n    }                                                                                                                // 2524\n    res = moments[0];                                                                                                // 2525\n    for (i = 1; i < moments.length; ++i) {                                                                           // 2526\n        if (!moments[i].isValid() || moments[i][fn](res)) {                                                          // 2527\n            res = moments[i];                                                                                        // 2528\n        }                                                                                                            // 2529\n    }                                                                                                                // 2530\n    return res;                                                                                                      // 2531\n}                                                                                                                    // 2532\n                                                                                                                     // 2533\n// TODO: Use [].sort instead?                                                                                        // 2534\nfunction min () {                                                                                                    // 2535\n    var args = [].slice.call(arguments, 0);                                                                          // 2536\n                                                                                                                     // 2537\n    return pickBy('isBefore', args);                                                                                 // 2538\n}                                                                                                                    // 2539\n                                                                                                                     // 2540\nfunction max () {                                                                                                    // 2541\n    var args = [].slice.call(arguments, 0);                                                                          // 2542\n                                                                                                                     // 2543\n    return pickBy('isAfter', args);                                                                                  // 2544\n}                                                                                                                    // 2545\n                                                                                                                     // 2546\nvar now = function () {                                                                                              // 2547\n    return Date.now ? Date.now() : +(new Date());                                                                    // 2548\n};                                                                                                                   // 2549\n                                                                                                                     // 2550\nfunction Duration (duration) {                                                                                       // 2551\n    var normalizedInput = normalizeObjectUnits(duration),                                                            // 2552\n        years = normalizedInput.year || 0,                                                                           // 2553\n        quarters = normalizedInput.quarter || 0,                                                                     // 2554\n        months = normalizedInput.month || 0,                                                                         // 2555\n        weeks = normalizedInput.week || 0,                                                                           // 2556\n        days = normalizedInput.day || 0,                                                                             // 2557\n        hours = normalizedInput.hour || 0,                                                                           // 2558\n        minutes = normalizedInput.minute || 0,                                                                       // 2559\n        seconds = normalizedInput.second || 0,                                                                       // 2560\n        milliseconds = normalizedInput.millisecond || 0;                                                             // 2561\n                                                                                                                     // 2562\n    // representation for dateAddRemove                                                                              // 2563\n    this._milliseconds = +milliseconds +                                                                             // 2564\n        seconds * 1e3 + // 1000                                                                                      // 2565\n        minutes * 6e4 + // 1000 * 60                                                                                 // 2566\n        hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978\n    // Because of dateAddRemove treats 24 hours as different from a                                                  // 2568\n    // day when working around DST, we need to store them separately                                                 // 2569\n    this._days = +days +                                                                                             // 2570\n        weeks * 7;                                                                                                   // 2571\n    // It is impossible translate months into days without knowing                                                   // 2572\n    // which months you are are talking about, so we have to store                                                   // 2573\n    // it separately.                                                                                                // 2574\n    this._months = +months +                                                                                         // 2575\n        quarters * 3 +                                                                                               // 2576\n        years * 12;                                                                                                  // 2577\n                                                                                                                     // 2578\n    this._data = {};                                                                                                 // 2579\n                                                                                                                     // 2580\n    this._locale = getLocale();                                                                                      // 2581\n                                                                                                                     // 2582\n    this._bubble();                                                                                                  // 2583\n}                                                                                                                    // 2584\n                                                                                                                     // 2585\nfunction isDuration (obj) {                                                                                          // 2586\n    return obj instanceof Duration;                                                                                  // 2587\n}                                                                                                                    // 2588\n                                                                                                                     // 2589\nfunction absRound (number) {                                                                                         // 2590\n    if (number < 0) {                                                                                                // 2591\n        return Math.round(-1 * number) * -1;                                                                         // 2592\n    } else {                                                                                                         // 2593\n        return Math.round(number);                                                                                   // 2594\n    }                                                                                                                // 2595\n}                                                                                                                    // 2596\n                                                                                                                     // 2597\n// FORMATTING                                                                                                        // 2598\n                                                                                                                     // 2599\nfunction offset (token, separator) {                                                                                 // 2600\n    addFormatToken(token, 0, 0, function () {                                                                        // 2601\n        var offset = this.utcOffset();                                                                               // 2602\n        var sign = '+';                                                                                              // 2603\n        if (offset < 0) {                                                                                            // 2604\n            offset = -offset;                                                                                        // 2605\n            sign = '-';                                                                                              // 2606\n        }                                                                                                            // 2607\n        return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);                       // 2608\n    });                                                                                                              // 2609\n}                                                                                                                    // 2610\n                                                                                                                     // 2611\noffset('Z', ':');                                                                                                    // 2612\noffset('ZZ', '');                                                                                                    // 2613\n                                                                                                                     // 2614\n// PARSING                                                                                                           // 2615\n                                                                                                                     // 2616\naddRegexToken('Z',  matchShortOffset);                                                                               // 2617\naddRegexToken('ZZ', matchShortOffset);                                                                               // 2618\naddParseToken(['Z', 'ZZ'], function (input, array, config) {                                                         // 2619\n    config._useUTC = true;                                                                                           // 2620\n    config._tzm = offsetFromString(matchShortOffset, input);                                                         // 2621\n});                                                                                                                  // 2622\n                                                                                                                     // 2623\n// HELPERS                                                                                                           // 2624\n                                                                                                                     // 2625\n// timezone chunker                                                                                                  // 2626\n// '+10:00' > ['10',  '00']                                                                                          // 2627\n// '-1530'  > ['-15', '30']                                                                                          // 2628\nvar chunkOffset = /([\\+\\-]|\\d\\d)/gi;                                                                                 // 2629\n                                                                                                                     // 2630\nfunction offsetFromString(matcher, string) {                                                                         // 2631\n    var matches = (string || '').match(matcher);                                                                     // 2632\n                                                                                                                     // 2633\n    if (matches === null) {                                                                                          // 2634\n        return null;                                                                                                 // 2635\n    }                                                                                                                // 2636\n                                                                                                                     // 2637\n    var chunk   = matches[matches.length - 1] || [];                                                                 // 2638\n    var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];                                                    // 2639\n    var minutes = +(parts[1] * 60) + toInt(parts[2]);                                                                // 2640\n                                                                                                                     // 2641\n    return minutes === 0 ?                                                                                           // 2642\n      0 :                                                                                                            // 2643\n      parts[0] === '+' ? minutes : -minutes;                                                                         // 2644\n}                                                                                                                    // 2645\n                                                                                                                     // 2646\n// Return a moment from input, that is local/utc/zone equivalent to model.                                           // 2647\nfunction cloneWithOffset(input, model) {                                                                             // 2648\n    var res, diff;                                                                                                   // 2649\n    if (model._isUTC) {                                                                                              // 2650\n        res = model.clone();                                                                                         // 2651\n        diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();  // 2652\n        // Use low-level api, because this fn is low-level api.                                                      // 2653\n        res._d.setTime(res._d.valueOf() + diff);                                                                     // 2654\n        hooks.updateOffset(res, false);                                                                              // 2655\n        return res;                                                                                                  // 2656\n    } else {                                                                                                         // 2657\n        return createLocal(input).local();                                                                           // 2658\n    }                                                                                                                // 2659\n}                                                                                                                    // 2660\n                                                                                                                     // 2661\nfunction getDateOffset (m) {                                                                                         // 2662\n    // On Firefox.24 Date#getTimezoneOffset returns a floating point.                                                // 2663\n    // https://github.com/moment/moment/pull/1871                                                                    // 2664\n    return -Math.round(m._d.getTimezoneOffset() / 15) * 15;                                                          // 2665\n}                                                                                                                    // 2666\n                                                                                                                     // 2667\n// HOOKS                                                                                                             // 2668\n                                                                                                                     // 2669\n// This function will be called whenever a moment is mutated.                                                        // 2670\n// It is intended to keep the offset in sync with the timezone.                                                      // 2671\nhooks.updateOffset = function () {};                                                                                 // 2672\n                                                                                                                     // 2673\n// MOMENTS                                                                                                           // 2674\n                                                                                                                     // 2675\n// keepLocalTime = true means only change the timezone, without                                                      // 2676\n// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->                                              // 2677\n// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset                                               // 2678\n// +0200, so we adjust the time as needed, to be valid.                                                              // 2679\n//                                                                                                                   // 2680\n// Keeping the time actually adds/subtracts (one hour)                                                               // 2681\n// from the actual represented time. That is why we call updateOffset                                                // 2682\n// a second time. In case it wants us to change the offset again                                                     // 2683\n// _changeInProgress == true case, then we have to adjust, because                                                   // 2684\n// there is no such time in the given timezone.                                                                      // 2685\nfunction getSetOffset (input, keepLocalTime) {                                                                       // 2686\n    var offset = this._offset || 0,                                                                                  // 2687\n        localAdjust;                                                                                                 // 2688\n    if (!this.isValid()) {                                                                                           // 2689\n        return input != null ? this : NaN;                                                                           // 2690\n    }                                                                                                                // 2691\n    if (input != null) {                                                                                             // 2692\n        if (typeof input === 'string') {                                                                             // 2693\n            input = offsetFromString(matchShortOffset, input);                                                       // 2694\n            if (input === null) {                                                                                    // 2695\n                return this;                                                                                         // 2696\n            }                                                                                                        // 2697\n        } else if (Math.abs(input) < 16) {                                                                           // 2698\n            input = input * 60;                                                                                      // 2699\n        }                                                                                                            // 2700\n        if (!this._isUTC && keepLocalTime) {                                                                         // 2701\n            localAdjust = getDateOffset(this);                                                                       // 2702\n        }                                                                                                            // 2703\n        this._offset = input;                                                                                        // 2704\n        this._isUTC = true;                                                                                          // 2705\n        if (localAdjust != null) {                                                                                   // 2706\n            this.add(localAdjust, 'm');                                                                              // 2707\n        }                                                                                                            // 2708\n        if (offset !== input) {                                                                                      // 2709\n            if (!keepLocalTime || this._changeInProgress) {                                                          // 2710\n                addSubtract(this, createDuration(input - offset, 'm'), 1, false);                                    // 2711\n            } else if (!this._changeInProgress) {                                                                    // 2712\n                this._changeInProgress = true;                                                                       // 2713\n                hooks.updateOffset(this, true);                                                                      // 2714\n                this._changeInProgress = null;                                                                       // 2715\n            }                                                                                                        // 2716\n        }                                                                                                            // 2717\n        return this;                                                                                                 // 2718\n    } else {                                                                                                         // 2719\n        return this._isUTC ? offset : getDateOffset(this);                                                           // 2720\n    }                                                                                                                // 2721\n}                                                                                                                    // 2722\n                                                                                                                     // 2723\nfunction getSetZone (input, keepLocalTime) {                                                                         // 2724\n    if (input != null) {                                                                                             // 2725\n        if (typeof input !== 'string') {                                                                             // 2726\n            input = -input;                                                                                          // 2727\n        }                                                                                                            // 2728\n                                                                                                                     // 2729\n        this.utcOffset(input, keepLocalTime);                                                                        // 2730\n                                                                                                                     // 2731\n        return this;                                                                                                 // 2732\n    } else {                                                                                                         // 2733\n        return -this.utcOffset();                                                                                    // 2734\n    }                                                                                                                // 2735\n}                                                                                                                    // 2736\n                                                                                                                     // 2737\nfunction setOffsetToUTC (keepLocalTime) {                                                                            // 2738\n    return this.utcOffset(0, keepLocalTime);                                                                         // 2739\n}                                                                                                                    // 2740\n                                                                                                                     // 2741\nfunction setOffsetToLocal (keepLocalTime) {                                                                          // 2742\n    if (this._isUTC) {                                                                                               // 2743\n        this.utcOffset(0, keepLocalTime);                                                                            // 2744\n        this._isUTC = false;                                                                                         // 2745\n                                                                                                                     // 2746\n        if (keepLocalTime) {                                                                                         // 2747\n            this.subtract(getDateOffset(this), 'm');                                                                 // 2748\n        }                                                                                                            // 2749\n    }                                                                                                                // 2750\n    return this;                                                                                                     // 2751\n}                                                                                                                    // 2752\n                                                                                                                     // 2753\nfunction setOffsetToParsedOffset () {                                                                                // 2754\n    if (this._tzm != null) {                                                                                         // 2755\n        this.utcOffset(this._tzm);                                                                                   // 2756\n    } else if (typeof this._i === 'string') {                                                                        // 2757\n        var tZone = offsetFromString(matchOffset, this._i);                                                          // 2758\n        if (tZone != null) {                                                                                         // 2759\n            this.utcOffset(tZone);                                                                                   // 2760\n        }                                                                                                            // 2761\n        else {                                                                                                       // 2762\n            this.utcOffset(0, true);                                                                                 // 2763\n        }                                                                                                            // 2764\n    }                                                                                                                // 2765\n    return this;                                                                                                     // 2766\n}                                                                                                                    // 2767\n                                                                                                                     // 2768\nfunction hasAlignedHourOffset (input) {                                                                              // 2769\n    if (!this.isValid()) {                                                                                           // 2770\n        return false;                                                                                                // 2771\n    }                                                                                                                // 2772\n    input = input ? createLocal(input).utcOffset() : 0;                                                              // 2773\n                                                                                                                     // 2774\n    return (this.utcOffset() - input) % 60 === 0;                                                                    // 2775\n}                                                                                                                    // 2776\n                                                                                                                     // 2777\nfunction isDaylightSavingTime () {                                                                                   // 2778\n    return (                                                                                                         // 2779\n        this.utcOffset() > this.clone().month(0).utcOffset() ||                                                      // 2780\n        this.utcOffset() > this.clone().month(5).utcOffset()                                                         // 2781\n    );                                                                                                               // 2782\n}                                                                                                                    // 2783\n                                                                                                                     // 2784\nfunction isDaylightSavingTimeShifted () {                                                                            // 2785\n    if (!isUndefined(this._isDSTShifted)) {                                                                          // 2786\n        return this._isDSTShifted;                                                                                   // 2787\n    }                                                                                                                // 2788\n                                                                                                                     // 2789\n    var c = {};                                                                                                      // 2790\n                                                                                                                     // 2791\n    copyConfig(c, this);                                                                                             // 2792\n    c = prepareConfig(c);                                                                                            // 2793\n                                                                                                                     // 2794\n    if (c._a) {                                                                                                      // 2795\n        var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);                                                  // 2796\n        this._isDSTShifted = this.isValid() &&                                                                       // 2797\n            compareArrays(c._a, other.toArray()) > 0;                                                                // 2798\n    } else {                                                                                                         // 2799\n        this._isDSTShifted = false;                                                                                  // 2800\n    }                                                                                                                // 2801\n                                                                                                                     // 2802\n    return this._isDSTShifted;                                                                                       // 2803\n}                                                                                                                    // 2804\n                                                                                                                     // 2805\nfunction isLocal () {                                                                                                // 2806\n    return this.isValid() ? !this._isUTC : false;                                                                    // 2807\n}                                                                                                                    // 2808\n                                                                                                                     // 2809\nfunction isUtcOffset () {                                                                                            // 2810\n    return this.isValid() ? this._isUTC : false;                                                                     // 2811\n}                                                                                                                    // 2812\n                                                                                                                     // 2813\nfunction isUtc () {                                                                                                  // 2814\n    return this.isValid() ? this._isUTC && this._offset === 0 : false;                                               // 2815\n}                                                                                                                    // 2816\n                                                                                                                     // 2817\n// ASP.NET json date format regex                                                                                    // 2818\nvar aspNetRegex = /^(\\-)?(?:(\\d*)[. ])?(\\d+)\\:(\\d+)(?:\\:(\\d+)(\\.\\d*)?)?$/;                                           // 2819\n                                                                                                                     // 2820\n// from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html                         // 2821\n// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere                                         // 2822\n// and further modified to allow for strings containing both week and day                                            // 2823\nvar isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;\n                                                                                                                     // 2825\nfunction createDuration (input, key) {                                                                               // 2826\n    var duration = input,                                                                                            // 2827\n        // matching against regexp is expensive, do it on demand                                                     // 2828\n        match = null,                                                                                                // 2829\n        sign,                                                                                                        // 2830\n        ret,                                                                                                         // 2831\n        diffRes;                                                                                                     // 2832\n                                                                                                                     // 2833\n    if (isDuration(input)) {                                                                                         // 2834\n        duration = {                                                                                                 // 2835\n            ms : input._milliseconds,                                                                                // 2836\n            d  : input._days,                                                                                        // 2837\n            M  : input._months                                                                                       // 2838\n        };                                                                                                           // 2839\n    } else if (isNumber(input)) {                                                                                    // 2840\n        duration = {};                                                                                               // 2841\n        if (key) {                                                                                                   // 2842\n            duration[key] = input;                                                                                   // 2843\n        } else {                                                                                                     // 2844\n            duration.milliseconds = input;                                                                           // 2845\n        }                                                                                                            // 2846\n    } else if (!!(match = aspNetRegex.exec(input))) {                                                                // 2847\n        sign = (match[1] === '-') ? -1 : 1;                                                                          // 2848\n        duration = {                                                                                                 // 2849\n            y  : 0,                                                                                                  // 2850\n            d  : toInt(match[DATE])                         * sign,                                                  // 2851\n            h  : toInt(match[HOUR])                         * sign,                                                  // 2852\n            m  : toInt(match[MINUTE])                       * sign,                                                  // 2853\n            s  : toInt(match[SECOND])                       * sign,                                                  // 2854\n            ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match\n        };                                                                                                           // 2856\n    } else if (!!(match = isoRegex.exec(input))) {                                                                   // 2857\n        sign = (match[1] === '-') ? -1 : 1;                                                                          // 2858\n        duration = {                                                                                                 // 2859\n            y : parseIso(match[2], sign),                                                                            // 2860\n            M : parseIso(match[3], sign),                                                                            // 2861\n            w : parseIso(match[4], sign),                                                                            // 2862\n            d : parseIso(match[5], sign),                                                                            // 2863\n            h : parseIso(match[6], sign),                                                                            // 2864\n            m : parseIso(match[7], sign),                                                                            // 2865\n            s : parseIso(match[8], sign)                                                                             // 2866\n        };                                                                                                           // 2867\n    } else if (duration == null) {// checks for null or undefined                                                    // 2868\n        duration = {};                                                                                               // 2869\n    } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {                           // 2870\n        diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));                           // 2871\n                                                                                                                     // 2872\n        duration = {};                                                                                               // 2873\n        duration.ms = diffRes.milliseconds;                                                                          // 2874\n        duration.M = diffRes.months;                                                                                 // 2875\n    }                                                                                                                // 2876\n                                                                                                                     // 2877\n    ret = new Duration(duration);                                                                                    // 2878\n                                                                                                                     // 2879\n    if (isDuration(input) && hasOwnProp(input, '_locale')) {                                                         // 2880\n        ret._locale = input._locale;                                                                                 // 2881\n    }                                                                                                                // 2882\n                                                                                                                     // 2883\n    return ret;                                                                                                      // 2884\n}                                                                                                                    // 2885\n                                                                                                                     // 2886\ncreateDuration.fn = Duration.prototype;                                                                              // 2887\n                                                                                                                     // 2888\nfunction parseIso (inp, sign) {                                                                                      // 2889\n    // We'd normally use ~~inp for this, but unfortunately it also                                                   // 2890\n    // converts floats to ints.                                                                                      // 2891\n    // inp may be undefined, so careful calling replace on it.                                                       // 2892\n    var res = inp && parseFloat(inp.replace(',', '.'));                                                              // 2893\n    // apply sign while we're at it                                                                                  // 2894\n    return (isNaN(res) ? 0 : res) * sign;                                                                            // 2895\n}                                                                                                                    // 2896\n                                                                                                                     // 2897\nfunction positiveMomentsDifference(base, other) {                                                                    // 2898\n    var res = {milliseconds: 0, months: 0};                                                                          // 2899\n                                                                                                                     // 2900\n    res.months = other.month() - base.month() +                                                                      // 2901\n        (other.year() - base.year()) * 12;                                                                           // 2902\n    if (base.clone().add(res.months, 'M').isAfter(other)) {                                                          // 2903\n        --res.months;                                                                                                // 2904\n    }                                                                                                                // 2905\n                                                                                                                     // 2906\n    res.milliseconds = +other - +(base.clone().add(res.months, 'M'));                                                // 2907\n                                                                                                                     // 2908\n    return res;                                                                                                      // 2909\n}                                                                                                                    // 2910\n                                                                                                                     // 2911\nfunction momentsDifference(base, other) {                                                                            // 2912\n    var res;                                                                                                         // 2913\n    if (!(base.isValid() && other.isValid())) {                                                                      // 2914\n        return {milliseconds: 0, months: 0};                                                                         // 2915\n    }                                                                                                                // 2916\n                                                                                                                     // 2917\n    other = cloneWithOffset(other, base);                                                                            // 2918\n    if (base.isBefore(other)) {                                                                                      // 2919\n        res = positiveMomentsDifference(base, other);                                                                // 2920\n    } else {                                                                                                         // 2921\n        res = positiveMomentsDifference(other, base);                                                                // 2922\n        res.milliseconds = -res.milliseconds;                                                                        // 2923\n        res.months = -res.months;                                                                                    // 2924\n    }                                                                                                                // 2925\n                                                                                                                     // 2926\n    return res;                                                                                                      // 2927\n}                                                                                                                    // 2928\n                                                                                                                     // 2929\n// TODO: remove 'name' arg after deprecation is removed                                                              // 2930\nfunction createAdder(direction, name) {                                                                              // 2931\n    return function (val, period) {                                                                                  // 2932\n        var dur, tmp;                                                                                                // 2933\n        //invert the arguments, but complain about it                                                                // 2934\n        if (period !== null && !isNaN(+period)) {                                                                    // 2935\n            deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +\n            'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');                         // 2937\n            tmp = val; val = period; period = tmp;                                                                   // 2938\n        }                                                                                                            // 2939\n                                                                                                                     // 2940\n        val = typeof val === 'string' ? +val : val;                                                                  // 2941\n        dur = createDuration(val, period);                                                                           // 2942\n        addSubtract(this, dur, direction);                                                                           // 2943\n        return this;                                                                                                 // 2944\n    };                                                                                                               // 2945\n}                                                                                                                    // 2946\n                                                                                                                     // 2947\nfunction addSubtract (mom, duration, isAdding, updateOffset) {                                                       // 2948\n    var milliseconds = duration._milliseconds,                                                                       // 2949\n        days = absRound(duration._days),                                                                             // 2950\n        months = absRound(duration._months);                                                                         // 2951\n                                                                                                                     // 2952\n    if (!mom.isValid()) {                                                                                            // 2953\n        // No op                                                                                                     // 2954\n        return;                                                                                                      // 2955\n    }                                                                                                                // 2956\n                                                                                                                     // 2957\n    updateOffset = updateOffset == null ? true : updateOffset;                                                       // 2958\n                                                                                                                     // 2959\n    if (milliseconds) {                                                                                              // 2960\n        mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);                                                  // 2961\n    }                                                                                                                // 2962\n    if (days) {                                                                                                      // 2963\n        set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);                                                      // 2964\n    }                                                                                                                // 2965\n    if (months) {                                                                                                    // 2966\n        setMonth(mom, get(mom, 'Month') + months * isAdding);                                                        // 2967\n    }                                                                                                                // 2968\n    if (updateOffset) {                                                                                              // 2969\n        hooks.updateOffset(mom, days || months);                                                                     // 2970\n    }                                                                                                                // 2971\n}                                                                                                                    // 2972\n                                                                                                                     // 2973\nvar add      = createAdder(1, 'add');                                                                                // 2974\nvar subtract = createAdder(-1, 'subtract');                                                                          // 2975\n                                                                                                                     // 2976\nfunction getCalendarFormat(myMoment, now) {                                                                          // 2977\n    var diff = myMoment.diff(now, 'days', true);                                                                     // 2978\n    return diff < -6 ? 'sameElse' :                                                                                  // 2979\n            diff < -1 ? 'lastWeek' :                                                                                 // 2980\n            diff < 0 ? 'lastDay' :                                                                                   // 2981\n            diff < 1 ? 'sameDay' :                                                                                   // 2982\n            diff < 2 ? 'nextDay' :                                                                                   // 2983\n            diff < 7 ? 'nextWeek' : 'sameElse';                                                                      // 2984\n}                                                                                                                    // 2985\n                                                                                                                     // 2986\nfunction calendar$1 (time, formats) {                                                                                // 2987\n    // We want to compare the start of today, vs this.                                                               // 2988\n    // Getting start-of-today depends on whether we're local/utc/offset or not.                                      // 2989\n    var now = time || createLocal(),                                                                                 // 2990\n        sod = cloneWithOffset(now, this).startOf('day'),                                                             // 2991\n        format = hooks.calendarFormat(this, sod) || 'sameElse';                                                      // 2992\n                                                                                                                     // 2993\n    var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);       // 2994\n                                                                                                                     // 2995\n    return this.format(output || this.localeData().calendar(format, this, createLocal(now)));                        // 2996\n}                                                                                                                    // 2997\n                                                                                                                     // 2998\nfunction clone () {                                                                                                  // 2999\n    return new Moment(this);                                                                                         // 3000\n}                                                                                                                    // 3001\n                                                                                                                     // 3002\nfunction isAfter (input, units) {                                                                                    // 3003\n    var localInput = isMoment(input) ? input : createLocal(input);                                                   // 3004\n    if (!(this.isValid() && localInput.isValid())) {                                                                 // 3005\n        return false;                                                                                                // 3006\n    }                                                                                                                // 3007\n    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');                                             // 3008\n    if (units === 'millisecond') {                                                                                   // 3009\n        return this.valueOf() > localInput.valueOf();                                                                // 3010\n    } else {                                                                                                         // 3011\n        return localInput.valueOf() < this.clone().startOf(units).valueOf();                                         // 3012\n    }                                                                                                                // 3013\n}                                                                                                                    // 3014\n                                                                                                                     // 3015\nfunction isBefore (input, units) {                                                                                   // 3016\n    var localInput = isMoment(input) ? input : createLocal(input);                                                   // 3017\n    if (!(this.isValid() && localInput.isValid())) {                                                                 // 3018\n        return false;                                                                                                // 3019\n    }                                                                                                                // 3020\n    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');                                             // 3021\n    if (units === 'millisecond') {                                                                                   // 3022\n        return this.valueOf() < localInput.valueOf();                                                                // 3023\n    } else {                                                                                                         // 3024\n        return this.clone().endOf(units).valueOf() < localInput.valueOf();                                           // 3025\n    }                                                                                                                // 3026\n}                                                                                                                    // 3027\n                                                                                                                     // 3028\nfunction isBetween (from, to, units, inclusivity) {                                                                  // 3029\n    inclusivity = inclusivity || '()';                                                                               // 3030\n    return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&                     // 3031\n        (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));                              // 3032\n}                                                                                                                    // 3033\n                                                                                                                     // 3034\nfunction isSame (input, units) {                                                                                     // 3035\n    var localInput = isMoment(input) ? input : createLocal(input),                                                   // 3036\n        inputMs;                                                                                                     // 3037\n    if (!(this.isValid() && localInput.isValid())) {                                                                 // 3038\n        return false;                                                                                                // 3039\n    }                                                                                                                // 3040\n    units = normalizeUnits(units || 'millisecond');                                                                  // 3041\n    if (units === 'millisecond') {                                                                                   // 3042\n        return this.valueOf() === localInput.valueOf();                                                              // 3043\n    } else {                                                                                                         // 3044\n        inputMs = localInput.valueOf();                                                                              // 3045\n        return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();   // 3046\n    }                                                                                                                // 3047\n}                                                                                                                    // 3048\n                                                                                                                     // 3049\nfunction isSameOrAfter (input, units) {                                                                              // 3050\n    return this.isSame(input, units) || this.isAfter(input,units);                                                   // 3051\n}                                                                                                                    // 3052\n                                                                                                                     // 3053\nfunction isSameOrBefore (input, units) {                                                                             // 3054\n    return this.isSame(input, units) || this.isBefore(input,units);                                                  // 3055\n}                                                                                                                    // 3056\n                                                                                                                     // 3057\nfunction diff (input, units, asFloat) {                                                                              // 3058\n    var that,                                                                                                        // 3059\n        zoneDelta,                                                                                                   // 3060\n        delta, output;                                                                                               // 3061\n                                                                                                                     // 3062\n    if (!this.isValid()) {                                                                                           // 3063\n        return NaN;                                                                                                  // 3064\n    }                                                                                                                // 3065\n                                                                                                                     // 3066\n    that = cloneWithOffset(input, this);                                                                             // 3067\n                                                                                                                     // 3068\n    if (!that.isValid()) {                                                                                           // 3069\n        return NaN;                                                                                                  // 3070\n    }                                                                                                                // 3071\n                                                                                                                     // 3072\n    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;                                                         // 3073\n                                                                                                                     // 3074\n    units = normalizeUnits(units);                                                                                   // 3075\n                                                                                                                     // 3076\n    if (units === 'year' || units === 'month' || units === 'quarter') {                                              // 3077\n        output = monthDiff(this, that);                                                                              // 3078\n        if (units === 'quarter') {                                                                                   // 3079\n            output = output / 3;                                                                                     // 3080\n        } else if (units === 'year') {                                                                               // 3081\n            output = output / 12;                                                                                    // 3082\n        }                                                                                                            // 3083\n    } else {                                                                                                         // 3084\n        delta = this - that;                                                                                         // 3085\n        output = units === 'second' ? delta / 1e3 : // 1000                                                          // 3086\n            units === 'minute' ? delta / 6e4 : // 1000 * 60                                                          // 3087\n            units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60                                                      // 3088\n            units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst                       // 3089\n            units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst                 // 3090\n            delta;                                                                                                   // 3091\n    }                                                                                                                // 3092\n    return asFloat ? output : absFloor(output);                                                                      // 3093\n}                                                                                                                    // 3094\n                                                                                                                     // 3095\nfunction monthDiff (a, b) {                                                                                          // 3096\n    // difference in months                                                                                          // 3097\n    var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),                                     // 3098\n        // b is in (anchor - 1 month, anchor + 1 month)                                                              // 3099\n        anchor = a.clone().add(wholeMonthDiff, 'months'),                                                            // 3100\n        anchor2, adjust;                                                                                             // 3101\n                                                                                                                     // 3102\n    if (b - anchor < 0) {                                                                                            // 3103\n        anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');                                                       // 3104\n        // linear across the month                                                                                   // 3105\n        adjust = (b - anchor) / (anchor - anchor2);                                                                  // 3106\n    } else {                                                                                                         // 3107\n        anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');                                                       // 3108\n        // linear across the month                                                                                   // 3109\n        adjust = (b - anchor) / (anchor2 - anchor);                                                                  // 3110\n    }                                                                                                                // 3111\n                                                                                                                     // 3112\n    //check for negative zero, return zero if negative zero                                                          // 3113\n    return -(wholeMonthDiff + adjust) || 0;                                                                          // 3114\n}                                                                                                                    // 3115\n                                                                                                                     // 3116\nhooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';                                                                        // 3117\nhooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';                                                                   // 3118\n                                                                                                                     // 3119\nfunction toString () {                                                                                               // 3120\n    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');                                     // 3121\n}                                                                                                                    // 3122\n                                                                                                                     // 3123\nfunction toISOString () {                                                                                            // 3124\n    var m = this.clone().utc();                                                                                      // 3125\n    if (0 < m.year() && m.year() <= 9999) {                                                                          // 3126\n        if (isFunction(Date.prototype.toISOString)) {                                                                // 3127\n            // native implementation is ~50x faster, use it when we can                                              // 3128\n            return this.toDate().toISOString();                                                                      // 3129\n        } else {                                                                                                     // 3130\n            return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');                                                  // 3131\n        }                                                                                                            // 3132\n    } else {                                                                                                         // 3133\n        return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');                                                    // 3134\n    }                                                                                                                // 3135\n}                                                                                                                    // 3136\n                                                                                                                     // 3137\n/**                                                                                                                  // 3138\n * Return a human readable representation of a moment that can                                                       // 3139\n * also be evaluated to get a new moment which is the same                                                           // 3140\n *                                                                                                                   // 3141\n * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects                   // 3142\n */                                                                                                                  // 3143\nfunction inspect () {                                                                                                // 3144\n    if (!this.isValid()) {                                                                                           // 3145\n        return 'moment.invalid(/* ' + this._i + ' */)';                                                              // 3146\n    }                                                                                                                // 3147\n    var func = 'moment';                                                                                             // 3148\n    var zone = '';                                                                                                   // 3149\n    if (!this.isLocal()) {                                                                                           // 3150\n        func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';                                           // 3151\n        zone = 'Z';                                                                                                  // 3152\n    }                                                                                                                // 3153\n    var prefix = '[' + func + '(\"]';                                                                                 // 3154\n    var year = (0 < this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';                                         // 3155\n    var datetime = '-MM-DD[T]HH:mm:ss.SSS';                                                                          // 3156\n    var suffix = zone + '[\")]';                                                                                      // 3157\n                                                                                                                     // 3158\n    return this.format(prefix + year + datetime + suffix);                                                           // 3159\n}                                                                                                                    // 3160\n                                                                                                                     // 3161\nfunction format (inputString) {                                                                                      // 3162\n    if (!inputString) {                                                                                              // 3163\n        inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;                                   // 3164\n    }                                                                                                                // 3165\n    var output = formatMoment(this, inputString);                                                                    // 3166\n    return this.localeData().postformat(output);                                                                     // 3167\n}                                                                                                                    // 3168\n                                                                                                                     // 3169\nfunction from (time, withoutSuffix) {                                                                                // 3170\n    if (this.isValid() &&                                                                                            // 3171\n            ((isMoment(time) && time.isValid()) ||                                                                   // 3172\n             createLocal(time).isValid())) {                                                                         // 3173\n        return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);                // 3174\n    } else {                                                                                                         // 3175\n        return this.localeData().invalidDate();                                                                      // 3176\n    }                                                                                                                // 3177\n}                                                                                                                    // 3178\n                                                                                                                     // 3179\nfunction fromNow (withoutSuffix) {                                                                                   // 3180\n    return this.from(createLocal(), withoutSuffix);                                                                  // 3181\n}                                                                                                                    // 3182\n                                                                                                                     // 3183\nfunction to (time, withoutSuffix) {                                                                                  // 3184\n    if (this.isValid() &&                                                                                            // 3185\n            ((isMoment(time) && time.isValid()) ||                                                                   // 3186\n             createLocal(time).isValid())) {                                                                         // 3187\n        return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);                // 3188\n    } else {                                                                                                         // 3189\n        return this.localeData().invalidDate();                                                                      // 3190\n    }                                                                                                                // 3191\n}                                                                                                                    // 3192\n                                                                                                                     // 3193\nfunction toNow (withoutSuffix) {                                                                                     // 3194\n    return this.to(createLocal(), withoutSuffix);                                                                    // 3195\n}                                                                                                                    // 3196\n                                                                                                                     // 3197\n// If passed a locale key, it will set the locale for this                                                           // 3198\n// instance.  Otherwise, it will return the locale configuration                                                     // 3199\n// variables for this instance.                                                                                      // 3200\nfunction locale (key) {                                                                                              // 3201\n    var newLocaleData;                                                                                               // 3202\n                                                                                                                     // 3203\n    if (key === undefined) {                                                                                         // 3204\n        return this._locale._abbr;                                                                                   // 3205\n    } else {                                                                                                         // 3206\n        newLocaleData = getLocale(key);                                                                              // 3207\n        if (newLocaleData != null) {                                                                                 // 3208\n            this._locale = newLocaleData;                                                                            // 3209\n        }                                                                                                            // 3210\n        return this;                                                                                                 // 3211\n    }                                                                                                                // 3212\n}                                                                                                                    // 3213\n                                                                                                                     // 3214\nvar lang = deprecate(                                                                                                // 3215\n    'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',\n    function (key) {                                                                                                 // 3217\n        if (key === undefined) {                                                                                     // 3218\n            return this.localeData();                                                                                // 3219\n        } else {                                                                                                     // 3220\n            return this.locale(key);                                                                                 // 3221\n        }                                                                                                            // 3222\n    }                                                                                                                // 3223\n);                                                                                                                   // 3224\n                                                                                                                     // 3225\nfunction localeData () {                                                                                             // 3226\n    return this._locale;                                                                                             // 3227\n}                                                                                                                    // 3228\n                                                                                                                     // 3229\nfunction startOf (units) {                                                                                           // 3230\n    units = normalizeUnits(units);                                                                                   // 3231\n    // the following switch intentionally omits break keywords                                                       // 3232\n    // to utilize falling through the cases.                                                                         // 3233\n    switch (units) {                                                                                                 // 3234\n        case 'year':                                                                                                 // 3235\n            this.month(0);                                                                                           // 3236\n            /* falls through */                                                                                      // 3237\n        case 'quarter':                                                                                              // 3238\n        case 'month':                                                                                                // 3239\n            this.date(1);                                                                                            // 3240\n            /* falls through */                                                                                      // 3241\n        case 'week':                                                                                                 // 3242\n        case 'isoWeek':                                                                                              // 3243\n        case 'day':                                                                                                  // 3244\n        case 'date':                                                                                                 // 3245\n            this.hours(0);                                                                                           // 3246\n            /* falls through */                                                                                      // 3247\n        case 'hour':                                                                                                 // 3248\n            this.minutes(0);                                                                                         // 3249\n            /* falls through */                                                                                      // 3250\n        case 'minute':                                                                                               // 3251\n            this.seconds(0);                                                                                         // 3252\n            /* falls through */                                                                                      // 3253\n        case 'second':                                                                                               // 3254\n            this.milliseconds(0);                                                                                    // 3255\n    }                                                                                                                // 3256\n                                                                                                                     // 3257\n    // weeks are a special case                                                                                      // 3258\n    if (units === 'week') {                                                                                          // 3259\n        this.weekday(0);                                                                                             // 3260\n    }                                                                                                                // 3261\n    if (units === 'isoWeek') {                                                                                       // 3262\n        this.isoWeekday(1);                                                                                          // 3263\n    }                                                                                                                // 3264\n                                                                                                                     // 3265\n    // quarters are also special                                                                                     // 3266\n    if (units === 'quarter') {                                                                                       // 3267\n        this.month(Math.floor(this.month() / 3) * 3);                                                                // 3268\n    }                                                                                                                // 3269\n                                                                                                                     // 3270\n    return this;                                                                                                     // 3271\n}                                                                                                                    // 3272\n                                                                                                                     // 3273\nfunction endOf (units) {                                                                                             // 3274\n    units = normalizeUnits(units);                                                                                   // 3275\n    if (units === undefined || units === 'millisecond') {                                                            // 3276\n        return this;                                                                                                 // 3277\n    }                                                                                                                // 3278\n                                                                                                                     // 3279\n    // 'date' is an alias for 'day', so it should be considered as such.                                             // 3280\n    if (units === 'date') {                                                                                          // 3281\n        units = 'day';                                                                                               // 3282\n    }                                                                                                                // 3283\n                                                                                                                     // 3284\n    return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');                     // 3285\n}                                                                                                                    // 3286\n                                                                                                                     // 3287\nfunction valueOf () {                                                                                                // 3288\n    return this._d.valueOf() - ((this._offset || 0) * 60000);                                                        // 3289\n}                                                                                                                    // 3290\n                                                                                                                     // 3291\nfunction unix () {                                                                                                   // 3292\n    return Math.floor(this.valueOf() / 1000);                                                                        // 3293\n}                                                                                                                    // 3294\n                                                                                                                     // 3295\nfunction toDate () {                                                                                                 // 3296\n    return new Date(this.valueOf());                                                                                 // 3297\n}                                                                                                                    // 3298\n                                                                                                                     // 3299\nfunction toArray () {                                                                                                // 3300\n    var m = this;                                                                                                    // 3301\n    return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];                       // 3302\n}                                                                                                                    // 3303\n                                                                                                                     // 3304\nfunction toObject () {                                                                                               // 3305\n    var m = this;                                                                                                    // 3306\n    return {                                                                                                         // 3307\n        years: m.year(),                                                                                             // 3308\n        months: m.month(),                                                                                           // 3309\n        date: m.date(),                                                                                              // 3310\n        hours: m.hours(),                                                                                            // 3311\n        minutes: m.minutes(),                                                                                        // 3312\n        seconds: m.seconds(),                                                                                        // 3313\n        milliseconds: m.milliseconds()                                                                               // 3314\n    };                                                                                                               // 3315\n}                                                                                                                    // 3316\n                                                                                                                     // 3317\nfunction toJSON () {                                                                                                 // 3318\n    // new Date(NaN).toJSON() === null                                                                               // 3319\n    return this.isValid() ? this.toISOString() : null;                                                               // 3320\n}                                                                                                                    // 3321\n                                                                                                                     // 3322\nfunction isValid$1 () {                                                                                              // 3323\n    return isValid(this);                                                                                            // 3324\n}                                                                                                                    // 3325\n                                                                                                                     // 3326\nfunction parsingFlags () {                                                                                           // 3327\n    return extend({}, getParsingFlags(this));                                                                        // 3328\n}                                                                                                                    // 3329\n                                                                                                                     // 3330\nfunction invalidAt () {                                                                                              // 3331\n    return getParsingFlags(this).overflow;                                                                           // 3332\n}                                                                                                                    // 3333\n                                                                                                                     // 3334\nfunction creationData() {                                                                                            // 3335\n    return {                                                                                                         // 3336\n        input: this._i,                                                                                              // 3337\n        format: this._f,                                                                                             // 3338\n        locale: this._locale,                                                                                        // 3339\n        isUTC: this._isUTC,                                                                                          // 3340\n        strict: this._strict                                                                                         // 3341\n    };                                                                                                               // 3342\n}                                                                                                                    // 3343\n                                                                                                                     // 3344\n// FORMATTING                                                                                                        // 3345\n                                                                                                                     // 3346\naddFormatToken(0, ['gg', 2], 0, function () {                                                                        // 3347\n    return this.weekYear() % 100;                                                                                    // 3348\n});                                                                                                                  // 3349\n                                                                                                                     // 3350\naddFormatToken(0, ['GG', 2], 0, function () {                                                                        // 3351\n    return this.isoWeekYear() % 100;                                                                                 // 3352\n});                                                                                                                  // 3353\n                                                                                                                     // 3354\nfunction addWeekYearFormatToken (token, getter) {                                                                    // 3355\n    addFormatToken(0, [token, token.length], 0, getter);                                                             // 3356\n}                                                                                                                    // 3357\n                                                                                                                     // 3358\naddWeekYearFormatToken('gggg',     'weekYear');                                                                      // 3359\naddWeekYearFormatToken('ggggg',    'weekYear');                                                                      // 3360\naddWeekYearFormatToken('GGGG',  'isoWeekYear');                                                                      // 3361\naddWeekYearFormatToken('GGGGG', 'isoWeekYear');                                                                      // 3362\n                                                                                                                     // 3363\n// ALIASES                                                                                                           // 3364\n                                                                                                                     // 3365\naddUnitAlias('weekYear', 'gg');                                                                                      // 3366\naddUnitAlias('isoWeekYear', 'GG');                                                                                   // 3367\n                                                                                                                     // 3368\n// PRIORITY                                                                                                          // 3369\n                                                                                                                     // 3370\naddUnitPriority('weekYear', 1);                                                                                      // 3371\naddUnitPriority('isoWeekYear', 1);                                                                                   // 3372\n                                                                                                                     // 3373\n                                                                                                                     // 3374\n// PARSING                                                                                                           // 3375\n                                                                                                                     // 3376\naddRegexToken('G',      matchSigned);                                                                                // 3377\naddRegexToken('g',      matchSigned);                                                                                // 3378\naddRegexToken('GG',     match1to2, match2);                                                                          // 3379\naddRegexToken('gg',     match1to2, match2);                                                                          // 3380\naddRegexToken('GGGG',   match1to4, match4);                                                                          // 3381\naddRegexToken('gggg',   match1to4, match4);                                                                          // 3382\naddRegexToken('GGGGG',  match1to6, match6);                                                                          // 3383\naddRegexToken('ggggg',  match1to6, match6);                                                                          // 3384\n                                                                                                                     // 3385\naddWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {                        // 3386\n    week[token.substr(0, 2)] = toInt(input);                                                                         // 3387\n});                                                                                                                  // 3388\n                                                                                                                     // 3389\naddWeekParseToken(['gg', 'GG'], function (input, week, config, token) {                                              // 3390\n    week[token] = hooks.parseTwoDigitYear(input);                                                                    // 3391\n});                                                                                                                  // 3392\n                                                                                                                     // 3393\n// MOMENTS                                                                                                           // 3394\n                                                                                                                     // 3395\nfunction getSetWeekYear (input) {                                                                                    // 3396\n    return getSetWeekYearHelper.call(this,                                                                           // 3397\n            input,                                                                                                   // 3398\n            this.week(),                                                                                             // 3399\n            this.weekday(),                                                                                          // 3400\n            this.localeData()._week.dow,                                                                             // 3401\n            this.localeData()._week.doy);                                                                            // 3402\n}                                                                                                                    // 3403\n                                                                                                                     // 3404\nfunction getSetISOWeekYear (input) {                                                                                 // 3405\n    return getSetWeekYearHelper.call(this,                                                                           // 3406\n            input, this.isoWeek(), this.isoWeekday(), 1, 4);                                                         // 3407\n}                                                                                                                    // 3408\n                                                                                                                     // 3409\nfunction getISOWeeksInYear () {                                                                                      // 3410\n    return weeksInYear(this.year(), 1, 4);                                                                           // 3411\n}                                                                                                                    // 3412\n                                                                                                                     // 3413\nfunction getWeeksInYear () {                                                                                         // 3414\n    var weekInfo = this.localeData()._week;                                                                          // 3415\n    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);                                                     // 3416\n}                                                                                                                    // 3417\n                                                                                                                     // 3418\nfunction getSetWeekYearHelper(input, week, weekday, dow, doy) {                                                      // 3419\n    var weeksTarget;                                                                                                 // 3420\n    if (input == null) {                                                                                             // 3421\n        return weekOfYear(this, dow, doy).year;                                                                      // 3422\n    } else {                                                                                                         // 3423\n        weeksTarget = weeksInYear(input, dow, doy);                                                                  // 3424\n        if (week > weeksTarget) {                                                                                    // 3425\n            week = weeksTarget;                                                                                      // 3426\n        }                                                                                                            // 3427\n        return setWeekAll.call(this, input, week, weekday, dow, doy);                                                // 3428\n    }                                                                                                                // 3429\n}                                                                                                                    // 3430\n                                                                                                                     // 3431\nfunction setWeekAll(weekYear, week, weekday, dow, doy) {                                                             // 3432\n    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),                                       // 3433\n        date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);                                        // 3434\n                                                                                                                     // 3435\n    this.year(date.getUTCFullYear());                                                                                // 3436\n    this.month(date.getUTCMonth());                                                                                  // 3437\n    this.date(date.getUTCDate());                                                                                    // 3438\n    return this;                                                                                                     // 3439\n}                                                                                                                    // 3440\n                                                                                                                     // 3441\n// FORMATTING                                                                                                        // 3442\n                                                                                                                     // 3443\naddFormatToken('Q', 0, 'Qo', 'quarter');                                                                             // 3444\n                                                                                                                     // 3445\n// ALIASES                                                                                                           // 3446\n                                                                                                                     // 3447\naddUnitAlias('quarter', 'Q');                                                                                        // 3448\n                                                                                                                     // 3449\n// PRIORITY                                                                                                          // 3450\n                                                                                                                     // 3451\naddUnitPriority('quarter', 7);                                                                                       // 3452\n                                                                                                                     // 3453\n// PARSING                                                                                                           // 3454\n                                                                                                                     // 3455\naddRegexToken('Q', match1);                                                                                          // 3456\naddParseToken('Q', function (input, array) {                                                                         // 3457\n    array[MONTH] = (toInt(input) - 1) * 3;                                                                           // 3458\n});                                                                                                                  // 3459\n                                                                                                                     // 3460\n// MOMENTS                                                                                                           // 3461\n                                                                                                                     // 3462\nfunction getSetQuarter (input) {                                                                                     // 3463\n    return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);       // 3464\n}                                                                                                                    // 3465\n                                                                                                                     // 3466\n// FORMATTING                                                                                                        // 3467\n                                                                                                                     // 3468\naddFormatToken('D', ['DD', 2], 'Do', 'date');                                                                        // 3469\n                                                                                                                     // 3470\n// ALIASES                                                                                                           // 3471\n                                                                                                                     // 3472\naddUnitAlias('date', 'D');                                                                                           // 3473\n                                                                                                                     // 3474\n// PRIOROITY                                                                                                         // 3475\naddUnitPriority('date', 9);                                                                                          // 3476\n                                                                                                                     // 3477\n// PARSING                                                                                                           // 3478\n                                                                                                                     // 3479\naddRegexToken('D',  match1to2);                                                                                      // 3480\naddRegexToken('DD', match1to2, match2);                                                                              // 3481\naddRegexToken('Do', function (isStrict, locale) {                                                                    // 3482\n    return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;                                            // 3483\n});                                                                                                                  // 3484\n                                                                                                                     // 3485\naddParseToken(['D', 'DD'], DATE);                                                                                    // 3486\naddParseToken('Do', function (input, array) {                                                                        // 3487\n    array[DATE] = toInt(input.match(match1to2)[0], 10);                                                              // 3488\n});                                                                                                                  // 3489\n                                                                                                                     // 3490\n// MOMENTS                                                                                                           // 3491\n                                                                                                                     // 3492\nvar getSetDayOfMonth = makeGetSet('Date', true);                                                                     // 3493\n                                                                                                                     // 3494\n// FORMATTING                                                                                                        // 3495\n                                                                                                                     // 3496\naddFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');                                                             // 3497\n                                                                                                                     // 3498\n// ALIASES                                                                                                           // 3499\n                                                                                                                     // 3500\naddUnitAlias('dayOfYear', 'DDD');                                                                                    // 3501\n                                                                                                                     // 3502\n// PRIORITY                                                                                                          // 3503\naddUnitPriority('dayOfYear', 4);                                                                                     // 3504\n                                                                                                                     // 3505\n// PARSING                                                                                                           // 3506\n                                                                                                                     // 3507\naddRegexToken('DDD',  match1to3);                                                                                    // 3508\naddRegexToken('DDDD', match3);                                                                                       // 3509\naddParseToken(['DDD', 'DDDD'], function (input, array, config) {                                                     // 3510\n    config._dayOfYear = toInt(input);                                                                                // 3511\n});                                                                                                                  // 3512\n                                                                                                                     // 3513\n// HELPERS                                                                                                           // 3514\n                                                                                                                     // 3515\n// MOMENTS                                                                                                           // 3516\n                                                                                                                     // 3517\nfunction getSetDayOfYear (input) {                                                                                   // 3518\n    var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;            // 3519\n    return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');                                           // 3520\n}                                                                                                                    // 3521\n                                                                                                                     // 3522\n// FORMATTING                                                                                                        // 3523\n                                                                                                                     // 3524\naddFormatToken('m', ['mm', 2], 0, 'minute');                                                                         // 3525\n                                                                                                                     // 3526\n// ALIASES                                                                                                           // 3527\n                                                                                                                     // 3528\naddUnitAlias('minute', 'm');                                                                                         // 3529\n                                                                                                                     // 3530\n// PRIORITY                                                                                                          // 3531\n                                                                                                                     // 3532\naddUnitPriority('minute', 14);                                                                                       // 3533\n                                                                                                                     // 3534\n// PARSING                                                                                                           // 3535\n                                                                                                                     // 3536\naddRegexToken('m',  match1to2);                                                                                      // 3537\naddRegexToken('mm', match1to2, match2);                                                                              // 3538\naddParseToken(['m', 'mm'], MINUTE);                                                                                  // 3539\n                                                                                                                     // 3540\n// MOMENTS                                                                                                           // 3541\n                                                                                                                     // 3542\nvar getSetMinute = makeGetSet('Minutes', false);                                                                     // 3543\n                                                                                                                     // 3544\n// FORMATTING                                                                                                        // 3545\n                                                                                                                     // 3546\naddFormatToken('s', ['ss', 2], 0, 'second');                                                                         // 3547\n                                                                                                                     // 3548\n// ALIASES                                                                                                           // 3549\n                                                                                                                     // 3550\naddUnitAlias('second', 's');                                                                                         // 3551\n                                                                                                                     // 3552\n// PRIORITY                                                                                                          // 3553\n                                                                                                                     // 3554\naddUnitPriority('second', 15);                                                                                       // 3555\n                                                                                                                     // 3556\n// PARSING                                                                                                           // 3557\n                                                                                                                     // 3558\naddRegexToken('s',  match1to2);                                                                                      // 3559\naddRegexToken('ss', match1to2, match2);                                                                              // 3560\naddParseToken(['s', 'ss'], SECOND);                                                                                  // 3561\n                                                                                                                     // 3562\n// MOMENTS                                                                                                           // 3563\n                                                                                                                     // 3564\nvar getSetSecond = makeGetSet('Seconds', false);                                                                     // 3565\n                                                                                                                     // 3566\n// FORMATTING                                                                                                        // 3567\n                                                                                                                     // 3568\naddFormatToken('S', 0, 0, function () {                                                                              // 3569\n    return ~~(this.millisecond() / 100);                                                                             // 3570\n});                                                                                                                  // 3571\n                                                                                                                     // 3572\naddFormatToken(0, ['SS', 2], 0, function () {                                                                        // 3573\n    return ~~(this.millisecond() / 10);                                                                              // 3574\n});                                                                                                                  // 3575\n                                                                                                                     // 3576\naddFormatToken(0, ['SSS', 3], 0, 'millisecond');                                                                     // 3577\naddFormatToken(0, ['SSSS', 4], 0, function () {                                                                      // 3578\n    return this.millisecond() * 10;                                                                                  // 3579\n});                                                                                                                  // 3580\naddFormatToken(0, ['SSSSS', 5], 0, function () {                                                                     // 3581\n    return this.millisecond() * 100;                                                                                 // 3582\n});                                                                                                                  // 3583\naddFormatToken(0, ['SSSSSS', 6], 0, function () {                                                                    // 3584\n    return this.millisecond() * 1000;                                                                                // 3585\n});                                                                                                                  // 3586\naddFormatToken(0, ['SSSSSSS', 7], 0, function () {                                                                   // 3587\n    return this.millisecond() * 10000;                                                                               // 3588\n});                                                                                                                  // 3589\naddFormatToken(0, ['SSSSSSSS', 8], 0, function () {                                                                  // 3590\n    return this.millisecond() * 100000;                                                                              // 3591\n});                                                                                                                  // 3592\naddFormatToken(0, ['SSSSSSSSS', 9], 0, function () {                                                                 // 3593\n    return this.millisecond() * 1000000;                                                                             // 3594\n});                                                                                                                  // 3595\n                                                                                                                     // 3596\n                                                                                                                     // 3597\n// ALIASES                                                                                                           // 3598\n                                                                                                                     // 3599\naddUnitAlias('millisecond', 'ms');                                                                                   // 3600\n                                                                                                                     // 3601\n// PRIORITY                                                                                                          // 3602\n                                                                                                                     // 3603\naddUnitPriority('millisecond', 16);                                                                                  // 3604\n                                                                                                                     // 3605\n// PARSING                                                                                                           // 3606\n                                                                                                                     // 3607\naddRegexToken('S',    match1to3, match1);                                                                            // 3608\naddRegexToken('SS',   match1to3, match2);                                                                            // 3609\naddRegexToken('SSS',  match1to3, match3);                                                                            // 3610\n                                                                                                                     // 3611\nvar token;                                                                                                           // 3612\nfor (token = 'SSSS'; token.length <= 9; token += 'S') {                                                              // 3613\n    addRegexToken(token, matchUnsigned);                                                                             // 3614\n}                                                                                                                    // 3615\n                                                                                                                     // 3616\nfunction parseMs(input, array) {                                                                                     // 3617\n    array[MILLISECOND] = toInt(('0.' + input) * 1000);                                                               // 3618\n}                                                                                                                    // 3619\n                                                                                                                     // 3620\nfor (token = 'S'; token.length <= 9; token += 'S') {                                                                 // 3621\n    addParseToken(token, parseMs);                                                                                   // 3622\n}                                                                                                                    // 3623\n// MOMENTS                                                                                                           // 3624\n                                                                                                                     // 3625\nvar getSetMillisecond = makeGetSet('Milliseconds', false);                                                           // 3626\n                                                                                                                     // 3627\n// FORMATTING                                                                                                        // 3628\n                                                                                                                     // 3629\naddFormatToken('z',  0, 0, 'zoneAbbr');                                                                              // 3630\naddFormatToken('zz', 0, 0, 'zoneName');                                                                              // 3631\n                                                                                                                     // 3632\n// MOMENTS                                                                                                           // 3633\n                                                                                                                     // 3634\nfunction getZoneAbbr () {                                                                                            // 3635\n    return this._isUTC ? 'UTC' : '';                                                                                 // 3636\n}                                                                                                                    // 3637\n                                                                                                                     // 3638\nfunction getZoneName () {                                                                                            // 3639\n    return this._isUTC ? 'Coordinated Universal Time' : '';                                                          // 3640\n}                                                                                                                    // 3641\n                                                                                                                     // 3642\nvar proto = Moment.prototype;                                                                                        // 3643\n                                                                                                                     // 3644\nproto.add               = add;                                                                                       // 3645\nproto.calendar          = calendar$1;                                                                                // 3646\nproto.clone             = clone;                                                                                     // 3647\nproto.diff              = diff;                                                                                      // 3648\nproto.endOf             = endOf;                                                                                     // 3649\nproto.format            = format;                                                                                    // 3650\nproto.from              = from;                                                                                      // 3651\nproto.fromNow           = fromNow;                                                                                   // 3652\nproto.to                = to;                                                                                        // 3653\nproto.toNow             = toNow;                                                                                     // 3654\nproto.get               = stringGet;                                                                                 // 3655\nproto.invalidAt         = invalidAt;                                                                                 // 3656\nproto.isAfter           = isAfter;                                                                                   // 3657\nproto.isBefore          = isBefore;                                                                                  // 3658\nproto.isBetween         = isBetween;                                                                                 // 3659\nproto.isSame            = isSame;                                                                                    // 3660\nproto.isSameOrAfter     = isSameOrAfter;                                                                             // 3661\nproto.isSameOrBefore    = isSameOrBefore;                                                                            // 3662\nproto.isValid           = isValid$1;                                                                                 // 3663\nproto.lang              = lang;                                                                                      // 3664\nproto.locale            = locale;                                                                                    // 3665\nproto.localeData        = localeData;                                                                                // 3666\nproto.max               = prototypeMax;                                                                              // 3667\nproto.min               = prototypeMin;                                                                              // 3668\nproto.parsingFlags      = parsingFlags;                                                                              // 3669\nproto.set               = stringSet;                                                                                 // 3670\nproto.startOf           = startOf;                                                                                   // 3671\nproto.subtract          = subtract;                                                                                  // 3672\nproto.toArray           = toArray;                                                                                   // 3673\nproto.toObject          = toObject;                                                                                  // 3674\nproto.toDate            = toDate;                                                                                    // 3675\nproto.toISOString       = toISOString;                                                                               // 3676\nproto.inspect           = inspect;                                                                                   // 3677\nproto.toJSON            = toJSON;                                                                                    // 3678\nproto.toString          = toString;                                                                                  // 3679\nproto.unix              = unix;                                                                                      // 3680\nproto.valueOf           = valueOf;                                                                                   // 3681\nproto.creationData      = creationData;                                                                              // 3682\n                                                                                                                     // 3683\n// Year                                                                                                              // 3684\nproto.year       = getSetYear;                                                                                       // 3685\nproto.isLeapYear = getIsLeapYear;                                                                                    // 3686\n                                                                                                                     // 3687\n// Week Year                                                                                                         // 3688\nproto.weekYear    = getSetWeekYear;                                                                                  // 3689\nproto.isoWeekYear = getSetISOWeekYear;                                                                               // 3690\n                                                                                                                     // 3691\n// Quarter                                                                                                           // 3692\nproto.quarter = proto.quarters = getSetQuarter;                                                                      // 3693\n                                                                                                                     // 3694\n// Month                                                                                                             // 3695\nproto.month       = getSetMonth;                                                                                     // 3696\nproto.daysInMonth = getDaysInMonth;                                                                                  // 3697\n                                                                                                                     // 3698\n// Week                                                                                                              // 3699\nproto.week           = proto.weeks        = getSetWeek;                                                              // 3700\nproto.isoWeek        = proto.isoWeeks     = getSetISOWeek;                                                           // 3701\nproto.weeksInYear    = getWeeksInYear;                                                                               // 3702\nproto.isoWeeksInYear = getISOWeeksInYear;                                                                            // 3703\n                                                                                                                     // 3704\n// Day                                                                                                               // 3705\nproto.date       = getSetDayOfMonth;                                                                                 // 3706\nproto.day        = proto.days             = getSetDayOfWeek;                                                         // 3707\nproto.weekday    = getSetLocaleDayOfWeek;                                                                            // 3708\nproto.isoWeekday = getSetISODayOfWeek;                                                                               // 3709\nproto.dayOfYear  = getSetDayOfYear;                                                                                  // 3710\n                                                                                                                     // 3711\n// Hour                                                                                                              // 3712\nproto.hour = proto.hours = getSetHour;                                                                               // 3713\n                                                                                                                     // 3714\n// Minute                                                                                                            // 3715\nproto.minute = proto.minutes = getSetMinute;                                                                         // 3716\n                                                                                                                     // 3717\n// Second                                                                                                            // 3718\nproto.second = proto.seconds = getSetSecond;                                                                         // 3719\n                                                                                                                     // 3720\n// Millisecond                                                                                                       // 3721\nproto.millisecond = proto.milliseconds = getSetMillisecond;                                                          // 3722\n                                                                                                                     // 3723\n// Offset                                                                                                            // 3724\nproto.utcOffset            = getSetOffset;                                                                           // 3725\nproto.utc                  = setOffsetToUTC;                                                                         // 3726\nproto.local                = setOffsetToLocal;                                                                       // 3727\nproto.parseZone            = setOffsetToParsedOffset;                                                                // 3728\nproto.hasAlignedHourOffset = hasAlignedHourOffset;                                                                   // 3729\nproto.isDST                = isDaylightSavingTime;                                                                   // 3730\nproto.isLocal              = isLocal;                                                                                // 3731\nproto.isUtcOffset          = isUtcOffset;                                                                            // 3732\nproto.isUtc                = isUtc;                                                                                  // 3733\nproto.isUTC                = isUtc;                                                                                  // 3734\n                                                                                                                     // 3735\n// Timezone                                                                                                          // 3736\nproto.zoneAbbr = getZoneAbbr;                                                                                        // 3737\nproto.zoneName = getZoneName;                                                                                        // 3738\n                                                                                                                     // 3739\n// Deprecations                                                                                                      // 3740\nproto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);                       // 3741\nproto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);                           // 3742\nproto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);                              // 3743\nproto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);\nproto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);\n                                                                                                                     // 3746\nfunction createUnix (input) {                                                                                        // 3747\n    return createLocal(input * 1000);                                                                                // 3748\n}                                                                                                                    // 3749\n                                                                                                                     // 3750\nfunction createInZone () {                                                                                           // 3751\n    return createLocal.apply(null, arguments).parseZone();                                                           // 3752\n}                                                                                                                    // 3753\n                                                                                                                     // 3754\nfunction preParsePostFormat (string) {                                                                               // 3755\n    return string;                                                                                                   // 3756\n}                                                                                                                    // 3757\n                                                                                                                     // 3758\nvar proto$1 = Locale.prototype;                                                                                      // 3759\n                                                                                                                     // 3760\nproto$1.calendar        = calendar;                                                                                  // 3761\nproto$1.longDateFormat  = longDateFormat;                                                                            // 3762\nproto$1.invalidDate     = invalidDate;                                                                               // 3763\nproto$1.ordinal         = ordinal;                                                                                   // 3764\nproto$1.preparse        = preParsePostFormat;                                                                        // 3765\nproto$1.postformat      = preParsePostFormat;                                                                        // 3766\nproto$1.relativeTime    = relativeTime;                                                                              // 3767\nproto$1.pastFuture      = pastFuture;                                                                                // 3768\nproto$1.set             = set;                                                                                       // 3769\n                                                                                                                     // 3770\n// Month                                                                                                             // 3771\nproto$1.months            =        localeMonths;                                                                     // 3772\nproto$1.monthsShort       =        localeMonthsShort;                                                                // 3773\nproto$1.monthsParse       =        localeMonthsParse;                                                                // 3774\nproto$1.monthsRegex       = monthsRegex;                                                                             // 3775\nproto$1.monthsShortRegex  = monthsShortRegex;                                                                        // 3776\n                                                                                                                     // 3777\n// Week                                                                                                              // 3778\nproto$1.week = localeWeek;                                                                                           // 3779\nproto$1.firstDayOfYear = localeFirstDayOfYear;                                                                       // 3780\nproto$1.firstDayOfWeek = localeFirstDayOfWeek;                                                                       // 3781\n                                                                                                                     // 3782\n// Day of Week                                                                                                       // 3783\nproto$1.weekdays       =        localeWeekdays;                                                                      // 3784\nproto$1.weekdaysMin    =        localeWeekdaysMin;                                                                   // 3785\nproto$1.weekdaysShort  =        localeWeekdaysShort;                                                                 // 3786\nproto$1.weekdaysParse  =        localeWeekdaysParse;                                                                 // 3787\n                                                                                                                     // 3788\nproto$1.weekdaysRegex       =        weekdaysRegex;                                                                  // 3789\nproto$1.weekdaysShortRegex  =        weekdaysShortRegex;                                                             // 3790\nproto$1.weekdaysMinRegex    =        weekdaysMinRegex;                                                               // 3791\n                                                                                                                     // 3792\n// Hours                                                                                                             // 3793\nproto$1.isPM = localeIsPM;                                                                                           // 3794\nproto$1.meridiem = localeMeridiem;                                                                                   // 3795\n                                                                                                                     // 3796\nfunction get$1 (format, index, field, setter) {                                                                      // 3797\n    var locale = getLocale();                                                                                        // 3798\n    var utc = createUTC().set(setter, index);                                                                        // 3799\n    return locale[field](utc, format);                                                                               // 3800\n}                                                                                                                    // 3801\n                                                                                                                     // 3802\nfunction listMonthsImpl (format, index, field) {                                                                     // 3803\n    if (isNumber(format)) {                                                                                          // 3804\n        index = format;                                                                                              // 3805\n        format = undefined;                                                                                          // 3806\n    }                                                                                                                // 3807\n                                                                                                                     // 3808\n    format = format || '';                                                                                           // 3809\n                                                                                                                     // 3810\n    if (index != null) {                                                                                             // 3811\n        return get$1(format, index, field, 'month');                                                                 // 3812\n    }                                                                                                                // 3813\n                                                                                                                     // 3814\n    var i;                                                                                                           // 3815\n    var out = [];                                                                                                    // 3816\n    for (i = 0; i < 12; i++) {                                                                                       // 3817\n        out[i] = get$1(format, i, field, 'month');                                                                   // 3818\n    }                                                                                                                // 3819\n    return out;                                                                                                      // 3820\n}                                                                                                                    // 3821\n                                                                                                                     // 3822\n// ()                                                                                                                // 3823\n// (5)                                                                                                               // 3824\n// (fmt, 5)                                                                                                          // 3825\n// (fmt)                                                                                                             // 3826\n// (true)                                                                                                            // 3827\n// (true, 5)                                                                                                         // 3828\n// (true, fmt, 5)                                                                                                    // 3829\n// (true, fmt)                                                                                                       // 3830\nfunction listWeekdaysImpl (localeSorted, format, index, field) {                                                     // 3831\n    if (typeof localeSorted === 'boolean') {                                                                         // 3832\n        if (isNumber(format)) {                                                                                      // 3833\n            index = format;                                                                                          // 3834\n            format = undefined;                                                                                      // 3835\n        }                                                                                                            // 3836\n                                                                                                                     // 3837\n        format = format || '';                                                                                       // 3838\n    } else {                                                                                                         // 3839\n        format = localeSorted;                                                                                       // 3840\n        index = format;                                                                                              // 3841\n        localeSorted = false;                                                                                        // 3842\n                                                                                                                     // 3843\n        if (isNumber(format)) {                                                                                      // 3844\n            index = format;                                                                                          // 3845\n            format = undefined;                                                                                      // 3846\n        }                                                                                                            // 3847\n                                                                                                                     // 3848\n        format = format || '';                                                                                       // 3849\n    }                                                                                                                // 3850\n                                                                                                                     // 3851\n    var locale = getLocale(),                                                                                        // 3852\n        shift = localeSorted ? locale._week.dow : 0;                                                                 // 3853\n                                                                                                                     // 3854\n    if (index != null) {                                                                                             // 3855\n        return get$1(format, (index + shift) % 7, field, 'day');                                                     // 3856\n    }                                                                                                                // 3857\n                                                                                                                     // 3858\n    var i;                                                                                                           // 3859\n    var out = [];                                                                                                    // 3860\n    for (i = 0; i < 7; i++) {                                                                                        // 3861\n        out[i] = get$1(format, (i + shift) % 7, field, 'day');                                                       // 3862\n    }                                                                                                                // 3863\n    return out;                                                                                                      // 3864\n}                                                                                                                    // 3865\n                                                                                                                     // 3866\nfunction listMonths (format, index) {                                                                                // 3867\n    return listMonthsImpl(format, index, 'months');                                                                  // 3868\n}                                                                                                                    // 3869\n                                                                                                                     // 3870\nfunction listMonthsShort (format, index) {                                                                           // 3871\n    return listMonthsImpl(format, index, 'monthsShort');                                                             // 3872\n}                                                                                                                    // 3873\n                                                                                                                     // 3874\nfunction listWeekdays (localeSorted, format, index) {                                                                // 3875\n    return listWeekdaysImpl(localeSorted, format, index, 'weekdays');                                                // 3876\n}                                                                                                                    // 3877\n                                                                                                                     // 3878\nfunction listWeekdaysShort (localeSorted, format, index) {                                                           // 3879\n    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');                                           // 3880\n}                                                                                                                    // 3881\n                                                                                                                     // 3882\nfunction listWeekdaysMin (localeSorted, format, index) {                                                             // 3883\n    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');                                             // 3884\n}                                                                                                                    // 3885\n                                                                                                                     // 3886\ngetSetGlobalLocale('en', {                                                                                           // 3887\n    ordinalParse: /\\d{1,2}(th|st|nd|rd)/,                                                                            // 3888\n    ordinal : function (number) {                                                                                    // 3889\n        var b = number % 10,                                                                                         // 3890\n            output = (toInt(number % 100 / 10) === 1) ? 'th' :                                                       // 3891\n            (b === 1) ? 'st' :                                                                                       // 3892\n            (b === 2) ? 'nd' :                                                                                       // 3893\n            (b === 3) ? 'rd' : 'th';                                                                                 // 3894\n        return number + output;                                                                                      // 3895\n    }                                                                                                                // 3896\n});                                                                                                                  // 3897\n                                                                                                                     // 3898\n// Side effect imports                                                                                               // 3899\nhooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);                 // 3900\nhooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);              // 3901\n                                                                                                                     // 3902\nvar mathAbs = Math.abs;                                                                                              // 3903\n                                                                                                                     // 3904\nfunction abs () {                                                                                                    // 3905\n    var data           = this._data;                                                                                 // 3906\n                                                                                                                     // 3907\n    this._milliseconds = mathAbs(this._milliseconds);                                                                // 3908\n    this._days         = mathAbs(this._days);                                                                        // 3909\n    this._months       = mathAbs(this._months);                                                                      // 3910\n                                                                                                                     // 3911\n    data.milliseconds  = mathAbs(data.milliseconds);                                                                 // 3912\n    data.seconds       = mathAbs(data.seconds);                                                                      // 3913\n    data.minutes       = mathAbs(data.minutes);                                                                      // 3914\n    data.hours         = mathAbs(data.hours);                                                                        // 3915\n    data.months        = mathAbs(data.months);                                                                       // 3916\n    data.years         = mathAbs(data.years);                                                                        // 3917\n                                                                                                                     // 3918\n    return this;                                                                                                     // 3919\n}                                                                                                                    // 3920\n                                                                                                                     // 3921\nfunction addSubtract$1 (duration, input, value, direction) {                                                         // 3922\n    var other = createDuration(input, value);                                                                        // 3923\n                                                                                                                     // 3924\n    duration._milliseconds += direction * other._milliseconds;                                                       // 3925\n    duration._days         += direction * other._days;                                                               // 3926\n    duration._months       += direction * other._months;                                                             // 3927\n                                                                                                                     // 3928\n    return duration._bubble();                                                                                       // 3929\n}                                                                                                                    // 3930\n                                                                                                                     // 3931\n// supports only 2.0-style add(1, 's') or add(duration)                                                              // 3932\nfunction add$1 (input, value) {                                                                                      // 3933\n    return addSubtract$1(this, input, value, 1);                                                                     // 3934\n}                                                                                                                    // 3935\n                                                                                                                     // 3936\n// supports only 2.0-style subtract(1, 's') or subtract(duration)                                                    // 3937\nfunction subtract$1 (input, value) {                                                                                 // 3938\n    return addSubtract$1(this, input, value, -1);                                                                    // 3939\n}                                                                                                                    // 3940\n                                                                                                                     // 3941\nfunction absCeil (number) {                                                                                          // 3942\n    if (number < 0) {                                                                                                // 3943\n        return Math.floor(number);                                                                                   // 3944\n    } else {                                                                                                         // 3945\n        return Math.ceil(number);                                                                                    // 3946\n    }                                                                                                                // 3947\n}                                                                                                                    // 3948\n                                                                                                                     // 3949\nfunction bubble () {                                                                                                 // 3950\n    var milliseconds = this._milliseconds;                                                                           // 3951\n    var days         = this._days;                                                                                   // 3952\n    var months       = this._months;                                                                                 // 3953\n    var data         = this._data;                                                                                   // 3954\n    var seconds, minutes, hours, years, monthsFromDays;                                                              // 3955\n                                                                                                                     // 3956\n    // if we have a mix of positive and negative values, bubble down first                                           // 3957\n    // check: https://github.com/moment/moment/issues/2166                                                           // 3958\n    if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||                                                         // 3959\n            (milliseconds <= 0 && days <= 0 && months <= 0))) {                                                      // 3960\n        milliseconds += absCeil(monthsToDays(months) + days) * 864e5;                                                // 3961\n        days = 0;                                                                                                    // 3962\n        months = 0;                                                                                                  // 3963\n    }                                                                                                                // 3964\n                                                                                                                     // 3965\n    // The following code bubbles up values, see the tests for                                                       // 3966\n    // examples of what that means.                                                                                  // 3967\n    data.milliseconds = milliseconds % 1000;                                                                         // 3968\n                                                                                                                     // 3969\n    seconds           = absFloor(milliseconds / 1000);                                                               // 3970\n    data.seconds      = seconds % 60;                                                                                // 3971\n                                                                                                                     // 3972\n    minutes           = absFloor(seconds / 60);                                                                      // 3973\n    data.minutes      = minutes % 60;                                                                                // 3974\n                                                                                                                     // 3975\n    hours             = absFloor(minutes / 60);                                                                      // 3976\n    data.hours        = hours % 24;                                                                                  // 3977\n                                                                                                                     // 3978\n    days += absFloor(hours / 24);                                                                                    // 3979\n                                                                                                                     // 3980\n    // convert days to months                                                                                        // 3981\n    monthsFromDays = absFloor(daysToMonths(days));                                                                   // 3982\n    months += monthsFromDays;                                                                                        // 3983\n    days -= absCeil(monthsToDays(monthsFromDays));                                                                   // 3984\n                                                                                                                     // 3985\n    // 12 months -> 1 year                                                                                           // 3986\n    years = absFloor(months / 12);                                                                                   // 3987\n    months %= 12;                                                                                                    // 3988\n                                                                                                                     // 3989\n    data.days   = days;                                                                                              // 3990\n    data.months = months;                                                                                            // 3991\n    data.years  = years;                                                                                             // 3992\n                                                                                                                     // 3993\n    return this;                                                                                                     // 3994\n}                                                                                                                    // 3995\n                                                                                                                     // 3996\nfunction daysToMonths (days) {                                                                                       // 3997\n    // 400 years have 146097 days (taking into account leap year rules)                                              // 3998\n    // 400 years have 12 months === 4800                                                                             // 3999\n    return days * 4800 / 146097;                                                                                     // 4000\n}                                                                                                                    // 4001\n                                                                                                                     // 4002\nfunction monthsToDays (months) {                                                                                     // 4003\n    // the reverse of daysToMonths                                                                                   // 4004\n    return months * 146097 / 4800;                                                                                   // 4005\n}                                                                                                                    // 4006\n                                                                                                                     // 4007\nfunction as (units) {                                                                                                // 4008\n    var days;                                                                                                        // 4009\n    var months;                                                                                                      // 4010\n    var milliseconds = this._milliseconds;                                                                           // 4011\n                                                                                                                     // 4012\n    units = normalizeUnits(units);                                                                                   // 4013\n                                                                                                                     // 4014\n    if (units === 'month' || units === 'year') {                                                                     // 4015\n        days   = this._days   + milliseconds / 864e5;                                                                // 4016\n        months = this._months + daysToMonths(days);                                                                  // 4017\n        return units === 'month' ? months : months / 12;                                                             // 4018\n    } else {                                                                                                         // 4019\n        // handle milliseconds separately because of floating point math errors (issue #1867)                        // 4020\n        days = this._days + Math.round(monthsToDays(this._months));                                                  // 4021\n        switch (units) {                                                                                             // 4022\n            case 'week'   : return days / 7     + milliseconds / 6048e5;                                             // 4023\n            case 'day'    : return days         + milliseconds / 864e5;                                              // 4024\n            case 'hour'   : return days * 24    + milliseconds / 36e5;                                               // 4025\n            case 'minute' : return days * 1440  + milliseconds / 6e4;                                                // 4026\n            case 'second' : return days * 86400 + milliseconds / 1000;                                               // 4027\n            // Math.floor prevents floating point math errors here                                                   // 4028\n            case 'millisecond': return Math.floor(days * 864e5) + milliseconds;                                      // 4029\n            default: throw new Error('Unknown unit ' + units);                                                       // 4030\n        }                                                                                                            // 4031\n    }                                                                                                                // 4032\n}                                                                                                                    // 4033\n                                                                                                                     // 4034\n// TODO: Use this.as('ms')?                                                                                          // 4035\nfunction valueOf$1 () {                                                                                              // 4036\n    return (                                                                                                         // 4037\n        this._milliseconds +                                                                                         // 4038\n        this._days * 864e5 +                                                                                         // 4039\n        (this._months % 12) * 2592e6 +                                                                               // 4040\n        toInt(this._months / 12) * 31536e6                                                                           // 4041\n    );                                                                                                               // 4042\n}                                                                                                                    // 4043\n                                                                                                                     // 4044\nfunction makeAs (alias) {                                                                                            // 4045\n    return function () {                                                                                             // 4046\n        return this.as(alias);                                                                                       // 4047\n    };                                                                                                               // 4048\n}                                                                                                                    // 4049\n                                                                                                                     // 4050\nvar asMilliseconds = makeAs('ms');                                                                                   // 4051\nvar asSeconds      = makeAs('s');                                                                                    // 4052\nvar asMinutes      = makeAs('m');                                                                                    // 4053\nvar asHours        = makeAs('h');                                                                                    // 4054\nvar asDays         = makeAs('d');                                                                                    // 4055\nvar asWeeks        = makeAs('w');                                                                                    // 4056\nvar asMonths       = makeAs('M');                                                                                    // 4057\nvar asYears        = makeAs('y');                                                                                    // 4058\n                                                                                                                     // 4059\nfunction get$2 (units) {                                                                                             // 4060\n    units = normalizeUnits(units);                                                                                   // 4061\n    return this[units + 's']();                                                                                      // 4062\n}                                                                                                                    // 4063\n                                                                                                                     // 4064\nfunction makeGetter(name) {                                                                                          // 4065\n    return function () {                                                                                             // 4066\n        return this._data[name];                                                                                     // 4067\n    };                                                                                                               // 4068\n}                                                                                                                    // 4069\n                                                                                                                     // 4070\nvar milliseconds = makeGetter('milliseconds');                                                                       // 4071\nvar seconds      = makeGetter('seconds');                                                                            // 4072\nvar minutes      = makeGetter('minutes');                                                                            // 4073\nvar hours        = makeGetter('hours');                                                                              // 4074\nvar days         = makeGetter('days');                                                                               // 4075\nvar months       = makeGetter('months');                                                                             // 4076\nvar years        = makeGetter('years');                                                                              // 4077\n                                                                                                                     // 4078\nfunction weeks () {                                                                                                  // 4079\n    return absFloor(this.days() / 7);                                                                                // 4080\n}                                                                                                                    // 4081\n                                                                                                                     // 4082\nvar round = Math.round;                                                                                              // 4083\nvar thresholds = {                                                                                                   // 4084\n    s: 45,  // seconds to minute                                                                                     // 4085\n    m: 45,  // minutes to hour                                                                                       // 4086\n    h: 22,  // hours to day                                                                                          // 4087\n    d: 26,  // days to month                                                                                         // 4088\n    M: 11   // months to year                                                                                        // 4089\n};                                                                                                                   // 4090\n                                                                                                                     // 4091\n// helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize                            // 4092\nfunction substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {                                        // 4093\n    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);                                      // 4094\n}                                                                                                                    // 4095\n                                                                                                                     // 4096\nfunction relativeTime$1 (posNegDuration, withoutSuffix, locale) {                                                    // 4097\n    var duration = createDuration(posNegDuration).abs();                                                             // 4098\n    var seconds  = round(duration.as('s'));                                                                          // 4099\n    var minutes  = round(duration.as('m'));                                                                          // 4100\n    var hours    = round(duration.as('h'));                                                                          // 4101\n    var days     = round(duration.as('d'));                                                                          // 4102\n    var months   = round(duration.as('M'));                                                                          // 4103\n    var years    = round(duration.as('y'));                                                                          // 4104\n                                                                                                                     // 4105\n    var a = seconds < thresholds.s && ['s', seconds]  ||                                                             // 4106\n            minutes <= 1           && ['m']           ||                                                             // 4107\n            minutes < thresholds.m && ['mm', minutes] ||                                                             // 4108\n            hours   <= 1           && ['h']           ||                                                             // 4109\n            hours   < thresholds.h && ['hh', hours]   ||                                                             // 4110\n            days    <= 1           && ['d']           ||                                                             // 4111\n            days    < thresholds.d && ['dd', days]    ||                                                             // 4112\n            months  <= 1           && ['M']           ||                                                             // 4113\n            months  < thresholds.M && ['MM', months]  ||                                                             // 4114\n            years   <= 1           && ['y']           || ['yy', years];                                              // 4115\n                                                                                                                     // 4116\n    a[2] = withoutSuffix;                                                                                            // 4117\n    a[3] = +posNegDuration > 0;                                                                                      // 4118\n    a[4] = locale;                                                                                                   // 4119\n    return substituteTimeAgo.apply(null, a);                                                                         // 4120\n}                                                                                                                    // 4121\n                                                                                                                     // 4122\n// This function allows you to set the rounding function for relative time strings                                   // 4123\nfunction getSetRelativeTimeRounding (roundingFunction) {                                                             // 4124\n    if (roundingFunction === undefined) {                                                                            // 4125\n        return round;                                                                                                // 4126\n    }                                                                                                                // 4127\n    if (typeof(roundingFunction) === 'function') {                                                                   // 4128\n        round = roundingFunction;                                                                                    // 4129\n        return true;                                                                                                 // 4130\n    }                                                                                                                // 4131\n    return false;                                                                                                    // 4132\n}                                                                                                                    // 4133\n                                                                                                                     // 4134\n// This function allows you to set a threshold for relative time strings                                             // 4135\nfunction getSetRelativeTimeThreshold (threshold, limit) {                                                            // 4136\n    if (thresholds[threshold] === undefined) {                                                                       // 4137\n        return false;                                                                                                // 4138\n    }                                                                                                                // 4139\n    if (limit === undefined) {                                                                                       // 4140\n        return thresholds[threshold];                                                                                // 4141\n    }                                                                                                                // 4142\n    thresholds[threshold] = limit;                                                                                   // 4143\n    return true;                                                                                                     // 4144\n}                                                                                                                    // 4145\n                                                                                                                     // 4146\nfunction humanize (withSuffix) {                                                                                     // 4147\n    var locale = this.localeData();                                                                                  // 4148\n    var output = relativeTime$1(this, !withSuffix, locale);                                                          // 4149\n                                                                                                                     // 4150\n    if (withSuffix) {                                                                                                // 4151\n        output = locale.pastFuture(+this, output);                                                                   // 4152\n    }                                                                                                                // 4153\n                                                                                                                     // 4154\n    return locale.postformat(output);                                                                                // 4155\n}                                                                                                                    // 4156\n                                                                                                                     // 4157\nvar abs$1 = Math.abs;                                                                                                // 4158\n                                                                                                                     // 4159\nfunction toISOString$1() {                                                                                           // 4160\n    // for ISO strings we do not use the normal bubbling rules:                                                      // 4161\n    //  * milliseconds bubble up until they become hours                                                             // 4162\n    //  * days do not bubble at all                                                                                  // 4163\n    //  * months bubble up until they become years                                                                   // 4164\n    // This is because there is no context-free conversion between hours and days                                    // 4165\n    // (think of clock changes)                                                                                      // 4166\n    // and also not between days and months (28-31 days per month)                                                   // 4167\n    var seconds = abs$1(this._milliseconds) / 1000;                                                                  // 4168\n    var days         = abs$1(this._days);                                                                            // 4169\n    var months       = abs$1(this._months);                                                                          // 4170\n    var minutes, hours, years;                                                                                       // 4171\n                                                                                                                     // 4172\n    // 3600 seconds -> 60 minutes -> 1 hour                                                                          // 4173\n    minutes           = absFloor(seconds / 60);                                                                      // 4174\n    hours             = absFloor(minutes / 60);                                                                      // 4175\n    seconds %= 60;                                                                                                   // 4176\n    minutes %= 60;                                                                                                   // 4177\n                                                                                                                     // 4178\n    // 12 months -> 1 year                                                                                           // 4179\n    years  = absFloor(months / 12);                                                                                  // 4180\n    months %= 12;                                                                                                    // 4181\n                                                                                                                     // 4182\n                                                                                                                     // 4183\n    // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js                  // 4184\n    var Y = years;                                                                                                   // 4185\n    var M = months;                                                                                                  // 4186\n    var D = days;                                                                                                    // 4187\n    var h = hours;                                                                                                   // 4188\n    var m = minutes;                                                                                                 // 4189\n    var s = seconds;                                                                                                 // 4190\n    var total = this.asSeconds();                                                                                    // 4191\n                                                                                                                     // 4192\n    if (!total) {                                                                                                    // 4193\n        // this is the same as C#'s (Noda) and python (isodate)...                                                   // 4194\n        // but not other JS (goog.date)                                                                              // 4195\n        return 'P0D';                                                                                                // 4196\n    }                                                                                                                // 4197\n                                                                                                                     // 4198\n    return (total < 0 ? '-' : '') +                                                                                  // 4199\n        'P' +                                                                                                        // 4200\n        (Y ? Y + 'Y' : '') +                                                                                         // 4201\n        (M ? M + 'M' : '') +                                                                                         // 4202\n        (D ? D + 'D' : '') +                                                                                         // 4203\n        ((h || m || s) ? 'T' : '') +                                                                                 // 4204\n        (h ? h + 'H' : '') +                                                                                         // 4205\n        (m ? m + 'M' : '') +                                                                                         // 4206\n        (s ? s + 'S' : '');                                                                                          // 4207\n}                                                                                                                    // 4208\n                                                                                                                     // 4209\nvar proto$2 = Duration.prototype;                                                                                    // 4210\n                                                                                                                     // 4211\nproto$2.abs            = abs;                                                                                        // 4212\nproto$2.add            = add$1;                                                                                      // 4213\nproto$2.subtract       = subtract$1;                                                                                 // 4214\nproto$2.as             = as;                                                                                         // 4215\nproto$2.asMilliseconds = asMilliseconds;                                                                             // 4216\nproto$2.asSeconds      = asSeconds;                                                                                  // 4217\nproto$2.asMinutes      = asMinutes;                                                                                  // 4218\nproto$2.asHours        = asHours;                                                                                    // 4219\nproto$2.asDays         = asDays;                                                                                     // 4220\nproto$2.asWeeks        = asWeeks;                                                                                    // 4221\nproto$2.asMonths       = asMonths;                                                                                   // 4222\nproto$2.asYears        = asYears;                                                                                    // 4223\nproto$2.valueOf        = valueOf$1;                                                                                  // 4224\nproto$2._bubble        = bubble;                                                                                     // 4225\nproto$2.get            = get$2;                                                                                      // 4226\nproto$2.milliseconds   = milliseconds;                                                                               // 4227\nproto$2.seconds        = seconds;                                                                                    // 4228\nproto$2.minutes        = minutes;                                                                                    // 4229\nproto$2.hours          = hours;                                                                                      // 4230\nproto$2.days           = days;                                                                                       // 4231\nproto$2.weeks          = weeks;                                                                                      // 4232\nproto$2.months         = months;                                                                                     // 4233\nproto$2.years          = years;                                                                                      // 4234\nproto$2.humanize       = humanize;                                                                                   // 4235\nproto$2.toISOString    = toISOString$1;                                                                              // 4236\nproto$2.toString       = toISOString$1;                                                                              // 4237\nproto$2.toJSON         = toISOString$1;                                                                              // 4238\nproto$2.locale         = locale;                                                                                     // 4239\nproto$2.localeData     = localeData;                                                                                 // 4240\n                                                                                                                     // 4241\n// Deprecations                                                                                                      // 4242\nproto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);\nproto$2.lang = lang;                                                                                                 // 4244\n                                                                                                                     // 4245\n// Side effect imports                                                                                               // 4246\n                                                                                                                     // 4247\n// FORMATTING                                                                                                        // 4248\n                                                                                                                     // 4249\naddFormatToken('X', 0, 0, 'unix');                                                                                   // 4250\naddFormatToken('x', 0, 0, 'valueOf');                                                                                // 4251\n                                                                                                                     // 4252\n// PARSING                                                                                                           // 4253\n                                                                                                                     // 4254\naddRegexToken('x', matchSigned);                                                                                     // 4255\naddRegexToken('X', matchTimestamp);                                                                                  // 4256\naddParseToken('X', function (input, array, config) {                                                                 // 4257\n    config._d = new Date(parseFloat(input, 10) * 1000);                                                              // 4258\n});                                                                                                                  // 4259\naddParseToken('x', function (input, array, config) {                                                                 // 4260\n    config._d = new Date(toInt(input));                                                                              // 4261\n});                                                                                                                  // 4262\n                                                                                                                     // 4263\n// Side effect imports                                                                                               // 4264\n                                                                                                                     // 4265\n                                                                                                                     // 4266\nhooks.version = '2.17.1';                                                                                            // 4267\n                                                                                                                     // 4268\nsetHookCallback(createLocal);                                                                                        // 4269\n                                                                                                                     // 4270\nhooks.fn                    = proto;                                                                                 // 4271\nhooks.min                   = min;                                                                                   // 4272\nhooks.max                   = max;                                                                                   // 4273\nhooks.now                   = now;                                                                                   // 4274\nhooks.utc                   = createUTC;                                                                             // 4275\nhooks.unix                  = createUnix;                                                                            // 4276\nhooks.months                = listMonths;                                                                            // 4277\nhooks.isDate                = isDate;                                                                                // 4278\nhooks.locale                = getSetGlobalLocale;                                                                    // 4279\nhooks.invalid               = createInvalid;                                                                         // 4280\nhooks.duration              = createDuration;                                                                        // 4281\nhooks.isMoment              = isMoment;                                                                              // 4282\nhooks.weekdays              = listWeekdays;                                                                          // 4283\nhooks.parseZone             = createInZone;                                                                          // 4284\nhooks.localeData            = getLocale;                                                                             // 4285\nhooks.isDuration            = isDuration;                                                                            // 4286\nhooks.monthsShort           = listMonthsShort;                                                                       // 4287\nhooks.weekdaysMin           = listWeekdaysMin;                                                                       // 4288\nhooks.defineLocale          = defineLocale;                                                                          // 4289\nhooks.updateLocale          = updateLocale;                                                                          // 4290\nhooks.locales               = listLocales;                                                                           // 4291\nhooks.weekdaysShort         = listWeekdaysShort;                                                                     // 4292\nhooks.normalizeUnits        = normalizeUnits;                                                                        // 4293\nhooks.relativeTimeRounding = getSetRelativeTimeRounding;                                                             // 4294\nhooks.relativeTimeThreshold = getSetRelativeTimeThreshold;                                                           // 4295\nhooks.calendarFormat        = getCalendarFormat;                                                                     // 4296\nhooks.prototype             = proto;                                                                                 // 4297\n                                                                                                                     // 4298\nreturn hooks;                                                                                                        // 4299\n                                                                                                                     // 4300\n})));                                                                                                                // 4301\n                                                                                                                     // 4302\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/momentjs_moment/export.js                                                                                //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n// moment.js makes `moment` global on the window (or global) object, while Meteor expects a file-scoped global variable\nmoment = this.moment;                                                                                                // 2\ntry {                                                                                                                // 3\n    delete this.moment;                                                                                              // 4\n} catch (e) {                                                                                                        // 5\n}                                                                                                                    // 6\n                                                                                                                     // 7\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['momentjs:moment'] = {}, {\n  moment: moment\n});\n\n})();\n","servePath":"/packages/momentjs_moment.js"}]