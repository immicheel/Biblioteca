[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/angularui_ui-select/packages/angularui_ui-select.js      //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\n(function () {                                                       // 1\n                                                                     // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/angularui:ui-select/dist/select.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*!                                                                                                                    // 1\n * ui-select                                                                                                           // 2\n * http://github.com/angular-ui/ui-select                                                                              // 3\n * Version: 0.12.0 - 2015-05-28T07:44:11.360Z                                                                          // 4\n * License: MIT                                                                                                        // 5\n */                                                                                                                    // 6\n                                                                                                                       // 7\n                                                                                                                       // 8\n(function () {                                                                                                         // 9\n\"use strict\";                                                                                                          // 10\n                                                                                                                       // 11\nvar KEY = {                                                                                                            // 12\n    TAB: 9,                                                                                                            // 13\n    ENTER: 13,                                                                                                         // 14\n    ESC: 27,                                                                                                           // 15\n    SPACE: 32,                                                                                                         // 16\n    LEFT: 37,                                                                                                          // 17\n    UP: 38,                                                                                                            // 18\n    RIGHT: 39,                                                                                                         // 19\n    DOWN: 40,                                                                                                          // 20\n    SHIFT: 16,                                                                                                         // 21\n    CTRL: 17,                                                                                                          // 22\n    ALT: 18,                                                                                                           // 23\n    PAGE_UP: 33,                                                                                                       // 24\n    PAGE_DOWN: 34,                                                                                                     // 25\n    HOME: 36,                                                                                                          // 26\n    END: 35,                                                                                                           // 27\n    BACKSPACE: 8,                                                                                                      // 28\n    DELETE: 46,                                                                                                        // 29\n    COMMAND: 91,                                                                                                       // 30\n                                                                                                                       // 31\n    MAP: { 91 : \"COMMAND\", 8 : \"BACKSPACE\" , 9 : \"TAB\" , 13 : \"ENTER\" , 16 : \"SHIFT\" , 17 : \"CTRL\" , 18 : \"ALT\" , 19 : \"PAUSEBREAK\" , 20 : \"CAPSLOCK\" , 27 : \"ESC\" , 32 : \"SPACE\" , 33 : \"PAGE_UP\", 34 : \"PAGE_DOWN\" , 35 : \"END\" , 36 : \"HOME\" , 37 : \"LEFT\" , 38 : \"UP\" , 39 : \"RIGHT\" , 40 : \"DOWN\" , 43 : \"+\" , 44 : \"PRINTSCREEN\" , 45 : \"INSERT\" , 46 : \"DELETE\", 48 : \"0\" , 49 : \"1\" , 50 : \"2\" , 51 : \"3\" , 52 : \"4\" , 53 : \"5\" , 54 : \"6\" , 55 : \"7\" , 56 : \"8\" , 57 : \"9\" , 59 : \";\", 61 : \"=\" , 65 : \"A\" , 66 : \"B\" , 67 : \"C\" , 68 : \"D\" , 69 : \"E\" , 70 : \"F\" , 71 : \"G\" , 72 : \"H\" , 73 : \"I\" , 74 : \"J\" , 75 : \"K\" , 76 : \"L\", 77 : \"M\" , 78 : \"N\" , 79 : \"O\" , 80 : \"P\" , 81 : \"Q\" , 82 : \"R\" , 83 : \"S\" , 84 : \"T\" , 85 : \"U\" , 86 : \"V\" , 87 : \"W\" , 88 : \"X\" , 89 : \"Y\" , 90 : \"Z\", 96 : \"0\" , 97 : \"1\" , 98 : \"2\" , 99 : \"3\" , 100 : \"4\" , 101 : \"5\" , 102 : \"6\" , 103 : \"7\" , 104 : \"8\" , 105 : \"9\", 106 : \"*\" , 107 : \"+\" , 109 : \"-\" , 110 : \".\" , 111 : \"/\", 112 : \"F1\" , 113 : \"F2\" , 114 : \"F3\" , 115 : \"F4\" , 116 : \"F5\" , 117 : \"F6\" , 118 : \"F7\" , 119 : \"F8\" , 120 : \"F9\" , 121 : \"F10\" , 122 : \"F11\" , 123 : \"F12\", 144 : \"NUMLOCK\" , 145 : \"SCROLLLOCK\" , 186 : \";\" , 187 : \"=\" , 188 : \",\" , 189 : \"-\" , 190 : \".\" , 191 : \"/\" , 192 : \"`\" , 219 : \"[\" , 220 : \"\\\\\" , 221 : \"]\" , 222 : \"'\"\n    },                                                                                                                 // 33\n                                                                                                                       // 34\n    isControl: function (e) {                                                                                          // 35\n        var k = e.which;                                                                                               // 36\n        switch (k) {                                                                                                   // 37\n        case KEY.COMMAND:                                                                                              // 38\n        case KEY.SHIFT:                                                                                                // 39\n        case KEY.CTRL:                                                                                                 // 40\n        case KEY.ALT:                                                                                                  // 41\n            return true;                                                                                               // 42\n        }                                                                                                              // 43\n                                                                                                                       // 44\n        if (e.metaKey) return true;                                                                                    // 45\n                                                                                                                       // 46\n        return false;                                                                                                  // 47\n    },                                                                                                                 // 48\n    isFunctionKey: function (k) {                                                                                      // 49\n        k = k.which ? k.which : k;                                                                                     // 50\n        return k >= 112 && k <= 123;                                                                                   // 51\n    },                                                                                                                 // 52\n    isVerticalMovement: function (k){                                                                                  // 53\n      return ~[KEY.UP, KEY.DOWN].indexOf(k);                                                                           // 54\n    },                                                                                                                 // 55\n    isHorizontalMovement: function (k){                                                                                // 56\n      return ~[KEY.LEFT,KEY.RIGHT,KEY.BACKSPACE,KEY.DELETE].indexOf(k);                                                // 57\n    }                                                                                                                  // 58\n  };                                                                                                                   // 59\n                                                                                                                       // 60\n/**                                                                                                                    // 61\n * Add querySelectorAll() to jqLite.                                                                                   // 62\n *                                                                                                                     // 63\n * jqLite find() is limited to lookups by tag name.                                                                    // 64\n * TODO This will change with future versions of AngularJS, to be removed when this happens                            // 65\n *                                                                                                                     // 66\n * See jqLite.find - why not use querySelectorAll? https://github.com/angular/angular.js/issues/3586                   // 67\n * See feat(jqLite): use querySelectorAll instead of getElementsByTagName in jqLite.find https://github.com/angular/angular.js/pull/3598\n */                                                                                                                    // 69\nif (angular.element.prototype.querySelectorAll === undefined) {                                                        // 70\n  angular.element.prototype.querySelectorAll = function(selector) {                                                    // 71\n    return angular.element(this[0].querySelectorAll(selector));                                                        // 72\n  };                                                                                                                   // 73\n}                                                                                                                      // 74\n                                                                                                                       // 75\n/**                                                                                                                    // 76\n * Add closest() to jqLite.                                                                                            // 77\n */                                                                                                                    // 78\nif (angular.element.prototype.closest === undefined) {                                                                 // 79\n  angular.element.prototype.closest = function( selector) {                                                            // 80\n    var elem = this[0];                                                                                                // 81\n    var matchesSelector = elem.matches || elem.webkitMatchesSelector || elem.mozMatchesSelector || elem.msMatchesSelector;\n                                                                                                                       // 83\n    while (elem) {                                                                                                     // 84\n      if (matchesSelector.bind(elem)(selector)) {                                                                      // 85\n        return elem;                                                                                                   // 86\n      } else {                                                                                                         // 87\n        elem = elem.parentElement;                                                                                     // 88\n      }                                                                                                                // 89\n    }                                                                                                                  // 90\n    return false;                                                                                                      // 91\n  };                                                                                                                   // 92\n}                                                                                                                      // 93\n                                                                                                                       // 94\nvar latestId = 0;                                                                                                      // 95\n                                                                                                                       // 96\nvar uis = angular.module('ui.select', [])                                                                              // 97\n                                                                                                                       // 98\n.constant('uiSelectConfig', {                                                                                          // 99\n  theme: 'bootstrap',                                                                                                  // 100\n  searchEnabled: true,                                                                                                 // 101\n  sortable: false,                                                                                                     // 102\n  placeholder: '', // Empty by default, like HTML tag <select>                                                         // 103\n  refreshDelay: 1000, // In milliseconds                                                                               // 104\n  closeOnSelect: true,                                                                                                 // 105\n  generateId: function() {                                                                                             // 106\n    return latestId++;                                                                                                 // 107\n  },                                                                                                                   // 108\n  appendToBody: false                                                                                                  // 109\n})                                                                                                                     // 110\n                                                                                                                       // 111\n// See Rename minErr and make it accessible from outside https://github.com/angular/angular.js/issues/6913             // 112\n.service('uiSelectMinErr', function() {                                                                                // 113\n  var minErr = angular.$$minErr('ui.select');                                                                          // 114\n  return function() {                                                                                                  // 115\n    var error = minErr.apply(this, arguments);                                                                         // 116\n    var message = error.message.replace(new RegExp('\\nhttp://errors.angularjs.org/.*'), '');                           // 117\n    return new Error(message);                                                                                         // 118\n  };                                                                                                                   // 119\n})                                                                                                                     // 120\n                                                                                                                       // 121\n// Recreates old behavior of ng-transclude. Used internally.                                                           // 122\n.directive('uisTranscludeAppend', function () {                                                                        // 123\n  return {                                                                                                             // 124\n    link: function (scope, element, attrs, ctrl, transclude) {                                                         // 125\n        transclude(scope, function (clone) {                                                                           // 126\n          element.append(clone);                                                                                       // 127\n        });                                                                                                            // 128\n      }                                                                                                                // 129\n    };                                                                                                                 // 130\n})                                                                                                                     // 131\n                                                                                                                       // 132\n/**                                                                                                                    // 133\n * Highlights text that matches $select.search.                                                                        // 134\n *                                                                                                                     // 135\n * Taken from AngularUI Bootstrap Typeahead                                                                            // 136\n * See https://github.com/angular-ui/bootstrap/blob/0.10.0/src/typeahead/typeahead.js#L340                             // 137\n */                                                                                                                    // 138\n.filter('highlight', function() {                                                                                      // 139\n  function escapeRegexp(queryToEscape) {                                                                               // 140\n    return queryToEscape.replace(/([.?*+^$[\\]\\\\(){}|-])/g, '\\\\$1');                                                    // 141\n  }                                                                                                                    // 142\n                                                                                                                       // 143\n  return function(matchItem, query) {                                                                                  // 144\n    return query && matchItem ? matchItem.replace(new RegExp(escapeRegexp(query), 'gi'), '<span class=\"ui-select-highlight\">$&</span>') : matchItem;\n  };                                                                                                                   // 146\n})                                                                                                                     // 147\n                                                                                                                       // 148\n/**                                                                                                                    // 149\n * A read-only equivalent of jQuery's offset function: http://api.jquery.com/offset/                                   // 150\n *                                                                                                                     // 151\n * Taken from AngularUI Bootstrap Position:                                                                            // 152\n * See https://github.com/angular-ui/bootstrap/blob/master/src/position/position.js#L70                                // 153\n */                                                                                                                    // 154\n.factory('uisOffset',                                                                                                  // 155\n  ['$document', '$window',                                                                                             // 156\n  function ($document, $window) {                                                                                      // 157\n                                                                                                                       // 158\n  return function(element) {                                                                                           // 159\n    var boundingClientRect = element[0].getBoundingClientRect();                                                       // 160\n    return {                                                                                                           // 161\n      width: boundingClientRect.width || element.prop('offsetWidth'),                                                  // 162\n      height: boundingClientRect.height || element.prop('offsetHeight'),                                               // 163\n      top: boundingClientRect.top + ($window.pageYOffset || $document[0].documentElement.scrollTop),                   // 164\n      left: boundingClientRect.left + ($window.pageXOffset || $document[0].documentElement.scrollLeft)                 // 165\n    };                                                                                                                 // 166\n  };                                                                                                                   // 167\n}]);                                                                                                                   // 168\n                                                                                                                       // 169\nuis.directive('uiSelectChoices',                                                                                       // 170\n  ['uiSelectConfig', 'uisRepeatParser', 'uiSelectMinErr', '$compile',                                                  // 171\n  function(uiSelectConfig, RepeatParser, uiSelectMinErr, $compile) {                                                   // 172\n                                                                                                                       // 173\n  return {                                                                                                             // 174\n    restrict: 'EA',                                                                                                    // 175\n    require: '^uiSelect',                                                                                              // 176\n    replace: true,                                                                                                     // 177\n    transclude: true,                                                                                                  // 178\n    templateUrl: function(tElement) {                                                                                  // 179\n      // Gets theme attribute from parent (ui-select)                                                                  // 180\n      var theme = tElement.parent().attr('theme') || uiSelectConfig.theme;                                             // 181\n      return theme + '/choices.tpl.html';                                                                              // 182\n    },                                                                                                                 // 183\n                                                                                                                       // 184\n    compile: function(tElement, tAttrs) {                                                                              // 185\n                                                                                                                       // 186\n      if (!tAttrs.repeat) throw uiSelectMinErr('repeat', \"Expected 'repeat' expression.\");                             // 187\n                                                                                                                       // 188\n      return function link(scope, element, attrs, $select, transcludeFn) {                                             // 189\n                                                                                                                       // 190\n        // var repeat = RepeatParser.parse(attrs.repeat);                                                              // 191\n        var groupByExp = attrs.groupBy;                                                                                // 192\n        var groupFilterExp = attrs.groupFilter;                                                                        // 193\n                                                                                                                       // 194\n        $select.parseRepeatAttr(attrs.repeat, groupByExp, groupFilterExp); //Result ready at $select.parserResult      // 195\n                                                                                                                       // 196\n        $select.disableChoiceExpression = attrs.uiDisableChoice;                                                       // 197\n        $select.onHighlightCallback = attrs.onHighlight;                                                               // 198\n                                                                                                                       // 199\n        if(groupByExp) {                                                                                               // 200\n          var groups = element.querySelectorAll('.ui-select-choices-group');                                           // 201\n          if (groups.length !== 1) throw uiSelectMinErr('rows', \"Expected 1 .ui-select-choices-group but got '{0}'.\", groups.length);\n          groups.attr('ng-repeat', RepeatParser.getGroupNgRepeatExpression());                                         // 203\n        }                                                                                                              // 204\n                                                                                                                       // 205\n        var choices = element.querySelectorAll('.ui-select-choices-row');                                              // 206\n        if (choices.length !== 1) {                                                                                    // 207\n          throw uiSelectMinErr('rows', \"Expected 1 .ui-select-choices-row but got '{0}'.\", choices.length);            // 208\n        }                                                                                                              // 209\n                                                                                                                       // 210\n        choices.attr('ng-repeat', RepeatParser.getNgRepeatExpression($select.parserResult.itemName, '$select.items', $select.parserResult.trackByExp, groupByExp))\n            .attr('ng-if', '$select.open') //Prevent unnecessary watches when dropdown is closed                       // 212\n            .attr('ng-mouseenter', '$select.setActiveItem('+$select.parserResult.itemName +')')                        // 213\n            .attr('ng-click', '$select.select(' + $select.parserResult.itemName + ',false,$event)');                   // 214\n                                                                                                                       // 215\n        var rowsInner = element.querySelectorAll('.ui-select-choices-row-inner');                                      // 216\n        if (rowsInner.length !== 1) throw uiSelectMinErr('rows', \"Expected 1 .ui-select-choices-row-inner but got '{0}'.\", rowsInner.length);\n        rowsInner.attr('uis-transclude-append', ''); //Adding uisTranscludeAppend directive to row element after choices element has ngRepeat\n                                                                                                                       // 219\n        $compile(element, transcludeFn)(scope); //Passing current transcludeFn to be able to append elements correctly from uisTranscludeAppend\n                                                                                                                       // 221\n        scope.$watch('$select.search', function(newValue) {                                                            // 222\n          if(newValue && !$select.open && $select.multiple) $select.activate(false, true);                             // 223\n          $select.activeIndex = $select.tagging.isActivated ? -1 : 0;                                                  // 224\n          $select.refresh(attrs.refresh);                                                                              // 225\n        });                                                                                                            // 226\n                                                                                                                       // 227\n        attrs.$observe('refreshDelay', function() {                                                                    // 228\n          // $eval() is needed otherwise we get a string instead of a number                                           // 229\n          var refreshDelay = scope.$eval(attrs.refreshDelay);                                                          // 230\n          $select.refreshDelay = refreshDelay !== undefined ? refreshDelay : uiSelectConfig.refreshDelay;              // 231\n        });                                                                                                            // 232\n      };                                                                                                               // 233\n    }                                                                                                                  // 234\n  };                                                                                                                   // 235\n}]);                                                                                                                   // 236\n                                                                                                                       // 237\n/**                                                                                                                    // 238\n * Contains ui-select \"intelligence\".                                                                                  // 239\n *                                                                                                                     // 240\n * The goal is to limit dependency on the DOM whenever possible and                                                    // 241\n * put as much logic in the controller (instead of the link functions) as possible so it can be easily tested.         // 242\n */                                                                                                                    // 243\nuis.controller('uiSelectCtrl',                                                                                         // 244\n  ['$scope', '$element', '$timeout', '$filter', 'uisRepeatParser', 'uiSelectMinErr', 'uiSelectConfig',                 // 245\n  function($scope, $element, $timeout, $filter, RepeatParser, uiSelectMinErr, uiSelectConfig) {                        // 246\n                                                                                                                       // 247\n  var ctrl = this;                                                                                                     // 248\n                                                                                                                       // 249\n  var EMPTY_SEARCH = '';                                                                                               // 250\n                                                                                                                       // 251\n  ctrl.placeholder = uiSelectConfig.placeholder;                                                                       // 252\n  ctrl.searchEnabled = uiSelectConfig.searchEnabled;                                                                   // 253\n  ctrl.sortable = uiSelectConfig.sortable;                                                                             // 254\n  ctrl.refreshDelay = uiSelectConfig.refreshDelay;                                                                     // 255\n                                                                                                                       // 256\n  ctrl.removeSelected = false; //If selected item(s) should be removed from dropdown list                              // 257\n  ctrl.closeOnSelect = true; //Initialized inside uiSelect directive link function                                     // 258\n  ctrl.search = EMPTY_SEARCH;                                                                                          // 259\n                                                                                                                       // 260\n  ctrl.activeIndex = 0; //Dropdown of choices                                                                          // 261\n  ctrl.items = []; //All available choices                                                                             // 262\n                                                                                                                       // 263\n  ctrl.open = false;                                                                                                   // 264\n  ctrl.focus = false;                                                                                                  // 265\n  ctrl.disabled = false;                                                                                               // 266\n  ctrl.selected = undefined;                                                                                           // 267\n                                                                                                                       // 268\n  ctrl.focusser = undefined; //Reference to input element used to handle focus events                                  // 269\n  ctrl.resetSearchInput = true;                                                                                        // 270\n  ctrl.multiple = undefined; // Initialized inside uiSelect directive link function                                    // 271\n  ctrl.disableChoiceExpression = undefined; // Initialized inside uiSelectChoices directive link function              // 272\n  ctrl.tagging = {isActivated: false, fct: undefined};                                                                 // 273\n  ctrl.taggingTokens = {isActivated: false, tokens: undefined};                                                        // 274\n  ctrl.lockChoiceExpression = undefined; // Initialized inside uiSelectMatch directive link function                   // 275\n  ctrl.clickTriggeredSelect = false;                                                                                   // 276\n  ctrl.$filter = $filter;                                                                                              // 277\n                                                                                                                       // 278\n  ctrl.searchInput = $element.querySelectorAll('input.ui-select-search');                                              // 279\n  if (ctrl.searchInput.length !== 1) {                                                                                 // 280\n    throw uiSelectMinErr('searchInput', \"Expected 1 input.ui-select-search but got '{0}'.\", ctrl.searchInput.length);  // 281\n  }                                                                                                                    // 282\n                                                                                                                       // 283\n  ctrl.isEmpty = function() {                                                                                          // 284\n    return angular.isUndefined(ctrl.selected) || ctrl.selected === null || ctrl.selected === '';                       // 285\n  };                                                                                                                   // 286\n                                                                                                                       // 287\n  // Most of the time the user does not want to empty the search input when in typeahead mode                          // 288\n  function _resetSearchInput() {                                                                                       // 289\n    if (ctrl.resetSearchInput || (ctrl.resetSearchInput === undefined && uiSelectConfig.resetSearchInput)) {           // 290\n      ctrl.search = EMPTY_SEARCH;                                                                                      // 291\n      //reset activeIndex                                                                                              // 292\n      if (ctrl.selected && ctrl.items.length && !ctrl.multiple) {                                                      // 293\n        ctrl.activeIndex = ctrl.items.indexOf(ctrl.selected);                                                          // 294\n      }                                                                                                                // 295\n    }                                                                                                                  // 296\n  }                                                                                                                    // 297\n                                                                                                                       // 298\n    function _groupsFilter(groups, groupNames) {                                                                       // 299\n      var i, j, result = [];                                                                                           // 300\n      for(i = 0; i < groupNames.length ;i++){                                                                          // 301\n        for(j = 0; j < groups.length ;j++){                                                                            // 302\n          if(groups[j].name == [groupNames[i]]){                                                                       // 303\n            result.push(groups[j]);                                                                                    // 304\n          }                                                                                                            // 305\n        }                                                                                                              // 306\n      }                                                                                                                // 307\n      return result;                                                                                                   // 308\n    }                                                                                                                  // 309\n                                                                                                                       // 310\n  // When the user clicks on ui-select, displays the dropdown list                                                     // 311\n  ctrl.activate = function(initSearchValue, avoidReset) {                                                              // 312\n    if (!ctrl.disabled  && !ctrl.open) {                                                                               // 313\n      if(!avoidReset) _resetSearchInput();                                                                             // 314\n                                                                                                                       // 315\n      $scope.$broadcast('uis:activate');                                                                               // 316\n                                                                                                                       // 317\n      ctrl.open = true;                                                                                                // 318\n                                                                                                                       // 319\n      ctrl.activeIndex = ctrl.activeIndex >= ctrl.items.length ? 0 : ctrl.activeIndex;                                 // 320\n                                                                                                                       // 321\n      // ensure that the index is set to zero for tagging variants                                                     // 322\n      // that where first option is auto-selected                                                                      // 323\n      if ( ctrl.activeIndex === -1 && ctrl.taggingLabel !== false ) {                                                  // 324\n        ctrl.activeIndex = 0;                                                                                          // 325\n      }                                                                                                                // 326\n                                                                                                                       // 327\n      // Give it time to appear before focus                                                                           // 328\n      $timeout(function() {                                                                                            // 329\n        ctrl.search = initSearchValue || ctrl.search;                                                                  // 330\n        ctrl.searchInput[0].focus();                                                                                   // 331\n      });                                                                                                              // 332\n    }                                                                                                                  // 333\n  };                                                                                                                   // 334\n                                                                                                                       // 335\n  ctrl.findGroupByName = function(name) {                                                                              // 336\n    return ctrl.groups && ctrl.groups.filter(function(group) {                                                         // 337\n      return group.name === name;                                                                                      // 338\n    })[0];                                                                                                             // 339\n  };                                                                                                                   // 340\n                                                                                                                       // 341\n  ctrl.parseRepeatAttr = function(repeatAttr, groupByExp, groupFilterExp) {                                            // 342\n    function updateGroups(items) {                                                                                     // 343\n      var groupFn = $scope.$eval(groupByExp);                                                                          // 344\n      ctrl.groups = [];                                                                                                // 345\n      angular.forEach(items, function(item) {                                                                          // 346\n        var groupName = angular.isFunction(groupFn) ? groupFn(item) : item[groupFn];                                   // 347\n        var group = ctrl.findGroupByName(groupName);                                                                   // 348\n        if(group) {                                                                                                    // 349\n          group.items.push(item);                                                                                      // 350\n        }                                                                                                              // 351\n        else {                                                                                                         // 352\n          ctrl.groups.push({name: groupName, items: [item]});                                                          // 353\n        }                                                                                                              // 354\n      });                                                                                                              // 355\n      if(groupFilterExp){                                                                                              // 356\n        var groupFilterFn = $scope.$eval(groupFilterExp);                                                              // 357\n        if( angular.isFunction(groupFilterFn)){                                                                        // 358\n          ctrl.groups = groupFilterFn(ctrl.groups);                                                                    // 359\n        } else if(angular.isArray(groupFilterFn)){                                                                     // 360\n          ctrl.groups = _groupsFilter(ctrl.groups, groupFilterFn);                                                     // 361\n        }                                                                                                              // 362\n      }                                                                                                                // 363\n      ctrl.items = [];                                                                                                 // 364\n      ctrl.groups.forEach(function(group) {                                                                            // 365\n        ctrl.items = ctrl.items.concat(group.items);                                                                   // 366\n      });                                                                                                              // 367\n    }                                                                                                                  // 368\n                                                                                                                       // 369\n    function setPlainItems(items) {                                                                                    // 370\n      ctrl.items = items;                                                                                              // 371\n    }                                                                                                                  // 372\n                                                                                                                       // 373\n    ctrl.setItemsFn = groupByExp ? updateGroups : setPlainItems;                                                       // 374\n                                                                                                                       // 375\n    ctrl.parserResult = RepeatParser.parse(repeatAttr);                                                                // 376\n                                                                                                                       // 377\n    ctrl.isGrouped = !!groupByExp;                                                                                     // 378\n    ctrl.itemProperty = ctrl.parserResult.itemName;                                                                    // 379\n                                                                                                                       // 380\n    ctrl.refreshItems = function (data){                                                                               // 381\n      data = data || ctrl.parserResult.source($scope);                                                                 // 382\n      var selectedItems = ctrl.selected;                                                                               // 383\n      //TODO should implement for single mode removeSelected                                                           // 384\n      if ((angular.isArray(selectedItems) && !selectedItems.length) || !ctrl.removeSelected) {                         // 385\n        ctrl.setItemsFn(data);                                                                                         // 386\n      }else{                                                                                                           // 387\n        if ( data !== undefined ) {                                                                                    // 388\n          var filteredItems = data.filter(function(i) {return selectedItems.indexOf(i) < 0;});                         // 389\n          ctrl.setItemsFn(filteredItems);                                                                              // 390\n        }                                                                                                              // 391\n      }                                                                                                                // 392\n    };                                                                                                                 // 393\n                                                                                                                       // 394\n    // See https://github.com/angular/angular.js/blob/v1.2.15/src/ng/directive/ngRepeat.js#L259                        // 395\n    $scope.$watchCollection(ctrl.parserResult.source, function(items) {                                                // 396\n      if (items === undefined || items === null) {                                                                     // 397\n        // If the user specifies undefined or null => reset the collection                                             // 398\n        // Special case: items can be undefined if the user did not initialized the collection on the scope            // 399\n        // i.e $scope.addresses = [] is missing                                                                        // 400\n        ctrl.items = [];                                                                                               // 401\n      } else {                                                                                                         // 402\n        if (!angular.isArray(items)) {                                                                                 // 403\n          throw uiSelectMinErr('items', \"Expected an array but got '{0}'.\", items);                                    // 404\n        } else {                                                                                                       // 405\n          //Remove already selected items (ex: while searching)                                                        // 406\n          //TODO Should add a test                                                                                     // 407\n          ctrl.refreshItems(items);                                                                                    // 408\n          ctrl.ngModel.$modelValue = null; //Force scope model value and ngModel value to be out of sync to re-run formatters\n        }                                                                                                              // 410\n      }                                                                                                                // 411\n    });                                                                                                                // 412\n                                                                                                                       // 413\n  };                                                                                                                   // 414\n                                                                                                                       // 415\n  var _refreshDelayPromise;                                                                                            // 416\n                                                                                                                       // 417\n  /**                                                                                                                  // 418\n   * Typeahead mode: lets the user refresh the collection using his own function.                                      // 419\n   *                                                                                                                   // 420\n   * See Expose $select.search for external / remote filtering https://github.com/angular-ui/ui-select/pull/31         // 421\n   */                                                                                                                  // 422\n  ctrl.refresh = function(refreshAttr) {                                                                               // 423\n    if (refreshAttr !== undefined) {                                                                                   // 424\n                                                                                                                       // 425\n      // Debounce                                                                                                      // 426\n      // See https://github.com/angular-ui/bootstrap/blob/0.10.0/src/typeahead/typeahead.js#L155                       // 427\n      // FYI AngularStrap typeahead does not have debouncing: https://github.com/mgcrea/angular-strap/blob/v2.0.0-rc.4/src/typeahead/typeahead.js#L177\n      if (_refreshDelayPromise) {                                                                                      // 429\n        $timeout.cancel(_refreshDelayPromise);                                                                         // 430\n      }                                                                                                                // 431\n      _refreshDelayPromise = $timeout(function() {                                                                     // 432\n        $scope.$eval(refreshAttr);                                                                                     // 433\n      }, ctrl.refreshDelay);                                                                                           // 434\n    }                                                                                                                  // 435\n  };                                                                                                                   // 436\n                                                                                                                       // 437\n  ctrl.setActiveItem = function(item) {                                                                                // 438\n    ctrl.activeIndex = ctrl.items.indexOf(item);                                                                       // 439\n  };                                                                                                                   // 440\n                                                                                                                       // 441\n  ctrl.isActive = function(itemScope) {                                                                                // 442\n    if ( !ctrl.open ) {                                                                                                // 443\n      return false;                                                                                                    // 444\n    }                                                                                                                  // 445\n    var itemIndex = ctrl.items.indexOf(itemScope[ctrl.itemProperty]);                                                  // 446\n    var isActive =  itemIndex === ctrl.activeIndex;                                                                    // 447\n                                                                                                                       // 448\n    if ( !isActive || ( itemIndex < 0 && ctrl.taggingLabel !== false ) ||( itemIndex < 0 && ctrl.taggingLabel === false) ) {\n      return false;                                                                                                    // 450\n    }                                                                                                                  // 451\n                                                                                                                       // 452\n    if (isActive && !angular.isUndefined(ctrl.onHighlightCallback)) {                                                  // 453\n      itemScope.$eval(ctrl.onHighlightCallback);                                                                       // 454\n    }                                                                                                                  // 455\n                                                                                                                       // 456\n    return isActive;                                                                                                   // 457\n  };                                                                                                                   // 458\n                                                                                                                       // 459\n  ctrl.isDisabled = function(itemScope) {                                                                              // 460\n                                                                                                                       // 461\n    if (!ctrl.open) return;                                                                                            // 462\n                                                                                                                       // 463\n    var itemIndex = ctrl.items.indexOf(itemScope[ctrl.itemProperty]);                                                  // 464\n    var isDisabled = false;                                                                                            // 465\n    var item;                                                                                                          // 466\n                                                                                                                       // 467\n    if (itemIndex >= 0 && !angular.isUndefined(ctrl.disableChoiceExpression)) {                                        // 468\n      item = ctrl.items[itemIndex];                                                                                    // 469\n      isDisabled = !!(itemScope.$eval(ctrl.disableChoiceExpression)); // force the boolean value                       // 470\n      item._uiSelectChoiceDisabled = isDisabled; // store this for later reference                                     // 471\n    }                                                                                                                  // 472\n                                                                                                                       // 473\n    return isDisabled;                                                                                                 // 474\n  };                                                                                                                   // 475\n                                                                                                                       // 476\n                                                                                                                       // 477\n  // When the user selects an item with ENTER or clicks the dropdown                                                   // 478\n  ctrl.select = function(item, skipFocusser, $event) {                                                                 // 479\n    if (item === undefined || !item._uiSelectChoiceDisabled) {                                                         // 480\n                                                                                                                       // 481\n      if ( ! ctrl.items && ! ctrl.search ) return;                                                                     // 482\n                                                                                                                       // 483\n      if (!item || !item._uiSelectChoiceDisabled) {                                                                    // 484\n        if(ctrl.tagging.isActivated) {                                                                                 // 485\n          // if taggingLabel is disabled, we pull from ctrl.search val                                                 // 486\n          if ( ctrl.taggingLabel === false ) {                                                                         // 487\n            if ( ctrl.activeIndex < 0 ) {                                                                              // 488\n              item = ctrl.tagging.fct !== undefined ? ctrl.tagging.fct(ctrl.search) : ctrl.search;                     // 489\n              if (!item || angular.equals( ctrl.items[0], item ) ) {                                                   // 490\n                return;                                                                                                // 491\n              }                                                                                                        // 492\n            } else {                                                                                                   // 493\n              // keyboard nav happened first, user selected from dropdown                                              // 494\n              item = ctrl.items[ctrl.activeIndex];                                                                     // 495\n            }                                                                                                          // 496\n          } else {                                                                                                     // 497\n            // tagging always operates at index zero, taggingLabel === false pushes                                    // 498\n            // the ctrl.search value without having it injected                                                        // 499\n            if ( ctrl.activeIndex === 0 ) {                                                                            // 500\n              // ctrl.tagging pushes items to ctrl.items, so we only have empty val                                    // 501\n              // for `item` if it is a detected duplicate                                                              // 502\n              if ( item === undefined ) return;                                                                        // 503\n                                                                                                                       // 504\n              // create new item on the fly if we don't already have one;                                              // 505\n              // use tagging function if we have one                                                                   // 506\n              if ( ctrl.tagging.fct !== undefined && typeof item === 'string' ) {                                      // 507\n                item = ctrl.tagging.fct(ctrl.search);                                                                  // 508\n                if (!item) return;                                                                                     // 509\n              // if item type is 'string', apply the tagging label                                                     // 510\n              } else if ( typeof item === 'string' ) {                                                                 // 511\n                // trim the trailing space                                                                             // 512\n                item = item.replace(ctrl.taggingLabel,'').trim();                                                      // 513\n              }                                                                                                        // 514\n            }                                                                                                          // 515\n          }                                                                                                            // 516\n          // search ctrl.selected for dupes potentially caused by tagging and return early if found                    // 517\n          if ( ctrl.selected && angular.isArray(ctrl.selected) && ctrl.selected.filter( function (selection) { return angular.equals(selection, item); }).length > 0 ) {\n            ctrl.close(skipFocusser);                                                                                  // 519\n            return;                                                                                                    // 520\n          }                                                                                                            // 521\n        }                                                                                                              // 522\n                                                                                                                       // 523\n        $scope.$broadcast('uis:select', item);                                                                         // 524\n                                                                                                                       // 525\n        var locals = {};                                                                                               // 526\n        locals[ctrl.parserResult.itemName] = item;                                                                     // 527\n                                                                                                                       // 528\n        $timeout(function(){                                                                                           // 529\n          ctrl.onSelectCallback($scope, {                                                                              // 530\n            $item: item,                                                                                               // 531\n            $model: ctrl.parserResult.modelMapper($scope, locals)                                                      // 532\n          });                                                                                                          // 533\n        });                                                                                                            // 534\n                                                                                                                       // 535\n        if (ctrl.closeOnSelect) {                                                                                      // 536\n          ctrl.close(skipFocusser);                                                                                    // 537\n        }                                                                                                              // 538\n        if ($event && $event.type === 'click') {                                                                       // 539\n          ctrl.clickTriggeredSelect = true;                                                                            // 540\n        }                                                                                                              // 541\n      }                                                                                                                // 542\n    }                                                                                                                  // 543\n  };                                                                                                                   // 544\n                                                                                                                       // 545\n  // Closes the dropdown                                                                                               // 546\n  ctrl.close = function(skipFocusser) {                                                                                // 547\n    if (!ctrl.open) return;                                                                                            // 548\n    if (ctrl.ngModel && ctrl.ngModel.$setTouched) ctrl.ngModel.$setTouched();                                          // 549\n    _resetSearchInput();                                                                                               // 550\n    ctrl.open = false;                                                                                                 // 551\n                                                                                                                       // 552\n    $scope.$broadcast('uis:close', skipFocusser);                                                                      // 553\n                                                                                                                       // 554\n  };                                                                                                                   // 555\n                                                                                                                       // 556\n  ctrl.setFocus = function(){                                                                                          // 557\n    if (!ctrl.focus) ctrl.focusInput[0].focus();                                                                       // 558\n  };                                                                                                                   // 559\n                                                                                                                       // 560\n  ctrl.clear = function($event) {                                                                                      // 561\n    ctrl.select(undefined);                                                                                            // 562\n    $event.stopPropagation();                                                                                          // 563\n    $timeout(function() {                                                                                              // 564\n      ctrl.focusser[0].focus();                                                                                        // 565\n    }, 0, false);                                                                                                      // 566\n  };                                                                                                                   // 567\n                                                                                                                       // 568\n  // Toggle dropdown                                                                                                   // 569\n  ctrl.toggle = function(e) {                                                                                          // 570\n    if (ctrl.open) {                                                                                                   // 571\n      ctrl.close();                                                                                                    // 572\n      e.preventDefault();                                                                                              // 573\n      e.stopPropagation();                                                                                             // 574\n    } else {                                                                                                           // 575\n      ctrl.activate();                                                                                                 // 576\n    }                                                                                                                  // 577\n  };                                                                                                                   // 578\n                                                                                                                       // 579\n  ctrl.isLocked = function(itemScope, itemIndex) {                                                                     // 580\n      var isLocked, item = ctrl.selected[itemIndex];                                                                   // 581\n                                                                                                                       // 582\n      if (item && !angular.isUndefined(ctrl.lockChoiceExpression)) {                                                   // 583\n          isLocked = !!(itemScope.$eval(ctrl.lockChoiceExpression)); // force the boolean value                        // 584\n          item._uiSelectChoiceLocked = isLocked; // store this for later reference                                     // 585\n      }                                                                                                                // 586\n                                                                                                                       // 587\n      return isLocked;                                                                                                 // 588\n  };                                                                                                                   // 589\n                                                                                                                       // 590\n  var sizeWatch = null;                                                                                                // 591\n  ctrl.sizeSearchInput = function() {                                                                                  // 592\n                                                                                                                       // 593\n    var input = ctrl.searchInput[0],                                                                                   // 594\n        container = ctrl.searchInput.parent().parent()[0],                                                             // 595\n        calculateContainerWidth = function() {                                                                         // 596\n          // Return the container width only if the search input is visible                                            // 597\n          return container.clientWidth * !!input.offsetParent;                                                         // 598\n        },                                                                                                             // 599\n        updateIfVisible = function(containerWidth) {                                                                   // 600\n          if (containerWidth === 0) {                                                                                  // 601\n            return false;                                                                                              // 602\n          }                                                                                                            // 603\n          var inputWidth = containerWidth - input.offsetLeft - 10;                                                     // 604\n          if (inputWidth < 50) inputWidth = containerWidth;                                                            // 605\n          ctrl.searchInput.css('width', inputWidth+'px');                                                              // 606\n          return true;                                                                                                 // 607\n        };                                                                                                             // 608\n                                                                                                                       // 609\n    ctrl.searchInput.css('width', '10px');                                                                             // 610\n    $timeout(function() { //Give tags time to render correctly                                                         // 611\n      if (sizeWatch === null && !updateIfVisible(calculateContainerWidth())) {                                         // 612\n        sizeWatch = $scope.$watch(calculateContainerWidth, function(containerWidth) {                                  // 613\n          if (updateIfVisible(containerWidth)) {                                                                       // 614\n            sizeWatch();                                                                                               // 615\n            sizeWatch = null;                                                                                          // 616\n          }                                                                                                            // 617\n        });                                                                                                            // 618\n      }                                                                                                                // 619\n    });                                                                                                                // 620\n  };                                                                                                                   // 621\n                                                                                                                       // 622\n  function _handleDropDownSelection(key) {                                                                             // 623\n    var processed = true;                                                                                              // 624\n    switch (key) {                                                                                                     // 625\n      case KEY.DOWN:                                                                                                   // 626\n        if (!ctrl.open && ctrl.multiple) ctrl.activate(false, true); //In case its the search input in 'multiple' mode // 627\n        else if (ctrl.activeIndex < ctrl.items.length - 1) { ctrl.activeIndex++; }                                     // 628\n        break;                                                                                                         // 629\n      case KEY.UP:                                                                                                     // 630\n        if (!ctrl.open && ctrl.multiple) ctrl.activate(false, true); //In case its the search input in 'multiple' mode // 631\n        else if (ctrl.activeIndex > 0 || (ctrl.search.length === 0 && ctrl.tagging.isActivated && ctrl.activeIndex > -1)) { ctrl.activeIndex--; }\n        break;                                                                                                         // 633\n      case KEY.TAB:                                                                                                    // 634\n        if (!ctrl.multiple || ctrl.open) ctrl.select(ctrl.items[ctrl.activeIndex], true);                              // 635\n        break;                                                                                                         // 636\n      case KEY.ENTER:                                                                                                  // 637\n        if(ctrl.open && (ctrl.tagging.isActivated || ctrl.activeIndex >= 0)){                                          // 638\n          ctrl.select(ctrl.items[ctrl.activeIndex]); // Make sure at least one dropdown item is highlighted before adding if not in tagging mode\n        } else {                                                                                                       // 640\n          ctrl.activate(false, true); //In case its the search input in 'multiple' mode                                // 641\n        }                                                                                                              // 642\n        break;                                                                                                         // 643\n      case KEY.ESC:                                                                                                    // 644\n        ctrl.close();                                                                                                  // 645\n        break;                                                                                                         // 646\n      default:                                                                                                         // 647\n        processed = false;                                                                                             // 648\n    }                                                                                                                  // 649\n    return processed;                                                                                                  // 650\n  }                                                                                                                    // 651\n                                                                                                                       // 652\n  // Bind to keyboard shortcuts                                                                                        // 653\n  ctrl.searchInput.on('keydown', function(e) {                                                                         // 654\n                                                                                                                       // 655\n    var key = e.which;                                                                                                 // 656\n                                                                                                                       // 657\n    // if(~[KEY.ESC,KEY.TAB].indexOf(key)){                                                                            // 658\n    //   //TODO: SEGURO?                                                                                               // 659\n    //   ctrl.close();                                                                                                 // 660\n    // }                                                                                                               // 661\n                                                                                                                       // 662\n    $scope.$apply(function() {                                                                                         // 663\n                                                                                                                       // 664\n      var tagged = false;                                                                                              // 665\n                                                                                                                       // 666\n      if (ctrl.items.length > 0 || ctrl.tagging.isActivated) {                                                         // 667\n        _handleDropDownSelection(key);                                                                                 // 668\n        if ( ctrl.taggingTokens.isActivated ) {                                                                        // 669\n          for (var i = 0; i < ctrl.taggingTokens.tokens.length; i++) {                                                 // 670\n            if ( ctrl.taggingTokens.tokens[i] === KEY.MAP[e.keyCode] ) {                                               // 671\n              // make sure there is a new value to push via tagging                                                    // 672\n              if ( ctrl.search.length > 0 ) {                                                                          // 673\n                tagged = true;                                                                                         // 674\n              }                                                                                                        // 675\n            }                                                                                                          // 676\n          }                                                                                                            // 677\n          if ( tagged ) {                                                                                              // 678\n            $timeout(function() {                                                                                      // 679\n              ctrl.searchInput.triggerHandler('tagged');                                                               // 680\n              var newItem = ctrl.search.replace(KEY.MAP[e.keyCode],'').trim();                                         // 681\n              if ( ctrl.tagging.fct ) {                                                                                // 682\n                newItem = ctrl.tagging.fct( newItem );                                                                 // 683\n              }                                                                                                        // 684\n              if (newItem) ctrl.select(newItem, true);                                                                 // 685\n            });                                                                                                        // 686\n          }                                                                                                            // 687\n        }                                                                                                              // 688\n      }                                                                                                                // 689\n                                                                                                                       // 690\n    });                                                                                                                // 691\n                                                                                                                       // 692\n    if(KEY.isVerticalMovement(key) && ctrl.items.length > 0){                                                          // 693\n      _ensureHighlightVisible();                                                                                       // 694\n    }                                                                                                                  // 695\n                                                                                                                       // 696\n    if (key === KEY.ENTER || key === KEY.ESC) {                                                                        // 697\n      e.preventDefault();                                                                                              // 698\n      e.stopPropagation();                                                                                             // 699\n    }                                                                                                                  // 700\n                                                                                                                       // 701\n  });                                                                                                                  // 702\n                                                                                                                       // 703\n  // If tagging try to split by tokens and add items                                                                   // 704\n  ctrl.searchInput.on('paste', function (e) {                                                                          // 705\n    var data = e.originalEvent.clipboardData.getData('text/plain');                                                    // 706\n    if (data && data.length > 0 && ctrl.taggingTokens.isActivated && ctrl.tagging.fct) {                               // 707\n      var items = data.split(ctrl.taggingTokens.tokens[0]); // split by first token only                               // 708\n      if (items && items.length > 0) {                                                                                 // 709\n        angular.forEach(items, function (item) {                                                                       // 710\n          var newItem = ctrl.tagging.fct(item);                                                                        // 711\n          if (newItem) {                                                                                               // 712\n            ctrl.select(newItem, true);                                                                                // 713\n          }                                                                                                            // 714\n        });                                                                                                            // 715\n        e.preventDefault();                                                                                            // 716\n        e.stopPropagation();                                                                                           // 717\n      }                                                                                                                // 718\n    }                                                                                                                  // 719\n  });                                                                                                                  // 720\n                                                                                                                       // 721\n  ctrl.searchInput.on('tagged', function() {                                                                           // 722\n    $timeout(function() {                                                                                              // 723\n      _resetSearchInput();                                                                                             // 724\n    });                                                                                                                // 725\n  });                                                                                                                  // 726\n                                                                                                                       // 727\n  // See https://github.com/ivaynberg/select2/blob/3.4.6/select2.js#L1431                                              // 728\n  function _ensureHighlightVisible() {                                                                                 // 729\n    var container = $element.querySelectorAll('.ui-select-choices-content');                                           // 730\n    var choices = container.querySelectorAll('.ui-select-choices-row');                                                // 731\n    if (choices.length < 1) {                                                                                          // 732\n      throw uiSelectMinErr('choices', \"Expected multiple .ui-select-choices-row but got '{0}'.\", choices.length);      // 733\n    }                                                                                                                  // 734\n                                                                                                                       // 735\n    if (ctrl.activeIndex < 0) {                                                                                        // 736\n      return;                                                                                                          // 737\n    }                                                                                                                  // 738\n                                                                                                                       // 739\n    var highlighted = choices[ctrl.activeIndex];                                                                       // 740\n    var posY = highlighted.offsetTop + highlighted.clientHeight - container[0].scrollTop;                              // 741\n    var height = container[0].offsetHeight;                                                                            // 742\n                                                                                                                       // 743\n    if (posY > height) {                                                                                               // 744\n      container[0].scrollTop += posY - height;                                                                         // 745\n    } else if (posY < highlighted.clientHeight) {                                                                      // 746\n      if (ctrl.isGrouped && ctrl.activeIndex === 0)                                                                    // 747\n        container[0].scrollTop = 0; //To make group header visible when going all the way up                           // 748\n      else                                                                                                             // 749\n        container[0].scrollTop -= highlighted.clientHeight - posY;                                                     // 750\n    }                                                                                                                  // 751\n  }                                                                                                                    // 752\n                                                                                                                       // 753\n  $scope.$on('$destroy', function() {                                                                                  // 754\n    ctrl.searchInput.off('keyup keydown tagged blur paste');                                                           // 755\n  });                                                                                                                  // 756\n                                                                                                                       // 757\n}]);                                                                                                                   // 758\n                                                                                                                       // 759\nuis.directive('uiSelect',                                                                                              // 760\n  ['$document', 'uiSelectConfig', 'uiSelectMinErr', 'uisOffset', '$compile', '$parse', '$timeout',                     // 761\n  function($document, uiSelectConfig, uiSelectMinErr, uisOffset, $compile, $parse, $timeout) {                         // 762\n                                                                                                                       // 763\n  return {                                                                                                             // 764\n    restrict: 'EA',                                                                                                    // 765\n    templateUrl: function(tElement, tAttrs) {                                                                          // 766\n      var theme = tAttrs.theme || uiSelectConfig.theme;                                                                // 767\n      return theme + (angular.isDefined(tAttrs.multiple) ? '/select-multiple.tpl.html' : '/select.tpl.html');          // 768\n    },                                                                                                                 // 769\n    replace: true,                                                                                                     // 770\n    transclude: true,                                                                                                  // 771\n    require: ['uiSelect', '^ngModel'],                                                                                 // 772\n    scope: true,                                                                                                       // 773\n                                                                                                                       // 774\n    controller: 'uiSelectCtrl',                                                                                        // 775\n    controllerAs: '$select',                                                                                           // 776\n    compile: function(tElement, tAttrs) {                                                                              // 777\n                                                                                                                       // 778\n      //Multiple or Single depending if multiple attribute presence                                                    // 779\n      if (angular.isDefined(tAttrs.multiple))                                                                          // 780\n        tElement.append(\"<ui-select-multiple/>\").removeAttr('multiple');                                               // 781\n      else                                                                                                             // 782\n        tElement.append(\"<ui-select-single/>\");                                                                        // 783\n                                                                                                                       // 784\n      return function(scope, element, attrs, ctrls, transcludeFn) {                                                    // 785\n                                                                                                                       // 786\n        var $select = ctrls[0];                                                                                        // 787\n        var ngModel = ctrls[1];                                                                                        // 788\n                                                                                                                       // 789\n        $select.generatedId = uiSelectConfig.generateId();                                                             // 790\n        $select.baseTitle = attrs.title || 'Select box';                                                               // 791\n        $select.focusserTitle = $select.baseTitle + ' focus';                                                          // 792\n        $select.focusserId = 'focusser-' + $select.generatedId;                                                        // 793\n                                                                                                                       // 794\n        $select.closeOnSelect = function() {                                                                           // 795\n          if (angular.isDefined(attrs.closeOnSelect)) {                                                                // 796\n            return $parse(attrs.closeOnSelect)();                                                                      // 797\n          } else {                                                                                                     // 798\n            return uiSelectConfig.closeOnSelect;                                                                       // 799\n          }                                                                                                            // 800\n        }();                                                                                                           // 801\n                                                                                                                       // 802\n        $select.onSelectCallback = $parse(attrs.onSelect);                                                             // 803\n        $select.onRemoveCallback = $parse(attrs.onRemove);                                                             // 804\n                                                                                                                       // 805\n        //Set reference to ngModel from uiSelectCtrl                                                                   // 806\n        $select.ngModel = ngModel;                                                                                     // 807\n                                                                                                                       // 808\n        $select.choiceGrouped = function(group){                                                                       // 809\n          return $select.isGrouped && group && group.name;                                                             // 810\n        };                                                                                                             // 811\n                                                                                                                       // 812\n        if(attrs.tabindex){                                                                                            // 813\n          attrs.$observe('tabindex', function(value) {                                                                 // 814\n            $select.focusInput.attr(\"tabindex\", value);                                                                // 815\n            element.removeAttr(\"tabindex\");                                                                            // 816\n          });                                                                                                          // 817\n        }                                                                                                              // 818\n                                                                                                                       // 819\n        scope.$watch('searchEnabled', function() {                                                                     // 820\n            var searchEnabled = scope.$eval(attrs.searchEnabled);                                                      // 821\n            $select.searchEnabled = searchEnabled !== undefined ? searchEnabled : uiSelectConfig.searchEnabled;        // 822\n        });                                                                                                            // 823\n                                                                                                                       // 824\n        scope.$watch('sortable', function() {                                                                          // 825\n            var sortable = scope.$eval(attrs.sortable);                                                                // 826\n            $select.sortable = sortable !== undefined ? sortable : uiSelectConfig.sortable;                            // 827\n        });                                                                                                            // 828\n                                                                                                                       // 829\n        attrs.$observe('disabled', function() {                                                                        // 830\n          // No need to use $eval() (thanks to ng-disabled) since we already get a boolean instead of a string         // 831\n          $select.disabled = attrs.disabled !== undefined ? attrs.disabled : false;                                    // 832\n        });                                                                                                            // 833\n                                                                                                                       // 834\n        attrs.$observe('resetSearchInput', function() {                                                                // 835\n          // $eval() is needed otherwise we get a string instead of a boolean                                          // 836\n          var resetSearchInput = scope.$eval(attrs.resetSearchInput);                                                  // 837\n          $select.resetSearchInput = resetSearchInput !== undefined ? resetSearchInput : true;                         // 838\n        });                                                                                                            // 839\n                                                                                                                       // 840\n        attrs.$observe('tagging', function() {                                                                         // 841\n          if(attrs.tagging !== undefined)                                                                              // 842\n          {                                                                                                            // 843\n            // $eval() is needed otherwise we get a string instead of a boolean                                        // 844\n            var taggingEval = scope.$eval(attrs.tagging);                                                              // 845\n            $select.tagging = {isActivated: true, fct: taggingEval !== true ? taggingEval : undefined};                // 846\n          }                                                                                                            // 847\n          else                                                                                                         // 848\n          {                                                                                                            // 849\n            $select.tagging = {isActivated: false, fct: undefined};                                                    // 850\n          }                                                                                                            // 851\n        });                                                                                                            // 852\n                                                                                                                       // 853\n        attrs.$observe('taggingLabel', function() {                                                                    // 854\n          if(attrs.tagging !== undefined )                                                                             // 855\n          {                                                                                                            // 856\n            // check eval for FALSE, in this case, we disable the labels                                               // 857\n            // associated with tagging                                                                                 // 858\n            if ( attrs.taggingLabel === 'false' ) {                                                                    // 859\n              $select.taggingLabel = false;                                                                            // 860\n            }                                                                                                          // 861\n            else                                                                                                       // 862\n            {                                                                                                          // 863\n              $select.taggingLabel = attrs.taggingLabel !== undefined ? attrs.taggingLabel : '(new)';                  // 864\n            }                                                                                                          // 865\n          }                                                                                                            // 866\n        });                                                                                                            // 867\n                                                                                                                       // 868\n        attrs.$observe('taggingTokens', function() {                                                                   // 869\n          if (attrs.tagging !== undefined) {                                                                           // 870\n            var tokens = attrs.taggingTokens !== undefined ? attrs.taggingTokens.split('|') : [',','ENTER'];           // 871\n            $select.taggingTokens = {isActivated: true, tokens: tokens };                                              // 872\n          }                                                                                                            // 873\n        });                                                                                                            // 874\n                                                                                                                       // 875\n        //Automatically gets focus when loaded                                                                         // 876\n        if (angular.isDefined(attrs.autofocus)){                                                                       // 877\n          $timeout(function(){                                                                                         // 878\n            $select.setFocus();                                                                                        // 879\n          });                                                                                                          // 880\n        }                                                                                                              // 881\n                                                                                                                       // 882\n        //Gets focus based on scope event name (e.g. focus-on='SomeEventName')                                         // 883\n        if (angular.isDefined(attrs.focusOn)){                                                                         // 884\n          scope.$on(attrs.focusOn, function() {                                                                        // 885\n              $timeout(function(){                                                                                     // 886\n                $select.setFocus();                                                                                    // 887\n              });                                                                                                      // 888\n          });                                                                                                          // 889\n        }                                                                                                              // 890\n                                                                                                                       // 891\n        function onDocumentClick(e) {                                                                                  // 892\n          if (!$select.open) return; //Skip it if dropdown is close                                                    // 893\n                                                                                                                       // 894\n          var contains = false;                                                                                        // 895\n                                                                                                                       // 896\n          if (window.jQuery) {                                                                                         // 897\n            // Firefox 3.6 does not support element.contains()                                                         // 898\n            // See Node.contains https://developer.mozilla.org/en-US/docs/Web/API/Node.contains                        // 899\n            contains = window.jQuery.contains(element[0], e.target);                                                   // 900\n          } else {                                                                                                     // 901\n            contains = element[0].contains(e.target);                                                                  // 902\n          }                                                                                                            // 903\n                                                                                                                       // 904\n          if (!contains && !$select.clickTriggeredSelect) {                                                            // 905\n            //Will lose focus only with certain targets                                                                // 906\n            var focusableControls = ['input','button','textarea'];                                                     // 907\n            var targetScope = angular.element(e.target).scope(); //To check if target is other ui-select               // 908\n            var skipFocusser = targetScope && targetScope.$select && targetScope.$select !== $select; //To check if target is other ui-select\n            if (!skipFocusser) skipFocusser =  ~focusableControls.indexOf(e.target.tagName.toLowerCase()); //Check if target is input, button or textarea\n            $select.close(skipFocusser);                                                                               // 911\n            scope.$digest();                                                                                           // 912\n          }                                                                                                            // 913\n          $select.clickTriggeredSelect = false;                                                                        // 914\n        }                                                                                                              // 915\n                                                                                                                       // 916\n        // See Click everywhere but here event http://stackoverflow.com/questions/12931369                             // 917\n        $document.on('click', onDocumentClick);                                                                        // 918\n                                                                                                                       // 919\n        scope.$on('$destroy', function() {                                                                             // 920\n          $document.off('click', onDocumentClick);                                                                     // 921\n        });                                                                                                            // 922\n                                                                                                                       // 923\n        // Move transcluded elements to their correct position in main template                                        // 924\n        transcludeFn(scope, function(clone) {                                                                          // 925\n          // See Transclude in AngularJS http://blog.omkarpatil.com/2012/11/transclude-in-angularjs.html               // 926\n                                                                                                                       // 927\n          // One day jqLite will be replaced by jQuery and we will be able to write:                                   // 928\n          // var transcludedElement = clone.filter('.my-class')                                                        // 929\n          // instead of creating a hackish DOM element:                                                                // 930\n          var transcluded = angular.element('<div>').append(clone);                                                    // 931\n                                                                                                                       // 932\n          var transcludedMatch = transcluded.querySelectorAll('.ui-select-match');                                     // 933\n          transcludedMatch.removeAttr('ui-select-match'); //To avoid loop in case directive as attr                    // 934\n          transcludedMatch.removeAttr('data-ui-select-match'); // Properly handle HTML5 data-attributes                // 935\n          if (transcludedMatch.length !== 1) {                                                                         // 936\n            throw uiSelectMinErr('transcluded', \"Expected 1 .ui-select-match but got '{0}'.\", transcludedMatch.length);\n          }                                                                                                            // 938\n          element.querySelectorAll('.ui-select-match').replaceWith(transcludedMatch);                                  // 939\n                                                                                                                       // 940\n          var transcludedChoices = transcluded.querySelectorAll('.ui-select-choices');                                 // 941\n          transcludedChoices.removeAttr('ui-select-choices'); //To avoid loop in case directive as attr                // 942\n          transcludedChoices.removeAttr('data-ui-select-choices'); // Properly handle HTML5 data-attributes            // 943\n          if (transcludedChoices.length !== 1) {                                                                       // 944\n            throw uiSelectMinErr('transcluded', \"Expected 1 .ui-select-choices but got '{0}'.\", transcludedChoices.length);\n          }                                                                                                            // 946\n          element.querySelectorAll('.ui-select-choices').replaceWith(transcludedChoices);                              // 947\n        });                                                                                                            // 948\n                                                                                                                       // 949\n        // Support for appending the select field to the body when its open                                            // 950\n        var appendToBody = scope.$eval(attrs.appendToBody);                                                            // 951\n        if (appendToBody !== undefined ? appendToBody : uiSelectConfig.appendToBody) {                                 // 952\n          scope.$watch('$select.open', function(isOpen) {                                                              // 953\n            if (isOpen) {                                                                                              // 954\n              positionDropdown();                                                                                      // 955\n            } else {                                                                                                   // 956\n              resetDropdown();                                                                                         // 957\n            }                                                                                                          // 958\n          });                                                                                                          // 959\n                                                                                                                       // 960\n          // Move the dropdown back to its original location when the scope is destroyed. Otherwise                    // 961\n          // it might stick around when the user routes away or the select field is otherwise removed                  // 962\n          scope.$on('$destroy', function() {                                                                           // 963\n            resetDropdown();                                                                                           // 964\n          });                                                                                                          // 965\n        }                                                                                                              // 966\n                                                                                                                       // 967\n        // Hold on to a reference to the .ui-select-container element for appendToBody support                         // 968\n        var placeholder = null,                                                                                        // 969\n            originalWidth = '';                                                                                        // 970\n                                                                                                                       // 971\n        function positionDropdown() {                                                                                  // 972\n          // Remember the absolute position of the element                                                             // 973\n          var offset = uisOffset(element);                                                                             // 974\n                                                                                                                       // 975\n          // Clone the element into a placeholder element to take its original place in the DOM                        // 976\n          placeholder = angular.element('<div class=\"ui-select-placeholder\"></div>');                                  // 977\n          placeholder[0].style.width = offset.width + 'px';                                                            // 978\n          placeholder[0].style.height = offset.height + 'px';                                                          // 979\n          element.after(placeholder);                                                                                  // 980\n                                                                                                                       // 981\n          // Remember the original value of the element width inline style, so it can be restored                      // 982\n          // when the dropdown is closed                                                                               // 983\n          originalWidth = element[0].style.width;                                                                      // 984\n                                                                                                                       // 985\n          // Now move the actual dropdown element to the end of the body                                               // 986\n          $document.find('body').append(element);                                                                      // 987\n                                                                                                                       // 988\n          element[0].style.position = 'absolute';                                                                      // 989\n          element[0].style.left = offset.left + 'px';                                                                  // 990\n          element[0].style.top = offset.top + 'px';                                                                    // 991\n          element[0].style.width = offset.width + 'px';                                                                // 992\n        }                                                                                                              // 993\n                                                                                                                       // 994\n        function resetDropdown() {                                                                                     // 995\n          if (placeholder === null) {                                                                                  // 996\n            // The dropdown has not actually been display yet, so there's nothing to reset                             // 997\n            return;                                                                                                    // 998\n          }                                                                                                            // 999\n                                                                                                                       // 1000\n          // Move the dropdown element back to its original location in the DOM                                        // 1001\n          placeholder.replaceWith(element);                                                                            // 1002\n          placeholder = null;                                                                                          // 1003\n                                                                                                                       // 1004\n          element[0].style.position = '';                                                                              // 1005\n          element[0].style.left = '';                                                                                  // 1006\n          element[0].style.top = '';                                                                                   // 1007\n          element[0].style.width = originalWidth;                                                                      // 1008\n        }                                                                                                              // 1009\n                                                                                                                       // 1010\n        // Hold on to a reference to the .ui-select-dropdown element for direction support.                            // 1011\n        var dropdown = null,                                                                                           // 1012\n            directionUpClassName = 'direction-up';                                                                     // 1013\n                                                                                                                       // 1014\n        // Support changing the direction of the dropdown if there isn't enough space to render it.                    // 1015\n        scope.$watch('$select.open', function(isOpen) {                                                                // 1016\n          if (isOpen) {                                                                                                // 1017\n            dropdown = angular.element(element).querySelectorAll('.ui-select-dropdown');                               // 1018\n            if (dropdown === null) {                                                                                   // 1019\n              return;                                                                                                  // 1020\n            }                                                                                                          // 1021\n                                                                                                                       // 1022\n            // Hide the dropdown so there is no flicker until $timeout is done executing.                              // 1023\n            dropdown[0].style.visibility = 'hidden';                                                                   // 1024\n                                                                                                                       // 1025\n            // Delay positioning the dropdown until all choices have been added so its height is correct.              // 1026\n            $timeout(function(){                                                                                       // 1027\n              var offset = uisOffset(element);                                                                         // 1028\n              var offsetDropdown = uisOffset(dropdown);                                                                // 1029\n                                                                                                                       // 1030\n              // Determine if the direction of the dropdown needs to be changed.                                       // 1031\n              if (offset.top + offset.height + offsetDropdown.height > $document[0].documentElement.scrollTop + $document[0].documentElement.clientHeight) {\n                dropdown[0].style.position = 'absolute';                                                               // 1033\n                dropdown[0].style.top = (offsetDropdown.height * -1) + 'px';                                           // 1034\n                element.addClass(directionUpClassName);                                                                // 1035\n              }                                                                                                        // 1036\n                                                                                                                       // 1037\n              // Display the dropdown once it has been positioned.                                                     // 1038\n              dropdown[0].style.visibility = '';                                                                       // 1039\n            });                                                                                                        // 1040\n          } else {                                                                                                     // 1041\n              if (dropdown === null) {                                                                                 // 1042\n                return;                                                                                                // 1043\n              }                                                                                                        // 1044\n                                                                                                                       // 1045\n              // Reset the position of the dropdown.                                                                   // 1046\n              dropdown[0].style.position = '';                                                                         // 1047\n              dropdown[0].style.top = '';                                                                              // 1048\n              element.removeClass(directionUpClassName);                                                               // 1049\n          }                                                                                                            // 1050\n        });                                                                                                            // 1051\n      };                                                                                                               // 1052\n    }                                                                                                                  // 1053\n  };                                                                                                                   // 1054\n}]);                                                                                                                   // 1055\n                                                                                                                       // 1056\nuis.directive('uiSelectMatch', ['uiSelectConfig', function(uiSelectConfig) {                                           // 1057\n  return {                                                                                                             // 1058\n    restrict: 'EA',                                                                                                    // 1059\n    require: '^uiSelect',                                                                                              // 1060\n    replace: true,                                                                                                     // 1061\n    transclude: true,                                                                                                  // 1062\n    templateUrl: function(tElement) {                                                                                  // 1063\n      // Gets theme attribute from parent (ui-select)                                                                  // 1064\n      var theme = tElement.parent().attr('theme') || uiSelectConfig.theme;                                             // 1065\n      var multi = tElement.parent().attr('multiple');                                                                  // 1066\n      return theme + (multi ? '/match-multiple.tpl.html' : '/match.tpl.html');                                         // 1067\n    },                                                                                                                 // 1068\n    link: function(scope, element, attrs, $select) {                                                                   // 1069\n      $select.lockChoiceExpression = attrs.uiLockChoice;                                                               // 1070\n      attrs.$observe('placeholder', function(placeholder) {                                                            // 1071\n        $select.placeholder = placeholder !== undefined ? placeholder : uiSelectConfig.placeholder;                    // 1072\n      });                                                                                                              // 1073\n                                                                                                                       // 1074\n      function setAllowClear(allow) {                                                                                  // 1075\n        $select.allowClear = (angular.isDefined(allow)) ? (allow === '') ? true : (allow.toLowerCase() === 'true') : false;\n      }                                                                                                                // 1077\n                                                                                                                       // 1078\n      attrs.$observe('allowClear', setAllowClear);                                                                     // 1079\n      setAllowClear(attrs.allowClear);                                                                                 // 1080\n                                                                                                                       // 1081\n      if($select.multiple){                                                                                            // 1082\n        $select.sizeSearchInput();                                                                                     // 1083\n      }                                                                                                                // 1084\n                                                                                                                       // 1085\n    }                                                                                                                  // 1086\n  };                                                                                                                   // 1087\n}]);                                                                                                                   // 1088\n                                                                                                                       // 1089\nuis.directive('uiSelectMultiple', ['uiSelectMinErr','$timeout', function(uiSelectMinErr, $timeout) {                   // 1090\n  return {                                                                                                             // 1091\n    restrict: 'EA',                                                                                                    // 1092\n    require: ['^uiSelect', '^ngModel'],                                                                                // 1093\n                                                                                                                       // 1094\n    controller: ['$scope','$timeout', function($scope, $timeout){                                                      // 1095\n                                                                                                                       // 1096\n      var ctrl = this,                                                                                                 // 1097\n          $select = $scope.$select,                                                                                    // 1098\n          ngModel;                                                                                                     // 1099\n                                                                                                                       // 1100\n      //Wait for link fn to inject it                                                                                  // 1101\n      $scope.$evalAsync(function(){ ngModel = $scope.ngModel; });                                                      // 1102\n                                                                                                                       // 1103\n      ctrl.activeMatchIndex = -1;                                                                                      // 1104\n                                                                                                                       // 1105\n      ctrl.updateModel = function(){                                                                                   // 1106\n        ngModel.$setViewValue(Date.now()); //Set timestamp as a unique string to force changes                         // 1107\n        ctrl.refreshComponent();                                                                                       // 1108\n      };                                                                                                               // 1109\n                                                                                                                       // 1110\n      ctrl.refreshComponent = function(){                                                                              // 1111\n        //Remove already selected items                                                                                // 1112\n        //e.g. When user clicks on a selection, the selected array changes and                                         // 1113\n        //the dropdown should remove that item                                                                         // 1114\n        $select.refreshItems();                                                                                        // 1115\n        $select.sizeSearchInput();                                                                                     // 1116\n      };                                                                                                               // 1117\n                                                                                                                       // 1118\n      // Remove item from multiple select                                                                              // 1119\n      ctrl.removeChoice = function(index){                                                                             // 1120\n                                                                                                                       // 1121\n        var removedChoice = $select.selected[index];                                                                   // 1122\n                                                                                                                       // 1123\n        // if the choice is locked, can't remove it                                                                    // 1124\n        if(removedChoice._uiSelectChoiceLocked) return;                                                                // 1125\n                                                                                                                       // 1126\n        var locals = {};                                                                                               // 1127\n        locals[$select.parserResult.itemName] = removedChoice;                                                         // 1128\n                                                                                                                       // 1129\n        $select.selected.splice(index, 1);                                                                             // 1130\n        ctrl.activeMatchIndex = -1;                                                                                    // 1131\n        $select.sizeSearchInput();                                                                                     // 1132\n                                                                                                                       // 1133\n        // Give some time for scope propagation.                                                                       // 1134\n        $timeout(function(){                                                                                           // 1135\n          $select.onRemoveCallback($scope, {                                                                           // 1136\n            $item: removedChoice,                                                                                      // 1137\n            $model: $select.parserResult.modelMapper($scope, locals)                                                   // 1138\n          });                                                                                                          // 1139\n        });                                                                                                            // 1140\n                                                                                                                       // 1141\n        ctrl.updateModel();                                                                                            // 1142\n                                                                                                                       // 1143\n      };                                                                                                               // 1144\n                                                                                                                       // 1145\n      ctrl.getPlaceholder = function(){                                                                                // 1146\n        //Refactor single?                                                                                             // 1147\n        if($select.selected.length) return;                                                                            // 1148\n        return $select.placeholder;                                                                                    // 1149\n      };                                                                                                               // 1150\n                                                                                                                       // 1151\n                                                                                                                       // 1152\n    }],                                                                                                                // 1153\n    controllerAs: '$selectMultiple',                                                                                   // 1154\n                                                                                                                       // 1155\n    link: function(scope, element, attrs, ctrls) {                                                                     // 1156\n                                                                                                                       // 1157\n      var $select = ctrls[0];                                                                                          // 1158\n      var ngModel = scope.ngModel = ctrls[1];                                                                          // 1159\n      var $selectMultiple = scope.$selectMultiple;                                                                     // 1160\n                                                                                                                       // 1161\n      //$select.selected = raw selected objects (ignoring any property binding)                                        // 1162\n                                                                                                                       // 1163\n      $select.multiple = true;                                                                                         // 1164\n      $select.removeSelected = true;                                                                                   // 1165\n                                                                                                                       // 1166\n      //Input that will handle focus                                                                                   // 1167\n      $select.focusInput = $select.searchInput;                                                                        // 1168\n                                                                                                                       // 1169\n      //From view --> model                                                                                            // 1170\n      ngModel.$parsers.unshift(function () {                                                                           // 1171\n        var locals = {},                                                                                               // 1172\n            result,                                                                                                    // 1173\n            resultMultiple = [];                                                                                       // 1174\n        for (var j = $select.selected.length - 1; j >= 0; j--) {                                                       // 1175\n          locals = {};                                                                                                 // 1176\n          locals[$select.parserResult.itemName] = $select.selected[j];                                                 // 1177\n          result = $select.parserResult.modelMapper(scope, locals);                                                    // 1178\n          resultMultiple.unshift(result);                                                                              // 1179\n        }                                                                                                              // 1180\n        return resultMultiple;                                                                                         // 1181\n      });                                                                                                              // 1182\n                                                                                                                       // 1183\n      // From model --> view                                                                                           // 1184\n      ngModel.$formatters.unshift(function (inputValue) {                                                              // 1185\n        var data = $select.parserResult.source (scope, { $select : {search:''}}), //Overwrite $search                  // 1186\n            locals = {},                                                                                               // 1187\n            result;                                                                                                    // 1188\n        if (!data) return inputValue;                                                                                  // 1189\n        var resultMultiple = [];                                                                                       // 1190\n        var checkFnMultiple = function(list, value){                                                                   // 1191\n          if (!list || !list.length) return;                                                                           // 1192\n          for (var p = list.length - 1; p >= 0; p--) {                                                                 // 1193\n            locals[$select.parserResult.itemName] = list[p];                                                           // 1194\n            result = $select.parserResult.modelMapper(scope, locals);                                                  // 1195\n            if($select.parserResult.trackByExp){                                                                       // 1196\n                var matches = /\\.(.+)/.exec($select.parserResult.trackByExp);                                          // 1197\n                if(matches.length>0 && result[matches[1]] == value[matches[1]]){                                       // 1198\n                    resultMultiple.unshift(list[p]);                                                                   // 1199\n                    return true;                                                                                       // 1200\n                }                                                                                                      // 1201\n            }                                                                                                          // 1202\n            if (angular.equals(result,value)){                                                                         // 1203\n              resultMultiple.unshift(list[p]);                                                                         // 1204\n              return true;                                                                                             // 1205\n            }                                                                                                          // 1206\n          }                                                                                                            // 1207\n          return false;                                                                                                // 1208\n        };                                                                                                             // 1209\n        if (!inputValue) return resultMultiple; //If ngModel was undefined                                             // 1210\n        for (var k = inputValue.length - 1; k >= 0; k--) {                                                             // 1211\n          //Check model array of currently selected items                                                              // 1212\n          if (!checkFnMultiple($select.selected, inputValue[k])){                                                      // 1213\n            //Check model array of all items available                                                                 // 1214\n            if (!checkFnMultiple(data, inputValue[k])){                                                                // 1215\n              //If not found on previous lists, just add it directly to resultMultiple                                 // 1216\n              resultMultiple.unshift(inputValue[k]);                                                                   // 1217\n            }                                                                                                          // 1218\n          }                                                                                                            // 1219\n        }                                                                                                              // 1220\n        return resultMultiple;                                                                                         // 1221\n      });                                                                                                              // 1222\n                                                                                                                       // 1223\n      //Watch for external model changes                                                                               // 1224\n      scope.$watchCollection(function(){ return ngModel.$modelValue; }, function(newValue, oldValue) {                 // 1225\n        if (oldValue != newValue){                                                                                     // 1226\n          ngModel.$modelValue = null; //Force scope model value and ngModel value to be out of sync to re-run formatters\n          $selectMultiple.refreshComponent();                                                                          // 1228\n        }                                                                                                              // 1229\n      });                                                                                                              // 1230\n                                                                                                                       // 1231\n      ngModel.$render = function() {                                                                                   // 1232\n        // Make sure that model value is array                                                                         // 1233\n        if(!angular.isArray(ngModel.$viewValue)){                                                                      // 1234\n          // Have tolerance for null or undefined values                                                               // 1235\n          if(angular.isUndefined(ngModel.$viewValue) || ngModel.$viewValue === null){                                  // 1236\n            $select.selected = [];                                                                                     // 1237\n          } else {                                                                                                     // 1238\n            throw uiSelectMinErr('multiarr', \"Expected model value to be array but got '{0}'\", ngModel.$viewValue);    // 1239\n          }                                                                                                            // 1240\n        }                                                                                                              // 1241\n        $select.selected = ngModel.$viewValue;                                                                         // 1242\n        scope.$evalAsync(); //To force $digest                                                                         // 1243\n      };                                                                                                               // 1244\n                                                                                                                       // 1245\n      scope.$on('uis:select', function (event, item) {                                                                 // 1246\n        $select.selected.push(item);                                                                                   // 1247\n        $selectMultiple.updateModel();                                                                                 // 1248\n      });                                                                                                              // 1249\n                                                                                                                       // 1250\n      scope.$on('uis:activate', function () {                                                                          // 1251\n        $selectMultiple.activeMatchIndex = -1;                                                                         // 1252\n      });                                                                                                              // 1253\n                                                                                                                       // 1254\n      scope.$watch('$select.disabled', function(newValue, oldValue) {                                                  // 1255\n        // As the search input field may now become visible, it may be necessary to recompute its size                 // 1256\n        if (oldValue && !newValue) $select.sizeSearchInput();                                                          // 1257\n      });                                                                                                              // 1258\n                                                                                                                       // 1259\n      $select.searchInput.on('keydown', function(e) {                                                                  // 1260\n        var key = e.which;                                                                                             // 1261\n        scope.$apply(function() {                                                                                      // 1262\n          var processed = false;                                                                                       // 1263\n          // var tagged = false; //Checkme                                                                             // 1264\n          if(KEY.isHorizontalMovement(key)){                                                                           // 1265\n            processed = _handleMatchSelection(key);                                                                    // 1266\n          }                                                                                                            // 1267\n          if (processed  && key != KEY.TAB) {                                                                          // 1268\n            //TODO Check si el tab selecciona aun correctamente                                                        // 1269\n            //Crear test                                                                                               // 1270\n            e.preventDefault();                                                                                        // 1271\n            e.stopPropagation();                                                                                       // 1272\n          }                                                                                                            // 1273\n        });                                                                                                            // 1274\n      });                                                                                                              // 1275\n      function _getCaretPosition(el) {                                                                                 // 1276\n        if(angular.isNumber(el.selectionStart)) return el.selectionStart;                                              // 1277\n        // selectionStart is not supported in IE8 and we don't want hacky workarounds so we compromise                 // 1278\n        else return el.value.length;                                                                                   // 1279\n      }                                                                                                                // 1280\n      // Handles selected options in \"multiple\" mode                                                                   // 1281\n      function _handleMatchSelection(key){                                                                             // 1282\n        var caretPosition = _getCaretPosition($select.searchInput[0]),                                                 // 1283\n            length = $select.selected.length,                                                                          // 1284\n            // none  = -1,                                                                                             // 1285\n            first = 0,                                                                                                 // 1286\n            last  = length-1,                                                                                          // 1287\n            curr  = $selectMultiple.activeMatchIndex,                                                                  // 1288\n            next  = $selectMultiple.activeMatchIndex+1,                                                                // 1289\n            prev  = $selectMultiple.activeMatchIndex-1,                                                                // 1290\n            newIndex = curr;                                                                                           // 1291\n                                                                                                                       // 1292\n        if(caretPosition > 0 || ($select.search.length && key == KEY.RIGHT)) return false;                             // 1293\n                                                                                                                       // 1294\n        $select.close();                                                                                               // 1295\n                                                                                                                       // 1296\n        function getNewActiveMatchIndex(){                                                                             // 1297\n          switch(key){                                                                                                 // 1298\n            case KEY.LEFT:                                                                                             // 1299\n              // Select previous/first item                                                                            // 1300\n              if(~$selectMultiple.activeMatchIndex) return prev;                                                       // 1301\n              // Select last item                                                                                      // 1302\n              else return last;                                                                                        // 1303\n              break;                                                                                                   // 1304\n            case KEY.RIGHT:                                                                                            // 1305\n              // Open drop-down                                                                                        // 1306\n              if(!~$selectMultiple.activeMatchIndex || curr === last){                                                 // 1307\n                $select.activate();                                                                                    // 1308\n                return false;                                                                                          // 1309\n              }                                                                                                        // 1310\n              // Select next/last item                                                                                 // 1311\n              else return next;                                                                                        // 1312\n              break;                                                                                                   // 1313\n            case KEY.BACKSPACE:                                                                                        // 1314\n              // Remove selected item and select previous/first                                                        // 1315\n              if(~$selectMultiple.activeMatchIndex){                                                                   // 1316\n                $selectMultiple.removeChoice(curr);                                                                    // 1317\n                return prev;                                                                                           // 1318\n              }                                                                                                        // 1319\n              // Select last item                                                                                      // 1320\n              else return last;                                                                                        // 1321\n              break;                                                                                                   // 1322\n            case KEY.DELETE:                                                                                           // 1323\n              // Remove selected item and select next item                                                             // 1324\n              if(~$selectMultiple.activeMatchIndex){                                                                   // 1325\n                $selectMultiple.removeChoice($selectMultiple.activeMatchIndex);                                        // 1326\n                return curr;                                                                                           // 1327\n              }                                                                                                        // 1328\n              else return false;                                                                                       // 1329\n          }                                                                                                            // 1330\n        }                                                                                                              // 1331\n                                                                                                                       // 1332\n        newIndex = getNewActiveMatchIndex();                                                                           // 1333\n                                                                                                                       // 1334\n        if(!$select.selected.length || newIndex === false) $selectMultiple.activeMatchIndex = -1;                      // 1335\n        else $selectMultiple.activeMatchIndex = Math.min(last,Math.max(first,newIndex));                               // 1336\n                                                                                                                       // 1337\n        return true;                                                                                                   // 1338\n      }                                                                                                                // 1339\n                                                                                                                       // 1340\n      $select.searchInput.on('keyup', function(e) {                                                                    // 1341\n                                                                                                                       // 1342\n        if ( ! KEY.isVerticalMovement(e.which) ) {                                                                     // 1343\n          scope.$evalAsync( function () {                                                                              // 1344\n            $select.activeIndex = $select.taggingLabel === false ? -1 : 0;                                             // 1345\n          });                                                                                                          // 1346\n        }                                                                                                              // 1347\n        // Push a \"create new\" item into array if there is a search string                                             // 1348\n        if ( $select.tagging.isActivated && $select.search.length > 0 ) {                                              // 1349\n                                                                                                                       // 1350\n          // return early with these keys                                                                              // 1351\n          if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC || KEY.isVerticalMovement(e.which) ) {\n            return;                                                                                                    // 1353\n          }                                                                                                            // 1354\n          // always reset the activeIndex to the first item when tagging                                               // 1355\n          $select.activeIndex = $select.taggingLabel === false ? -1 : 0;                                               // 1356\n          // taggingLabel === false bypasses all of this                                                               // 1357\n          if ($select.taggingLabel === false) return;                                                                  // 1358\n                                                                                                                       // 1359\n          var items = angular.copy( $select.items );                                                                   // 1360\n          var stashArr = angular.copy( $select.items );                                                                // 1361\n          var newItem;                                                                                                 // 1362\n          var item;                                                                                                    // 1363\n          var hasTag = false;                                                                                          // 1364\n          var dupeIndex = -1;                                                                                          // 1365\n          var tagItems;                                                                                                // 1366\n          var tagItem;                                                                                                 // 1367\n                                                                                                                       // 1368\n          // case for object tagging via transform `$select.tagging.fct` function                                      // 1369\n          if ( $select.tagging.fct !== undefined) {                                                                    // 1370\n            tagItems = $select.$filter('filter')(items,{'isTag': true});                                               // 1371\n            if ( tagItems.length > 0 ) {                                                                               // 1372\n              tagItem = tagItems[0];                                                                                   // 1373\n            }                                                                                                          // 1374\n            // remove the first element, if it has the `isTag` prop we generate a new one with each keyup, shaving the previous\n            if ( items.length > 0 && tagItem ) {                                                                       // 1376\n              hasTag = true;                                                                                           // 1377\n              items = items.slice(1,items.length);                                                                     // 1378\n              stashArr = stashArr.slice(1,stashArr.length);                                                            // 1379\n            }                                                                                                          // 1380\n            newItem = $select.tagging.fct($select.search);                                                             // 1381\n            newItem.isTag = true;                                                                                      // 1382\n            // verify the the tag doesn't match the value of an existing item                                          // 1383\n            if ( stashArr.filter( function (origItem) { return angular.equals( origItem, $select.tagging.fct($select.search) ); } ).length > 0 ) {\n              return;                                                                                                  // 1385\n            }                                                                                                          // 1386\n            newItem.isTag = true;                                                                                      // 1387\n          // handle newItem string and stripping dupes in tagging string context                                       // 1388\n          } else {                                                                                                     // 1389\n            // find any tagging items already in the $select.items array and store them                                // 1390\n            tagItems = $select.$filter('filter')(items,function (item) {                                               // 1391\n              return item.match($select.taggingLabel);                                                                 // 1392\n            });                                                                                                        // 1393\n            if ( tagItems.length > 0 ) {                                                                               // 1394\n              tagItem = tagItems[0];                                                                                   // 1395\n            }                                                                                                          // 1396\n            item = items[0];                                                                                           // 1397\n            // remove existing tag item if found (should only ever be one tag item)                                    // 1398\n            if ( item !== undefined && items.length > 0 && tagItem ) {                                                 // 1399\n              hasTag = true;                                                                                           // 1400\n              items = items.slice(1,items.length);                                                                     // 1401\n              stashArr = stashArr.slice(1,stashArr.length);                                                            // 1402\n            }                                                                                                          // 1403\n            newItem = $select.search+' '+$select.taggingLabel;                                                         // 1404\n            if ( _findApproxDupe($select.selected, $select.search) > -1 ) {                                            // 1405\n              return;                                                                                                  // 1406\n            }                                                                                                          // 1407\n            // verify the the tag doesn't match the value of an existing item from                                     // 1408\n            // the searched data set or the items already selected                                                     // 1409\n            if ( _findCaseInsensitiveDupe(stashArr.concat($select.selected)) ) {                                       // 1410\n              // if there is a tag from prev iteration, strip it / queue the change                                    // 1411\n              // and return early                                                                                      // 1412\n              if ( hasTag ) {                                                                                          // 1413\n                items = stashArr;                                                                                      // 1414\n                scope.$evalAsync( function () {                                                                        // 1415\n                  $select.activeIndex = 0;                                                                             // 1416\n                  $select.items = items;                                                                               // 1417\n                });                                                                                                    // 1418\n              }                                                                                                        // 1419\n              return;                                                                                                  // 1420\n            }                                                                                                          // 1421\n            if ( _findCaseInsensitiveDupe(stashArr) ) {                                                                // 1422\n              // if there is a tag from prev iteration, strip it                                                       // 1423\n              if ( hasTag ) {                                                                                          // 1424\n                $select.items = stashArr.slice(1,stashArr.length);                                                     // 1425\n              }                                                                                                        // 1426\n              return;                                                                                                  // 1427\n            }                                                                                                          // 1428\n          }                                                                                                            // 1429\n          if ( hasTag ) dupeIndex = _findApproxDupe($select.selected, newItem);                                        // 1430\n          // dupe found, shave the first item                                                                          // 1431\n          if ( dupeIndex > -1 ) {                                                                                      // 1432\n            items = items.slice(dupeIndex+1,items.length-1);                                                           // 1433\n          } else {                                                                                                     // 1434\n            items = [];                                                                                                // 1435\n            items.push(newItem);                                                                                       // 1436\n            items = items.concat(stashArr);                                                                            // 1437\n          }                                                                                                            // 1438\n          scope.$evalAsync( function () {                                                                              // 1439\n            $select.activeIndex = 0;                                                                                   // 1440\n            $select.items = items;                                                                                     // 1441\n          });                                                                                                          // 1442\n        }                                                                                                              // 1443\n      });                                                                                                              // 1444\n      function _findCaseInsensitiveDupe(arr) {                                                                         // 1445\n        if ( arr === undefined || $select.search === undefined ) {                                                     // 1446\n          return false;                                                                                                // 1447\n        }                                                                                                              // 1448\n        var hasDupe = arr.filter( function (origItem) {                                                                // 1449\n          if ( $select.search.toUpperCase() === undefined || origItem === undefined ) {                                // 1450\n            return false;                                                                                              // 1451\n          }                                                                                                            // 1452\n          return origItem.toUpperCase() === $select.search.toUpperCase();                                              // 1453\n        }).length > 0;                                                                                                 // 1454\n                                                                                                                       // 1455\n        return hasDupe;                                                                                                // 1456\n      }                                                                                                                // 1457\n      function _findApproxDupe(haystack, needle) {                                                                     // 1458\n        var dupeIndex = -1;                                                                                            // 1459\n        if(angular.isArray(haystack)) {                                                                                // 1460\n          var tempArr = angular.copy(haystack);                                                                        // 1461\n          for (var i = 0; i <tempArr.length; i++) {                                                                    // 1462\n            // handle the simple string version of tagging                                                             // 1463\n            if ( $select.tagging.fct === undefined ) {                                                                 // 1464\n              // search the array for the match                                                                        // 1465\n              if ( tempArr[i]+' '+$select.taggingLabel === needle ) {                                                  // 1466\n              dupeIndex = i;                                                                                           // 1467\n              }                                                                                                        // 1468\n            // handle the object tagging implementation                                                                // 1469\n            } else {                                                                                                   // 1470\n              var mockObj = tempArr[i];                                                                                // 1471\n              mockObj.isTag = true;                                                                                    // 1472\n              if ( angular.equals(mockObj, needle) ) {                                                                 // 1473\n              dupeIndex = i;                                                                                           // 1474\n              }                                                                                                        // 1475\n            }                                                                                                          // 1476\n          }                                                                                                            // 1477\n        }                                                                                                              // 1478\n        return dupeIndex;                                                                                              // 1479\n      }                                                                                                                // 1480\n                                                                                                                       // 1481\n      $select.searchInput.on('blur', function() {                                                                      // 1482\n        $timeout(function() {                                                                                          // 1483\n          $selectMultiple.activeMatchIndex = -1;                                                                       // 1484\n        });                                                                                                            // 1485\n      });                                                                                                              // 1486\n                                                                                                                       // 1487\n    }                                                                                                                  // 1488\n  };                                                                                                                   // 1489\n}]);                                                                                                                   // 1490\nuis.directive('uiSelectSingle', ['$timeout','$compile', function($timeout, $compile) {                                 // 1491\n  return {                                                                                                             // 1492\n    restrict: 'EA',                                                                                                    // 1493\n    require: ['^uiSelect', '^ngModel'],                                                                                // 1494\n    link: function(scope, element, attrs, ctrls) {                                                                     // 1495\n                                                                                                                       // 1496\n      var $select = ctrls[0];                                                                                          // 1497\n      var ngModel = ctrls[1];                                                                                          // 1498\n                                                                                                                       // 1499\n      //From view --> model                                                                                            // 1500\n      ngModel.$parsers.unshift(function (inputValue) {                                                                 // 1501\n        var locals = {},                                                                                               // 1502\n            result;                                                                                                    // 1503\n        locals[$select.parserResult.itemName] = inputValue;                                                            // 1504\n        result = $select.parserResult.modelMapper(scope, locals);                                                      // 1505\n        return result;                                                                                                 // 1506\n      });                                                                                                              // 1507\n                                                                                                                       // 1508\n      //From model --> view                                                                                            // 1509\n      ngModel.$formatters.unshift(function (inputValue) {                                                              // 1510\n        var data = $select.parserResult.source (scope, { $select : {search:''}}), //Overwrite $search                  // 1511\n            locals = {},                                                                                               // 1512\n            result;                                                                                                    // 1513\n        if (data){                                                                                                     // 1514\n          var checkFnSingle = function(d){                                                                             // 1515\n            locals[$select.parserResult.itemName] = d;                                                                 // 1516\n            result = $select.parserResult.modelMapper(scope, locals);                                                  // 1517\n            return result == inputValue;                                                                               // 1518\n          };                                                                                                           // 1519\n          //If possible pass same object stored in $select.selected                                                    // 1520\n          if ($select.selected && checkFnSingle($select.selected)) {                                                   // 1521\n            return $select.selected;                                                                                   // 1522\n          }                                                                                                            // 1523\n          for (var i = data.length - 1; i >= 0; i--) {                                                                 // 1524\n            if (checkFnSingle(data[i])) return data[i];                                                                // 1525\n          }                                                                                                            // 1526\n        }                                                                                                              // 1527\n        return inputValue;                                                                                             // 1528\n      });                                                                                                              // 1529\n                                                                                                                       // 1530\n      //Update viewValue if model change                                                                               // 1531\n      scope.$watch('$select.selected', function(newValue) {                                                            // 1532\n        if (ngModel.$viewValue !== newValue) {                                                                         // 1533\n          ngModel.$setViewValue(newValue);                                                                             // 1534\n        }                                                                                                              // 1535\n      });                                                                                                              // 1536\n                                                                                                                       // 1537\n      ngModel.$render = function() {                                                                                   // 1538\n        $select.selected = ngModel.$viewValue;                                                                         // 1539\n      };                                                                                                               // 1540\n                                                                                                                       // 1541\n      scope.$on('uis:select', function (event, item) {                                                                 // 1542\n        $select.selected = item;                                                                                       // 1543\n      });                                                                                                              // 1544\n                                                                                                                       // 1545\n      scope.$on('uis:close', function (event, skipFocusser) {                                                          // 1546\n        $timeout(function(){                                                                                           // 1547\n          $select.focusser.prop('disabled', false);                                                                    // 1548\n          if (!skipFocusser) $select.focusser[0].focus();                                                              // 1549\n        },0,false);                                                                                                    // 1550\n      });                                                                                                              // 1551\n                                                                                                                       // 1552\n      scope.$on('uis:activate', function () {                                                                          // 1553\n        focusser.prop('disabled', true); //Will reactivate it on .close()                                              // 1554\n      });                                                                                                              // 1555\n                                                                                                                       // 1556\n      //Idea from: https://github.com/ivaynberg/select2/blob/79b5bf6db918d7560bdd959109b7bcfb47edaf43/select2.js#L1954 // 1557\n      var focusser = angular.element(\"<input ng-disabled='$select.disabled' class='ui-select-focusser ui-select-offscreen' type='text' id='{{ $select.focusserId }}' aria-label='{{ $select.focusserTitle }}' aria-haspopup='true' role='button' />\");\n      $compile(focusser)(scope);                                                                                       // 1559\n      $select.focusser = focusser;                                                                                     // 1560\n                                                                                                                       // 1561\n      //Input that will handle focus                                                                                   // 1562\n      $select.focusInput = focusser;                                                                                   // 1563\n                                                                                                                       // 1564\n      element.parent().append(focusser);                                                                               // 1565\n      focusser.bind(\"focus\", function(){                                                                               // 1566\n        scope.$evalAsync(function(){                                                                                   // 1567\n          $select.focus = true;                                                                                        // 1568\n        });                                                                                                            // 1569\n      });                                                                                                              // 1570\n      focusser.bind(\"blur\", function(){                                                                                // 1571\n        scope.$evalAsync(function(){                                                                                   // 1572\n          $select.focus = false;                                                                                       // 1573\n        });                                                                                                            // 1574\n      });                                                                                                              // 1575\n      focusser.bind(\"keydown\", function(e){                                                                            // 1576\n                                                                                                                       // 1577\n        if (e.which === KEY.BACKSPACE) {                                                                               // 1578\n          e.preventDefault();                                                                                          // 1579\n          e.stopPropagation();                                                                                         // 1580\n          $select.select(undefined);                                                                                   // 1581\n          scope.$apply();                                                                                              // 1582\n          return;                                                                                                      // 1583\n        }                                                                                                              // 1584\n                                                                                                                       // 1585\n        if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC) {                  // 1586\n          return;                                                                                                      // 1587\n        }                                                                                                              // 1588\n                                                                                                                       // 1589\n        if (e.which == KEY.DOWN  || e.which == KEY.UP || e.which == KEY.ENTER || e.which == KEY.SPACE){                // 1590\n          e.preventDefault();                                                                                          // 1591\n          e.stopPropagation();                                                                                         // 1592\n          $select.activate();                                                                                          // 1593\n        }                                                                                                              // 1594\n                                                                                                                       // 1595\n        scope.$digest();                                                                                               // 1596\n      });                                                                                                              // 1597\n                                                                                                                       // 1598\n      focusser.bind(\"keyup input\", function(e){                                                                        // 1599\n                                                                                                                       // 1600\n        if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC || e.which == KEY.ENTER || e.which === KEY.BACKSPACE) {\n          return;                                                                                                      // 1602\n        }                                                                                                              // 1603\n                                                                                                                       // 1604\n        $select.activate(focusser.val()); //User pressed some regular key, so we pass it to the search input           // 1605\n        focusser.val('');                                                                                              // 1606\n        scope.$digest();                                                                                               // 1607\n                                                                                                                       // 1608\n      });                                                                                                              // 1609\n                                                                                                                       // 1610\n                                                                                                                       // 1611\n    }                                                                                                                  // 1612\n  };                                                                                                                   // 1613\n}]);                                                                                                                   // 1614\n// Make multiple matches sortable                                                                                      // 1615\nuis.directive('uiSelectSort', ['$timeout', 'uiSelectConfig', 'uiSelectMinErr', function($timeout, uiSelectConfig, uiSelectMinErr) {\n  return {                                                                                                             // 1617\n    require: '^uiSelect',                                                                                              // 1618\n    link: function(scope, element, attrs, $select) {                                                                   // 1619\n      if (scope[attrs.uiSelectSort] === null) {                                                                        // 1620\n        throw uiSelectMinErr('sort', \"Expected a list to sort\");                                                       // 1621\n      }                                                                                                                // 1622\n                                                                                                                       // 1623\n      var options = angular.extend({                                                                                   // 1624\n          axis: 'horizontal'                                                                                           // 1625\n        },                                                                                                             // 1626\n        scope.$eval(attrs.uiSelectSortOptions));                                                                       // 1627\n                                                                                                                       // 1628\n      var axis = options.axis,                                                                                         // 1629\n        draggingClassName = 'dragging',                                                                                // 1630\n        droppingClassName = 'dropping',                                                                                // 1631\n        droppingBeforeClassName = 'dropping-before',                                                                   // 1632\n        droppingAfterClassName = 'dropping-after';                                                                     // 1633\n                                                                                                                       // 1634\n      scope.$watch(function(){                                                                                         // 1635\n        return $select.sortable;                                                                                       // 1636\n      }, function(n){                                                                                                  // 1637\n        if (n) {                                                                                                       // 1638\n          element.attr('draggable', true);                                                                             // 1639\n        } else {                                                                                                       // 1640\n          element.removeAttr('draggable');                                                                             // 1641\n        }                                                                                                              // 1642\n      });                                                                                                              // 1643\n                                                                                                                       // 1644\n      element.on('dragstart', function(e) {                                                                            // 1645\n        element.addClass(draggingClassName);                                                                           // 1646\n                                                                                                                       // 1647\n        (e.dataTransfer || e.originalEvent.dataTransfer).setData('text/plain', scope.$index);                          // 1648\n      });                                                                                                              // 1649\n                                                                                                                       // 1650\n      element.on('dragend', function() {                                                                               // 1651\n        element.removeClass(draggingClassName);                                                                        // 1652\n      });                                                                                                              // 1653\n                                                                                                                       // 1654\n      var move = function(from, to) {                                                                                  // 1655\n        /*jshint validthis: true */                                                                                    // 1656\n        this.splice(to, 0, this.splice(from, 1)[0]);                                                                   // 1657\n      };                                                                                                               // 1658\n                                                                                                                       // 1659\n      var dragOverHandler = function(e) {                                                                              // 1660\n        e.preventDefault();                                                                                            // 1661\n                                                                                                                       // 1662\n        var offset = axis === 'vertical' ? e.offsetY || e.layerY || (e.originalEvent ? e.originalEvent.offsetY : 0) : e.offsetX || e.layerX || (e.originalEvent ? e.originalEvent.offsetX : 0);\n                                                                                                                       // 1664\n        if (offset < (this[axis === 'vertical' ? 'offsetHeight' : 'offsetWidth'] / 2)) {                               // 1665\n          element.removeClass(droppingAfterClassName);                                                                 // 1666\n          element.addClass(droppingBeforeClassName);                                                                   // 1667\n                                                                                                                       // 1668\n        } else {                                                                                                       // 1669\n          element.removeClass(droppingBeforeClassName);                                                                // 1670\n          element.addClass(droppingAfterClassName);                                                                    // 1671\n        }                                                                                                              // 1672\n      };                                                                                                               // 1673\n                                                                                                                       // 1674\n      var dropTimeout;                                                                                                 // 1675\n                                                                                                                       // 1676\n      var dropHandler = function(e) {                                                                                  // 1677\n        e.preventDefault();                                                                                            // 1678\n                                                                                                                       // 1679\n        var droppedItemIndex = parseInt((e.dataTransfer || e.originalEvent.dataTransfer).getData('text/plain'), 10);   // 1680\n                                                                                                                       // 1681\n        // prevent event firing multiple times in firefox                                                              // 1682\n        $timeout.cancel(dropTimeout);                                                                                  // 1683\n        dropTimeout = $timeout(function() {                                                                            // 1684\n          _dropHandler(droppedItemIndex);                                                                              // 1685\n        }, 20);                                                                                                        // 1686\n      };                                                                                                               // 1687\n                                                                                                                       // 1688\n      var _dropHandler = function(droppedItemIndex) {                                                                  // 1689\n        var theList = scope.$eval(attrs.uiSelectSort),                                                                 // 1690\n          itemToMove = theList[droppedItemIndex],                                                                      // 1691\n          newIndex = null;                                                                                             // 1692\n                                                                                                                       // 1693\n        if (element.hasClass(droppingBeforeClassName)) {                                                               // 1694\n          if (droppedItemIndex < scope.$index) {                                                                       // 1695\n            newIndex = scope.$index - 1;                                                                               // 1696\n          } else {                                                                                                     // 1697\n            newIndex = scope.$index;                                                                                   // 1698\n          }                                                                                                            // 1699\n        } else {                                                                                                       // 1700\n          if (droppedItemIndex < scope.$index) {                                                                       // 1701\n            newIndex = scope.$index;                                                                                   // 1702\n          } else {                                                                                                     // 1703\n            newIndex = scope.$index + 1;                                                                               // 1704\n          }                                                                                                            // 1705\n        }                                                                                                              // 1706\n                                                                                                                       // 1707\n        move.apply(theList, [droppedItemIndex, newIndex]);                                                             // 1708\n                                                                                                                       // 1709\n        scope.$apply(function() {                                                                                      // 1710\n          scope.$emit('uiSelectSort:change', {                                                                         // 1711\n            array: theList,                                                                                            // 1712\n            item: itemToMove,                                                                                          // 1713\n            from: droppedItemIndex,                                                                                    // 1714\n            to: newIndex                                                                                               // 1715\n          });                                                                                                          // 1716\n        });                                                                                                            // 1717\n                                                                                                                       // 1718\n        element.removeClass(droppingClassName);                                                                        // 1719\n        element.removeClass(droppingBeforeClassName);                                                                  // 1720\n        element.removeClass(droppingAfterClassName);                                                                   // 1721\n                                                                                                                       // 1722\n        element.off('drop', dropHandler);                                                                              // 1723\n      };                                                                                                               // 1724\n                                                                                                                       // 1725\n      element.on('dragenter', function() {                                                                             // 1726\n        if (element.hasClass(draggingClassName)) {                                                                     // 1727\n          return;                                                                                                      // 1728\n        }                                                                                                              // 1729\n                                                                                                                       // 1730\n        element.addClass(droppingClassName);                                                                           // 1731\n                                                                                                                       // 1732\n        element.on('dragover', dragOverHandler);                                                                       // 1733\n        element.on('drop', dropHandler);                                                                               // 1734\n      });                                                                                                              // 1735\n                                                                                                                       // 1736\n      element.on('dragleave', function(e) {                                                                            // 1737\n        if (e.target != element) {                                                                                     // 1738\n          return;                                                                                                      // 1739\n        }                                                                                                              // 1740\n        element.removeClass(droppingClassName);                                                                        // 1741\n        element.removeClass(droppingBeforeClassName);                                                                  // 1742\n        element.removeClass(droppingAfterClassName);                                                                   // 1743\n                                                                                                                       // 1744\n        element.off('dragover', dragOverHandler);                                                                      // 1745\n        element.off('drop', dropHandler);                                                                              // 1746\n      });                                                                                                              // 1747\n    }                                                                                                                  // 1748\n  };                                                                                                                   // 1749\n}]);                                                                                                                   // 1750\n                                                                                                                       // 1751\n/**                                                                                                                    // 1752\n * Parses \"repeat\" attribute.                                                                                          // 1753\n *                                                                                                                     // 1754\n * Taken from AngularJS ngRepeat source code                                                                           // 1755\n * See https://github.com/angular/angular.js/blob/v1.2.15/src/ng/directive/ngRepeat.js#L211                            // 1756\n *                                                                                                                     // 1757\n * Original discussion about parsing \"repeat\" attribute instead of fully relying on ng-repeat:                         // 1758\n * https://github.com/angular-ui/ui-select/commit/5dd63ad#commitcomment-5504697                                        // 1759\n */                                                                                                                    // 1760\n                                                                                                                       // 1761\nuis.service('uisRepeatParser', ['uiSelectMinErr','$parse', function(uiSelectMinErr, $parse) {                          // 1762\n  var self = this;                                                                                                     // 1763\n                                                                                                                       // 1764\n  /**                                                                                                                  // 1765\n   * Example:                                                                                                          // 1766\n   * expression = \"address in addresses | filter: {street: $select.search} track by $index\"                            // 1767\n   * itemName = \"address\",                                                                                             // 1768\n   * source = \"addresses | filter: {street: $select.search}\",                                                          // 1769\n   * trackByExp = \"$index\",                                                                                            // 1770\n   */                                                                                                                  // 1771\n  self.parse = function(expression) {                                                                                  // 1772\n                                                                                                                       // 1773\n    var match = expression.match(/^\\s*(?:([\\s\\S]+?)\\s+as\\s+)?([\\S]+?)\\s+in\\s+([\\s\\S]+?)(?:\\s+track\\s+by\\s+([\\s\\S]+?))?\\s*$/);\n                                                                                                                       // 1775\n    if (!match) {                                                                                                      // 1776\n      throw uiSelectMinErr('iexp', \"Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.\",\n              expression);                                                                                             // 1778\n    }                                                                                                                  // 1779\n                                                                                                                       // 1780\n    return {                                                                                                           // 1781\n      itemName: match[2], // (lhs) Left-hand side,                                                                     // 1782\n      source: $parse(match[3]),                                                                                        // 1783\n      trackByExp: match[4],                                                                                            // 1784\n      modelMapper: $parse(match[1] || match[2])                                                                        // 1785\n    };                                                                                                                 // 1786\n                                                                                                                       // 1787\n  };                                                                                                                   // 1788\n                                                                                                                       // 1789\n  self.getGroupNgRepeatExpression = function() {                                                                       // 1790\n    return '$group in $select.groups';                                                                                 // 1791\n  };                                                                                                                   // 1792\n                                                                                                                       // 1793\n  self.getNgRepeatExpression = function(itemName, source, trackByExp, grouped) {                                       // 1794\n    var expression = itemName + ' in ' + (grouped ? '$group.items' : source);                                          // 1795\n    if (trackByExp) {                                                                                                  // 1796\n      expression += ' track by ' + trackByExp;                                                                         // 1797\n    }                                                                                                                  // 1798\n    return expression;                                                                                                 // 1799\n  };                                                                                                                   // 1800\n}]);                                                                                                                   // 1801\n                                                                                                                       // 1802\n}());                                                                                                                  // 1803\nangular.module(\"ui.select\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"bootstrap/choices.tpl.html\",\"<ul class=\\\"ui-select-choices ui-select-choices-content ui-select-dropdown dropdown-menu\\\" role=\\\"listbox\\\" ng-show=\\\"$select.items.length > 0\\\"><li class=\\\"ui-select-choices-group\\\" id=\\\"ui-select-choices-{{ $select.generatedId }}\\\"><div class=\\\"divider\\\" ng-show=\\\"$select.isGrouped && $index > 0\\\"></div><div ng-show=\\\"$select.isGrouped\\\" class=\\\"ui-select-choices-group-label dropdown-header\\\" ng-bind=\\\"$group.name\\\"></div><div id=\\\"ui-select-choices-row-{{ $select.generatedId }}-{{$index}}\\\" class=\\\"ui-select-choices-row\\\" ng-class=\\\"{active: $select.isActive(this), disabled: $select.isDisabled(this)}\\\" role=\\\"option\\\"><a href=\\\"javascript:void(0)\\\" class=\\\"ui-select-choices-row-inner\\\"></a></div></li></ul>\");\n$templateCache.put(\"bootstrap/match-multiple.tpl.html\",\"<span class=\\\"ui-select-match\\\"><span ng-repeat=\\\"$item in $select.selected\\\"><span class=\\\"ui-select-match-item btn btn-default btn-xs\\\" tabindex=\\\"-1\\\" type=\\\"button\\\" ng-disabled=\\\"$select.disabled\\\" ng-click=\\\"$selectMultiple.activeMatchIndex = $index;\\\" ng-class=\\\"{\\'btn-primary\\':$selectMultiple.activeMatchIndex === $index, \\'select-locked\\':$select.isLocked(this, $index)}\\\" ui-select-sort=\\\"$select.selected\\\"><span class=\\\"close ui-select-match-close\\\" ng-hide=\\\"$select.disabled\\\" ng-click=\\\"$selectMultiple.removeChoice($index)\\\">&nbsp;&times;</span> <span uis-transclude-append=\\\"\\\"></span></span></span></span>\");\n$templateCache.put(\"bootstrap/match.tpl.html\",\"<div class=\\\"ui-select-match\\\" ng-hide=\\\"$select.open\\\" ng-disabled=\\\"$select.disabled\\\" ng-class=\\\"{\\'btn-default-focus\\':$select.focus}\\\"><span tabindex=\\\"-1\\\" class=\\\"btn btn-default form-control ui-select-toggle\\\" aria-label=\\\"{{ $select.baseTitle }} activate\\\" ng-disabled=\\\"$select.disabled\\\" ng-click=\\\"$select.activate()\\\" style=\\\"outline: 0;\\\"><span ng-show=\\\"$select.isEmpty()\\\" class=\\\"ui-select-placeholder text-muted\\\">{{$select.placeholder}}</span> <span ng-hide=\\\"$select.isEmpty()\\\" class=\\\"ui-select-match-text pull-left\\\" ng-class=\\\"{\\'ui-select-allow-clear\\': $select.allowClear && !$select.isEmpty()}\\\" ng-transclude=\\\"\\\"></span> <i class=\\\"caret pull-right\\\" ng-click=\\\"$select.toggle($event)\\\"></i> <a ng-show=\\\"$select.allowClear && !$select.isEmpty()\\\" aria-label=\\\"{{ $select.baseTitle }} clear\\\" style=\\\"margin-right: 10px\\\" ng-click=\\\"$select.clear($event)\\\" class=\\\"btn btn-xs btn-link pull-right\\\"><i class=\\\"glyphicon glyphicon-remove\\\" aria-hidden=\\\"true\\\"></i></a></span></div>\");\n$templateCache.put(\"bootstrap/select-multiple.tpl.html\",\"<div class=\\\"ui-select-container ui-select-multiple ui-select-bootstrap dropdown form-control\\\" ng-class=\\\"{open: $select.open}\\\"><div><div class=\\\"ui-select-match\\\"></div><input type=\\\"text\\\" autocomplete=\\\"off\\\" autocorrect=\\\"off\\\" autocapitalize=\\\"off\\\" spellcheck=\\\"false\\\" class=\\\"ui-select-search input-xs\\\" placeholder=\\\"{{$selectMultiple.getPlaceholder()}}\\\" ng-disabled=\\\"$select.disabled\\\" ng-hide=\\\"$select.disabled\\\" ng-click=\\\"$select.activate()\\\" ng-model=\\\"$select.search\\\" role=\\\"combobox\\\" aria-label=\\\"{{ $select.baseTitle }}\\\" ondrop=\\\"return false;\\\"></div><div class=\\\"ui-select-choices\\\"></div></div>\");\n$templateCache.put(\"bootstrap/select.tpl.html\",\"<div class=\\\"ui-select-container ui-select-bootstrap dropdown\\\" ng-class=\\\"{open: $select.open}\\\"><div class=\\\"ui-select-match\\\"></div><input type=\\\"text\\\" autocomplete=\\\"off\\\" tabindex=\\\"-1\\\" aria-expanded=\\\"true\\\" aria-label=\\\"{{ $select.baseTitle }}\\\" aria-owns=\\\"ui-select-choices-{{ $select.generatedId }}\\\" aria-activedescendant=\\\"ui-select-choices-row-{{ $select.generatedId }}-{{ $select.activeIndex }}\\\" class=\\\"form-control ui-select-search\\\" placeholder=\\\"{{$select.placeholder}}\\\" ng-model=\\\"$select.search\\\" ng-show=\\\"$select.searchEnabled && $select.open\\\"><div class=\\\"ui-select-choices\\\"></div></div>\");\n$templateCache.put(\"select2/choices.tpl.html\",\"<ul class=\\\"ui-select-choices ui-select-choices-content select2-results\\\"><li class=\\\"ui-select-choices-group\\\" ng-class=\\\"{\\'select2-result-with-children\\': $select.choiceGrouped($group) }\\\"><div ng-show=\\\"$select.choiceGrouped($group)\\\" class=\\\"ui-select-choices-group-label select2-result-label\\\" ng-bind=\\\"$group.name\\\"></div><ul role=\\\"listbox\\\" id=\\\"ui-select-choices-{{ $select.generatedId }}\\\" ng-class=\\\"{\\'select2-result-sub\\': $select.choiceGrouped($group), \\'select2-result-single\\': !$select.choiceGrouped($group) }\\\"><li role=\\\"option\\\" id=\\\"ui-select-choices-row-{{ $select.generatedId }}-{{$index}}\\\" class=\\\"ui-select-choices-row\\\" ng-class=\\\"{\\'select2-highlighted\\': $select.isActive(this), \\'select2-disabled\\': $select.isDisabled(this)}\\\"><div class=\\\"select2-result-label ui-select-choices-row-inner\\\"></div></li></ul></li></ul>\");\n$templateCache.put(\"select2/match-multiple.tpl.html\",\"<span class=\\\"ui-select-match\\\"><li class=\\\"ui-select-match-item select2-search-choice\\\" ng-repeat=\\\"$item in $select.selected\\\" ng-class=\\\"{\\'select2-search-choice-focus\\':$selectMultiple.activeMatchIndex === $index, \\'select2-locked\\':$select.isLocked(this, $index)}\\\" ui-select-sort=\\\"$select.selected\\\"><span uis-transclude-append=\\\"\\\"></span> <a href=\\\"javascript:;\\\" class=\\\"ui-select-match-close select2-search-choice-close\\\" ng-click=\\\"$selectMultiple.removeChoice($index)\\\" tabindex=\\\"-1\\\"></a></li></span>\");\n$templateCache.put(\"select2/match.tpl.html\",\"<a class=\\\"select2-choice ui-select-match\\\" ng-class=\\\"{\\'select2-default\\': $select.isEmpty()}\\\" ng-click=\\\"$select.toggle($event)\\\" aria-label=\\\"{{ $select.baseTitle }} select\\\"><span ng-show=\\\"$select.isEmpty()\\\" class=\\\"select2-chosen\\\">{{$select.placeholder}}</span> <span ng-hide=\\\"$select.isEmpty()\\\" class=\\\"select2-chosen\\\" ng-transclude=\\\"\\\"></span> <abbr ng-if=\\\"$select.allowClear && !$select.isEmpty()\\\" class=\\\"select2-search-choice-close\\\" ng-click=\\\"$select.clear($event)\\\"></abbr> <span class=\\\"select2-arrow ui-select-toggle\\\"><b></b></span></a>\");\n$templateCache.put(\"select2/select-multiple.tpl.html\",\"<div class=\\\"ui-select-container ui-select-multiple select2 select2-container select2-container-multi\\\" ng-class=\\\"{\\'select2-container-active select2-dropdown-open open\\': $select.open, \\'select2-container-disabled\\': $select.disabled}\\\"><ul class=\\\"select2-choices\\\"><span class=\\\"ui-select-match\\\"></span><li class=\\\"select2-search-field\\\"><input type=\\\"text\\\" autocomplete=\\\"off\\\" autocorrect=\\\"off\\\" autocapitalize=\\\"off\\\" spellcheck=\\\"false\\\" role=\\\"combobox\\\" aria-expanded=\\\"true\\\" aria-owns=\\\"ui-select-choices-{{ $select.generatedId }}\\\" aria-label=\\\"{{ $select.baseTitle }}\\\" aria-activedescendant=\\\"ui-select-choices-row-{{ $select.generatedId }}-{{ $select.activeIndex }}\\\" class=\\\"select2-input ui-select-search\\\" placeholder=\\\"{{$selectMultiple.getPlaceholder()}}\\\" ng-disabled=\\\"$select.disabled\\\" ng-hide=\\\"$select.disabled\\\" ng-model=\\\"$select.search\\\" ng-click=\\\"$select.activate()\\\" style=\\\"width: 34px;\\\" ondrop=\\\"return false;\\\"></li></ul><div class=\\\"ui-select-dropdown select2-drop select2-with-searchbox select2-drop-active\\\" ng-class=\\\"{\\'select2-display-none\\': !$select.open}\\\"><div class=\\\"ui-select-choices\\\"></div></div></div>\");\n$templateCache.put(\"select2/select.tpl.html\",\"<div class=\\\"ui-select-container select2 select2-container\\\" ng-class=\\\"{\\'select2-container-active select2-dropdown-open open\\': $select.open, \\'select2-container-disabled\\': $select.disabled, \\'select2-container-active\\': $select.focus, \\'select2-allowclear\\': $select.allowClear && !$select.isEmpty()}\\\"><div class=\\\"ui-select-match\\\"></div><div class=\\\"ui-select-dropdown select2-drop select2-with-searchbox select2-drop-active\\\" ng-class=\\\"{\\'select2-display-none\\': !$select.open}\\\"><div class=\\\"select2-search\\\" ng-show=\\\"$select.searchEnabled\\\"><input type=\\\"text\\\" autocomplete=\\\"off\\\" autocorrect=\\\"off\\\" autocapitalize=\\\"off\\\" spellcheck=\\\"false\\\" role=\\\"combobox\\\" aria-expanded=\\\"true\\\" aria-owns=\\\"ui-select-choices-{{ $select.generatedId }}\\\" aria-label=\\\"{{ $select.baseTitle }}\\\" aria-activedescendant=\\\"ui-select-choices-row-{{ $select.generatedId }}-{{ $select.activeIndex }}\\\" class=\\\"ui-select-search select2-input\\\" ng-model=\\\"$select.search\\\"></div><div class=\\\"ui-select-choices\\\"></div></div></div>\");\n$templateCache.put(\"selectize/choices.tpl.html\",\"<div ng-show=\\\"$select.open\\\" class=\\\"ui-select-choices ui-select-dropdown selectize-dropdown single\\\"><div class=\\\"ui-select-choices-content selectize-dropdown-content\\\"><div class=\\\"ui-select-choices-group optgroup\\\" role=\\\"listbox\\\"><div ng-show=\\\"$select.isGrouped\\\" class=\\\"ui-select-choices-group-label optgroup-header\\\" ng-bind=\\\"$group.name\\\"></div><div role=\\\"option\\\" class=\\\"ui-select-choices-row\\\" ng-class=\\\"{active: $select.isActive(this), disabled: $select.isDisabled(this)}\\\"><div class=\\\"option ui-select-choices-row-inner\\\" data-selectable=\\\"\\\"></div></div></div></div></div>\");\n$templateCache.put(\"selectize/match.tpl.html\",\"<div ng-hide=\\\"($select.open || $select.isEmpty())\\\" class=\\\"ui-select-match\\\" ng-transclude=\\\"\\\"></div>\");\n$templateCache.put(\"selectize/select.tpl.html\",\"<div class=\\\"ui-select-container selectize-control single\\\" ng-class=\\\"{\\'open\\': $select.open}\\\"><div class=\\\"selectize-input\\\" ng-class=\\\"{\\'focus\\': $select.open, \\'disabled\\': $select.disabled, \\'selectize-focus\\' : $select.focus}\\\" ng-click=\\\"$select.activate()\\\"><div class=\\\"ui-select-match\\\"></div><input type=\\\"text\\\" autocomplete=\\\"off\\\" tabindex=\\\"-1\\\" class=\\\"ui-select-search ui-select-toggle\\\" ng-click=\\\"$select.toggle($event)\\\" placeholder=\\\"{{$select.placeholder}}\\\" ng-model=\\\"$select.search\\\" ng-hide=\\\"!$select.searchEnabled || ($select.selected && !$select.open)\\\" ng-disabled=\\\"$select.disabled\\\" aria-label=\\\"{{ $select.baseTitle }}\\\"></div><div class=\\\"ui-select-choices\\\"></div></div>\");}]);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 1826\n}).call(this);                                                       // 1827\n                                                                     // 1828\n///////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['angularui:ui-select'] = {};\n\n})();\n","servePath":"/packages/angularui_ui-select.js"}]