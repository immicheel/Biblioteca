[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/huei90_angular-validation/dist/angular-validation.js                                                     //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n(function() {                                                                                                        // 1\n    angular.module('validation', ['validation.provider', 'validation.directive']);                                   // 2\n}).call(this);                                                                                                       // 3\n                                                                                                                     // 4\n(function() {                                                                                                        // 5\n    angular.module('validation.provider', [])                                                                        // 6\n        .provider('$validation', function() {                                                                        // 7\n                                                                                                                     // 8\n                                                                                                                     // 9\n            var $injector,                                                                                           // 10\n                $scope,                                                                                              // 11\n                $http,                                                                                               // 12\n                $q,                                                                                                  // 13\n                $timeout,                                                                                            // 14\n                _this = this;                                                                                        // 15\n                                                                                                                     // 16\n                                                                                                                     // 17\n            /**                                                                                                      // 18\n             * Setup the provider                                                                                    // 19\n             * @param injector                                                                                       // 20\n             */                                                                                                      // 21\n            var setup = function(injector) {                                                                         // 22\n                $injector = injector;                                                                                // 23\n                $scope = $injector.get('$rootScope');                                                                // 24\n                $http = $injector.get('$http');                                                                      // 25\n                $q = $injector.get('$q');                                                                            // 26\n                $timeout = $injector.get('$timeout');                                                                // 27\n            };                                                                                                       // 28\n                                                                                                                     // 29\n                                                                                                                     // 30\n            /**                                                                                                      // 31\n             * Define validation type RegExp                                                                         // 32\n             * @type {{}}                                                                                            // 33\n             */                                                                                                      // 34\n            var expression = {};                                                                                     // 35\n                                                                                                                     // 36\n                                                                                                                     // 37\n            /**                                                                                                      // 38\n             * default error, success message                                                                        // 39\n             * @type {{}}                                                                                            // 40\n             */                                                                                                      // 41\n            var defaultMsg = {};                                                                                     // 42\n                                                                                                                     // 43\n                                                                                                                     // 44\n            /**                                                                                                      // 45\n             * Allow user to set a custom Expression, do remember set the default message using setDefaultMsg        // 46\n             * @param obj                                                                                            // 47\n             * @returns {*}                                                                                          // 48\n             */                                                                                                      // 49\n            this.setExpression = function(obj) {                                                                     // 50\n                angular.extend(expression, obj);                                                                     // 51\n                return _this;                                                                                        // 52\n            };                                                                                                       // 53\n                                                                                                                     // 54\n                                                                                                                     // 55\n            /**                                                                                                      // 56\n             * Get the Expression                                                                                    // 57\n             * @param exprs                                                                                          // 58\n             * @returns {*}                                                                                          // 59\n             */                                                                                                      // 60\n            this.getExpression = function(exprs) {                                                                   // 61\n                return expression[exprs];                                                                            // 62\n            };                                                                                                       // 63\n                                                                                                                     // 64\n                                                                                                                     // 65\n            /**                                                                                                      // 66\n             * Allow user to set default message                                                                     // 67\n             * @param obj                                                                                            // 68\n             * @returns {*}                                                                                          // 69\n             */                                                                                                      // 70\n            this.setDefaultMsg = function(obj) {                                                                     // 71\n                angular.extend(defaultMsg, obj);                                                                     // 72\n                return _this;                                                                                        // 73\n            };                                                                                                       // 74\n                                                                                                                     // 75\n                                                                                                                     // 76\n            /**                                                                                                      // 77\n             * Get the Default Message                                                                               // 78\n             * @param msg                                                                                            // 79\n             * @returns {*}                                                                                          // 80\n             */                                                                                                      // 81\n            this.getDefaultMsg = function(msg) {                                                                     // 82\n                return defaultMsg[msg];                                                                              // 83\n            };                                                                                                       // 84\n                                                                                                                     // 85\n                                                                                                                     // 86\n            /**                                                                                                      // 87\n             * Override the errorHTML function                                                                       // 88\n             * @param func                                                                                           // 89\n             * @returns {*}                                                                                          // 90\n             */                                                                                                      // 91\n            this.setErrorHTML = function(func) {                                                                     // 92\n                if (func.constructor !== Function) {                                                                 // 93\n                    return;                                                                                          // 94\n                }                                                                                                    // 95\n                                                                                                                     // 96\n                _this.getErrorHTML = func;                                                                           // 97\n                                                                                                                     // 98\n                return _this;                                                                                        // 99\n            };                                                                                                       // 100\n                                                                                                                     // 101\n                                                                                                                     // 102\n            /**                                                                                                      // 103\n             * Invalid message HTML, here's the default                                                              // 104\n             * @param message                                                                                        // 105\n             * @returns {string}                                                                                     // 106\n             */                                                                                                      // 107\n            this.getErrorHTML = function(message) {                                                                  // 108\n                return '<p class=\"validation-invalid\">' + message + '</p>';                                          // 109\n            };                                                                                                       // 110\n                                                                                                                     // 111\n                                                                                                                     // 112\n            /**                                                                                                      // 113\n             * Override the successHTML function                                                                     // 114\n             * @param func                                                                                           // 115\n             * @returns {*}                                                                                          // 116\n             */                                                                                                      // 117\n            this.setSuccessHTML = function(func) {                                                                   // 118\n                if (func.constructor !== Function) {                                                                 // 119\n                    return;                                                                                          // 120\n                }                                                                                                    // 121\n                                                                                                                     // 122\n                _this.getSuccessHTML = func;                                                                         // 123\n                                                                                                                     // 124\n                return _this;                                                                                        // 125\n            };                                                                                                       // 126\n                                                                                                                     // 127\n                                                                                                                     // 128\n            /**                                                                                                      // 129\n             * Valid message HTML, here's the default                                                                // 130\n             * @param message                                                                                        // 131\n             * @returns {string}                                                                                     // 132\n             */                                                                                                      // 133\n            this.getSuccessHTML = function(message) {                                                                // 134\n                return '<p class=\"validation-valid\">' + message + '</p>';                                            // 135\n            };                                                                                                       // 136\n                                                                                                                     // 137\n                                                                                                                     // 138\n            /**                                                                                                      // 139\n             * Whether show the validation success message                                                           // 140\n             * You can easily change this to false in your config                                                    // 141\n             * example: $validationProvider.showSuccessMessage = false;                                              // 142\n             * @type {boolean}                                                                                       // 143\n             */                                                                                                      // 144\n            this.showSuccessMessage = true;                                                                          // 145\n                                                                                                                     // 146\n                                                                                                                     // 147\n            /**                                                                                                      // 148\n             * Whether show the validation error message                                                             // 149\n             * You can easily change this to false in your config                                                    // 150\n             * example: $validationProvider.showErrorMessage = false;                                                // 151\n             * @type {boolean}                                                                                       // 152\n             */                                                                                                      // 153\n            this.showErrorMessage = true;                                                                            // 154\n                                                                                                                     // 155\n            /**                                                                                                      // 156\n             * Check form valid, return true                                                                         // 157\n             * checkValid(Form): Check the specific form(Form) valid from angular `$valid`                           // 158\n             * @param form                                                                                           // 159\n             * @returns {boolean}                                                                                    // 160\n             */                                                                                                      // 161\n            this.checkValid = function(form) {                                                                       // 162\n                if (form.$valid === undefined) {                                                                     // 163\n                    return false;                                                                                    // 164\n                }                                                                                                    // 165\n                return (form && form.$valid === true);                                                               // 166\n            };                                                                                                       // 167\n                                                                                                                     // 168\n                                                                                                                     // 169\n            /**                                                                                                      // 170\n             * Validate the form when click submit, when `validMethod = submit`                                      // 171\n             * @param form                                                                                           // 172\n             * @returns {promise|*}                                                                                  // 173\n             */                                                                                                      // 174\n            this.validate = function(form) {                                                                         // 175\n                                                                                                                     // 176\n                var deferred = $q.defer(),                                                                           // 177\n                    idx = 0;                                                                                         // 178\n                                                                                                                     // 179\n                if (form === undefined) {                                                                            // 180\n                    console.error('This is not a regular Form name scope');                                          // 181\n                    deferred.reject('This is not a regular Form name scope');                                        // 182\n                    return deferred.promise;                                                                         // 183\n                }                                                                                                    // 184\n                                                                                                                     // 185\n                if (form.validationId) { // single                                                                   // 186\n                    $scope.$broadcast(form.$name + 'submit-' + form.validationId, idx++);                            // 187\n                } else if (form.constructor === Array) { // multiple                                                 // 188\n                    for (var k in form) {                                                                            // 189\n                        $scope.$broadcast(form[k].$name + 'submit-' + form[k].validationId, idx++);                  // 190\n                    }                                                                                                // 191\n                } else {                                                                                             // 192\n                    for (var i in form) { // whole scope                                                             // 193\n                        if (i[0] !== '$' && form[i].hasOwnProperty('$dirty')) {                                      // 194\n                            $scope.$broadcast(i + 'submit-' + form[i].validationId, idx++);                          // 195\n                        }                                                                                            // 196\n                    }                                                                                                // 197\n                }                                                                                                    // 198\n                                                                                                                     // 199\n                deferred.promise.success = function(fn) {                                                            // 200\n                    deferred.promise.then(function(value) {                                                          // 201\n                        fn(value);                                                                                   // 202\n                    });                                                                                              // 203\n                    return deferred.promise;                                                                         // 204\n                };                                                                                                   // 205\n                                                                                                                     // 206\n                deferred.promise.error = function(fn) {                                                              // 207\n                    deferred.promise.then(null, function(value) {                                                    // 208\n                        fn(value);                                                                                   // 209\n                    });                                                                                              // 210\n                    return deferred.promise;                                                                         // 211\n                };                                                                                                   // 212\n                                                                                                                     // 213\n                $timeout(function() {                                                                                // 214\n                    if (_this.checkValid(form)) {                                                                    // 215\n                        deferred.resolve('success');                                                                 // 216\n                    } else {                                                                                         // 217\n                        deferred.reject('error');                                                                    // 218\n                    }                                                                                                // 219\n                });                                                                                                  // 220\n                                                                                                                     // 221\n                return deferred.promise;                                                                             // 222\n            };                                                                                                       // 223\n                                                                                                                     // 224\n            /**                                                                                                      // 225\n             * Do this function if validation valid                                                                  // 226\n             * @param element                                                                                        // 227\n             */                                                                                                      // 228\n            this.validCallback = null;                                                                               // 229\n                                                                                                                     // 230\n            /**                                                                                                      // 231\n             * Do this function if validation invalid                                                                // 232\n             * @param element                                                                                        // 233\n             */                                                                                                      // 234\n            this.invalidCallback = null;                                                                             // 235\n                                                                                                                     // 236\n            /**                                                                                                      // 237\n             * reset the specific form                                                                               // 238\n             * @param form                                                                                           // 239\n             */                                                                                                      // 240\n            this.reset = function(form) {                                                                            // 241\n                if (form === undefined) {                                                                            // 242\n                    console.error('This is not a regular Form name scope');                                          // 243\n                    return;                                                                                          // 244\n                }                                                                                                    // 245\n                                                                                                                     // 246\n                if (form.validationId) {                                                                             // 247\n                    $scope.$broadcast(form.$name + 'reset-' + form.validationId);                                    // 248\n                } else if (form.constructor === Array) {                                                             // 249\n                    for (var k in form) {                                                                            // 250\n                        $scope.$broadcast(form[k].$name + 'reset-' + form[k].validationId);                          // 251\n                    }                                                                                                // 252\n                } else {                                                                                             // 253\n                    for (var i in form) {                                                                            // 254\n                        if (i[0] !== '$' && form[i].hasOwnProperty('$dirty')) {                                      // 255\n                            $scope.$broadcast(i + 'reset-' + form[i].validationId);                                  // 256\n                        }                                                                                            // 257\n                    }                                                                                                // 258\n                }                                                                                                    // 259\n            };                                                                                                       // 260\n                                                                                                                     // 261\n                                                                                                                     // 262\n            /**                                                                                                      // 263\n             * $get                                                                                                  // 264\n             * @returns {{setErrorHTML: *, getErrorHTML: Function, setSuccessHTML: *, getSuccessHTML: Function, setExpression: *, getExpression: Function, setDefaultMsg: *, getDefaultMsg: Function, checkValid: Function, validate: Function, reset: Function}}\n             */                                                                                                      // 266\n            this.$get = ['$injector',                                                                                // 267\n                function($injector) {                                                                                // 268\n                    setup($injector);                                                                                // 269\n                    return {                                                                                         // 270\n                        setErrorHTML: this.setErrorHTML,                                                             // 271\n                        getErrorHTML: this.getErrorHTML,                                                             // 272\n                        setSuccessHTML: this.setSuccessHTML,                                                         // 273\n                        getSuccessHTML: this.getSuccessHTML,                                                         // 274\n                        setExpression: this.setExpression,                                                           // 275\n                        getExpression: this.getExpression,                                                           // 276\n                        setDefaultMsg: this.setDefaultMsg,                                                           // 277\n                        getDefaultMsg: this.getDefaultMsg,                                                           // 278\n                        showSuccessMessage: this.showSuccessMessage,                                                 // 279\n                        showErrorMessage: this.showErrorMessage,                                                     // 280\n                        checkValid: this.checkValid,                                                                 // 281\n                        validate: this.validate,                                                                     // 282\n                        validCallback: this.validCallback,                                                           // 283\n                        invalidCallback: this.invalidCallback,                                                       // 284\n                        reset: this.reset                                                                            // 285\n                    };                                                                                               // 286\n                }                                                                                                    // 287\n            ];                                                                                                       // 288\n                                                                                                                     // 289\n        });                                                                                                          // 290\n}).call(this);                                                                                                       // 291\n                                                                                                                     // 292\n(function() {                                                                                                        // 293\n    angular.module('validation.directive', ['validation.provider'])                                                  // 294\n        .directive('validator', ['$injector',                                                                        // 295\n            function($injector) {                                                                                    // 296\n                                                                                                                     // 297\n                var $validationProvider = $injector.get('$validation'),                                              // 298\n                    $q = $injector.get('$q'),                                                                        // 299\n                    $timeout = $injector.get('$timeout');                                                            // 300\n                                                                                                                     // 301\n                /**                                                                                                  // 302\n                 * Do this function if validation valid                                                              // 303\n                 * @param element                                                                                    // 304\n                 * @param validMessage                                                                               // 305\n                 * @param validation                                                                                 // 306\n                 * @param callback                                                                                   // 307\n                 * @param ctrl                                                                                       // 308\n                 * @returns {}                                                                                       // 309\n                 */                                                                                                  // 310\n                var validFunc = function(element, validMessage, validation, scope, ctrl) {                           // 311\n                    var messageElem,                                                                                 // 312\n                        messageToShow = validMessage || $validationProvider.getDefaultMsg(validation).success;       // 313\n                                                                                                                     // 314\n                    if (scope.messageId)                                                                             // 315\n                        messageElem = angular.element(document.querySelector('#' + scope.messageId));                // 316\n                    else                                                                                             // 317\n                        messageElem = element.next();                                                                // 318\n                                                                                                                     // 319\n                    if ($validationProvider.showSuccessMessage && messageToShow) {                                   // 320\n                        messageElem.html($validationProvider.getSuccessHTML(messageToShow));                         // 321\n                    }                                                                                                // 322\n                                                                                                                     // 323\n                    ctrl.$setValidity(ctrl.$name, true);                                                             // 324\n                    if (scope.validCallback) scope.validCallback({                                                   // 325\n                        message: messageToShow                                                                       // 326\n                    });                                                                                              // 327\n                    if ($validationProvider.validCallback) $validationProvider.validCallback(element);               // 328\n                                                                                                                     // 329\n                    return true;                                                                                     // 330\n                };                                                                                                   // 331\n                                                                                                                     // 332\n                                                                                                                     // 333\n                /**                                                                                                  // 334\n                 * Do this function if validation invalid                                                            // 335\n                 * @param element                                                                                    // 336\n                 * @param validMessage                                                                               // 337\n                 * @param validation                                                                                 // 338\n                 * @param callback                                                                                   // 339\n                 * @param ctrl                                                                                       // 340\n                 * @returns {}                                                                                       // 341\n                 */                                                                                                  // 342\n                var invalidFunc = function(element, validMessage, validation, scope, ctrl) {                         // 343\n                    var messageElem,                                                                                 // 344\n                        messageToShow = validMessage || $validationProvider.getDefaultMsg(validation).error;         // 345\n                                                                                                                     // 346\n                    if (scope.messageId)                                                                             // 347\n                        messageElem = angular.element(document.querySelector('#' + scope.messageId));                // 348\n                    else                                                                                             // 349\n                        messageElem = element.next();                                                                // 350\n                                                                                                                     // 351\n                    if ($validationProvider.showErrorMessage && messageToShow) {                                     // 352\n                        messageElem.html($validationProvider.getErrorHTML(messageToShow));                           // 353\n                    }                                                                                                // 354\n                                                                                                                     // 355\n                    ctrl.$setValidity(ctrl.$name, false);                                                            // 356\n                    if (scope.invalidCallback) scope.invalidCallback({                                               // 357\n                        message: messageToShow                                                                       // 358\n                    });                                                                                              // 359\n                    if ($validationProvider.invalidCallback) $validationProvider.invalidCallback(element);           // 360\n                                                                                                                     // 361\n                    return false;                                                                                    // 362\n                };                                                                                                   // 363\n                                                                                                                     // 364\n                                                                                                                     // 365\n                /**                                                                                                  // 366\n                 * collect elements for focus                                                                        // 367\n                 * @type {Object}                                                                                    // 368\n                 ***private variable                                                                                 // 369\n                 */                                                                                                  // 370\n                var focusElements = {};                                                                              // 371\n                                                                                                                     // 372\n                                                                                                                     // 373\n                /**                                                                                                  // 374\n                 * Check Validation with Function or RegExp                                                          // 375\n                 * @param scope                                                                                      // 376\n                 * @param element                                                                                    // 377\n                 * @param attrs                                                                                      // 378\n                 * @param ctrl                                                                                       // 379\n                 * @param validation                                                                                 // 380\n                 * @param value                                                                                      // 381\n                 * @returns {}                                                                                       // 382\n                 */                                                                                                  // 383\n                var checkValidation = function(scope, element, attrs, ctrl, validation, value) {                     // 384\n                                                                                                                     // 385\n                    var validators = validation.slice(0),                                                            // 386\n                        validatorExpr = validators[0].trim(),                                                        // 387\n                        paramIndex = validatorExpr.indexOf('='),                                                     // 388\n                        validator = paramIndex === -1 ? validatorExpr : validatorExpr.substr(0, paramIndex),         // 389\n                        validatorParam = paramIndex === -1 ? null : validatorExpr.substr(paramIndex + 1),            // 390\n                        leftValidation = validators.slice(1),                                                        // 391\n                        successMessage = validator + 'SuccessMessage',                                               // 392\n                        errorMessage = validator + 'ErrorMessage',                                                   // 393\n                        expression = $validationProvider.getExpression(validator),                                   // 394\n                        valid = {                                                                                    // 395\n                            success: function() {                                                                    // 396\n                                validFunc(element, attrs[successMessage], validator, scope, ctrl);                   // 397\n                                if (leftValidation.length) {                                                         // 398\n                                    return checkValidation(scope, element, attrs, ctrl, leftValidation, value);      // 399\n                                } else {                                                                             // 400\n                                    return true;                                                                     // 401\n                                }                                                                                    // 402\n                            },                                                                                       // 403\n                            error: function() {                                                                      // 404\n                                return invalidFunc(element, attrs[errorMessage], validator, scope, ctrl);            // 405\n                            }                                                                                        // 406\n                        };                                                                                           // 407\n                                                                                                                     // 408\n                    if (expression === undefined) {                                                                  // 409\n                        console.error('You are using undefined validator \"%s\"', validator);                          // 410\n                        if (leftValidation.length) {                                                                 // 411\n                            return checkValidation(scope, element, attrs, ctrl, leftValidation, value);              // 412\n                        } else {                                                                                     // 413\n                            return;                                                                                  // 414\n                        }                                                                                            // 415\n                    }                                                                                                // 416\n                    // Check with Function                                                                           // 417\n                    if (expression.constructor === Function) {                                                       // 418\n                        return $q.all([$validationProvider.getExpression(validator)(value, scope, element, attrs, validatorParam)])\n                            .then(function(data) {                                                                   // 420\n                                if (data && data.length > 0 && data[0]) {                                            // 421\n                                    return valid.success();                                                          // 422\n                                } else {                                                                             // 423\n                                    return valid.error();                                                            // 424\n                                }                                                                                    // 425\n                            }, function() {                                                                          // 426\n                                return valid.error();                                                                // 427\n                            });                                                                                      // 428\n                    }                                                                                                // 429\n                    // Check with RegExp                                                                             // 430\n                    else if (expression.constructor === RegExp) {                                                    // 431\n                        // Only apply the test if the value is neither undefined or null                             // 432\n                        if (value !== undefined && value !== null)                                                   // 433\n                            return $validationProvider.getExpression(validator).test(value) ? valid.success() : valid.error();\n                        else                                                                                         // 435\n                            return valid.error();                                                                    // 436\n                    } else {                                                                                         // 437\n                        return valid.error();                                                                        // 438\n                    }                                                                                                // 439\n                };                                                                                                   // 440\n                                                                                                                     // 441\n                                                                                                                     // 442\n                /**                                                                                                  // 443\n                 * generate unique guid                                                                              // 444\n                 */                                                                                                  // 445\n                var s4 = function() {                                                                                // 446\n                    return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);                          // 447\n                };                                                                                                   // 448\n                var guid = function() {                                                                              // 449\n                    return (s4() + s4() + s4() + s4());                                                              // 450\n                };                                                                                                   // 451\n                                                                                                                     // 452\n                                                                                                                     // 453\n                return {                                                                                             // 454\n                    restrict: 'A',                                                                                   // 455\n                    require: 'ngModel',                                                                              // 456\n                    scope: {                                                                                         // 457\n                        model: '=ngModel',                                                                           // 458\n                        initialValidity: '=initialValidity',                                                         // 459\n                        validCallback: '&',                                                                          // 460\n                        invalidCallback: '&',                                                                        // 461\n                        messageId: '@'                                                                               // 462\n                    },                                                                                               // 463\n                    link: function(scope, element, attrs, ctrl) {                                                    // 464\n                                                                                                                     // 465\n                        /**                                                                                          // 466\n                         * watch                                                                                     // 467\n                         * @type {watch}                                                                             // 468\n                         *                                                                                           // 469\n                         * Use to collect scope.$watch method                                                        // 470\n                         *                                                                                           // 471\n                         * use watch() to destroy the $watch method                                                  // 472\n                         */                                                                                          // 473\n                        var watch = function() {};                                                                   // 474\n                                                                                                                     // 475\n                        /**                                                                                          // 476\n                         * validator                                                                                 // 477\n                         * @type {Array}                                                                             // 478\n                         *                                                                                           // 479\n                         * Convert user input String to Array                                                        // 480\n                         */                                                                                          // 481\n                        var validation = attrs.validator.split(',');                                                 // 482\n                                                                                                                     // 483\n                        /**                                                                                          // 484\n                         * guid use                                                                                  // 485\n                         */                                                                                          // 486\n                        var uid = ctrl.validationId = guid();                                                        // 487\n                                                                                                                     // 488\n                                                                                                                     // 489\n                        /**                                                                                          // 490\n                         * Set initial validity to undefined if no boolean value is transmitted                      // 491\n                         */                                                                                          // 492\n                        var initialValidity;                                                                         // 493\n                        if (typeof scope.initialValidity === 'boolean') {                                            // 494\n                            initialValidity = scope.initialValidity;                                                 // 495\n                        }                                                                                            // 496\n                                                                                                                     // 497\n                        /**                                                                                          // 498\n                         * Default Valid/Invalid Message                                                             // 499\n                         */                                                                                          // 500\n                        if (!scope.messageId)                                                                        // 501\n                            element.after('<span></span>');                                                          // 502\n                                                                                                                     // 503\n                        /**                                                                                          // 504\n                         * Set custom initial validity                                                               // 505\n                         * Usage: <input initial-validity=\"true\" ... >                                               // 506\n                         */                                                                                          // 507\n                        ctrl.$setValidity(ctrl.$name, initialValidity);                                              // 508\n                                                                                                                     // 509\n                        /**                                                                                          // 510\n                         * Reset the validation for specific form                                                    // 511\n                         */                                                                                          // 512\n                        scope.$on(ctrl.$name + 'reset-' + uid, function() {                                          // 513\n                                                                                                                     // 514\n                            /**                                                                                      // 515\n                             * clear scope.$watch here                                                               // 516\n                             * when reset status                                                                     // 517\n                             * clear the $watch method to prevent                                                    // 518\n                             * $watch again while reset the form                                                     // 519\n                             */                                                                                      // 520\n                            watch();                                                                                 // 521\n                                                                                                                     // 522\n                            $timeout(function() {                                                                    // 523\n                                ctrl.$setViewValue('');                                                              // 524\n                                ctrl.$setPristine();                                                                 // 525\n                                ctrl.$setValidity(ctrl.$name, undefined);                                            // 526\n                                ctrl.$render();                                                                      // 527\n                                if (scope.messageId)                                                                 // 528\n                                    angular.element(document.querySelector('#' + scope.messageId)).html('');         // 529\n                                else                                                                                 // 530\n                                    element.next().html('');                                                         // 531\n                            });                                                                                      // 532\n                                                                                                                     // 533\n                        });                                                                                          // 534\n                                                                                                                     // 535\n                        /**                                                                                          // 536\n                         * Check validator                                                                           // 537\n                         */                                                                                          // 538\n                                                                                                                     // 539\n                        (function() {                                                                                // 540\n                            /**                                                                                      // 541\n                             * Click submit form, check the validity when submit                                     // 542\n                             */                                                                                      // 543\n                            scope.$on(ctrl.$name + 'submit-' + uid, function(event, index) {                         // 544\n                                var value = ctrl.$viewValue,                                                         // 545\n                                    isValid = false;                                                                 // 546\n                                                                                                                     // 547\n                                isValid = checkValidation(scope, element, attrs, ctrl, validation, value);           // 548\n                                                                                                                     // 549\n                                if (attrs.validMethod === 'submit') {                                                // 550\n                                    watch(); // clear previous scope.$watch                                          // 551\n                                    watch = scope.$watch('model', function(value, oldValue) {                        // 552\n                                        value = ctrl.$viewValue;                                                     // 553\n                                                                                                                     // 554\n                                        // don't watch when init                                                     // 555\n                                        if (value === oldValue) {                                                    // 556\n                                            return;                                                                  // 557\n                                        }                                                                            // 558\n                                                                                                                     // 559\n                                        // scope.$watch will translate '' to undefined                               // 560\n                                        // undefined/null will pass the required submit /^.+/                        // 561\n                                        // cause some error in this validation                                       // 562\n                                        if (value === undefined || value === null) {                                 // 563\n                                            value = '';                                                              // 564\n                                        }                                                                            // 565\n                                                                                                                     // 566\n                                        isValid = checkValidation(scope, element, attrs, ctrl, validation, value);   // 567\n                                    });                                                                              // 568\n                                                                                                                     // 569\n                                }                                                                                    // 570\n                                                                                                                     // 571\n                                var setFocus = function(isValid) {                                                   // 572\n                                    if (isValid) {                                                                   // 573\n                                        delete focusElements[index];                                                 // 574\n                                    } else {                                                                         // 575\n                                        focusElements[index] = element[0];                                           // 576\n                                                                                                                     // 577\n                                        $timeout(function() {                                                        // 578\n                                            focusElements[Math.min.apply(null, Object.keys(focusElements))].focus();\n                                        }, 0);                                                                       // 580\n                                    }                                                                                // 581\n                                };                                                                                   // 582\n                                                                                                                     // 583\n                                if (isValid.constructor === Object) isValid.then(setFocus);                          // 584\n                                else setFocus(isValid);                                                              // 585\n                            });                                                                                      // 586\n                                                                                                                     // 587\n                            /**                                                                                      // 588\n                             * Validate blur method                                                                  // 589\n                             */                                                                                      // 590\n                            if (attrs.validMethod === 'blur') {                                                      // 591\n                                element.bind('blur', function() {                                                    // 592\n                                    var value = ctrl.$viewValue;                                                     // 593\n                                    scope.$apply(function() {                                                        // 594\n                                        checkValidation(scope, element, attrs, ctrl, validation, value);             // 595\n                                    });                                                                              // 596\n                                });                                                                                  // 597\n                                                                                                                     // 598\n                                return;                                                                              // 599\n                            }                                                                                        // 600\n                                                                                                                     // 601\n                            /**                                                                                      // 602\n                             * Validate submit & submit-only method                                                  // 603\n                             */                                                                                      // 604\n                            if (attrs.validMethod === 'submit' || attrs.validMethod === 'submit-only') {             // 605\n                                return;                                                                              // 606\n                            }                                                                                        // 607\n                                                                                                                     // 608\n                            /**                                                                                      // 609\n                             * Validate watch method                                                                 // 610\n                             * This is the default method                                                            // 611\n                             */                                                                                      // 612\n                            scope.$watch('model', function(value) {                                                  // 613\n                                value = ctrl.$viewValue;                                                             // 614\n                                /**                                                                                  // 615\n                                 * dirty, pristine, viewValue control here                                           // 616\n                                 */                                                                                  // 617\n                                if (ctrl.$pristine && ctrl.$viewValue) {                                             // 618\n                                    // has value when initial                                                        // 619\n                                    ctrl.$setViewValue(ctrl.$viewValue);                                             // 620\n                                } else if (ctrl.$pristine) {                                                         // 621\n                                    // Don't validate form when the input is clean(pristine)                         // 622\n                                    if (scope.messageId)                                                             // 623\n                                        angular.element(document.querySelector('#' + scope.messageId)).html('');     // 624\n                                    else                                                                             // 625\n                                        element.next().html('');                                                     // 626\n                                    return;                                                                          // 627\n                                }                                                                                    // 628\n                                checkValidation(scope, element, attrs, ctrl, validation, value);                     // 629\n                            });                                                                                      // 630\n                                                                                                                     // 631\n                        })();                                                                                        // 632\n                                                                                                                     // 633\n                        $timeout(function() {                                                                        // 634\n                            /**                                                                                      // 635\n                             * Don't showup the validation Message                                                   // 636\n                             */                                                                                      // 637\n                            attrs.$observe('noValidationMessage', function(value) {                                  // 638\n                                var el;                                                                              // 639\n                                if (scope.messageId)                                                                 // 640\n                                    el = angular.element(document.querySelector('#' + scope.messageId));             // 641\n                                else                                                                                 // 642\n                                    el = element.next();                                                             // 643\n                                if (value == 'true' || value === true) {                                             // 644\n                                    el.css('display', 'none');                                                       // 645\n                                } else if (value == 'false' || value === false) {                                    // 646\n                                    el.css('display', 'block');                                                      // 647\n                                } else {}                                                                            // 648\n                            });                                                                                      // 649\n                        });                                                                                          // 650\n                                                                                                                     // 651\n                    }                                                                                                // 652\n                };                                                                                                   // 653\n            }                                                                                                        // 654\n        ])                                                                                                           // 655\n                                                                                                                     // 656\n    .directive('validationSubmit', ['$injector',                                                                     // 657\n        function($injector) {                                                                                        // 658\n                                                                                                                     // 659\n            var $validationProvider = $injector.get('$validation'),                                                  // 660\n                $timeout = $injector.get('$timeout'),                                                                // 661\n                $parse = $injector.get('$parse');                                                                    // 662\n                                                                                                                     // 663\n            return {                                                                                                 // 664\n                priority: 1, // execute before ng-click (0)                                                          // 665\n                require: '?ngClick',                                                                                 // 666\n                link: function postLink(scope, element, attrs) {                                                     // 667\n                    var form = $parse(attrs.validationSubmit)(scope);                                                // 668\n                                                                                                                     // 669\n                    $timeout(function() {                                                                            // 670\n                        // Disable ng-click event propagation                                                        // 671\n                        element.off('click');                                                                        // 672\n                        element.on('click', function(e) {                                                            // 673\n                            e.preventDefault();                                                                      // 674\n                                                                                                                     // 675\n                            $validationProvider.validate(form)                                                       // 676\n                                .success(function() {                                                                // 677\n                                    $parse(attrs.ngClick)(scope);                                                    // 678\n                                });                                                                                  // 679\n                        });                                                                                          // 680\n                    });                                                                                              // 681\n                                                                                                                     // 682\n                }                                                                                                    // 683\n            };                                                                                                       // 684\n        }                                                                                                            // 685\n    ])                                                                                                               // 686\n                                                                                                                     // 687\n    .directive('validationReset', ['$injector',                                                                      // 688\n        function($injector) {                                                                                        // 689\n                                                                                                                     // 690\n            var $validationProvider = $injector.get('$validation'),                                                  // 691\n                $timeout = $injector.get('$timeout'),                                                                // 692\n                $parse = $injector.get('$parse');                                                                    // 693\n                                                                                                                     // 694\n            return {                                                                                                 // 695\n                link: function postLink(scope, element, attrs) {                                                     // 696\n                    var form = $parse(attrs.validationReset)(scope);                                                 // 697\n                                                                                                                     // 698\n                    $timeout(function() {                                                                            // 699\n                        element.on('click', function(e) {                                                            // 700\n                            e.preventDefault();                                                                      // 701\n                            $validationProvider.reset(form);                                                         // 702\n                        });                                                                                          // 703\n                    });                                                                                              // 704\n                                                                                                                     // 705\n                }                                                                                                    // 706\n            };                                                                                                       // 707\n        }                                                                                                            // 708\n    ]);                                                                                                              // 709\n                                                                                                                     // 710\n}).call(this);                                                                                                       // 711\n                                                                                                                     // 712\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/huei90_angular-validation/dist/angular-validation-rule.js                                                //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n(function() {                                                                                                        // 1\n    angular.module('validation.rule', ['validation'])                                                                // 2\n        .config(['$validationProvider',                                                                              // 3\n            function($validationProvider) {                                                                          // 4\n                                                                                                                     // 5\n                var expression = {                                                                                   // 6\n                    required: function(value) {                                                                      // 7\n                        return !!value;                                                                              // 8\n                    },                                                                                               // 9\n                    url: /((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=\\+\\$,\\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=\\+\\$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[\\+~%\\/.\\w-_]*)?\\??(?:[-\\+=&;%@.\\w_]*)#?(?:[\\w]*))?)/,\n                    email: /^([\\w-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$/,\n                    number: /^\\d+$/,                                                                                 // 12\n                    minlength: function(value, scope, element, attrs, param) {                                       // 13\n                        return value.length >= param;                                                                // 14\n                    },                                                                                               // 15\n                    maxlength: function(value, scope, element, attrs, param) {                                       // 16\n                        return value.length <= param;                                                                // 17\n                    }                                                                                                // 18\n                };                                                                                                   // 19\n                                                                                                                     // 20\n                var defaultMsg = {                                                                                   // 21\n                    required: {                                                                                      // 22\n                        error: 'This should be Required!!',                                                          // 23\n                        success: 'It\\'s Required'                                                                    // 24\n                    },                                                                                               // 25\n                    url: {                                                                                           // 26\n                        error: 'This should be Url',                                                                 // 27\n                        success: 'It\\'s Url'                                                                         // 28\n                    },                                                                                               // 29\n                    email: {                                                                                         // 30\n                        error: 'This should be Email',                                                               // 31\n                        success: 'It\\'s Email'                                                                       // 32\n                    },                                                                                               // 33\n                    number: {                                                                                        // 34\n                        error: 'This should be Number',                                                              // 35\n                        success: 'It\\'s Number'                                                                      // 36\n                    },                                                                                               // 37\n                    minlength: {                                                                                     // 38\n                        error: 'This should be longer',                                                              // 39\n                        success: 'Long enough!'                                                                      // 40\n                    },                                                                                               // 41\n                    maxlength: {                                                                                     // 42\n                        error: 'This should be shorter',                                                             // 43\n                        success: 'Short enough!'                                                                     // 44\n                    }                                                                                                // 45\n                };                                                                                                   // 46\n                                                                                                                     // 47\n                $validationProvider.setExpression(expression).setDefaultMsg(defaultMsg);                             // 48\n                                                                                                                     // 49\n            }                                                                                                        // 50\n        ]);                                                                                                          // 51\n                                                                                                                     // 52\n}).call(this);                                                                                                       // 53\n                                                                                                                     // 54\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['huei90:angular-validation'] = {};\n\n})();\n","servePath":"/packages/huei90_angular-validation.js"}]