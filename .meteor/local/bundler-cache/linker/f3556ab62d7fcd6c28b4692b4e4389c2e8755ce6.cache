[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/angular_angular-sanitize/angular-sanitize.js                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * @license AngularJS v1.5.3                                                                                           // 2\n * (c) 2010-2016 Google, Inc. http://angularjs.org                                                                     // 3\n * License: MIT                                                                                                        // 4\n */                                                                                                                    // 5\n(function(window, angular, undefined) {'use strict';                                                                   // 6\n                                                                                                                       // 7\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                                           // 8\n *     Any commits to this file should be reviewed with security in mind.  *                                           // 9\n *   Changes to this file can potentially create security vulnerabilities. *                                           // 10\n *          An approval from 2 Core members with history of modifying      *                                           // 11\n *                         this file is required.                          *                                           // 12\n *                                                                         *                                           // 13\n *  Does the change somehow allow for arbitrary javascript to be executed? *                                           // 14\n *    Or allows for someone to change the prototype of built-in objects?   *                                           // 15\n *     Or gives undesired access to variables likes document or window?    *                                           // 16\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */                                          // 17\n                                                                                                                       // 18\nvar $sanitizeMinErr = angular.$$minErr('$sanitize');                                                                   // 19\n                                                                                                                       // 20\n/**                                                                                                                    // 21\n * @ngdoc module                                                                                                       // 22\n * @name ngSanitize                                                                                                    // 23\n * @description                                                                                                        // 24\n *                                                                                                                     // 25\n * # ngSanitize                                                                                                        // 26\n *                                                                                                                     // 27\n * The `ngSanitize` module provides functionality to sanitize HTML.                                                    // 28\n *                                                                                                                     // 29\n *                                                                                                                     // 30\n * <div doc-module-components=\"ngSanitize\"></div>                                                                      // 31\n *                                                                                                                     // 32\n * See {@link ngSanitize.$sanitize `$sanitize`} for usage.                                                             // 33\n */                                                                                                                    // 34\n                                                                                                                       // 35\n/**                                                                                                                    // 36\n * @ngdoc service                                                                                                      // 37\n * @name $sanitize                                                                                                     // 38\n * @kind function                                                                                                      // 39\n *                                                                                                                     // 40\n * @description                                                                                                        // 41\n *   Sanitizes an html string by stripping all potentially dangerous tokens.                                           // 42\n *                                                                                                                     // 43\n *   The input is sanitized by parsing the HTML into tokens. All safe tokens (from a whitelist) are                    // 44\n *   then serialized back to properly escaped html string. This means that no unsafe input can make                    // 45\n *   it into the returned string.                                                                                      // 46\n *                                                                                                                     // 47\n *   The whitelist for URL sanitization of attribute values is configured using the functions                          // 48\n *   `aHrefSanitizationWhitelist` and `imgSrcSanitizationWhitelist` of {@link ng.$compileProvider                      // 49\n *   `$compileProvider`}.                                                                                              // 50\n *                                                                                                                     // 51\n *   The input may also contain SVG markup if this is enabled via {@link $sanitizeProvider}.                           // 52\n *                                                                                                                     // 53\n * @param {string} html HTML input.                                                                                    // 54\n * @returns {string} Sanitized HTML.                                                                                   // 55\n *                                                                                                                     // 56\n * @example                                                                                                            // 57\n   <example module=\"sanitizeExample\" deps=\"angular-sanitize.js\">                                                       // 58\n   <file name=\"index.html\">                                                                                            // 59\n     <script>                                                                                                          // 60\n         angular.module('sanitizeExample', ['ngSanitize'])                                                             // 61\n           .controller('ExampleController', ['$scope', '$sce', function($scope, $sce) {                                // 62\n             $scope.snippet =                                                                                          // 63\n               '<p style=\"color:blue\">an html\\n' +                                                                     // 64\n               '<em onmouseover=\"this.textContent=\\'PWN3D!\\'\">click here</em>\\n' +                                     // 65\n               'snippet</p>';                                                                                          // 66\n             $scope.deliberatelyTrustDangerousSnippet = function() {                                                   // 67\n               return $sce.trustAsHtml($scope.snippet);                                                                // 68\n             };                                                                                                        // 69\n           }]);                                                                                                        // 70\n     </script>                                                                                                         // 71\n     <div ng-controller=\"ExampleController\">                                                                           // 72\n        Snippet: <textarea ng-model=\"snippet\" cols=\"60\" rows=\"3\"></textarea>                                           // 73\n       <table>                                                                                                         // 74\n         <tr>                                                                                                          // 75\n           <td>Directive</td>                                                                                          // 76\n           <td>How</td>                                                                                                // 77\n           <td>Source</td>                                                                                             // 78\n           <td>Rendered</td>                                                                                           // 79\n         </tr>                                                                                                         // 80\n         <tr id=\"bind-html-with-sanitize\">                                                                             // 81\n           <td>ng-bind-html</td>                                                                                       // 82\n           <td>Automatically uses $sanitize</td>                                                                       // 83\n           <td><pre>&lt;div ng-bind-html=\"snippet\"&gt;<br/>&lt;/div&gt;</pre></td>                                     // 84\n           <td><div ng-bind-html=\"snippet\"></div></td>                                                                 // 85\n         </tr>                                                                                                         // 86\n         <tr id=\"bind-html-with-trust\">                                                                                // 87\n           <td>ng-bind-html</td>                                                                                       // 88\n           <td>Bypass $sanitize by explicitly trusting the dangerous value</td>                                        // 89\n           <td>                                                                                                        // 90\n           <pre>&lt;div ng-bind-html=\"deliberatelyTrustDangerousSnippet()\"&gt;                                         // 91\n&lt;/div&gt;</pre>                                                                                                     // 92\n           </td>                                                                                                       // 93\n           <td><div ng-bind-html=\"deliberatelyTrustDangerousSnippet()\"></div></td>                                     // 94\n         </tr>                                                                                                         // 95\n         <tr id=\"bind-default\">                                                                                        // 96\n           <td>ng-bind</td>                                                                                            // 97\n           <td>Automatically escapes</td>                                                                              // 98\n           <td><pre>&lt;div ng-bind=\"snippet\"&gt;<br/>&lt;/div&gt;</pre></td>                                          // 99\n           <td><div ng-bind=\"snippet\"></div></td>                                                                      // 100\n         </tr>                                                                                                         // 101\n       </table>                                                                                                        // 102\n       </div>                                                                                                          // 103\n   </file>                                                                                                             // 104\n   <file name=\"protractor.js\" type=\"protractor\">                                                                       // 105\n     it('should sanitize the html snippet by default', function() {                                                    // 106\n       expect(element(by.css('#bind-html-with-sanitize div')).getInnerHtml()).                                         // 107\n         toBe('<p>an html\\n<em>click here</em>\\nsnippet</p>');                                                         // 108\n     });                                                                                                               // 109\n                                                                                                                       // 110\n     it('should inline raw snippet if bound to a trusted value', function() {                                          // 111\n       expect(element(by.css('#bind-html-with-trust div')).getInnerHtml()).                                            // 112\n         toBe(\"<p style=\\\"color:blue\\\">an html\\n\" +                                                                    // 113\n              \"<em onmouseover=\\\"this.textContent='PWN3D!'\\\">click here</em>\\n\" +                                      // 114\n              \"snippet</p>\");                                                                                          // 115\n     });                                                                                                               // 116\n                                                                                                                       // 117\n     it('should escape snippet without any filter', function() {                                                       // 118\n       expect(element(by.css('#bind-default div')).getInnerHtml()).                                                    // 119\n         toBe(\"&lt;p style=\\\"color:blue\\\"&gt;an html\\n\" +                                                              // 120\n              \"&lt;em onmouseover=\\\"this.textContent='PWN3D!'\\\"&gt;click here&lt;/em&gt;\\n\" +                          // 121\n              \"snippet&lt;/p&gt;\");                                                                                    // 122\n     });                                                                                                               // 123\n                                                                                                                       // 124\n     it('should update', function() {                                                                                  // 125\n       element(by.model('snippet')).clear();                                                                           // 126\n       element(by.model('snippet')).sendKeys('new <b onclick=\"alert(1)\">text</b>');                                    // 127\n       expect(element(by.css('#bind-html-with-sanitize div')).getInnerHtml()).                                         // 128\n         toBe('new <b>text</b>');                                                                                      // 129\n       expect(element(by.css('#bind-html-with-trust div')).getInnerHtml()).toBe(                                       // 130\n         'new <b onclick=\"alert(1)\">text</b>');                                                                        // 131\n       expect(element(by.css('#bind-default div')).getInnerHtml()).toBe(                                               // 132\n         \"new &lt;b onclick=\\\"alert(1)\\\"&gt;text&lt;/b&gt;\");                                                          // 133\n     });                                                                                                               // 134\n   </file>                                                                                                             // 135\n   </example>                                                                                                          // 136\n */                                                                                                                    // 137\n                                                                                                                       // 138\n                                                                                                                       // 139\n/**                                                                                                                    // 140\n * @ngdoc provider                                                                                                     // 141\n * @name $sanitizeProvider                                                                                             // 142\n *                                                                                                                     // 143\n * @description                                                                                                        // 144\n * Creates and configures {@link $sanitize} instance.                                                                  // 145\n */                                                                                                                    // 146\nfunction $SanitizeProvider() {                                                                                         // 147\n  var svgEnabled = false;                                                                                              // 148\n                                                                                                                       // 149\n  this.$get = ['$$sanitizeUri', function($$sanitizeUri) {                                                              // 150\n    if (svgEnabled) {                                                                                                  // 151\n      angular.extend(validElements, svgElements);                                                                      // 152\n    }                                                                                                                  // 153\n    return function(html) {                                                                                            // 154\n      var buf = [];                                                                                                    // 155\n      htmlParser(html, htmlSanitizeWriter(buf, function(uri, isImage) {                                                // 156\n        return !/^unsafe:/.test($$sanitizeUri(uri, isImage));                                                          // 157\n      }));                                                                                                             // 158\n      return buf.join('');                                                                                             // 159\n    };                                                                                                                 // 160\n  }];                                                                                                                  // 161\n                                                                                                                       // 162\n                                                                                                                       // 163\n  /**                                                                                                                  // 164\n   * @ngdoc method                                                                                                     // 165\n   * @name $sanitizeProvider#enableSvg                                                                                 // 166\n   * @kind function                                                                                                    // 167\n   *                                                                                                                   // 168\n   * @description                                                                                                      // 169\n   * Enables a subset of svg to be supported by the sanitizer.                                                         // 170\n   *                                                                                                                   // 171\n   * <div class=\"alert alert-warning\">                                                                                 // 172\n   *   <p>By enabling this setting without taking other precautions, you might expose your                             // 173\n   *   application to click-hijacking attacks. In these attacks, sanitized svg elements could be positioned            // 174\n   *   outside of the containing element and be rendered over other elements on the page (e.g. a login                 // 175\n   *   link). Such behavior can then result in phishing incidents.</p>                                                 // 176\n   *                                                                                                                   // 177\n   *   <p>To protect against these, explicitly setup `overflow: hidden` css rule for all potential svg                 // 178\n   *   tags within the sanitized content:</p>                                                                          // 179\n   *                                                                                                                   // 180\n   *   <br>                                                                                                            // 181\n   *                                                                                                                   // 182\n   *   <pre><code>                                                                                                     // 183\n   *   .rootOfTheIncludedContent svg {                                                                                 // 184\n   *     overflow: hidden !important;                                                                                  // 185\n   *   }                                                                                                               // 186\n   *   </code></pre>                                                                                                   // 187\n   * </div>                                                                                                            // 188\n   *                                                                                                                   // 189\n   * @param {boolean=} regexp New regexp to whitelist urls with.                                                       // 190\n   * @returns {boolean|ng.$sanitizeProvider} Returns the currently configured value if called                          // 191\n   *    without an argument or self for chaining otherwise.                                                            // 192\n   */                                                                                                                  // 193\n  this.enableSvg = function(enableSvg) {                                                                               // 194\n    if (angular.isDefined(enableSvg)) {                                                                                // 195\n      svgEnabled = enableSvg;                                                                                          // 196\n      return this;                                                                                                     // 197\n    } else {                                                                                                           // 198\n      return svgEnabled;                                                                                               // 199\n    }                                                                                                                  // 200\n  };                                                                                                                   // 201\n}                                                                                                                      // 202\n                                                                                                                       // 203\nfunction sanitizeText(chars) {                                                                                         // 204\n  var buf = [];                                                                                                        // 205\n  var writer = htmlSanitizeWriter(buf, angular.noop);                                                                  // 206\n  writer.chars(chars);                                                                                                 // 207\n  return buf.join('');                                                                                                 // 208\n}                                                                                                                      // 209\n                                                                                                                       // 210\n                                                                                                                       // 211\n// Regular Expressions for parsing tags and attributes                                                                 // 212\nvar SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g,                                                         // 213\n  // Match everything outside of normal chars and \" (quote character)                                                  // 214\n  NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;                                                                           // 215\n                                                                                                                       // 216\n                                                                                                                       // 217\n// Good source of info about elements and attributes                                                                   // 218\n// http://dev.w3.org/html5/spec/Overview.html#semantics                                                                // 219\n// http://simon.html5.org/html-elements                                                                                // 220\n                                                                                                                       // 221\n// Safe Void Elements - HTML5                                                                                          // 222\n// http://dev.w3.org/html5/spec/Overview.html#void-elements                                                            // 223\nvar voidElements = toMap(\"area,br,col,hr,img,wbr\");                                                                    // 224\n                                                                                                                       // 225\n// Elements that you can, intentionally, leave open (and which close themselves)                                       // 226\n// http://dev.w3.org/html5/spec/Overview.html#optional-tags                                                            // 227\nvar optionalEndTagBlockElements = toMap(\"colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr\"),                             // 228\n    optionalEndTagInlineElements = toMap(\"rp,rt\"),                                                                     // 229\n    optionalEndTagElements = angular.extend({},                                                                        // 230\n                                            optionalEndTagInlineElements,                                              // 231\n                                            optionalEndTagBlockElements);                                              // 232\n                                                                                                                       // 233\n// Safe Block Elements - HTML5                                                                                         // 234\nvar blockElements = angular.extend({}, optionalEndTagBlockElements, toMap(\"address,article,\" +                         // 235\n        \"aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,\" +                    // 236\n        \"h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,section,table,ul\"));                                              // 237\n                                                                                                                       // 238\n// Inline Elements - HTML5                                                                                             // 239\nvar inlineElements = angular.extend({}, optionalEndTagInlineElements, toMap(\"a,abbr,acronym,b,\" +                      // 240\n        \"bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,\" +                      // 241\n        \"samp,small,span,strike,strong,sub,sup,time,tt,u,var\"));                                                       // 242\n                                                                                                                       // 243\n// SVG Elements                                                                                                        // 244\n// https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Elements                                                        // 245\n// Note: the elements animate,animateColor,animateMotion,animateTransform,set are intentionally omitted.               // 246\n// They can potentially allow for arbitrary javascript to be executed. See #11290                                      // 247\nvar svgElements = toMap(\"circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,\" +                   // 248\n        \"hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,\" +                 // 249\n        \"radialGradient,rect,stop,svg,switch,text,title,tspan\");                                                       // 250\n                                                                                                                       // 251\n// Blocked Elements (will be stripped)                                                                                 // 252\nvar blockedElements = toMap(\"script,style\");                                                                           // 253\n                                                                                                                       // 254\nvar validElements = angular.extend({},                                                                                 // 255\n                                   voidElements,                                                                       // 256\n                                   blockElements,                                                                      // 257\n                                   inlineElements,                                                                     // 258\n                                   optionalEndTagElements);                                                            // 259\n                                                                                                                       // 260\n//Attributes that have href and hence need to be sanitized                                                             // 261\nvar uriAttrs = toMap(\"background,cite,href,longdesc,src,xlink:href\");                                                  // 262\n                                                                                                                       // 263\nvar htmlAttrs = toMap('abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,' +                      // 264\n    'color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,' +                                     // 265\n    'ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,' +                                                  // 266\n    'scope,scrolling,shape,size,span,start,summary,tabindex,target,title,type,' +                                      // 267\n    'valign,value,vspace,width');                                                                                      // 268\n                                                                                                                       // 269\n// SVG attributes (without \"id\" and \"name\" attributes)                                                                 // 270\n// https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Attributes                                                      // 271\nvar svgAttrs = toMap('accent-height,accumulate,additive,alphabetic,arabic-form,ascent,' +                              // 272\n    'baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,' +                             // 273\n    'cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,' +                       // 274\n    'font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,' +                         // 275\n    'height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,' +                            // 276\n    'marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,' +                          // 277\n    'max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,' +                            // 278\n    'path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,' +                                  // 279\n    'requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,' +                         // 280\n    'stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,' +                           // 281\n    'stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,' +                             // 282\n    'stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,' +                     // 283\n    'underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,' +                      // 284\n    'width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,' +                   // 285\n    'xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan', true);                              // 286\n                                                                                                                       // 287\nvar validAttrs = angular.extend({},                                                                                    // 288\n                                uriAttrs,                                                                              // 289\n                                svgAttrs,                                                                              // 290\n                                htmlAttrs);                                                                            // 291\n                                                                                                                       // 292\nfunction toMap(str, lowercaseKeys) {                                                                                   // 293\n  var obj = {}, items = str.split(','), i;                                                                             // 294\n  for (i = 0; i < items.length; i++) {                                                                                 // 295\n    obj[lowercaseKeys ? angular.lowercase(items[i]) : items[i]] = true;                                                // 296\n  }                                                                                                                    // 297\n  return obj;                                                                                                          // 298\n}                                                                                                                      // 299\n                                                                                                                       // 300\nvar inertBodyElement;                                                                                                  // 301\n(function(window) {                                                                                                    // 302\n  var doc;                                                                                                             // 303\n  if (window.document && window.document.implementation) {                                                             // 304\n    doc = window.document.implementation.createHTMLDocument(\"inert\");                                                  // 305\n  } else {                                                                                                             // 306\n    throw $sanitizeMinErr('noinert', \"Can't create an inert html document\");                                           // 307\n  }                                                                                                                    // 308\n  var docElement = doc.documentElement || doc.getDocumentElement();                                                    // 309\n  var bodyElements = docElement.getElementsByTagName('body');                                                          // 310\n                                                                                                                       // 311\n  // usually there should be only one body element in the document, but IE doesn't have any, so we need to create one  // 312\n  if (bodyElements.length === 1) {                                                                                     // 313\n    inertBodyElement = bodyElements[0];                                                                                // 314\n  } else {                                                                                                             // 315\n    var html = doc.createElement('html');                                                                              // 316\n    inertBodyElement = doc.createElement('body');                                                                      // 317\n    html.appendChild(inertBodyElement);                                                                                // 318\n    doc.appendChild(html);                                                                                             // 319\n  }                                                                                                                    // 320\n})(window);                                                                                                            // 321\n                                                                                                                       // 322\n/**                                                                                                                    // 323\n * @example                                                                                                            // 324\n * htmlParser(htmlString, {                                                                                            // 325\n *     start: function(tag, attrs) {},                                                                                 // 326\n *     end: function(tag) {},                                                                                          // 327\n *     chars: function(text) {},                                                                                       // 328\n *     comment: function(text) {}                                                                                      // 329\n * });                                                                                                                 // 330\n *                                                                                                                     // 331\n * @param {string} html string                                                                                         // 332\n * @param {object} handler                                                                                             // 333\n */                                                                                                                    // 334\nfunction htmlParser(html, handler) {                                                                                   // 335\n  if (html === null || html === undefined) {                                                                           // 336\n    html = '';                                                                                                         // 337\n  } else if (typeof html !== 'string') {                                                                               // 338\n    html = '' + html;                                                                                                  // 339\n  }                                                                                                                    // 340\n  inertBodyElement.innerHTML = html;                                                                                   // 341\n                                                                                                                       // 342\n  //mXSS protection                                                                                                    // 343\n  var mXSSAttempts = 5;                                                                                                // 344\n  do {                                                                                                                 // 345\n    if (mXSSAttempts === 0) {                                                                                          // 346\n      throw $sanitizeMinErr('uinput', \"Failed to sanitize html because the input is unstable\");                        // 347\n    }                                                                                                                  // 348\n    mXSSAttempts--;                                                                                                    // 349\n                                                                                                                       // 350\n    // strip custom-namespaced attributes on IE<=11                                                                    // 351\n    if (document.documentMode <= 11) {                                                                                 // 352\n      stripCustomNsAttrs(inertBodyElement);                                                                            // 353\n    }                                                                                                                  // 354\n    html = inertBodyElement.innerHTML; //trigger mXSS                                                                  // 355\n    inertBodyElement.innerHTML = html;                                                                                 // 356\n  } while (html !== inertBodyElement.innerHTML);                                                                       // 357\n                                                                                                                       // 358\n  var node = inertBodyElement.firstChild;                                                                              // 359\n  while (node) {                                                                                                       // 360\n    switch (node.nodeType) {                                                                                           // 361\n      case 1: // ELEMENT_NODE                                                                                          // 362\n        handler.start(node.nodeName.toLowerCase(), attrToMap(node.attributes));                                        // 363\n        break;                                                                                                         // 364\n      case 3: // TEXT NODE                                                                                             // 365\n        handler.chars(node.textContent);                                                                               // 366\n        break;                                                                                                         // 367\n    }                                                                                                                  // 368\n                                                                                                                       // 369\n    var nextNode;                                                                                                      // 370\n    if (!(nextNode = node.firstChild)) {                                                                               // 371\n      if (node.nodeType == 1) {                                                                                        // 372\n        handler.end(node.nodeName.toLowerCase());                                                                      // 373\n      }                                                                                                                // 374\n      nextNode = node.nextSibling;                                                                                     // 375\n      if (!nextNode) {                                                                                                 // 376\n        while (nextNode == null) {                                                                                     // 377\n          node = node.parentNode;                                                                                      // 378\n          if (node === inertBodyElement) break;                                                                        // 379\n          nextNode = node.nextSibling;                                                                                 // 380\n          if (node.nodeType == 1) {                                                                                    // 381\n            handler.end(node.nodeName.toLowerCase());                                                                  // 382\n          }                                                                                                            // 383\n        }                                                                                                              // 384\n      }                                                                                                                // 385\n    }                                                                                                                  // 386\n    node = nextNode;                                                                                                   // 387\n  }                                                                                                                    // 388\n                                                                                                                       // 389\n  while (node = inertBodyElement.firstChild) {                                                                         // 390\n    inertBodyElement.removeChild(node);                                                                                // 391\n  }                                                                                                                    // 392\n}                                                                                                                      // 393\n                                                                                                                       // 394\nfunction attrToMap(attrs) {                                                                                            // 395\n  var map = {};                                                                                                        // 396\n  for (var i = 0, ii = attrs.length; i < ii; i++) {                                                                    // 397\n    var attr = attrs[i];                                                                                               // 398\n    map[attr.name] = attr.value;                                                                                       // 399\n  }                                                                                                                    // 400\n  return map;                                                                                                          // 401\n}                                                                                                                      // 402\n                                                                                                                       // 403\n                                                                                                                       // 404\n/**                                                                                                                    // 405\n * Escapes all potentially dangerous characters, so that the                                                           // 406\n * resulting string can be safely inserted into attribute or                                                           // 407\n * element text.                                                                                                       // 408\n * @param value                                                                                                        // 409\n * @returns {string} escaped text                                                                                      // 410\n */                                                                                                                    // 411\nfunction encodeEntities(value) {                                                                                       // 412\n  return value.                                                                                                        // 413\n    replace(/&/g, '&amp;').                                                                                            // 414\n    replace(SURROGATE_PAIR_REGEXP, function(value) {                                                                   // 415\n      var hi = value.charCodeAt(0);                                                                                    // 416\n      var low = value.charCodeAt(1);                                                                                   // 417\n      return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';                                        // 418\n    }).                                                                                                                // 419\n    replace(NON_ALPHANUMERIC_REGEXP, function(value) {                                                                 // 420\n      return '&#' + value.charCodeAt(0) + ';';                                                                         // 421\n    }).                                                                                                                // 422\n    replace(/</g, '&lt;').                                                                                             // 423\n    replace(/>/g, '&gt;');                                                                                             // 424\n}                                                                                                                      // 425\n                                                                                                                       // 426\n/**                                                                                                                    // 427\n * create an HTML/XML writer which writes to buffer                                                                    // 428\n * @param {Array} buf use buf.join('') to get out sanitized html string                                                // 429\n * @returns {object} in the form of {                                                                                  // 430\n *     start: function(tag, attrs) {},                                                                                 // 431\n *     end: function(tag) {},                                                                                          // 432\n *     chars: function(text) {},                                                                                       // 433\n *     comment: function(text) {}                                                                                      // 434\n * }                                                                                                                   // 435\n */                                                                                                                    // 436\nfunction htmlSanitizeWriter(buf, uriValidator) {                                                                       // 437\n  var ignoreCurrentElement = false;                                                                                    // 438\n  var out = angular.bind(buf, buf.push);                                                                               // 439\n  return {                                                                                                             // 440\n    start: function(tag, attrs) {                                                                                      // 441\n      tag = angular.lowercase(tag);                                                                                    // 442\n      if (!ignoreCurrentElement && blockedElements[tag]) {                                                             // 443\n        ignoreCurrentElement = tag;                                                                                    // 444\n      }                                                                                                                // 445\n      if (!ignoreCurrentElement && validElements[tag] === true) {                                                      // 446\n        out('<');                                                                                                      // 447\n        out(tag);                                                                                                      // 448\n        angular.forEach(attrs, function(value, key) {                                                                  // 449\n          var lkey=angular.lowercase(key);                                                                             // 450\n          var isImage = (tag === 'img' && lkey === 'src') || (lkey === 'background');                                  // 451\n          if (validAttrs[lkey] === true &&                                                                             // 452\n            (uriAttrs[lkey] !== true || uriValidator(value, isImage))) {                                               // 453\n            out(' ');                                                                                                  // 454\n            out(key);                                                                                                  // 455\n            out('=\"');                                                                                                 // 456\n            out(encodeEntities(value));                                                                                // 457\n            out('\"');                                                                                                  // 458\n          }                                                                                                            // 459\n        });                                                                                                            // 460\n        out('>');                                                                                                      // 461\n      }                                                                                                                // 462\n    },                                                                                                                 // 463\n    end: function(tag) {                                                                                               // 464\n      tag = angular.lowercase(tag);                                                                                    // 465\n      if (!ignoreCurrentElement && validElements[tag] === true && voidElements[tag] !== true) {                        // 466\n        out('</');                                                                                                     // 467\n        out(tag);                                                                                                      // 468\n        out('>');                                                                                                      // 469\n      }                                                                                                                // 470\n      if (tag == ignoreCurrentElement) {                                                                               // 471\n        ignoreCurrentElement = false;                                                                                  // 472\n      }                                                                                                                // 473\n    },                                                                                                                 // 474\n    chars: function(chars) {                                                                                           // 475\n      if (!ignoreCurrentElement) {                                                                                     // 476\n        out(encodeEntities(chars));                                                                                    // 477\n      }                                                                                                                // 478\n    }                                                                                                                  // 479\n  };                                                                                                                   // 480\n}                                                                                                                      // 481\n                                                                                                                       // 482\n                                                                                                                       // 483\n/**                                                                                                                    // 484\n * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1' attribute to declare  // 485\n * ns1 namespace and prefixes the attribute with 'ns1' (e.g. 'ns1:xlink:foo'). This is undesirable since we don't want\n * to allow any of these custom attributes. This method strips them all.                                               // 487\n *                                                                                                                     // 488\n * @param node Root element to process                                                                                 // 489\n */                                                                                                                    // 490\nfunction stripCustomNsAttrs(node) {                                                                                    // 491\n  if (node.nodeType === Node.ELEMENT_NODE) {                                                                           // 492\n    var attrs = node.attributes;                                                                                       // 493\n    for (var i = 0, l = attrs.length; i < l; i++) {                                                                    // 494\n      var attrNode = attrs[i];                                                                                         // 495\n      var attrName = attrNode.name.toLowerCase();                                                                      // 496\n      if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {                                                // 497\n        node.removeAttributeNode(attrNode);                                                                            // 498\n        i--;                                                                                                           // 499\n        l--;                                                                                                           // 500\n      }                                                                                                                // 501\n    }                                                                                                                  // 502\n  }                                                                                                                    // 503\n                                                                                                                       // 504\n  var nextNode = node.firstChild;                                                                                      // 505\n  if (nextNode) {                                                                                                      // 506\n    stripCustomNsAttrs(nextNode);                                                                                      // 507\n  }                                                                                                                    // 508\n                                                                                                                       // 509\n  nextNode = node.nextSibling;                                                                                         // 510\n  if (nextNode) {                                                                                                      // 511\n    stripCustomNsAttrs(nextNode);                                                                                      // 512\n  }                                                                                                                    // 513\n}                                                                                                                      // 514\n                                                                                                                       // 515\n                                                                                                                       // 516\n                                                                                                                       // 517\n// define ngSanitize module and register $sanitize service                                                             // 518\nangular.module('ngSanitize', []).provider('$sanitize', $SanitizeProvider);                                             // 519\n                                                                                                                       // 520\n/* global sanitizeText: false */                                                                                       // 521\n                                                                                                                       // 522\n/**                                                                                                                    // 523\n * @ngdoc filter                                                                                                       // 524\n * @name linky                                                                                                         // 525\n * @kind function                                                                                                      // 526\n *                                                                                                                     // 527\n * @description                                                                                                        // 528\n * Finds links in text input and turns them into html links. Supports `http/https/ftp/mailto` and                      // 529\n * plain email address links.                                                                                          // 530\n *                                                                                                                     // 531\n * Requires the {@link ngSanitize `ngSanitize`} module to be installed.                                                // 532\n *                                                                                                                     // 533\n * @param {string} text Input text.                                                                                    // 534\n * @param {string} target Window (`_blank|_self|_parent|_top`) or named frame to open links in.                        // 535\n * @param {object|function(url)} [attributes] Add custom attributes to the link element.                               // 536\n *                                                                                                                     // 537\n *    Can be one of:                                                                                                   // 538\n *                                                                                                                     // 539\n *    - `object`: A map of attributes                                                                                  // 540\n *    - `function`: Takes the url as a parameter and returns a map of attributes                                       // 541\n *                                                                                                                     // 542\n *    If the map of attributes contains a value for `target`, it overrides the value of                                // 543\n *    the target parameter.                                                                                            // 544\n *                                                                                                                     // 545\n *                                                                                                                     // 546\n * @returns {string} Html-linkified and {@link $sanitize sanitized} text.                                              // 547\n *                                                                                                                     // 548\n * @usage                                                                                                              // 549\n   <span ng-bind-html=\"linky_expression | linky\"></span>                                                               // 550\n *                                                                                                                     // 551\n * @example                                                                                                            // 552\n   <example module=\"linkyExample\" deps=\"angular-sanitize.js\">                                                          // 553\n     <file name=\"index.html\">                                                                                          // 554\n       <div ng-controller=\"ExampleController\">                                                                         // 555\n       Snippet: <textarea ng-model=\"snippet\" cols=\"60\" rows=\"3\"></textarea>                                            // 556\n       <table>                                                                                                         // 557\n         <tr>                                                                                                          // 558\n           <th>Filter</th>                                                                                             // 559\n           <th>Source</th>                                                                                             // 560\n           <th>Rendered</th>                                                                                           // 561\n         </tr>                                                                                                         // 562\n         <tr id=\"linky-filter\">                                                                                        // 563\n           <td>linky filter</td>                                                                                       // 564\n           <td>                                                                                                        // 565\n             <pre>&lt;div ng-bind-html=\"snippet | linky\"&gt;<br>&lt;/div&gt;</pre>                                     // 566\n           </td>                                                                                                       // 567\n           <td>                                                                                                        // 568\n             <div ng-bind-html=\"snippet | linky\"></div>                                                                // 569\n           </td>                                                                                                       // 570\n         </tr>                                                                                                         // 571\n         <tr id=\"linky-target\">                                                                                        // 572\n          <td>linky target</td>                                                                                        // 573\n          <td>                                                                                                         // 574\n            <pre>&lt;div ng-bind-html=\"snippetWithSingleURL | linky:'_blank'\"&gt;<br>&lt;/div&gt;</pre>                // 575\n          </td>                                                                                                        // 576\n          <td>                                                                                                         // 577\n            <div ng-bind-html=\"snippetWithSingleURL | linky:'_blank'\"></div>                                           // 578\n          </td>                                                                                                        // 579\n         </tr>                                                                                                         // 580\n         <tr id=\"linky-custom-attributes\">                                                                             // 581\n          <td>linky custom attributes</td>                                                                             // 582\n          <td>                                                                                                         // 583\n            <pre>&lt;div ng-bind-html=\"snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}\"&gt;<br>&lt;/div&gt;</pre>\n          </td>                                                                                                        // 585\n          <td>                                                                                                         // 586\n            <div ng-bind-html=\"snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}\"></div>                          // 587\n          </td>                                                                                                        // 588\n         </tr>                                                                                                         // 589\n         <tr id=\"escaped-html\">                                                                                        // 590\n           <td>no filter</td>                                                                                          // 591\n           <td><pre>&lt;div ng-bind=\"snippet\"&gt;<br>&lt;/div&gt;</pre></td>                                           // 592\n           <td><div ng-bind=\"snippet\"></div></td>                                                                      // 593\n         </tr>                                                                                                         // 594\n       </table>                                                                                                        // 595\n     </file>                                                                                                           // 596\n     <file name=\"script.js\">                                                                                           // 597\n       angular.module('linkyExample', ['ngSanitize'])                                                                  // 598\n         .controller('ExampleController', ['$scope', function($scope) {                                                // 599\n           $scope.snippet =                                                                                            // 600\n             'Pretty text with some links:\\n'+                                                                         // 601\n             'http://angularjs.org/,\\n'+                                                                               // 602\n             'mailto:us@somewhere.org,\\n'+                                                                             // 603\n             'another@somewhere.org,\\n'+                                                                               // 604\n             'and one more: ftp://127.0.0.1/.';                                                                        // 605\n           $scope.snippetWithSingleURL = 'http://angularjs.org/';                                                      // 606\n         }]);                                                                                                          // 607\n     </file>                                                                                                           // 608\n     <file name=\"protractor.js\" type=\"protractor\">                                                                     // 609\n       it('should linkify the snippet with urls', function() {                                                         // 610\n         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).                      // 611\n             toBe('Pretty text with some links: http://angularjs.org/, us@somewhere.org, ' +                           // 612\n                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');                                           // 613\n         expect(element.all(by.css('#linky-filter a')).count()).toEqual(4);                                            // 614\n       });                                                                                                             // 615\n                                                                                                                       // 616\n       it('should not linkify snippet without the linky filter', function() {                                          // 617\n         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText()).                              // 618\n             toBe('Pretty text with some links: http://angularjs.org/, mailto:us@somewhere.org, ' +                    // 619\n                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');                                           // 620\n         expect(element.all(by.css('#escaped-html a')).count()).toEqual(0);                                            // 621\n       });                                                                                                             // 622\n                                                                                                                       // 623\n       it('should update', function() {                                                                                // 624\n         element(by.model('snippet')).clear();                                                                         // 625\n         element(by.model('snippet')).sendKeys('new http://link.');                                                    // 626\n         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).                      // 627\n             toBe('new http://link.');                                                                                 // 628\n         expect(element.all(by.css('#linky-filter a')).count()).toEqual(1);                                            // 629\n         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText())                               // 630\n             .toBe('new http://link.');                                                                                // 631\n       });                                                                                                             // 632\n                                                                                                                       // 633\n       it('should work with the target property', function() {                                                         // 634\n        expect(element(by.id('linky-target')).                                                                         // 635\n            element(by.binding(\"snippetWithSingleURL | linky:'_blank'\")).getText()).                                   // 636\n            toBe('http://angularjs.org/');                                                                             // 637\n        expect(element(by.css('#linky-target a')).getAttribute('target')).toEqual('_blank');                           // 638\n       });                                                                                                             // 639\n                                                                                                                       // 640\n       it('should optionally add custom attributes', function() {                                                      // 641\n        expect(element(by.id('linky-custom-attributes')).                                                              // 642\n            element(by.binding(\"snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}\")).getText()).                  // 643\n            toBe('http://angularjs.org/');                                                                             // 644\n        expect(element(by.css('#linky-custom-attributes a')).getAttribute('rel')).toEqual('nofollow');                 // 645\n       });                                                                                                             // 646\n     </file>                                                                                                           // 647\n   </example>                                                                                                          // 648\n */                                                                                                                    // 649\nangular.module('ngSanitize').filter('linky', ['$sanitize', function($sanitize) {                                       // 650\n  var LINKY_URL_REGEXP =                                                                                               // 651\n        /((ftp|https?):\\/\\/|(www\\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\\S*[^\\s.;,(){}<>\"\\u201d\\u2019]/i,                     // 652\n      MAILTO_REGEXP = /^mailto:/i;                                                                                     // 653\n                                                                                                                       // 654\n  var linkyMinErr = angular.$$minErr('linky');                                                                         // 655\n  var isString = angular.isString;                                                                                     // 656\n                                                                                                                       // 657\n  return function(text, target, attributes) {                                                                          // 658\n    if (text == null || text === '') return text;                                                                      // 659\n    if (!isString(text)) throw linkyMinErr('notstring', 'Expected string but received: {0}', text);                    // 660\n                                                                                                                       // 661\n    var match;                                                                                                         // 662\n    var raw = text;                                                                                                    // 663\n    var html = [];                                                                                                     // 664\n    var url;                                                                                                           // 665\n    var i;                                                                                                             // 666\n    while ((match = raw.match(LINKY_URL_REGEXP))) {                                                                    // 667\n      // We can not end in these as they are sometimes found at the end of the sentence                                // 668\n      url = match[0];                                                                                                  // 669\n      // if we did not match ftp/http/www/mailto then assume mailto                                                    // 670\n      if (!match[2] && !match[4]) {                                                                                    // 671\n        url = (match[3] ? 'http://' : 'mailto:') + url;                                                                // 672\n      }                                                                                                                // 673\n      i = match.index;                                                                                                 // 674\n      addText(raw.substr(0, i));                                                                                       // 675\n      addLink(url, match[0].replace(MAILTO_REGEXP, ''));                                                               // 676\n      raw = raw.substring(i + match[0].length);                                                                        // 677\n    }                                                                                                                  // 678\n    addText(raw);                                                                                                      // 679\n    return $sanitize(html.join(''));                                                                                   // 680\n                                                                                                                       // 681\n    function addText(text) {                                                                                           // 682\n      if (!text) {                                                                                                     // 683\n        return;                                                                                                        // 684\n      }                                                                                                                // 685\n      html.push(sanitizeText(text));                                                                                   // 686\n    }                                                                                                                  // 687\n                                                                                                                       // 688\n    function addLink(url, text) {                                                                                      // 689\n      var key;                                                                                                         // 690\n      html.push('<a ');                                                                                                // 691\n      if (angular.isFunction(attributes)) {                                                                            // 692\n        attributes = attributes(url);                                                                                  // 693\n      }                                                                                                                // 694\n      if (angular.isObject(attributes)) {                                                                              // 695\n        for (key in attributes) {                                                                                      // 696\n          html.push(key + '=\"' + attributes[key] + '\" ');                                                              // 697\n        }                                                                                                              // 698\n      } else {                                                                                                         // 699\n        attributes = {};                                                                                               // 700\n      }                                                                                                                // 701\n      if (angular.isDefined(target) && !('target' in attributes)) {                                                    // 702\n        html.push('target=\"',                                                                                          // 703\n                  target,                                                                                              // 704\n                  '\" ');                                                                                               // 705\n      }                                                                                                                // 706\n      html.push('href=\"',                                                                                              // 707\n                url.replace(/\"/g, '&quot;'),                                                                           // 708\n                '\">');                                                                                                 // 709\n      addText(text);                                                                                                   // 710\n      html.push('</a>');                                                                                               // 711\n    }                                                                                                                  // 712\n  };                                                                                                                   // 713\n}]);                                                                                                                   // 714\n                                                                                                                       // 715\n                                                                                                                       // 716\n})(window, window.angular);                                                                                            // 717\n                                                                                                                       // 718\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['angular:angular-sanitize'] = {};\n\n})();\n","servePath":"/packages/angular_angular-sanitize.js"}]