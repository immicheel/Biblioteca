//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;

/* Package-scope variables */
var lodash, _;

(function(){

///////////////////////////////////////////////////////////////////////
//                                                                   //
// packages/stevezhu_lodash/packages/stevezhu_lodash.js              //
//                                                                   //
///////////////////////////////////////////////////////////////////////
                                                                     //
(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/stevezhu:lodash/lodash.js                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * @license                                                                                                            // 2
 * lodash 3.10.1 (Custom Build) <https://lodash.com/>                                                                  // 3
 * Build: `lodash compat -o ./lodash.js`                                                                               // 4
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>                                                // 5
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>                                                      // 6
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors                            // 7
 * Available under MIT license <https://lodash.com/license>                                                            // 8
 */                                                                                                                    // 9
;(function() {                                                                                                         // 10
                                                                                                                       // 11
  /** Used as a safe reference for `undefined` in pre-ES5 environments. */                                             // 12
  var undefined;                                                                                                       // 13
                                                                                                                       // 14
  /** Used as the semantic version number. */                                                                          // 15
  var VERSION = '3.10.1';                                                                                              // 16
                                                                                                                       // 17
  /** Used to compose bitmasks for wrapper metadata. */                                                                // 18
  var BIND_FLAG = 1,                                                                                                   // 19
      BIND_KEY_FLAG = 2,                                                                                               // 20
      CURRY_BOUND_FLAG = 4,                                                                                            // 21
      CURRY_FLAG = 8,                                                                                                  // 22
      CURRY_RIGHT_FLAG = 16,                                                                                           // 23
      PARTIAL_FLAG = 32,                                                                                               // 24
      PARTIAL_RIGHT_FLAG = 64,                                                                                         // 25
      ARY_FLAG = 128,                                                                                                  // 26
      REARG_FLAG = 256;                                                                                                // 27
                                                                                                                       // 28
  /** Used as default options for `_.trunc`. */                                                                        // 29
  var DEFAULT_TRUNC_LENGTH = 30,                                                                                       // 30
      DEFAULT_TRUNC_OMISSION = '...';                                                                                  // 31
                                                                                                                       // 32
  /** Used to detect when a function becomes hot. */                                                                   // 33
  var HOT_COUNT = 150,                                                                                                 // 34
      HOT_SPAN = 16;                                                                                                   // 35
                                                                                                                       // 36
  /** Used as the size to enable large array optimizations. */                                                         // 37
  var LARGE_ARRAY_SIZE = 200;                                                                                          // 38
                                                                                                                       // 39
  /** Used to indicate the type of lazy iteratees. */                                                                  // 40
  var LAZY_FILTER_FLAG = 1,                                                                                            // 41
      LAZY_MAP_FLAG = 2;                                                                                               // 42
                                                                                                                       // 43
  /** Used as the `TypeError` message for "Functions" methods. */                                                      // 44
  var FUNC_ERROR_TEXT = 'Expected a function';                                                                         // 45
                                                                                                                       // 46
  /** Used as the internal argument placeholder. */                                                                    // 47
  var PLACEHOLDER = '__lodash_placeholder__';                                                                          // 48
                                                                                                                       // 49
  /** `Object#toString` result references. */                                                                          // 50
  var argsTag = '[object Arguments]',                                                                                  // 51
      arrayTag = '[object Array]',                                                                                     // 52
      boolTag = '[object Boolean]',                                                                                    // 53
      dateTag = '[object Date]',                                                                                       // 54
      errorTag = '[object Error]',                                                                                     // 55
      funcTag = '[object Function]',                                                                                   // 56
      mapTag = '[object Map]',                                                                                         // 57
      numberTag = '[object Number]',                                                                                   // 58
      objectTag = '[object Object]',                                                                                   // 59
      regexpTag = '[object RegExp]',                                                                                   // 60
      setTag = '[object Set]',                                                                                         // 61
      stringTag = '[object String]',                                                                                   // 62
      weakMapTag = '[object WeakMap]';                                                                                 // 63
                                                                                                                       // 64
  var arrayBufferTag = '[object ArrayBuffer]',                                                                         // 65
      float32Tag = '[object Float32Array]',                                                                            // 66
      float64Tag = '[object Float64Array]',                                                                            // 67
      int8Tag = '[object Int8Array]',                                                                                  // 68
      int16Tag = '[object Int16Array]',                                                                                // 69
      int32Tag = '[object Int32Array]',                                                                                // 70
      uint8Tag = '[object Uint8Array]',                                                                                // 71
      uint8ClampedTag = '[object Uint8ClampedArray]',                                                                  // 72
      uint16Tag = '[object Uint16Array]',                                                                              // 73
      uint32Tag = '[object Uint32Array]';                                                                              // 74
                                                                                                                       // 75
  /** Used to match empty string literals in compiled template source. */                                              // 76
  var reEmptyStringLeading = /\b__p \+= '';/g,                                                                         // 77
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,                                                                      // 78
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;                                                         // 79
                                                                                                                       // 80
  /** Used to match HTML entities and HTML characters. */                                                              // 81
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,                                                                 // 82
      reUnescapedHtml = /[&<>"'`]/g,                                                                                   // 83
      reHasEscapedHtml = RegExp(reEscapedHtml.source),                                                                 // 84
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);                                                             // 85
                                                                                                                       // 86
  /** Used to match template delimiters. */                                                                            // 87
  var reEscape = /<%-([\s\S]+?)%>/g,                                                                                   // 88
      reEvaluate = /<%([\s\S]+?)%>/g,                                                                                  // 89
      reInterpolate = /<%=([\s\S]+?)%>/g;                                                                              // 90
                                                                                                                       // 91
  /** Used to match property names within property paths. */                                                           // 92
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,                                             // 93
      reIsPlainProp = /^\w*$/,                                                                                         // 94
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;                            // 95
                                                                                                                       // 96
  /**                                                                                                                  // 97
   * Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns)              // 98
   * and those outlined by [`EscapeRegExpPattern`](http://ecma-international.org/ecma-262/6.0/#sec-escaperegexppattern).
   */                                                                                                                  // 100
  var reRegExpChars = /^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g,                        // 101
      reHasRegExpChars = RegExp(reRegExpChars.source);                                                                 // 102
                                                                                                                       // 103
  /** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */       // 104
  var reComboMark = /[\u0300-\u036f\ufe20-\ufe23]/g;                                                                   // 105
                                                                                                                       // 106
  /** Used to match backslashes in property paths. */                                                                  // 107
  var reEscapeChar = /\\(\\)?/g;                                                                                       // 108
                                                                                                                       // 109
  /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;                                                                // 111
                                                                                                                       // 112
  /** Used to match `RegExp` flags from their coerced string values. */                                                // 113
  var reFlags = /\w*$/;                                                                                                // 114
                                                                                                                       // 115
  /** Used to detect hexadecimal string values. */                                                                     // 116
  var reHasHexPrefix = /^0[xX]/;                                                                                       // 117
                                                                                                                       // 118
  /** Used to detect host constructors (Safari > 5). */                                                                // 119
  var reIsHostCtor = /^\[object .+?Constructor\]$/;                                                                    // 120
                                                                                                                       // 121
  /** Used to detect unsigned integer values. */                                                                       // 122
  var reIsUint = /^\d+$/;                                                                                              // 123
                                                                                                                       // 124
  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */                               // 125
  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;                                                            // 126
                                                                                                                       // 127
  /** Used to ensure capturing order of template delimiters. */                                                        // 128
  var reNoMatch = /($^)/;                                                                                              // 129
                                                                                                                       // 130
  /** Used to match unescaped characters in compiled string literals. */                                               // 131
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;                                                                    // 132
                                                                                                                       // 133
  /** Used to match words to create compound words. */                                                                 // 134
  var reWords = (function() {                                                                                          // 135
    var upper = '[A-Z\\xc0-\\xd6\\xd8-\\xde]',                                                                         // 136
        lower = '[a-z\\xdf-\\xf6\\xf8-\\xff]+';                                                                        // 137
                                                                                                                       // 138
    return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');        // 139
  }());                                                                                                                // 140
                                                                                                                       // 141
  /** Used to assign default `context` object properties. */                                                           // 142
  var contextProps = [                                                                                                 // 143
    'Array', 'ArrayBuffer', 'Date', 'Error', 'Float32Array', 'Float64Array',                                           // 144
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Math', 'Number',                                             // 145
    'Object', 'RegExp', 'Set', 'String', '_', 'clearTimeout', 'isFinite',                                              // 146
    'parseFloat', 'parseInt', 'setTimeout', 'TypeError', 'Uint8Array',                                                 // 147
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap'                                                       // 148
  ];                                                                                                                   // 149
                                                                                                                       // 150
  /** Used to fix the JScript `[[DontEnum]]` bug. */                                                                   // 151
  var shadowProps = [                                                                                                  // 152
    'constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable',                                          // 153
    'toLocaleString', 'toString', 'valueOf'                                                                            // 154
  ];                                                                                                                   // 155
                                                                                                                       // 156
  /** Used to make template sourceURLs easier to identify. */                                                          // 157
  var templateCounter = -1;                                                                                            // 158
                                                                                                                       // 159
  /** Used to identify `toStringTag` values of typed arrays. */                                                        // 160
  var typedArrayTags = {};                                                                                             // 161
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =                                                            // 162
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =                                                                 // 163
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =                                                                // 164
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =                                                        // 165
  typedArrayTags[uint32Tag] = true;                                                                                    // 166
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =                                                                 // 167
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =                                                           // 168
  typedArrayTags[dateTag] = typedArrayTags[errorTag] =                                                                 // 169
  typedArrayTags[funcTag] = typedArrayTags[mapTag] =                                                                   // 170
  typedArrayTags[numberTag] = typedArrayTags[objectTag] =                                                              // 171
  typedArrayTags[regexpTag] = typedArrayTags[setTag] =                                                                 // 172
  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;                                                      // 173
                                                                                                                       // 174
  /** Used to identify `toStringTag` values supported by `_.clone`. */                                                 // 175
  var cloneableTags = {};                                                                                              // 176
  cloneableTags[argsTag] = cloneableTags[arrayTag] =                                                                   // 177
  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =                                                             // 178
  cloneableTags[dateTag] = cloneableTags[float32Tag] =                                                                 // 179
  cloneableTags[float64Tag] = cloneableTags[int8Tag] =                                                                 // 180
  cloneableTags[int16Tag] = cloneableTags[int32Tag] =                                                                  // 181
  cloneableTags[numberTag] = cloneableTags[objectTag] =                                                                // 182
  cloneableTags[regexpTag] = cloneableTags[stringTag] =                                                                // 183
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =                                                           // 184
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;                                                          // 185
  cloneableTags[errorTag] = cloneableTags[funcTag] =                                                                   // 186
  cloneableTags[mapTag] = cloneableTags[setTag] =                                                                      // 187
  cloneableTags[weakMapTag] = false;                                                                                   // 188
                                                                                                                       // 189
  /** Used to map latin-1 supplementary letters to basic latin letters. */                                             // 190
  var deburredLetters = {                                                                                              // 191
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',                                     // 192
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',                                     // 193
    '\xc7': 'C',  '\xe7': 'c',                                                                                         // 194
    '\xd0': 'D',  '\xf0': 'd',                                                                                         // 195
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',                                                               // 196
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',                                                               // 197
    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',                                                               // 198
    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',                                                               // 199
    '\xd1': 'N',  '\xf1': 'n',                                                                                         // 200
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',                                     // 201
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',                                     // 202
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',                                                               // 203
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',                                                               // 204
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',                                                                            // 205
    '\xc6': 'Ae', '\xe6': 'ae',                                                                                        // 206
    '\xde': 'Th', '\xfe': 'th',                                                                                        // 207
    '\xdf': 'ss'                                                                                                       // 208
  };                                                                                                                   // 209
                                                                                                                       // 210
  /** Used to map characters to HTML entities. */                                                                      // 211
  var htmlEscapes = {                                                                                                  // 212
    '&': '&amp;',                                                                                                      // 213
    '<': '&lt;',                                                                                                       // 214
    '>': '&gt;',                                                                                                       // 215
    '"': '&quot;',                                                                                                     // 216
    "'": '&#39;',                                                                                                      // 217
    '`': '&#96;'                                                                                                       // 218
  };                                                                                                                   // 219
                                                                                                                       // 220
  /** Used to map HTML entities to characters. */                                                                      // 221
  var htmlUnescapes = {                                                                                                // 222
    '&amp;': '&',                                                                                                      // 223
    '&lt;': '<',                                                                                                       // 224
    '&gt;': '>',                                                                                                       // 225
    '&quot;': '"',                                                                                                     // 226
    '&#39;': "'",                                                                                                      // 227
    '&#96;': '`'                                                                                                       // 228
  };                                                                                                                   // 229
                                                                                                                       // 230
  /** Used to determine if values are of the language type `Object`. */                                                // 231
  var objectTypes = {                                                                                                  // 232
    'function': true,                                                                                                  // 233
    'object': true                                                                                                     // 234
  };                                                                                                                   // 235
                                                                                                                       // 236
  /** Used to escape characters for inclusion in compiled regexes. */                                                  // 237
  var regexpEscapes = {                                                                                                // 238
    '0': 'x30', '1': 'x31', '2': 'x32', '3': 'x33', '4': 'x34',                                                        // 239
    '5': 'x35', '6': 'x36', '7': 'x37', '8': 'x38', '9': 'x39',                                                        // 240
    'A': 'x41', 'B': 'x42', 'C': 'x43', 'D': 'x44', 'E': 'x45', 'F': 'x46',                                            // 241
    'a': 'x61', 'b': 'x62', 'c': 'x63', 'd': 'x64', 'e': 'x65', 'f': 'x66',                                            // 242
    'n': 'x6e', 'r': 'x72', 't': 'x74', 'u': 'x75', 'v': 'x76', 'x': 'x78'                                             // 243
  };                                                                                                                   // 244
                                                                                                                       // 245
  /** Used to escape characters for inclusion in compiled string literals. */                                          // 246
  var stringEscapes = {                                                                                                // 247
    '\\': '\\',                                                                                                        // 248
    "'": "'",                                                                                                          // 249
    '\n': 'n',                                                                                                         // 250
    '\r': 'r',                                                                                                         // 251
    '\u2028': 'u2028',                                                                                                 // 252
    '\u2029': 'u2029'                                                                                                  // 253
  };                                                                                                                   // 254
                                                                                                                       // 255
  /** Detect free variable `exports`. */                                                                               // 256
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;                            // 257
                                                                                                                       // 258
  /** Detect free variable `module`. */                                                                                // 259
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;                                 // 260
                                                                                                                       // 261
  /** Detect free variable `global` from Node.js. */                                                                   // 262
  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;        // 263
                                                                                                                       // 264
  /** Detect free variable `self`. */                                                                                  // 265
  var freeSelf = objectTypes[typeof self] && self && self.Object && self;                                              // 266
                                                                                                                       // 267
  /** Detect free variable `window`. */                                                                                // 268
  var freeWindow = objectTypes[typeof window] && window && window.Object && window;                                    // 269
                                                                                                                       // 270
  /** Detect the popular CommonJS extension `module.exports`. */                                                       // 271
  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;                                 // 272
                                                                                                                       // 273
  /**                                                                                                                  // 274
   * Used as a reference to the global object.                                                                         // 275
   *                                                                                                                   // 276
   * The `this` value is used if it's the global object to avoid Greasemonkey's                                        // 277
   * restricted `window` object, otherwise the `window` object is used.                                                // 278
   */                                                                                                                  // 279
  var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || freeSelf || this;                 // 280
                                                                                                                       // 281
  /*--------------------------------------------------------------------------*/                                       // 282
                                                                                                                       // 283
  /**                                                                                                                  // 284
   * The base implementation of `compareAscending` which compares values and                                           // 285
   * sorts them in ascending order without guaranteeing a stable sort.                                                 // 286
   *                                                                                                                   // 287
   * @private                                                                                                          // 288
   * @param {*} value The value to compare.                                                                            // 289
   * @param {*} other The other value to compare.                                                                      // 290
   * @returns {number} Returns the sort order indicator for `value`.                                                   // 291
   */                                                                                                                  // 292
  function baseCompareAscending(value, other) {                                                                        // 293
    if (value !== other) {                                                                                             // 294
      var valIsNull = value === null,                                                                                  // 295
          valIsUndef = value === undefined,                                                                            // 296
          valIsReflexive = value === value;                                                                            // 297
                                                                                                                       // 298
      var othIsNull = other === null,                                                                                  // 299
          othIsUndef = other === undefined,                                                                            // 300
          othIsReflexive = other === other;                                                                            // 301
                                                                                                                       // 302
      if ((value > other && !othIsNull) || !valIsReflexive ||                                                          // 303
          (valIsNull && !othIsUndef && othIsReflexive) ||                                                              // 304
          (valIsUndef && othIsReflexive)) {                                                                            // 305
        return 1;                                                                                                      // 306
      }                                                                                                                // 307
      if ((value < other && !valIsNull) || !othIsReflexive ||                                                          // 308
          (othIsNull && !valIsUndef && valIsReflexive) ||                                                              // 309
          (othIsUndef && valIsReflexive)) {                                                                            // 310
        return -1;                                                                                                     // 311
      }                                                                                                                // 312
    }                                                                                                                  // 313
    return 0;                                                                                                          // 314
  }                                                                                                                    // 315
                                                                                                                       // 316
  /**                                                                                                                  // 317
   * The base implementation of `_.findIndex` and `_.findLastIndex` without                                            // 318
   * support for callback shorthands and `this` binding.                                                               // 319
   *                                                                                                                   // 320
   * @private                                                                                                          // 321
   * @param {Array} array The array to search.                                                                         // 322
   * @param {Function} predicate The function invoked per iteration.                                                   // 323
   * @param {boolean} [fromRight] Specify iterating from right to left.                                                // 324
   * @returns {number} Returns the index of the matched value, else `-1`.                                              // 325
   */                                                                                                                  // 326
  function baseFindIndex(array, predicate, fromRight) {                                                                // 327
    var length = array.length,                                                                                         // 328
        index = fromRight ? length : -1;                                                                               // 329
                                                                                                                       // 330
    while ((fromRight ? index-- : ++index < length)) {                                                                 // 331
      if (predicate(array[index], index, array)) {                                                                     // 332
        return index;                                                                                                  // 333
      }                                                                                                                // 334
    }                                                                                                                  // 335
    return -1;                                                                                                         // 336
  }                                                                                                                    // 337
                                                                                                                       // 338
  /**                                                                                                                  // 339
   * The base implementation of `_.indexOf` without support for binary searches.                                       // 340
   *                                                                                                                   // 341
   * @private                                                                                                          // 342
   * @param {Array} array The array to search.                                                                         // 343
   * @param {*} value The value to search for.                                                                         // 344
   * @param {number} fromIndex The index to search from.                                                               // 345
   * @returns {number} Returns the index of the matched value, else `-1`.                                              // 346
   */                                                                                                                  // 347
  function baseIndexOf(array, value, fromIndex) {                                                                      // 348
    if (value !== value) {                                                                                             // 349
      return indexOfNaN(array, fromIndex);                                                                             // 350
    }                                                                                                                  // 351
    var index = fromIndex - 1,                                                                                         // 352
        length = array.length;                                                                                         // 353
                                                                                                                       // 354
    while (++index < length) {                                                                                         // 355
      if (array[index] === value) {                                                                                    // 356
        return index;                                                                                                  // 357
      }                                                                                                                // 358
    }                                                                                                                  // 359
    return -1;                                                                                                         // 360
  }                                                                                                                    // 361
                                                                                                                       // 362
  /**                                                                                                                  // 363
   * The base implementation of `_.isFunction` without support for environments                                        // 364
   * with incorrect `typeof` results.                                                                                  // 365
   *                                                                                                                   // 366
   * @private                                                                                                          // 367
   * @param {*} value The value to check.                                                                              // 368
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                               // 369
   */                                                                                                                  // 370
  function baseIsFunction(value) {                                                                                     // 371
    // Avoid a Chakra JIT bug in compatibility modes of IE 11.                                                         // 372
    // See https://github.com/jashkenas/underscore/issues/1621 for more details.                                       // 373
    return typeof value == 'function' || false;                                                                        // 374
  }                                                                                                                    // 375
                                                                                                                       // 376
  /**                                                                                                                  // 377
   * Converts `value` to a string if it's not one. An empty string is returned                                         // 378
   * for `null` or `undefined` values.                                                                                 // 379
   *                                                                                                                   // 380
   * @private                                                                                                          // 381
   * @param {*} value The value to process.                                                                            // 382
   * @returns {string} Returns the string.                                                                             // 383
   */                                                                                                                  // 384
  function baseToString(value) {                                                                                       // 385
    return value == null ? '' : (value + '');                                                                          // 386
  }                                                                                                                    // 387
                                                                                                                       // 388
  /**                                                                                                                  // 389
   * Used by `_.trim` and `_.trimLeft` to get the index of the first character                                         // 390
   * of `string` that is not found in `chars`.                                                                         // 391
   *                                                                                                                   // 392
   * @private                                                                                                          // 393
   * @param {string} string The string to inspect.                                                                     // 394
   * @param {string} chars The characters to find.                                                                     // 395
   * @returns {number} Returns the index of the first character not found in `chars`.                                  // 396
   */                                                                                                                  // 397
  function charsLeftIndex(string, chars) {                                                                             // 398
    var index = -1,                                                                                                    // 399
        length = string.length;                                                                                        // 400
                                                                                                                       // 401
    while (++index < length && chars.indexOf(string.charAt(index)) > -1) {}                                            // 402
    return index;                                                                                                      // 403
  }                                                                                                                    // 404
                                                                                                                       // 405
  /**                                                                                                                  // 406
   * Used by `_.trim` and `_.trimRight` to get the index of the last character                                         // 407
   * of `string` that is not found in `chars`.                                                                         // 408
   *                                                                                                                   // 409
   * @private                                                                                                          // 410
   * @param {string} string The string to inspect.                                                                     // 411
   * @param {string} chars The characters to find.                                                                     // 412
   * @returns {number} Returns the index of the last character not found in `chars`.                                   // 413
   */                                                                                                                  // 414
  function charsRightIndex(string, chars) {                                                                            // 415
    var index = string.length;                                                                                         // 416
                                                                                                                       // 417
    while (index-- && chars.indexOf(string.charAt(index)) > -1) {}                                                     // 418
    return index;                                                                                                      // 419
  }                                                                                                                    // 420
                                                                                                                       // 421
  /**                                                                                                                  // 422
   * Used by `_.sortBy` to compare transformed elements of a collection and stable                                     // 423
   * sort them in ascending order.                                                                                     // 424
   *                                                                                                                   // 425
   * @private                                                                                                          // 426
   * @param {Object} object The object to compare.                                                                     // 427
   * @param {Object} other The other object to compare.                                                                // 428
   * @returns {number} Returns the sort order indicator for `object`.                                                  // 429
   */                                                                                                                  // 430
  function compareAscending(object, other) {                                                                           // 431
    return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);                      // 432
  }                                                                                                                    // 433
                                                                                                                       // 434
  /**                                                                                                                  // 435
   * Used by `_.sortByOrder` to compare multiple properties of a value to another                                      // 436
   * and stable sort them.                                                                                             // 437
   *                                                                                                                   // 438
   * If `orders` is unspecified, all valuess are sorted in ascending order. Otherwise,                                 // 439
   * a value is sorted in ascending order if its corresponding order is "asc", and                                     // 440
   * descending if "desc".                                                                                             // 441
   *                                                                                                                   // 442
   * @private                                                                                                          // 443
   * @param {Object} object The object to compare.                                                                     // 444
   * @param {Object} other The other object to compare.                                                                // 445
   * @param {boolean[]} orders The order to sort by for each property.                                                 // 446
   * @returns {number} Returns the sort order indicator for `object`.                                                  // 447
   */                                                                                                                  // 448
  function compareMultiple(object, other, orders) {                                                                    // 449
    var index = -1,                                                                                                    // 450
        objCriteria = object.criteria,                                                                                 // 451
        othCriteria = other.criteria,                                                                                  // 452
        length = objCriteria.length,                                                                                   // 453
        ordersLength = orders.length;                                                                                  // 454
                                                                                                                       // 455
    while (++index < length) {                                                                                         // 456
      var result = baseCompareAscending(objCriteria[index], othCriteria[index]);                                       // 457
      if (result) {                                                                                                    // 458
        if (index >= ordersLength) {                                                                                   // 459
          return result;                                                                                               // 460
        }                                                                                                              // 461
        var order = orders[index];                                                                                     // 462
        return result * ((order === 'asc' || order === true) ? 1 : -1);                                                // 463
      }                                                                                                                // 464
    }                                                                                                                  // 465
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications                                       // 466
    // that causes it, under certain circumstances, to provide the same value for                                      // 467
    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247                                     // 468
    // for more details.                                                                                               // 469
    //                                                                                                                 // 470
    // This also ensures a stable sort in V8 and other engines.                                                        // 471
    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.                                          // 472
    return object.index - other.index;                                                                                 // 473
  }                                                                                                                    // 474
                                                                                                                       // 475
  /**                                                                                                                  // 476
   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.                               // 477
   *                                                                                                                   // 478
   * @private                                                                                                          // 479
   * @param {string} letter The matched letter to deburr.                                                              // 480
   * @returns {string} Returns the deburred letter.                                                                    // 481
   */                                                                                                                  // 482
  function deburrLetter(letter) {                                                                                      // 483
    return deburredLetters[letter];                                                                                    // 484
  }                                                                                                                    // 485
                                                                                                                       // 486
  /**                                                                                                                  // 487
   * Used by `_.escape` to convert characters to HTML entities.                                                        // 488
   *                                                                                                                   // 489
   * @private                                                                                                          // 490
   * @param {string} chr The matched character to escape.                                                              // 491
   * @returns {string} Returns the escaped character.                                                                  // 492
   */                                                                                                                  // 493
  function escapeHtmlChar(chr) {                                                                                       // 494
    return htmlEscapes[chr];                                                                                           // 495
  }                                                                                                                    // 496
                                                                                                                       // 497
  /**                                                                                                                  // 498
   * Used by `_.escapeRegExp` to escape characters for inclusion in compiled regexes.                                  // 499
   *                                                                                                                   // 500
   * @private                                                                                                          // 501
   * @param {string} chr The matched character to escape.                                                              // 502
   * @param {string} leadingChar The capture group for a leading character.                                            // 503
   * @param {string} whitespaceChar The capture group for a whitespace character.                                      // 504
   * @returns {string} Returns the escaped character.                                                                  // 505
   */                                                                                                                  // 506
  function escapeRegExpChar(chr, leadingChar, whitespaceChar) {                                                        // 507
    if (leadingChar) {                                                                                                 // 508
      chr = regexpEscapes[chr];                                                                                        // 509
    } else if (whitespaceChar) {                                                                                       // 510
      chr = stringEscapes[chr];                                                                                        // 511
    }                                                                                                                  // 512
    return '\\' + chr;                                                                                                 // 513
  }                                                                                                                    // 514
                                                                                                                       // 515
  /**                                                                                                                  // 516
   * Used by `_.template` to escape characters for inclusion in compiled string literals.                              // 517
   *                                                                                                                   // 518
   * @private                                                                                                          // 519
   * @param {string} chr The matched character to escape.                                                              // 520
   * @returns {string} Returns the escaped character.                                                                  // 521
   */                                                                                                                  // 522
  function escapeStringChar(chr) {                                                                                     // 523
    return '\\' + stringEscapes[chr];                                                                                  // 524
  }                                                                                                                    // 525
                                                                                                                       // 526
  /**                                                                                                                  // 527
   * Gets the index at which the first occurrence of `NaN` is found in `array`.                                        // 528
   *                                                                                                                   // 529
   * @private                                                                                                          // 530
   * @param {Array} array The array to search.                                                                         // 531
   * @param {number} fromIndex The index to search from.                                                               // 532
   * @param {boolean} [fromRight] Specify iterating from right to left.                                                // 533
   * @returns {number} Returns the index of the matched `NaN`, else `-1`.                                              // 534
   */                                                                                                                  // 535
  function indexOfNaN(array, fromIndex, fromRight) {                                                                   // 536
    var length = array.length,                                                                                         // 537
        index = fromIndex + (fromRight ? 0 : -1);                                                                      // 538
                                                                                                                       // 539
    while ((fromRight ? index-- : ++index < length)) {                                                                 // 540
      var other = array[index];                                                                                        // 541
      if (other !== other) {                                                                                           // 542
        return index;                                                                                                  // 543
      }                                                                                                                // 544
    }                                                                                                                  // 545
    return -1;                                                                                                         // 546
  }                                                                                                                    // 547
                                                                                                                       // 548
  /**                                                                                                                  // 549
   * Checks if `value` is a host object in IE < 9.                                                                     // 550
   *                                                                                                                   // 551
   * @private                                                                                                          // 552
   * @param {*} value The value to check.                                                                              // 553
   * @returns {boolean} Returns `true` if `value` is a host object, else `false`.                                      // 554
   */                                                                                                                  // 555
  var isHostObject = (function() {                                                                                     // 556
    try {                                                                                                              // 557
      Object({ 'toString': 0 } + '');                                                                                  // 558
    } catch(e) {                                                                                                       // 559
      return function() { return false; };                                                                             // 560
    }                                                                                                                  // 561
    return function(value) {                                                                                           // 562
      // IE < 9 presents many host objects as `Object` objects that can coerce                                         // 563
      // to strings despite having improperly defined `toString` methods.                                              // 564
      return typeof value.toString != 'function' && typeof (value + '') == 'string';                                   // 565
    };                                                                                                                 // 566
  }());                                                                                                                // 567
                                                                                                                       // 568
  /**                                                                                                                  // 569
   * Checks if `value` is object-like.                                                                                 // 570
   *                                                                                                                   // 571
   * @private                                                                                                          // 572
   * @param {*} value The value to check.                                                                              // 573
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.                                        // 574
   */                                                                                                                  // 575
  function isObjectLike(value) {                                                                                       // 576
    return !!value && typeof value == 'object';                                                                        // 577
  }                                                                                                                    // 578
                                                                                                                       // 579
  /**                                                                                                                  // 580
   * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a                                              // 581
   * character code is whitespace.                                                                                     // 582
   *                                                                                                                   // 583
   * @private                                                                                                          // 584
   * @param {number} charCode The character code to inspect.                                                           // 585
   * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.                                      // 586
   */                                                                                                                  // 587
  function isSpace(charCode) {                                                                                         // 588
    return ((charCode <= 160 && (charCode >= 9 && charCode <= 13) || charCode == 32 || charCode == 160) || charCode == 5760 || charCode == 6158 ||
      (charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279)));
  }                                                                                                                    // 591
                                                                                                                       // 592
  /**                                                                                                                  // 593
   * Replaces all `placeholder` elements in `array` with an internal placeholder                                       // 594
   * and returns an array of their indexes.                                                                            // 595
   *                                                                                                                   // 596
   * @private                                                                                                          // 597
   * @param {Array} array The array to modify.                                                                         // 598
   * @param {*} placeholder The placeholder to replace.                                                                // 599
   * @returns {Array} Returns the new array of placeholder indexes.                                                    // 600
   */                                                                                                                  // 601
  function replaceHolders(array, placeholder) {                                                                        // 602
    var index = -1,                                                                                                    // 603
        length = array.length,                                                                                         // 604
        resIndex = -1,                                                                                                 // 605
        result = [];                                                                                                   // 606
                                                                                                                       // 607
    while (++index < length) {                                                                                         // 608
      if (array[index] === placeholder) {                                                                              // 609
        array[index] = PLACEHOLDER;                                                                                    // 610
        result[++resIndex] = index;                                                                                    // 611
      }                                                                                                                // 612
    }                                                                                                                  // 613
    return result;                                                                                                     // 614
  }                                                                                                                    // 615
                                                                                                                       // 616
  /**                                                                                                                  // 617
   * An implementation of `_.uniq` optimized for sorted arrays without support                                         // 618
   * for callback shorthands and `this` binding.                                                                       // 619
   *                                                                                                                   // 620
   * @private                                                                                                          // 621
   * @param {Array} array The array to inspect.                                                                        // 622
   * @param {Function} [iteratee] The function invoked per iteration.                                                  // 623
   * @returns {Array} Returns the new duplicate free array.                                                            // 624
   */                                                                                                                  // 625
  function sortedUniq(array, iteratee) {                                                                               // 626
    var seen,                                                                                                          // 627
        index = -1,                                                                                                    // 628
        length = array.length,                                                                                         // 629
        resIndex = -1,                                                                                                 // 630
        result = [];                                                                                                   // 631
                                                                                                                       // 632
    while (++index < length) {                                                                                         // 633
      var value = array[index],                                                                                        // 634
          computed = iteratee ? iteratee(value, index, array) : value;                                                 // 635
                                                                                                                       // 636
      if (!index || seen !== computed) {                                                                               // 637
        seen = computed;                                                                                               // 638
        result[++resIndex] = value;                                                                                    // 639
      }                                                                                                                // 640
    }                                                                                                                  // 641
    return result;                                                                                                     // 642
  }                                                                                                                    // 643
                                                                                                                       // 644
  /**                                                                                                                  // 645
   * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace                                    // 646
   * character of `string`.                                                                                            // 647
   *                                                                                                                   // 648
   * @private                                                                                                          // 649
   * @param {string} string The string to inspect.                                                                     // 650
   * @returns {number} Returns the index of the first non-whitespace character.                                        // 651
   */                                                                                                                  // 652
  function trimmedLeftIndex(string) {                                                                                  // 653
    var index = -1,                                                                                                    // 654
        length = string.length;                                                                                        // 655
                                                                                                                       // 656
    while (++index < length && isSpace(string.charCodeAt(index))) {}                                                   // 657
    return index;                                                                                                      // 658
  }                                                                                                                    // 659
                                                                                                                       // 660
  /**                                                                                                                  // 661
   * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace                                    // 662
   * character of `string`.                                                                                            // 663
   *                                                                                                                   // 664
   * @private                                                                                                          // 665
   * @param {string} string The string to inspect.                                                                     // 666
   * @returns {number} Returns the index of the last non-whitespace character.                                         // 667
   */                                                                                                                  // 668
  function trimmedRightIndex(string) {                                                                                 // 669
    var index = string.length;                                                                                         // 670
                                                                                                                       // 671
    while (index-- && isSpace(string.charCodeAt(index))) {}                                                            // 672
    return index;                                                                                                      // 673
  }                                                                                                                    // 674
                                                                                                                       // 675
  /**                                                                                                                  // 676
   * Used by `_.unescape` to convert HTML entities to characters.                                                      // 677
   *                                                                                                                   // 678
   * @private                                                                                                          // 679
   * @param {string} chr The matched character to unescape.                                                            // 680
   * @returns {string} Returns the unescaped character.                                                                // 681
   */                                                                                                                  // 682
  function unescapeHtmlChar(chr) {                                                                                     // 683
    return htmlUnescapes[chr];                                                                                         // 684
  }                                                                                                                    // 685
                                                                                                                       // 686
  /*--------------------------------------------------------------------------*/                                       // 687
                                                                                                                       // 688
  /**                                                                                                                  // 689
   * Create a new pristine `lodash` function using the given `context` object.                                         // 690
   *                                                                                                                   // 691
   * @static                                                                                                           // 692
   * @memberOf _                                                                                                       // 693
   * @category Utility                                                                                                 // 694
   * @param {Object} [context=root] The context object.                                                                // 695
   * @returns {Function} Returns a new `lodash` function.                                                              // 696
   * @example                                                                                                          // 697
   *                                                                                                                   // 698
   * _.mixin({ 'foo': _.constant('foo') });                                                                            // 699
   *                                                                                                                   // 700
   * var lodash = _.runInContext();                                                                                    // 701
   * lodash.mixin({ 'bar': lodash.constant('bar') });                                                                  // 702
   *                                                                                                                   // 703
   * _.isFunction(_.foo);                                                                                              // 704
   * // => true                                                                                                        // 705
   * _.isFunction(_.bar);                                                                                              // 706
   * // => false                                                                                                       // 707
   *                                                                                                                   // 708
   * lodash.isFunction(lodash.foo);                                                                                    // 709
   * // => false                                                                                                       // 710
   * lodash.isFunction(lodash.bar);                                                                                    // 711
   * // => true                                                                                                        // 712
   *                                                                                                                   // 713
   * // using `context` to mock `Date#getTime` use in `_.now`                                                          // 714
   * var mock = _.runInContext({                                                                                       // 715
   *   'Date': function() {                                                                                            // 716
   *     return { 'getTime': getTimeMock };                                                                            // 717
   *   }                                                                                                               // 718
   * });                                                                                                               // 719
   *                                                                                                                   // 720
   * // or creating a suped-up `defer` in Node.js                                                                      // 721
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;                                                 // 722
   */                                                                                                                  // 723
  function runInContext(context) {                                                                                     // 724
    // Avoid issues with some ES3 environments that attempt to use values, named                                       // 725
    // after built-in constructors like `Object`, for the creation of literals.                                        // 726
    // ES5 clears this up by stating that literals must use built-in constructors.                                     // 727
    // See https://es5.github.io/#x11.1.5 for more details.                                                            // 728
    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;                         // 729
                                                                                                                       // 730
    /** Native constructor references. */                                                                              // 731
    var Array = context.Array,                                                                                         // 732
        Date = context.Date,                                                                                           // 733
        Error = context.Error,                                                                                         // 734
        Function = context.Function,                                                                                   // 735
        Math = context.Math,                                                                                           // 736
        Number = context.Number,                                                                                       // 737
        Object = context.Object,                                                                                       // 738
        RegExp = context.RegExp,                                                                                       // 739
        String = context.String,                                                                                       // 740
        TypeError = context.TypeError;                                                                                 // 741
                                                                                                                       // 742
    /** Used for native method references. */                                                                          // 743
    var arrayProto = Array.prototype,                                                                                  // 744
        errorProto = Error.prototype,                                                                                  // 745
        objectProto = Object.prototype,                                                                                // 746
        stringProto = String.prototype;                                                                                // 747
                                                                                                                       // 748
    /** Used to resolve the decompiled source of functions. */                                                         // 749
    var fnToString = Function.prototype.toString;                                                                      // 750
                                                                                                                       // 751
    /** Used to check objects for own properties. */                                                                   // 752
    var hasOwnProperty = objectProto.hasOwnProperty;                                                                   // 753
                                                                                                                       // 754
    /** Used to generate unique IDs. */                                                                                // 755
    var idCounter = 0;                                                                                                 // 756
                                                                                                                       // 757
    /**                                                                                                                // 758
     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)  // 759
     * of values.                                                                                                      // 760
     */                                                                                                                // 761
    var objToString = objectProto.toString;                                                                            // 762
                                                                                                                       // 763
    /** Used to restore the original `_` reference in `_.noConflict`. */                                               // 764
    var oldDash = root._;                                                                                              // 765
                                                                                                                       // 766
    /** Used to detect if a method is native. */                                                                       // 767
    var reIsNative = RegExp('^' +                                                                                      // 768
      fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')                                           // 769
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'                                // 770
    );                                                                                                                 // 771
                                                                                                                       // 772
    /** Native method references. */                                                                                   // 773
    var ArrayBuffer = context.ArrayBuffer,                                                                             // 774
        clearTimeout = context.clearTimeout,                                                                           // 775
        parseFloat = context.parseFloat,                                                                               // 776
        pow = Math.pow,                                                                                                // 777
        propertyIsEnumerable = objectProto.propertyIsEnumerable,                                                       // 778
        Set = getNative(context, 'Set'),                                                                               // 779
        setTimeout = context.setTimeout,                                                                               // 780
        splice = arrayProto.splice,                                                                                    // 781
        Uint8Array = context.Uint8Array,                                                                               // 782
        WeakMap = getNative(context, 'WeakMap');                                                                       // 783
                                                                                                                       // 784
    /* Native method references for those with the same name as other `lodash` methods. */                             // 785
    var nativeCeil = Math.ceil,                                                                                        // 786
        nativeCreate = getNative(Object, 'create'),                                                                    // 787
        nativeFloor = Math.floor,                                                                                      // 788
        nativeIsArray = getNative(Array, 'isArray'),                                                                   // 789
        nativeIsFinite = context.isFinite,                                                                             // 790
        nativeKeys = getNative(Object, 'keys'),                                                                        // 791
        nativeMax = Math.max,                                                                                          // 792
        nativeMin = Math.min,                                                                                          // 793
        nativeNow = getNative(Date, 'now'),                                                                            // 794
        nativeParseInt = context.parseInt,                                                                             // 795
        nativeRandom = Math.random;                                                                                    // 796
                                                                                                                       // 797
    /** Used as references for `-Infinity` and `Infinity`. */                                                          // 798
    var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY,                                                                  // 799
        POSITIVE_INFINITY = Number.POSITIVE_INFINITY;                                                                  // 800
                                                                                                                       // 801
    /** Used as references for the maximum length and index of an array. */                                            // 802
    var MAX_ARRAY_LENGTH = 4294967295,                                                                                 // 803
        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,                                                                        // 804
        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;                                                                // 805
                                                                                                                       // 806
    /**                                                                                                                // 807
     * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)           // 808
     * of an array-like value.                                                                                         // 809
     */                                                                                                                // 810
    var MAX_SAFE_INTEGER = 9007199254740991;                                                                           // 811
                                                                                                                       // 812
    /** Used to store function metadata. */                                                                            // 813
    var metaMap = WeakMap && new WeakMap;                                                                              // 814
                                                                                                                       // 815
    /** Used to lookup unminified function names. */                                                                   // 816
    var realNames = {};                                                                                                // 817
                                                                                                                       // 818
    /** Used to lookup a type array constructors by `toStringTag`. */                                                  // 819
    var ctorByTag = {};                                                                                                // 820
    ctorByTag[float32Tag] = context.Float32Array;                                                                      // 821
    ctorByTag[float64Tag] = context.Float64Array;                                                                      // 822
    ctorByTag[int8Tag] = context.Int8Array;                                                                            // 823
    ctorByTag[int16Tag] = context.Int16Array;                                                                          // 824
    ctorByTag[int32Tag] = context.Int32Array;                                                                          // 825
    ctorByTag[uint8Tag] = Uint8Array;                                                                                  // 826
    ctorByTag[uint8ClampedTag] = context.Uint8ClampedArray;                                                            // 827
    ctorByTag[uint16Tag] = context.Uint16Array;                                                                        // 828
    ctorByTag[uint32Tag] = context.Uint32Array;                                                                        // 829
                                                                                                                       // 830
    /** Used to avoid iterating over non-enumerable properties in IE < 9. */                                           // 831
    var nonEnumProps = {};                                                                                             // 832
    nonEnumProps[arrayTag] = nonEnumProps[dateTag] = nonEnumProps[numberTag] = { 'constructor': true, 'toLocaleString': true, 'toString': true, 'valueOf': true };
    nonEnumProps[boolTag] = nonEnumProps[stringTag] = { 'constructor': true, 'toString': true, 'valueOf': true };      // 834
    nonEnumProps[errorTag] = nonEnumProps[funcTag] = nonEnumProps[regexpTag] = { 'constructor': true, 'toString': true };
    nonEnumProps[objectTag] = { 'constructor': true };                                                                 // 836
                                                                                                                       // 837
    arrayEach(shadowProps, function(key) {                                                                             // 838
      for (var tag in nonEnumProps) {                                                                                  // 839
        if (hasOwnProperty.call(nonEnumProps, tag)) {                                                                  // 840
          var props = nonEnumProps[tag];                                                                               // 841
          props[key] = hasOwnProperty.call(props, key);                                                                // 842
        }                                                                                                              // 843
      }                                                                                                                // 844
    });                                                                                                                // 845
                                                                                                                       // 846
    /*------------------------------------------------------------------------*/                                       // 847
                                                                                                                       // 848
    /**                                                                                                                // 849
     * Creates a `lodash` object which wraps `value` to enable implicit chaining.                                      // 850
     * Methods that operate on and return arrays, collections, and functions can                                       // 851
     * be chained together. Methods that retrieve a single value or may return a                                       // 852
     * primitive value will automatically end the chain returning the unwrapped                                        // 853
     * value. Explicit chaining may be enabled using `_.chain`. The execution of                                       // 854
     * chained methods is lazy, that is, execution is deferred until `_#value`                                         // 855
     * is implicitly or explicitly called.                                                                             // 856
     *                                                                                                                 // 857
     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut                                     // 858
     * fusion is an optimization strategy which merge iteratee calls; this can help                                    // 859
     * to avoid the creation of intermediate data structures and greatly reduce the                                    // 860
     * number of iteratee executions.                                                                                  // 861
     *                                                                                                                 // 862
     * Chaining is supported in custom builds as long as the `_#value` method is                                       // 863
     * directly or indirectly included in the build.                                                                   // 864
     *                                                                                                                 // 865
     * In addition to lodash methods, wrappers have `Array` and `String` methods.                                      // 866
     *                                                                                                                 // 867
     * The wrapper `Array` methods are:                                                                                // 868
     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,                                           // 869
     * `splice`, and `unshift`                                                                                         // 870
     *                                                                                                                 // 871
     * The wrapper `String` methods are:                                                                               // 872
     * `replace` and `split`                                                                                           // 873
     *                                                                                                                 // 874
     * The wrapper methods that support shortcut fusion are:                                                           // 875
     * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,                                        // 876
     * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,                                        // 877
     * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,                                         // 878
     * and `where`                                                                                                     // 879
     *                                                                                                                 // 880
     * The chainable wrapper methods are:                                                                              // 881
     * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,                                         // 882
     * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,                                        // 883
     * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defaultsDeep`,                                           // 884
     * `defer`, `delay`, `difference`, `drop`, `dropRight`, `dropRightWhile`,                                          // 885
     * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`,                                   // 886
     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,                                      // 887
     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,                                         // 888
     * `invoke`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`,                                           // 889
     * `matchesProperty`, `memoize`, `merge`, `method`, `methodOf`, `mixin`,                                           // 890
     * `modArgs`, `negate`, `omit`, `once`, `pairs`, `partial`, `partialRight`,                                        // 891
     * `partition`, `pick`, `plant`, `pluck`, `property`, `propertyOf`, `pull`,                                        // 892
     * `pullAt`, `push`, `range`, `rearg`, `reject`, `remove`, `rest`, `restParam`,                                    // 893
     * `reverse`, `set`, `shuffle`, `slice`, `sort`, `sortBy`, `sortByAll`,                                            // 894
     * `sortByOrder`, `splice`, `spread`, `take`, `takeRight`, `takeRightWhile`,                                       // 895
     * `takeWhile`, `tap`, `throttle`, `thru`, `times`, `toArray`, `toPlainObject`,                                    // 896
     * `transform`, `union`, `uniq`, `unshift`, `unzip`, `unzipWith`, `values`,                                        // 897
     * `valuesIn`, `where`, `without`, `wrap`, `xor`, `zip`, `zipObject`, `zipWith`                                    // 898
     *                                                                                                                 // 899
     * The wrapper methods that are **not** chainable by default are:                                                  // 900
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clone`, `cloneDeep`,                                      // 901
     * `deburr`, `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`,                                   // 902
     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`,                                    // 903
     * `floor`, `get`, `gt`, `gte`, `has`, `identity`, `includes`, `indexOf`,                                          // 904
     * `inRange`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,                                        // 905
     * `isEmpty`, `isEqual`, `isError`, `isFinite` `isFunction`, `isMatch`,                                            // 906
     * `isNative`, `isNaN`, `isNull`, `isNumber`, `isObject`, `isPlainObject`,                                         // 907
     * `isRegExp`, `isString`, `isUndefined`, `isTypedArray`, `join`, `kebabCase`,                                     // 908
     * `last`, `lastIndexOf`, `lt`, `lte`, `max`, `min`, `noConflict`, `noop`,                                         // 909
     * `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`, `random`, `reduce`,                                     // 910
     * `reduceRight`, `repeat`, `result`, `round`, `runInContext`, `shift`, `size`,                                    // 911
     * `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`, `startCase`,                                             // 912
     * `startsWith`, `sum`, `template`, `trim`, `trimLeft`, `trimRight`, `trunc`,                                      // 913
     * `unescape`, `uniqueId`, `value`, and `words`                                                                    // 914
     *                                                                                                                 // 915
     * The wrapper method `sample` will return a wrapped value when `n` is provided,                                   // 916
     * otherwise an unwrapped value is returned.                                                                       // 917
     *                                                                                                                 // 918
     * @name _                                                                                                         // 919
     * @constructor                                                                                                    // 920
     * @category Chain                                                                                                 // 921
     * @param {*} value The value to wrap in a `lodash` instance.                                                      // 922
     * @returns {Object} Returns the new `lodash` wrapper instance.                                                    // 923
     * @example                                                                                                        // 924
     *                                                                                                                 // 925
     * var wrapped = _([1, 2, 3]);                                                                                     // 926
     *                                                                                                                 // 927
     * // returns an unwrapped value                                                                                   // 928
     * wrapped.reduce(function(total, n) {                                                                             // 929
     *   return total + n;                                                                                             // 930
     * });                                                                                                             // 931
     * // => 6                                                                                                         // 932
     *                                                                                                                 // 933
     * // returns a wrapped value                                                                                      // 934
     * var squares = wrapped.map(function(n) {                                                                         // 935
     *   return n * n;                                                                                                 // 936
     * });                                                                                                             // 937
     *                                                                                                                 // 938
     * _.isArray(squares);                                                                                             // 939
     * // => false                                                                                                     // 940
     *                                                                                                                 // 941
     * _.isArray(squares.value());                                                                                     // 942
     * // => true                                                                                                      // 943
     */                                                                                                                // 944
    function lodash(value) {                                                                                           // 945
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {                                 // 946
        if (value instanceof LodashWrapper) {                                                                          // 947
          return value;                                                                                                // 948
        }                                                                                                              // 949
        if (hasOwnProperty.call(value, '__chain__') && hasOwnProperty.call(value, '__wrapped__')) {                    // 950
          return wrapperClone(value);                                                                                  // 951
        }                                                                                                              // 952
      }                                                                                                                // 953
      return new LodashWrapper(value);                                                                                 // 954
    }                                                                                                                  // 955
                                                                                                                       // 956
    /**                                                                                                                // 957
     * The function whose prototype all chaining wrappers inherit from.                                                // 958
     *                                                                                                                 // 959
     * @private                                                                                                        // 960
     */                                                                                                                // 961
    function baseLodash() {                                                                                            // 962
      // No operation performed.                                                                                       // 963
    }                                                                                                                  // 964
                                                                                                                       // 965
    /**                                                                                                                // 966
     * The base constructor for creating `lodash` wrapper objects.                                                     // 967
     *                                                                                                                 // 968
     * @private                                                                                                        // 969
     * @param {*} value The value to wrap.                                                                             // 970
     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.                                            // 971
     * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.                                   // 972
     */                                                                                                                // 973
    function LodashWrapper(value, chainAll, actions) {                                                                 // 974
      this.__wrapped__ = value;                                                                                        // 975
      this.__actions__ = actions || [];                                                                                // 976
      this.__chain__ = !!chainAll;                                                                                     // 977
    }                                                                                                                  // 978
                                                                                                                       // 979
    /**                                                                                                                // 980
     * An object environment feature flags.                                                                            // 981
     *                                                                                                                 // 982
     * @static                                                                                                         // 983
     * @memberOf _                                                                                                     // 984
     * @type Object                                                                                                    // 985
     */                                                                                                                // 986
    var support = lodash.support = {};                                                                                 // 987
                                                                                                                       // 988
    (function(x) {                                                                                                     // 989
      var Ctor = function() { this.x = x; },                                                                           // 990
          object = { '0': x, 'length': x },                                                                            // 991
          props = [];                                                                                                  // 992
                                                                                                                       // 993
      Ctor.prototype = { 'valueOf': x, 'y': x };                                                                       // 994
      for (var key in new Ctor) { props.push(key); }                                                                   // 995
                                                                                                                       // 996
      /**                                                                                                              // 997
       * Detect if `name` or `message` properties of `Error.prototype` are                                             // 998
       * enumerable by default (IE < 9, Safari < 5.1).                                                                 // 999
       *                                                                                                               // 1000
       * @memberOf _.support                                                                                           // 1001
       * @type boolean                                                                                                 // 1002
       */                                                                                                              // 1003
      support.enumErrorProps = propertyIsEnumerable.call(errorProto, 'message') ||                                     // 1004
        propertyIsEnumerable.call(errorProto, 'name');                                                                 // 1005
                                                                                                                       // 1006
      /**                                                                                                              // 1007
       * Detect if `prototype` properties are enumerable by default.                                                   // 1008
       *                                                                                                               // 1009
       * Firefox < 3.6, Opera > 9.50 - Opera < 11.60, and Safari < 5.1                                                 // 1010
       * (if the prototype or a property on the prototype has been set)                                                // 1011
       * incorrectly set the `[[Enumerable]]` value of a function's `prototype`                                        // 1012
       * property to `true`.                                                                                           // 1013
       *                                                                                                               // 1014
       * @memberOf _.support                                                                                           // 1015
       * @type boolean                                                                                                 // 1016
       */                                                                                                              // 1017
      support.enumPrototypes = propertyIsEnumerable.call(Ctor, 'prototype');                                           // 1018
                                                                                                                       // 1019
      /**                                                                                                              // 1020
       * Detect if properties shadowing those on `Object.prototype` are non-enumerable.                                // 1021
       *                                                                                                               // 1022
       * In IE < 9 an object's own properties, shadowing non-enumerable ones,                                          // 1023
       * are made non-enumerable as well (a.k.a the JScript `[[DontEnum]]` bug).                                       // 1024
       *                                                                                                               // 1025
       * @memberOf _.support                                                                                           // 1026
       * @type boolean                                                                                                 // 1027
       */                                                                                                              // 1028
      support.nonEnumShadows = !/valueOf/.test(props);                                                                 // 1029
                                                                                                                       // 1030
      /**                                                                                                              // 1031
       * Detect if own properties are iterated after inherited properties (IE < 9).                                    // 1032
       *                                                                                                               // 1033
       * @memberOf _.support                                                                                           // 1034
       * @type boolean                                                                                                 // 1035
       */                                                                                                              // 1036
      support.ownLast = props[0] != 'x';                                                                               // 1037
                                                                                                                       // 1038
      /**                                                                                                              // 1039
       * Detect if `Array#shift` and `Array#splice` augment array-like objects                                         // 1040
       * correctly.                                                                                                    // 1041
       *                                                                                                               // 1042
       * Firefox < 10, compatibility modes of IE 8, and IE < 9 have buggy Array                                        // 1043
       * `shift()` and `splice()` functions that fail to remove the last element,                                      // 1044
       * `value[0]`, of array-like objects even though the "length" property is                                        // 1045
       * set to `0`. The `shift()` method is buggy in compatibility modes of IE 8,                                     // 1046
       * while `splice()` is buggy regardless of mode in IE < 9.                                                       // 1047
       *                                                                                                               // 1048
       * @memberOf _.support                                                                                           // 1049
       * @type boolean                                                                                                 // 1050
       */                                                                                                              // 1051
      support.spliceObjects = (splice.call(object, 0, 1), !object[0]);                                                 // 1052
                                                                                                                       // 1053
      /**                                                                                                              // 1054
       * Detect lack of support for accessing string characters by index.                                              // 1055
       *                                                                                                               // 1056
       * IE < 8 can't access characters by index. IE 8 can only access characters                                      // 1057
       * by index on string literals, not string objects.                                                              // 1058
       *                                                                                                               // 1059
       * @memberOf _.support                                                                                           // 1060
       * @type boolean                                                                                                 // 1061
       */                                                                                                              // 1062
      support.unindexedChars = ('x'[0] + Object('x')[0]) != 'xx';                                                      // 1063
    }(1, 0));                                                                                                          // 1064
                                                                                                                       // 1065
    /**                                                                                                                // 1066
     * By default, the template delimiters used by lodash are like those in                                            // 1067
     * embedded Ruby (ERB). Change the following template settings to use                                              // 1068
     * alternative delimiters.                                                                                         // 1069
     *                                                                                                                 // 1070
     * @static                                                                                                         // 1071
     * @memberOf _                                                                                                     // 1072
     * @type Object                                                                                                    // 1073
     */                                                                                                                // 1074
    lodash.templateSettings = {                                                                                        // 1075
                                                                                                                       // 1076
      /**                                                                                                              // 1077
       * Used to detect `data` property values to be HTML-escaped.                                                     // 1078
       *                                                                                                               // 1079
       * @memberOf _.templateSettings                                                                                  // 1080
       * @type RegExp                                                                                                  // 1081
       */                                                                                                              // 1082
      'escape': reEscape,                                                                                              // 1083
                                                                                                                       // 1084
      /**                                                                                                              // 1085
       * Used to detect code to be evaluated.                                                                          // 1086
       *                                                                                                               // 1087
       * @memberOf _.templateSettings                                                                                  // 1088
       * @type RegExp                                                                                                  // 1089
       */                                                                                                              // 1090
      'evaluate': reEvaluate,                                                                                          // 1091
                                                                                                                       // 1092
      /**                                                                                                              // 1093
       * Used to detect `data` property values to inject.                                                              // 1094
       *                                                                                                               // 1095
       * @memberOf _.templateSettings                                                                                  // 1096
       * @type RegExp                                                                                                  // 1097
       */                                                                                                              // 1098
      'interpolate': reInterpolate,                                                                                    // 1099
                                                                                                                       // 1100
      /**                                                                                                              // 1101
       * Used to reference the data object in the template text.                                                       // 1102
       *                                                                                                               // 1103
       * @memberOf _.templateSettings                                                                                  // 1104
       * @type string                                                                                                  // 1105
       */                                                                                                              // 1106
      'variable': '',                                                                                                  // 1107
                                                                                                                       // 1108
      /**                                                                                                              // 1109
       * Used to import variables into the compiled template.                                                          // 1110
       *                                                                                                               // 1111
       * @memberOf _.templateSettings                                                                                  // 1112
       * @type Object                                                                                                  // 1113
       */                                                                                                              // 1114
      'imports': {                                                                                                     // 1115
                                                                                                                       // 1116
        /**                                                                                                            // 1117
         * A reference to the `lodash` function.                                                                       // 1118
         *                                                                                                             // 1119
         * @memberOf _.templateSettings.imports                                                                        // 1120
         * @type Function                                                                                              // 1121
         */                                                                                                            // 1122
        '_': lodash                                                                                                    // 1123
      }                                                                                                                // 1124
    };                                                                                                                 // 1125
                                                                                                                       // 1126
    /*------------------------------------------------------------------------*/                                       // 1127
                                                                                                                       // 1128
    /**                                                                                                                // 1129
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.                                    // 1130
     *                                                                                                                 // 1131
     * @private                                                                                                        // 1132
     * @param {*} value The value to wrap.                                                                             // 1133
     */                                                                                                                // 1134
    function LazyWrapper(value) {                                                                                      // 1135
      this.__wrapped__ = value;                                                                                        // 1136
      this.__actions__ = [];                                                                                           // 1137
      this.__dir__ = 1;                                                                                                // 1138
      this.__filtered__ = false;                                                                                       // 1139
      this.__iteratees__ = [];                                                                                         // 1140
      this.__takeCount__ = POSITIVE_INFINITY;                                                                          // 1141
      this.__views__ = [];                                                                                             // 1142
    }                                                                                                                  // 1143
                                                                                                                       // 1144
    /**                                                                                                                // 1145
     * Creates a clone of the lazy wrapper object.                                                                     // 1146
     *                                                                                                                 // 1147
     * @private                                                                                                        // 1148
     * @name clone                                                                                                     // 1149
     * @memberOf LazyWrapper                                                                                           // 1150
     * @returns {Object} Returns the cloned `LazyWrapper` object.                                                      // 1151
     */                                                                                                                // 1152
    function lazyClone() {                                                                                             // 1153
      var result = new LazyWrapper(this.__wrapped__);                                                                  // 1154
      result.__actions__ = arrayCopy(this.__actions__);                                                                // 1155
      result.__dir__ = this.__dir__;                                                                                   // 1156
      result.__filtered__ = this.__filtered__;                                                                         // 1157
      result.__iteratees__ = arrayCopy(this.__iteratees__);                                                            // 1158
      result.__takeCount__ = this.__takeCount__;                                                                       // 1159
      result.__views__ = arrayCopy(this.__views__);                                                                    // 1160
      return result;                                                                                                   // 1161
    }                                                                                                                  // 1162
                                                                                                                       // 1163
    /**                                                                                                                // 1164
     * Reverses the direction of lazy iteration.                                                                       // 1165
     *                                                                                                                 // 1166
     * @private                                                                                                        // 1167
     * @name reverse                                                                                                   // 1168
     * @memberOf LazyWrapper                                                                                           // 1169
     * @returns {Object} Returns the new reversed `LazyWrapper` object.                                                // 1170
     */                                                                                                                // 1171
    function lazyReverse() {                                                                                           // 1172
      if (this.__filtered__) {                                                                                         // 1173
        var result = new LazyWrapper(this);                                                                            // 1174
        result.__dir__ = -1;                                                                                           // 1175
        result.__filtered__ = true;                                                                                    // 1176
      } else {                                                                                                         // 1177
        result = this.clone();                                                                                         // 1178
        result.__dir__ *= -1;                                                                                          // 1179
      }                                                                                                                // 1180
      return result;                                                                                                   // 1181
    }                                                                                                                  // 1182
                                                                                                                       // 1183
    /**                                                                                                                // 1184
     * Extracts the unwrapped value from its lazy wrapper.                                                             // 1185
     *                                                                                                                 // 1186
     * @private                                                                                                        // 1187
     * @name value                                                                                                     // 1188
     * @memberOf LazyWrapper                                                                                           // 1189
     * @returns {*} Returns the unwrapped value.                                                                       // 1190
     */                                                                                                                // 1191
    function lazyValue() {                                                                                             // 1192
      var array = this.__wrapped__.value(),                                                                            // 1193
          dir = this.__dir__,                                                                                          // 1194
          isArr = isArray(array),                                                                                      // 1195
          isRight = dir < 0,                                                                                           // 1196
          arrLength = isArr ? array.length : 0,                                                                        // 1197
          view = getView(0, arrLength, this.__views__),                                                                // 1198
          start = view.start,                                                                                          // 1199
          end = view.end,                                                                                              // 1200
          length = end - start,                                                                                        // 1201
          index = isRight ? end : (start - 1),                                                                         // 1202
          iteratees = this.__iteratees__,                                                                              // 1203
          iterLength = iteratees.length,                                                                               // 1204
          resIndex = 0,                                                                                                // 1205
          takeCount = nativeMin(length, this.__takeCount__);                                                           // 1206
                                                                                                                       // 1207
      if (!isArr || arrLength < LARGE_ARRAY_SIZE || (arrLength == length && takeCount == length)) {                    // 1208
        return baseWrapperValue(array, this.__actions__);                                                              // 1209
      }                                                                                                                // 1210
      var result = [];                                                                                                 // 1211
                                                                                                                       // 1212
      outer:                                                                                                           // 1213
      while (length-- && resIndex < takeCount) {                                                                       // 1214
        index += dir;                                                                                                  // 1215
                                                                                                                       // 1216
        var iterIndex = -1,                                                                                            // 1217
            value = array[index];                                                                                      // 1218
                                                                                                                       // 1219
        while (++iterIndex < iterLength) {                                                                             // 1220
          var data = iteratees[iterIndex],                                                                             // 1221
              iteratee = data.iteratee,                                                                                // 1222
              type = data.type,                                                                                        // 1223
              computed = iteratee(value);                                                                              // 1224
                                                                                                                       // 1225
          if (type == LAZY_MAP_FLAG) {                                                                                 // 1226
            value = computed;                                                                                          // 1227
          } else if (!computed) {                                                                                      // 1228
            if (type == LAZY_FILTER_FLAG) {                                                                            // 1229
              continue outer;                                                                                          // 1230
            } else {                                                                                                   // 1231
              break outer;                                                                                             // 1232
            }                                                                                                          // 1233
          }                                                                                                            // 1234
        }                                                                                                              // 1235
        result[resIndex++] = value;                                                                                    // 1236
      }                                                                                                                // 1237
      return result;                                                                                                   // 1238
    }                                                                                                                  // 1239
                                                                                                                       // 1240
    /*------------------------------------------------------------------------*/                                       // 1241
                                                                                                                       // 1242
    /**                                                                                                                // 1243
     * Creates a cache object to store key/value pairs.                                                                // 1244
     *                                                                                                                 // 1245
     * @private                                                                                                        // 1246
     * @static                                                                                                         // 1247
     * @name Cache                                                                                                     // 1248
     * @memberOf _.memoize                                                                                             // 1249
     */                                                                                                                // 1250
    function MapCache() {                                                                                              // 1251
      this.__data__ = {};                                                                                              // 1252
    }                                                                                                                  // 1253
                                                                                                                       // 1254
    /**                                                                                                                // 1255
     * Removes `key` and its value from the cache.                                                                     // 1256
     *                                                                                                                 // 1257
     * @private                                                                                                        // 1258
     * @name delete                                                                                                    // 1259
     * @memberOf _.memoize.Cache                                                                                       // 1260
     * @param {string} key The key of the value to remove.                                                             // 1261
     * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.                          // 1262
     */                                                                                                                // 1263
    function mapDelete(key) {                                                                                          // 1264
      return this.has(key) && delete this.__data__[key];                                                               // 1265
    }                                                                                                                  // 1266
                                                                                                                       // 1267
    /**                                                                                                                // 1268
     * Gets the cached value for `key`.                                                                                // 1269
     *                                                                                                                 // 1270
     * @private                                                                                                        // 1271
     * @name get                                                                                                       // 1272
     * @memberOf _.memoize.Cache                                                                                       // 1273
     * @param {string} key The key of the value to get.                                                                // 1274
     * @returns {*} Returns the cached value.                                                                          // 1275
     */                                                                                                                // 1276
    function mapGet(key) {                                                                                             // 1277
      return key == '__proto__' ? undefined : this.__data__[key];                                                      // 1278
    }                                                                                                                  // 1279
                                                                                                                       // 1280
    /**                                                                                                                // 1281
     * Checks if a cached value for `key` exists.                                                                      // 1282
     *                                                                                                                 // 1283
     * @private                                                                                                        // 1284
     * @name has                                                                                                       // 1285
     * @memberOf _.memoize.Cache                                                                                       // 1286
     * @param {string} key The key of the entry to check.                                                              // 1287
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.                                   // 1288
     */                                                                                                                // 1289
    function mapHas(key) {                                                                                             // 1290
      return key != '__proto__' && hasOwnProperty.call(this.__data__, key);                                            // 1291
    }                                                                                                                  // 1292
                                                                                                                       // 1293
    /**                                                                                                                // 1294
     * Sets `value` to `key` of the cache.                                                                             // 1295
     *                                                                                                                 // 1296
     * @private                                                                                                        // 1297
     * @name set                                                                                                       // 1298
     * @memberOf _.memoize.Cache                                                                                       // 1299
     * @param {string} key The key of the value to cache.                                                              // 1300
     * @param {*} value The value to cache.                                                                            // 1301
     * @returns {Object} Returns the cache object.                                                                     // 1302
     */                                                                                                                // 1303
    function mapSet(key, value) {                                                                                      // 1304
      if (key != '__proto__') {                                                                                        // 1305
        this.__data__[key] = value;                                                                                    // 1306
      }                                                                                                                // 1307
      return this;                                                                                                     // 1308
    }                                                                                                                  // 1309
                                                                                                                       // 1310
    /*------------------------------------------------------------------------*/                                       // 1311
                                                                                                                       // 1312
    /**                                                                                                                // 1313
     *                                                                                                                 // 1314
     * Creates a cache object to store unique values.                                                                  // 1315
     *                                                                                                                 // 1316
     * @private                                                                                                        // 1317
     * @param {Array} [values] The values to cache.                                                                    // 1318
     */                                                                                                                // 1319
    function SetCache(values) {                                                                                        // 1320
      var length = values ? values.length : 0;                                                                         // 1321
                                                                                                                       // 1322
      this.data = { 'hash': nativeCreate(null), 'set': new Set };                                                      // 1323
      while (length--) {                                                                                               // 1324
        this.push(values[length]);                                                                                     // 1325
      }                                                                                                                // 1326
    }                                                                                                                  // 1327
                                                                                                                       // 1328
    /**                                                                                                                // 1329
     * Checks if `value` is in `cache` mimicking the return signature of                                               // 1330
     * `_.indexOf` by returning `0` if the value is found, else `-1`.                                                  // 1331
     *                                                                                                                 // 1332
     * @private                                                                                                        // 1333
     * @param {Object} cache The cache to search.                                                                      // 1334
     * @param {*} value The value to search for.                                                                       // 1335
     * @returns {number} Returns `0` if `value` is found, else `-1`.                                                   // 1336
     */                                                                                                                // 1337
    function cacheIndexOf(cache, value) {                                                                              // 1338
      var data = cache.data,                                                                                           // 1339
          result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];             // 1340
                                                                                                                       // 1341
      return result ? 0 : -1;                                                                                          // 1342
    }                                                                                                                  // 1343
                                                                                                                       // 1344
    /**                                                                                                                // 1345
     * Adds `value` to the cache.                                                                                      // 1346
     *                                                                                                                 // 1347
     * @private                                                                                                        // 1348
     * @name push                                                                                                      // 1349
     * @memberOf SetCache                                                                                              // 1350
     * @param {*} value The value to cache.                                                                            // 1351
     */                                                                                                                // 1352
    function cachePush(value) {                                                                                        // 1353
      var data = this.data;                                                                                            // 1354
      if (typeof value == 'string' || isObject(value)) {                                                               // 1355
        data.set.add(value);                                                                                           // 1356
      } else {                                                                                                         // 1357
        data.hash[value] = true;                                                                                       // 1358
      }                                                                                                                // 1359
    }                                                                                                                  // 1360
                                                                                                                       // 1361
    /*------------------------------------------------------------------------*/                                       // 1362
                                                                                                                       // 1363
    /**                                                                                                                // 1364
     * Creates a new array joining `array` with `other`.                                                               // 1365
     *                                                                                                                 // 1366
     * @private                                                                                                        // 1367
     * @param {Array} array The array to join.                                                                         // 1368
     * @param {Array} other The other array to join.                                                                   // 1369
     * @returns {Array} Returns the new concatenated array.                                                            // 1370
     */                                                                                                                // 1371
    function arrayConcat(array, other) {                                                                               // 1372
      var index = -1,                                                                                                  // 1373
          length = array.length,                                                                                       // 1374
          othIndex = -1,                                                                                               // 1375
          othLength = other.length,                                                                                    // 1376
          result = Array(length + othLength);                                                                          // 1377
                                                                                                                       // 1378
      while (++index < length) {                                                                                       // 1379
        result[index] = array[index];                                                                                  // 1380
      }                                                                                                                // 1381
      while (++othIndex < othLength) {                                                                                 // 1382
        result[index++] = other[othIndex];                                                                             // 1383
      }                                                                                                                // 1384
      return result;                                                                                                   // 1385
    }                                                                                                                  // 1386
                                                                                                                       // 1387
    /**                                                                                                                // 1388
     * Copies the values of `source` to `array`.                                                                       // 1389
     *                                                                                                                 // 1390
     * @private                                                                                                        // 1391
     * @param {Array} source The array to copy values from.                                                            // 1392
     * @param {Array} [array=[]] The array to copy values to.                                                          // 1393
     * @returns {Array} Returns `array`.                                                                               // 1394
     */                                                                                                                // 1395
    function arrayCopy(source, array) {                                                                                // 1396
      var index = -1,                                                                                                  // 1397
          length = source.length;                                                                                      // 1398
                                                                                                                       // 1399
      array || (array = Array(length));                                                                                // 1400
      while (++index < length) {                                                                                       // 1401
        array[index] = source[index];                                                                                  // 1402
      }                                                                                                                // 1403
      return array;                                                                                                    // 1404
    }                                                                                                                  // 1405
                                                                                                                       // 1406
    /**                                                                                                                // 1407
     * A specialized version of `_.forEach` for arrays without support for callback                                    // 1408
     * shorthands and `this` binding.                                                                                  // 1409
     *                                                                                                                 // 1410
     * @private                                                                                                        // 1411
     * @param {Array} array The array to iterate over.                                                                 // 1412
     * @param {Function} iteratee The function invoked per iteration.                                                  // 1413
     * @returns {Array} Returns `array`.                                                                               // 1414
     */                                                                                                                // 1415
    function arrayEach(array, iteratee) {                                                                              // 1416
      var index = -1,                                                                                                  // 1417
          length = array.length;                                                                                       // 1418
                                                                                                                       // 1419
      while (++index < length) {                                                                                       // 1420
        if (iteratee(array[index], index, array) === false) {                                                          // 1421
          break;                                                                                                       // 1422
        }                                                                                                              // 1423
      }                                                                                                                // 1424
      return array;                                                                                                    // 1425
    }                                                                                                                  // 1426
                                                                                                                       // 1427
    /**                                                                                                                // 1428
     * A specialized version of `_.forEachRight` for arrays without support for                                        // 1429
     * callback shorthands and `this` binding.                                                                         // 1430
     *                                                                                                                 // 1431
     * @private                                                                                                        // 1432
     * @param {Array} array The array to iterate over.                                                                 // 1433
     * @param {Function} iteratee The function invoked per iteration.                                                  // 1434
     * @returns {Array} Returns `array`.                                                                               // 1435
     */                                                                                                                // 1436
    function arrayEachRight(array, iteratee) {                                                                         // 1437
      var length = array.length;                                                                                       // 1438
                                                                                                                       // 1439
      while (length--) {                                                                                               // 1440
        if (iteratee(array[length], length, array) === false) {                                                        // 1441
          break;                                                                                                       // 1442
        }                                                                                                              // 1443
      }                                                                                                                // 1444
      return array;                                                                                                    // 1445
    }                                                                                                                  // 1446
                                                                                                                       // 1447
    /**                                                                                                                // 1448
     * A specialized version of `_.every` for arrays without support for callback                                      // 1449
     * shorthands and `this` binding.                                                                                  // 1450
     *                                                                                                                 // 1451
     * @private                                                                                                        // 1452
     * @param {Array} array The array to iterate over.                                                                 // 1453
     * @param {Function} predicate The function invoked per iteration.                                                 // 1454
     * @returns {boolean} Returns `true` if all elements pass the predicate check,                                     // 1455
     *  else `false`.                                                                                                  // 1456
     */                                                                                                                // 1457
    function arrayEvery(array, predicate) {                                                                            // 1458
      var index = -1,                                                                                                  // 1459
          length = array.length;                                                                                       // 1460
                                                                                                                       // 1461
      while (++index < length) {                                                                                       // 1462
        if (!predicate(array[index], index, array)) {                                                                  // 1463
          return false;                                                                                                // 1464
        }                                                                                                              // 1465
      }                                                                                                                // 1466
      return true;                                                                                                     // 1467
    }                                                                                                                  // 1468
                                                                                                                       // 1469
    /**                                                                                                                // 1470
     * A specialized version of `baseExtremum` for arrays which invokes `iteratee`                                     // 1471
     * with one argument: (value).                                                                                     // 1472
     *                                                                                                                 // 1473
     * @private                                                                                                        // 1474
     * @param {Array} array The array to iterate over.                                                                 // 1475
     * @param {Function} iteratee The function invoked per iteration.                                                  // 1476
     * @param {Function} comparator The function used to compare values.                                               // 1477
     * @param {*} exValue The initial extremum value.                                                                  // 1478
     * @returns {*} Returns the extremum value.                                                                        // 1479
     */                                                                                                                // 1480
    function arrayExtremum(array, iteratee, comparator, exValue) {                                                     // 1481
      var index = -1,                                                                                                  // 1482
          length = array.length,                                                                                       // 1483
          computed = exValue,                                                                                          // 1484
          result = computed;                                                                                           // 1485
                                                                                                                       // 1486
      while (++index < length) {                                                                                       // 1487
        var value = array[index],                                                                                      // 1488
            current = +iteratee(value);                                                                                // 1489
                                                                                                                       // 1490
        if (comparator(current, computed)) {                                                                           // 1491
          computed = current;                                                                                          // 1492
          result = value;                                                                                              // 1493
        }                                                                                                              // 1494
      }                                                                                                                // 1495
      return result;                                                                                                   // 1496
    }                                                                                                                  // 1497
                                                                                                                       // 1498
    /**                                                                                                                // 1499
     * A specialized version of `_.filter` for arrays without support for callback                                     // 1500
     * shorthands and `this` binding.                                                                                  // 1501
     *                                                                                                                 // 1502
     * @private                                                                                                        // 1503
     * @param {Array} array The array to iterate over.                                                                 // 1504
     * @param {Function} predicate The function invoked per iteration.                                                 // 1505
     * @returns {Array} Returns the new filtered array.                                                                // 1506
     */                                                                                                                // 1507
    function arrayFilter(array, predicate) {                                                                           // 1508
      var index = -1,                                                                                                  // 1509
          length = array.length,                                                                                       // 1510
          resIndex = -1,                                                                                               // 1511
          result = [];                                                                                                 // 1512
                                                                                                                       // 1513
      while (++index < length) {                                                                                       // 1514
        var value = array[index];                                                                                      // 1515
        if (predicate(value, index, array)) {                                                                          // 1516
          result[++resIndex] = value;                                                                                  // 1517
        }                                                                                                              // 1518
      }                                                                                                                // 1519
      return result;                                                                                                   // 1520
    }                                                                                                                  // 1521
                                                                                                                       // 1522
    /**                                                                                                                // 1523
     * A specialized version of `_.map` for arrays without support for callback                                        // 1524
     * shorthands and `this` binding.                                                                                  // 1525
     *                                                                                                                 // 1526
     * @private                                                                                                        // 1527
     * @param {Array} array The array to iterate over.                                                                 // 1528
     * @param {Function} iteratee The function invoked per iteration.                                                  // 1529
     * @returns {Array} Returns the new mapped array.                                                                  // 1530
     */                                                                                                                // 1531
    function arrayMap(array, iteratee) {                                                                               // 1532
      var index = -1,                                                                                                  // 1533
          length = array.length,                                                                                       // 1534
          result = Array(length);                                                                                      // 1535
                                                                                                                       // 1536
      while (++index < length) {                                                                                       // 1537
        result[index] = iteratee(array[index], index, array);                                                          // 1538
      }                                                                                                                // 1539
      return result;                                                                                                   // 1540
    }                                                                                                                  // 1541
                                                                                                                       // 1542
    /**                                                                                                                // 1543
     * Appends the elements of `values` to `array`.                                                                    // 1544
     *                                                                                                                 // 1545
     * @private                                                                                                        // 1546
     * @param {Array} array The array to modify.                                                                       // 1547
     * @param {Array} values The values to append.                                                                     // 1548
     * @returns {Array} Returns `array`.                                                                               // 1549
     */                                                                                                                // 1550
    function arrayPush(array, values) {                                                                                // 1551
      var index = -1,                                                                                                  // 1552
          length = values.length,                                                                                      // 1553
          offset = array.length;                                                                                       // 1554
                                                                                                                       // 1555
      while (++index < length) {                                                                                       // 1556
        array[offset + index] = values[index];                                                                         // 1557
      }                                                                                                                // 1558
      return array;                                                                                                    // 1559
    }                                                                                                                  // 1560
                                                                                                                       // 1561
    /**                                                                                                                // 1562
     * A specialized version of `_.reduce` for arrays without support for callback                                     // 1563
     * shorthands and `this` binding.                                                                                  // 1564
     *                                                                                                                 // 1565
     * @private                                                                                                        // 1566
     * @param {Array} array The array to iterate over.                                                                 // 1567
     * @param {Function} iteratee The function invoked per iteration.                                                  // 1568
     * @param {*} [accumulator] The initial value.                                                                     // 1569
     * @param {boolean} [initFromArray] Specify using the first element of `array`                                     // 1570
     *  as the initial value.                                                                                          // 1571
     * @returns {*} Returns the accumulated value.                                                                     // 1572
     */                                                                                                                // 1573
    function arrayReduce(array, iteratee, accumulator, initFromArray) {                                                // 1574
      var index = -1,                                                                                                  // 1575
          length = array.length;                                                                                       // 1576
                                                                                                                       // 1577
      if (initFromArray && length) {                                                                                   // 1578
        accumulator = array[++index];                                                                                  // 1579
      }                                                                                                                // 1580
      while (++index < length) {                                                                                       // 1581
        accumulator = iteratee(accumulator, array[index], index, array);                                               // 1582
      }                                                                                                                // 1583
      return accumulator;                                                                                              // 1584
    }                                                                                                                  // 1585
                                                                                                                       // 1586
    /**                                                                                                                // 1587
     * A specialized version of `_.reduceRight` for arrays without support for                                         // 1588
     * callback shorthands and `this` binding.                                                                         // 1589
     *                                                                                                                 // 1590
     * @private                                                                                                        // 1591
     * @param {Array} array The array to iterate over.                                                                 // 1592
     * @param {Function} iteratee The function invoked per iteration.                                                  // 1593
     * @param {*} [accumulator] The initial value.                                                                     // 1594
     * @param {boolean} [initFromArray] Specify using the last element of `array`                                      // 1595
     *  as the initial value.                                                                                          // 1596
     * @returns {*} Returns the accumulated value.                                                                     // 1597
     */                                                                                                                // 1598
    function arrayReduceRight(array, iteratee, accumulator, initFromArray) {                                           // 1599
      var length = array.length;                                                                                       // 1600
      if (initFromArray && length) {                                                                                   // 1601
        accumulator = array[--length];                                                                                 // 1602
      }                                                                                                                // 1603
      while (length--) {                                                                                               // 1604
        accumulator = iteratee(accumulator, array[length], length, array);                                             // 1605
      }                                                                                                                // 1606
      return accumulator;                                                                                              // 1607
    }                                                                                                                  // 1608
                                                                                                                       // 1609
    /**                                                                                                                // 1610
     * A specialized version of `_.some` for arrays without support for callback                                       // 1611
     * shorthands and `this` binding.                                                                                  // 1612
     *                                                                                                                 // 1613
     * @private                                                                                                        // 1614
     * @param {Array} array The array to iterate over.                                                                 // 1615
     * @param {Function} predicate The function invoked per iteration.                                                 // 1616
     * @returns {boolean} Returns `true` if any element passes the predicate check,                                    // 1617
     *  else `false`.                                                                                                  // 1618
     */                                                                                                                // 1619
    function arraySome(array, predicate) {                                                                             // 1620
      var index = -1,                                                                                                  // 1621
          length = array.length;                                                                                       // 1622
                                                                                                                       // 1623
      while (++index < length) {                                                                                       // 1624
        if (predicate(array[index], index, array)) {                                                                   // 1625
          return true;                                                                                                 // 1626
        }                                                                                                              // 1627
      }                                                                                                                // 1628
      return false;                                                                                                    // 1629
    }                                                                                                                  // 1630
                                                                                                                       // 1631
    /**                                                                                                                // 1632
     * A specialized version of `_.sum` for arrays without support for callback                                        // 1633
     * shorthands and `this` binding..                                                                                 // 1634
     *                                                                                                                 // 1635
     * @private                                                                                                        // 1636
     * @param {Array} array The array to iterate over.                                                                 // 1637
     * @param {Function} iteratee The function invoked per iteration.                                                  // 1638
     * @returns {number} Returns the sum.                                                                              // 1639
     */                                                                                                                // 1640
    function arraySum(array, iteratee) {                                                                               // 1641
      var length = array.length,                                                                                       // 1642
          result = 0;                                                                                                  // 1643
                                                                                                                       // 1644
      while (length--) {                                                                                               // 1645
        result += +iteratee(array[length]) || 0;                                                                       // 1646
      }                                                                                                                // 1647
      return result;                                                                                                   // 1648
    }                                                                                                                  // 1649
                                                                                                                       // 1650
    /**                                                                                                                // 1651
     * Used by `_.defaults` to customize its `_.assign` use.                                                           // 1652
     *                                                                                                                 // 1653
     * @private                                                                                                        // 1654
     * @param {*} objectValue The destination object property value.                                                   // 1655
     * @param {*} sourceValue The source object property value.                                                        // 1656
     * @returns {*} Returns the value to assign to the destination object.                                             // 1657
     */                                                                                                                // 1658
    function assignDefaults(objectValue, sourceValue) {                                                                // 1659
      return objectValue === undefined ? sourceValue : objectValue;                                                    // 1660
    }                                                                                                                  // 1661
                                                                                                                       // 1662
    /**                                                                                                                // 1663
     * Used by `_.template` to customize its `_.assign` use.                                                           // 1664
     *                                                                                                                 // 1665
     * **Note:** This function is like `assignDefaults` except that it ignores                                         // 1666
     * inherited property values when checking if a property is `undefined`.                                           // 1667
     *                                                                                                                 // 1668
     * @private                                                                                                        // 1669
     * @param {*} objectValue The destination object property value.                                                   // 1670
     * @param {*} sourceValue The source object property value.                                                        // 1671
     * @param {string} key The key associated with the object and source values.                                       // 1672
     * @param {Object} object The destination object.                                                                  // 1673
     * @returns {*} Returns the value to assign to the destination object.                                             // 1674
     */                                                                                                                // 1675
    function assignOwnDefaults(objectValue, sourceValue, key, object) {                                                // 1676
      return (objectValue === undefined || !hasOwnProperty.call(object, key))                                          // 1677
        ? sourceValue                                                                                                  // 1678
        : objectValue;                                                                                                 // 1679
    }                                                                                                                  // 1680
                                                                                                                       // 1681
    /**                                                                                                                // 1682
     * A specialized version of `_.assign` for customizing assigned values without                                     // 1683
     * support for argument juggling, multiple sources, and `this` binding `customizer`                                // 1684
     * functions.                                                                                                      // 1685
     *                                                                                                                 // 1686
     * @private                                                                                                        // 1687
     * @param {Object} object The destination object.                                                                  // 1688
     * @param {Object} source The source object.                                                                       // 1689
     * @param {Function} customizer The function to customize assigned values.                                         // 1690
     * @returns {Object} Returns `object`.                                                                             // 1691
     */                                                                                                                // 1692
    function assignWith(object, source, customizer) {                                                                  // 1693
      var index = -1,                                                                                                  // 1694
          props = keys(source),                                                                                        // 1695
          length = props.length;                                                                                       // 1696
                                                                                                                       // 1697
      while (++index < length) {                                                                                       // 1698
        var key = props[index],                                                                                        // 1699
            value = object[key],                                                                                       // 1700
            result = customizer(value, source[key], key, object, source);                                              // 1701
                                                                                                                       // 1702
        if ((result === result ? (result !== value) : (value === value)) ||                                            // 1703
            (value === undefined && !(key in object))) {                                                               // 1704
          object[key] = result;                                                                                        // 1705
        }                                                                                                              // 1706
      }                                                                                                                // 1707
      return object;                                                                                                   // 1708
    }                                                                                                                  // 1709
                                                                                                                       // 1710
    /**                                                                                                                // 1711
     * The base implementation of `_.assign` without support for argument juggling,                                    // 1712
     * multiple sources, and `customizer` functions.                                                                   // 1713
     *                                                                                                                 // 1714
     * @private                                                                                                        // 1715
     * @param {Object} object The destination object.                                                                  // 1716
     * @param {Object} source The source object.                                                                       // 1717
     * @returns {Object} Returns `object`.                                                                             // 1718
     */                                                                                                                // 1719
    function baseAssign(object, source) {                                                                              // 1720
      return source == null                                                                                            // 1721
        ? object                                                                                                       // 1722
        : baseCopy(source, keys(source), object);                                                                      // 1723
    }                                                                                                                  // 1724
                                                                                                                       // 1725
    /**                                                                                                                // 1726
     * The base implementation of `_.at` without support for string collections                                        // 1727
     * and individual key arguments.                                                                                   // 1728
     *                                                                                                                 // 1729
     * @private                                                                                                        // 1730
     * @param {Array|Object} collection The collection to iterate over.                                                // 1731
     * @param {number[]|string[]} props The property names or indexes of elements to pick.                             // 1732
     * @returns {Array} Returns the new array of picked elements.                                                      // 1733
     */                                                                                                                // 1734
    function baseAt(collection, props) {                                                                               // 1735
      var index = -1,                                                                                                  // 1736
          isNil = collection == null,                                                                                  // 1737
          isArr = !isNil && isArrayLike(collection),                                                                   // 1738
          length = isArr ? collection.length : 0,                                                                      // 1739
          propsLength = props.length,                                                                                  // 1740
          result = Array(propsLength);                                                                                 // 1741
                                                                                                                       // 1742
      while(++index < propsLength) {                                                                                   // 1743
        var key = props[index];                                                                                        // 1744
        if (isArr) {                                                                                                   // 1745
          result[index] = isIndex(key, length) ? collection[key] : undefined;                                          // 1746
        } else {                                                                                                       // 1747
          result[index] = isNil ? undefined : collection[key];                                                         // 1748
        }                                                                                                              // 1749
      }                                                                                                                // 1750
      return result;                                                                                                   // 1751
    }                                                                                                                  // 1752
                                                                                                                       // 1753
    /**                                                                                                                // 1754
     * Copies properties of `source` to `object`.                                                                      // 1755
     *                                                                                                                 // 1756
     * @private                                                                                                        // 1757
     * @param {Object} source The object to copy properties from.                                                      // 1758
     * @param {Array} props The property names to copy.                                                                // 1759
     * @param {Object} [object={}] The object to copy properties to.                                                   // 1760
     * @returns {Object} Returns `object`.                                                                             // 1761
     */                                                                                                                // 1762
    function baseCopy(source, props, object) {                                                                         // 1763
      object || (object = {});                                                                                         // 1764
                                                                                                                       // 1765
      var index = -1,                                                                                                  // 1766
          length = props.length;                                                                                       // 1767
                                                                                                                       // 1768
      while (++index < length) {                                                                                       // 1769
        var key = props[index];                                                                                        // 1770
        object[key] = source[key];                                                                                     // 1771
      }                                                                                                                // 1772
      return object;                                                                                                   // 1773
    }                                                                                                                  // 1774
                                                                                                                       // 1775
    /**                                                                                                                // 1776
     * The base implementation of `_.callback` which supports specifying the                                           // 1777
     * number of arguments to provide to `func`.                                                                       // 1778
     *                                                                                                                 // 1779
     * @private                                                                                                        // 1780
     * @param {*} [func=_.identity] The value to convert to a callback.                                                // 1781
     * @param {*} [thisArg] The `this` binding of `func`.                                                              // 1782
     * @param {number} [argCount] The number of arguments to provide to `func`.                                        // 1783
     * @returns {Function} Returns the callback.                                                                       // 1784
     */                                                                                                                // 1785
    function baseCallback(func, thisArg, argCount) {                                                                   // 1786
      var type = typeof func;                                                                                          // 1787
      if (type == 'function') {                                                                                        // 1788
        return thisArg === undefined                                                                                   // 1789
          ? func                                                                                                       // 1790
          : bindCallback(func, thisArg, argCount);                                                                     // 1791
      }                                                                                                                // 1792
      if (func == null) {                                                                                              // 1793
        return identity;                                                                                               // 1794
      }                                                                                                                // 1795
      if (type == 'object') {                                                                                          // 1796
        return baseMatches(func);                                                                                      // 1797
      }                                                                                                                // 1798
      return thisArg === undefined                                                                                     // 1799
        ? property(func)                                                                                               // 1800
        : baseMatchesProperty(func, thisArg);                                                                          // 1801
    }                                                                                                                  // 1802
                                                                                                                       // 1803
    /**                                                                                                                // 1804
     * The base implementation of `_.clone` without support for argument juggling                                      // 1805
     * and `this` binding `customizer` functions.                                                                      // 1806
     *                                                                                                                 // 1807
     * @private                                                                                                        // 1808
     * @param {*} value The value to clone.                                                                            // 1809
     * @param {boolean} [isDeep] Specify a deep clone.                                                                 // 1810
     * @param {Function} [customizer] The function to customize cloning values.                                        // 1811
     * @param {string} [key] The key of `value`.                                                                       // 1812
     * @param {Object} [object] The object `value` belongs to.                                                         // 1813
     * @param {Array} [stackA=[]] Tracks traversed source objects.                                                     // 1814
     * @param {Array} [stackB=[]] Associates clones with source counterparts.                                          // 1815
     * @returns {*} Returns the cloned value.                                                                          // 1816
     */                                                                                                                // 1817
    function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {                                       // 1818
      var result;                                                                                                      // 1819
      if (customizer) {                                                                                                // 1820
        result = object ? customizer(value, key, object) : customizer(value);                                          // 1821
      }                                                                                                                // 1822
      if (result !== undefined) {                                                                                      // 1823
        return result;                                                                                                 // 1824
      }                                                                                                                // 1825
      if (!isObject(value)) {                                                                                          // 1826
        return value;                                                                                                  // 1827
      }                                                                                                                // 1828
      var isArr = isArray(value);                                                                                      // 1829
      if (isArr) {                                                                                                     // 1830
        result = initCloneArray(value);                                                                                // 1831
        if (!isDeep) {                                                                                                 // 1832
          return arrayCopy(value, result);                                                                             // 1833
        }                                                                                                              // 1834
      } else {                                                                                                         // 1835
        var tag = objToString.call(value),                                                                             // 1836
            isFunc = tag == funcTag;                                                                                   // 1837
                                                                                                                       // 1838
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {                                               // 1839
          if (isHostObject(value)) {                                                                                   // 1840
            return object ? value : {};                                                                                // 1841
          }                                                                                                            // 1842
          result = initCloneObject(isFunc ? {} : value);                                                               // 1843
          if (!isDeep) {                                                                                               // 1844
            return baseAssign(result, value);                                                                          // 1845
          }                                                                                                            // 1846
        } else {                                                                                                       // 1847
          return cloneableTags[tag]                                                                                    // 1848
            ? initCloneByTag(value, tag, isDeep)                                                                       // 1849
            : (object ? value : {});                                                                                   // 1850
        }                                                                                                              // 1851
      }                                                                                                                // 1852
      // Check for circular references and return its corresponding clone.                                             // 1853
      stackA || (stackA = []);                                                                                         // 1854
      stackB || (stackB = []);                                                                                         // 1855
                                                                                                                       // 1856
      var length = stackA.length;                                                                                      // 1857
      while (length--) {                                                                                               // 1858
        if (stackA[length] == value) {                                                                                 // 1859
          return stackB[length];                                                                                       // 1860
        }                                                                                                              // 1861
      }                                                                                                                // 1862
      // Add the source value to the stack of traversed objects and associate it with its clone.                       // 1863
      stackA.push(value);                                                                                              // 1864
      stackB.push(result);                                                                                             // 1865
                                                                                                                       // 1866
      // Recursively populate clone (susceptible to call stack limits).                                                // 1867
      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {                                                // 1868
        result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);                             // 1869
      });                                                                                                              // 1870
      return result;                                                                                                   // 1871
    }                                                                                                                  // 1872
                                                                                                                       // 1873
    /**                                                                                                                // 1874
     * The base implementation of `_.create` without support for assigning                                             // 1875
     * properties to the created object.                                                                               // 1876
     *                                                                                                                 // 1877
     * @private                                                                                                        // 1878
     * @param {Object} prototype The object to inherit from.                                                           // 1879
     * @returns {Object} Returns the new object.                                                                       // 1880
     */                                                                                                                // 1881
    var baseCreate = (function() {                                                                                     // 1882
      function object() {}                                                                                             // 1883
      return function(prototype) {                                                                                     // 1884
        if (isObject(prototype)) {                                                                                     // 1885
          object.prototype = prototype;                                                                                // 1886
          var result = new object;                                                                                     // 1887
          object.prototype = undefined;                                                                                // 1888
        }                                                                                                              // 1889
        return result || {};                                                                                           // 1890
      };                                                                                                               // 1891
    }());                                                                                                              // 1892
                                                                                                                       // 1893
    /**                                                                                                                // 1894
     * The base implementation of `_.delay` and `_.defer` which accepts an index                                       // 1895
     * of where to slice the arguments to provide to `func`.                                                           // 1896
     *                                                                                                                 // 1897
     * @private                                                                                                        // 1898
     * @param {Function} func The function to delay.                                                                   // 1899
     * @param {number} wait The number of milliseconds to delay invocation.                                            // 1900
     * @param {Object} args The arguments provide to `func`.                                                           // 1901
     * @returns {number} Returns the timer id.                                                                         // 1902
     */                                                                                                                // 1903
    function baseDelay(func, wait, args) {                                                                             // 1904
      if (typeof func != 'function') {                                                                                 // 1905
        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 1906
      }                                                                                                                // 1907
      return setTimeout(function() { func.apply(undefined, args); }, wait);                                            // 1908
    }                                                                                                                  // 1909
                                                                                                                       // 1910
    /**                                                                                                                // 1911
     * The base implementation of `_.difference` which accepts a single array                                          // 1912
     * of values to exclude.                                                                                           // 1913
     *                                                                                                                 // 1914
     * @private                                                                                                        // 1915
     * @param {Array} array The array to inspect.                                                                      // 1916
     * @param {Array} values The values to exclude.                                                                    // 1917
     * @returns {Array} Returns the new array of filtered values.                                                      // 1918
     */                                                                                                                // 1919
    function baseDifference(array, values) {                                                                           // 1920
      var length = array ? array.length : 0,                                                                           // 1921
          result = [];                                                                                                 // 1922
                                                                                                                       // 1923
      if (!length) {                                                                                                   // 1924
        return result;                                                                                                 // 1925
      }                                                                                                                // 1926
      var index = -1,                                                                                                  // 1927
          indexOf = getIndexOf(),                                                                                      // 1928
          isCommon = indexOf === baseIndexOf,                                                                          // 1929
          cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,                        // 1930
          valuesLength = values.length;                                                                                // 1931
                                                                                                                       // 1932
      if (cache) {                                                                                                     // 1933
        indexOf = cacheIndexOf;                                                                                        // 1934
        isCommon = false;                                                                                              // 1935
        values = cache;                                                                                                // 1936
      }                                                                                                                // 1937
      outer:                                                                                                           // 1938
      while (++index < length) {                                                                                       // 1939
        var value = array[index];                                                                                      // 1940
                                                                                                                       // 1941
        if (isCommon && value === value) {                                                                             // 1942
          var valuesIndex = valuesLength;                                                                              // 1943
          while (valuesIndex--) {                                                                                      // 1944
            if (values[valuesIndex] === value) {                                                                       // 1945
              continue outer;                                                                                          // 1946
            }                                                                                                          // 1947
          }                                                                                                            // 1948
          result.push(value);                                                                                          // 1949
        }                                                                                                              // 1950
        else if (indexOf(values, value, 0) < 0) {                                                                      // 1951
          result.push(value);                                                                                          // 1952
        }                                                                                                              // 1953
      }                                                                                                                // 1954
      return result;                                                                                                   // 1955
    }                                                                                                                  // 1956
                                                                                                                       // 1957
    /**                                                                                                                // 1958
     * The base implementation of `_.forEach` without support for callback                                             // 1959
     * shorthands and `this` binding.                                                                                  // 1960
     *                                                                                                                 // 1961
     * @private                                                                                                        // 1962
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 1963
     * @param {Function} iteratee The function invoked per iteration.                                                  // 1964
     * @returns {Array|Object|string} Returns `collection`.                                                            // 1965
     */                                                                                                                // 1966
    var baseEach = createBaseEach(baseForOwn);                                                                         // 1967
                                                                                                                       // 1968
    /**                                                                                                                // 1969
     * The base implementation of `_.forEachRight` without support for callback                                        // 1970
     * shorthands and `this` binding.                                                                                  // 1971
     *                                                                                                                 // 1972
     * @private                                                                                                        // 1973
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 1974
     * @param {Function} iteratee The function invoked per iteration.                                                  // 1975
     * @returns {Array|Object|string} Returns `collection`.                                                            // 1976
     */                                                                                                                // 1977
    var baseEachRight = createBaseEach(baseForOwnRight, true);                                                         // 1978
                                                                                                                       // 1979
    /**                                                                                                                // 1980
     * The base implementation of `_.every` without support for callback                                               // 1981
     * shorthands and `this` binding.                                                                                  // 1982
     *                                                                                                                 // 1983
     * @private                                                                                                        // 1984
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 1985
     * @param {Function} predicate The function invoked per iteration.                                                 // 1986
     * @returns {boolean} Returns `true` if all elements pass the predicate check,                                     // 1987
     *  else `false`                                                                                                   // 1988
     */                                                                                                                // 1989
    function baseEvery(collection, predicate) {                                                                        // 1990
      var result = true;                                                                                               // 1991
      baseEach(collection, function(value, index, collection) {                                                        // 1992
        result = !!predicate(value, index, collection);                                                                // 1993
        return result;                                                                                                 // 1994
      });                                                                                                              // 1995
      return result;                                                                                                   // 1996
    }                                                                                                                  // 1997
                                                                                                                       // 1998
    /**                                                                                                                // 1999
     * Gets the extremum value of `collection` invoking `iteratee` for each value                                      // 2000
     * in `collection` to generate the criterion by which the value is ranked.                                         // 2001
     * The `iteratee` is invoked with three arguments: (value, index|key, collection).                                 // 2002
     *                                                                                                                 // 2003
     * @private                                                                                                        // 2004
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 2005
     * @param {Function} iteratee The function invoked per iteration.                                                  // 2006
     * @param {Function} comparator The function used to compare values.                                               // 2007
     * @param {*} exValue The initial extremum value.                                                                  // 2008
     * @returns {*} Returns the extremum value.                                                                        // 2009
     */                                                                                                                // 2010
    function baseExtremum(collection, iteratee, comparator, exValue) {                                                 // 2011
      var computed = exValue,                                                                                          // 2012
          result = computed;                                                                                           // 2013
                                                                                                                       // 2014
      baseEach(collection, function(value, index, collection) {                                                        // 2015
        var current = +iteratee(value, index, collection);                                                             // 2016
        if (comparator(current, computed) || (current === exValue && current === result)) {                            // 2017
          computed = current;                                                                                          // 2018
          result = value;                                                                                              // 2019
        }                                                                                                              // 2020
      });                                                                                                              // 2021
      return result;                                                                                                   // 2022
    }                                                                                                                  // 2023
                                                                                                                       // 2024
    /**                                                                                                                // 2025
     * The base implementation of `_.fill` without an iteratee call guard.                                             // 2026
     *                                                                                                                 // 2027
     * @private                                                                                                        // 2028
     * @param {Array} array The array to fill.                                                                         // 2029
     * @param {*} value The value to fill `array` with.                                                                // 2030
     * @param {number} [start=0] The start position.                                                                   // 2031
     * @param {number} [end=array.length] The end position.                                                            // 2032
     * @returns {Array} Returns `array`.                                                                               // 2033
     */                                                                                                                // 2034
    function baseFill(array, value, start, end) {                                                                      // 2035
      var length = array.length;                                                                                       // 2036
                                                                                                                       // 2037
      start = start == null ? 0 : (+start || 0);                                                                       // 2038
      if (start < 0) {                                                                                                 // 2039
        start = -start > length ? 0 : (length + start);                                                                // 2040
      }                                                                                                                // 2041
      end = (end === undefined || end > length) ? length : (+end || 0);                                                // 2042
      if (end < 0) {                                                                                                   // 2043
        end += length;                                                                                                 // 2044
      }                                                                                                                // 2045
      length = start > end ? 0 : (end >>> 0);                                                                          // 2046
      start >>>= 0;                                                                                                    // 2047
                                                                                                                       // 2048
      while (start < length) {                                                                                         // 2049
        array[start++] = value;                                                                                        // 2050
      }                                                                                                                // 2051
      return array;                                                                                                    // 2052
    }                                                                                                                  // 2053
                                                                                                                       // 2054
    /**                                                                                                                // 2055
     * The base implementation of `_.filter` without support for callback                                              // 2056
     * shorthands and `this` binding.                                                                                  // 2057
     *                                                                                                                 // 2058
     * @private                                                                                                        // 2059
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 2060
     * @param {Function} predicate The function invoked per iteration.                                                 // 2061
     * @returns {Array} Returns the new filtered array.                                                                // 2062
     */                                                                                                                // 2063
    function baseFilter(collection, predicate) {                                                                       // 2064
      var result = [];                                                                                                 // 2065
      baseEach(collection, function(value, index, collection) {                                                        // 2066
        if (predicate(value, index, collection)) {                                                                     // 2067
          result.push(value);                                                                                          // 2068
        }                                                                                                              // 2069
      });                                                                                                              // 2070
      return result;                                                                                                   // 2071
    }                                                                                                                  // 2072
                                                                                                                       // 2073
    /**                                                                                                                // 2074
     * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,                            // 2075
     * without support for callback shorthands and `this` binding, which iterates                                      // 2076
     * over `collection` using the provided `eachFunc`.                                                                // 2077
     *                                                                                                                 // 2078
     * @private                                                                                                        // 2079
     * @param {Array|Object|string} collection The collection to search.                                               // 2080
     * @param {Function} predicate The function invoked per iteration.                                                 // 2081
     * @param {Function} eachFunc The function to iterate over `collection`.                                           // 2082
     * @param {boolean} [retKey] Specify returning the key of the found element                                        // 2083
     *  instead of the element itself.                                                                                 // 2084
     * @returns {*} Returns the found element or its key, else `undefined`.                                            // 2085
     */                                                                                                                // 2086
    function baseFind(collection, predicate, eachFunc, retKey) {                                                       // 2087
      var result;                                                                                                      // 2088
      eachFunc(collection, function(value, key, collection) {                                                          // 2089
        if (predicate(value, key, collection)) {                                                                       // 2090
          result = retKey ? key : value;                                                                               // 2091
          return false;                                                                                                // 2092
        }                                                                                                              // 2093
      });                                                                                                              // 2094
      return result;                                                                                                   // 2095
    }                                                                                                                  // 2096
                                                                                                                       // 2097
    /**                                                                                                                // 2098
     * The base implementation of `_.flatten` with added support for restricting                                       // 2099
     * flattening and specifying the start index.                                                                      // 2100
     *                                                                                                                 // 2101
     * @private                                                                                                        // 2102
     * @param {Array} array The array to flatten.                                                                      // 2103
     * @param {boolean} [isDeep] Specify a deep flatten.                                                               // 2104
     * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.                                         // 2105
     * @param {Array} [result=[]] The initial result value.                                                            // 2106
     * @returns {Array} Returns the new flattened array.                                                               // 2107
     */                                                                                                                // 2108
    function baseFlatten(array, isDeep, isStrict, result) {                                                            // 2109
      result || (result = []);                                                                                         // 2110
                                                                                                                       // 2111
      var index = -1,                                                                                                  // 2112
          length = array.length;                                                                                       // 2113
                                                                                                                       // 2114
      while (++index < length) {                                                                                       // 2115
        var value = array[index];                                                                                      // 2116
        if (isObjectLike(value) && isArrayLike(value) &&                                                               // 2117
            (isStrict || isArray(value) || isArguments(value))) {                                                      // 2118
          if (isDeep) {                                                                                                // 2119
            // Recursively flatten arrays (susceptible to call stack limits).                                          // 2120
            baseFlatten(value, isDeep, isStrict, result);                                                              // 2121
          } else {                                                                                                     // 2122
            arrayPush(result, value);                                                                                  // 2123
          }                                                                                                            // 2124
        } else if (!isStrict) {                                                                                        // 2125
          result[result.length] = value;                                                                               // 2126
        }                                                                                                              // 2127
      }                                                                                                                // 2128
      return result;                                                                                                   // 2129
    }                                                                                                                  // 2130
                                                                                                                       // 2131
    /**                                                                                                                // 2132
     * The base implementation of `baseForIn` and `baseForOwn` which iterates                                          // 2133
     * over `object` properties returned by `keysFunc` invoking `iteratee` for                                         // 2134
     * each property. Iteratee functions may exit iteration early by explicitly                                        // 2135
     * returning `false`.                                                                                              // 2136
     *                                                                                                                 // 2137
     * @private                                                                                                        // 2138
     * @param {Object} object The object to iterate over.                                                              // 2139
     * @param {Function} iteratee The function invoked per iteration.                                                  // 2140
     * @param {Function} keysFunc The function to get the keys of `object`.                                            // 2141
     * @returns {Object} Returns `object`.                                                                             // 2142
     */                                                                                                                // 2143
    var baseFor = createBaseFor();                                                                                     // 2144
                                                                                                                       // 2145
    /**                                                                                                                // 2146
     * This function is like `baseFor` except that it iterates over properties                                         // 2147
     * in the opposite order.                                                                                          // 2148
     *                                                                                                                 // 2149
     * @private                                                                                                        // 2150
     * @param {Object} object The object to iterate over.                                                              // 2151
     * @param {Function} iteratee The function invoked per iteration.                                                  // 2152
     * @param {Function} keysFunc The function to get the keys of `object`.                                            // 2153
     * @returns {Object} Returns `object`.                                                                             // 2154
     */                                                                                                                // 2155
    var baseForRight = createBaseFor(true);                                                                            // 2156
                                                                                                                       // 2157
    /**                                                                                                                // 2158
     * The base implementation of `_.forIn` without support for callback                                               // 2159
     * shorthands and `this` binding.                                                                                  // 2160
     *                                                                                                                 // 2161
     * @private                                                                                                        // 2162
     * @param {Object} object The object to iterate over.                                                              // 2163
     * @param {Function} iteratee The function invoked per iteration.                                                  // 2164
     * @returns {Object} Returns `object`.                                                                             // 2165
     */                                                                                                                // 2166
    function baseForIn(object, iteratee) {                                                                             // 2167
      return baseFor(object, iteratee, keysIn);                                                                        // 2168
    }                                                                                                                  // 2169
                                                                                                                       // 2170
    /**                                                                                                                // 2171
     * The base implementation of `_.forOwn` without support for callback                                              // 2172
     * shorthands and `this` binding.                                                                                  // 2173
     *                                                                                                                 // 2174
     * @private                                                                                                        // 2175
     * @param {Object} object The object to iterate over.                                                              // 2176
     * @param {Function} iteratee The function invoked per iteration.                                                  // 2177
     * @returns {Object} Returns `object`.                                                                             // 2178
     */                                                                                                                // 2179
    function baseForOwn(object, iteratee) {                                                                            // 2180
      return baseFor(object, iteratee, keys);                                                                          // 2181
    }                                                                                                                  // 2182
                                                                                                                       // 2183
    /**                                                                                                                // 2184
     * The base implementation of `_.forOwnRight` without support for callback                                         // 2185
     * shorthands and `this` binding.                                                                                  // 2186
     *                                                                                                                 // 2187
     * @private                                                                                                        // 2188
     * @param {Object} object The object to iterate over.                                                              // 2189
     * @param {Function} iteratee The function invoked per iteration.                                                  // 2190
     * @returns {Object} Returns `object`.                                                                             // 2191
     */                                                                                                                // 2192
    function baseForOwnRight(object, iteratee) {                                                                       // 2193
      return baseForRight(object, iteratee, keys);                                                                     // 2194
    }                                                                                                                  // 2195
                                                                                                                       // 2196
    /**                                                                                                                // 2197
     * The base implementation of `_.functions` which creates an array of                                              // 2198
     * `object` function property names filtered from those provided.                                                  // 2199
     *                                                                                                                 // 2200
     * @private                                                                                                        // 2201
     * @param {Object} object The object to inspect.                                                                   // 2202
     * @param {Array} props The property names to filter.                                                              // 2203
     * @returns {Array} Returns the new array of filtered property names.                                              // 2204
     */                                                                                                                // 2205
    function baseFunctions(object, props) {                                                                            // 2206
      var index = -1,                                                                                                  // 2207
          length = props.length,                                                                                       // 2208
          resIndex = -1,                                                                                               // 2209
          result = [];                                                                                                 // 2210
                                                                                                                       // 2211
      while (++index < length) {                                                                                       // 2212
        var key = props[index];                                                                                        // 2213
        if (isFunction(object[key])) {                                                                                 // 2214
          result[++resIndex] = key;                                                                                    // 2215
        }                                                                                                              // 2216
      }                                                                                                                // 2217
      return result;                                                                                                   // 2218
    }                                                                                                                  // 2219
                                                                                                                       // 2220
    /**                                                                                                                // 2221
     * The base implementation of `get` without support for string paths                                               // 2222
     * and default values.                                                                                             // 2223
     *                                                                                                                 // 2224
     * @private                                                                                                        // 2225
     * @param {Object} object The object to query.                                                                     // 2226
     * @param {Array} path The path of the property to get.                                                            // 2227
     * @param {string} [pathKey] The key representation of path.                                                       // 2228
     * @returns {*} Returns the resolved value.                                                                        // 2229
     */                                                                                                                // 2230
    function baseGet(object, path, pathKey) {                                                                          // 2231
      if (object == null) {                                                                                            // 2232
        return;                                                                                                        // 2233
      }                                                                                                                // 2234
      object = toObject(object);                                                                                       // 2235
      if (pathKey !== undefined && pathKey in object) {                                                                // 2236
        path = [pathKey];                                                                                              // 2237
      }                                                                                                                // 2238
      var index = 0,                                                                                                   // 2239
          length = path.length;                                                                                        // 2240
                                                                                                                       // 2241
      while (object != null && index < length) {                                                                       // 2242
        object = toObject(object)[path[index++]];                                                                      // 2243
      }                                                                                                                // 2244
      return (index && index == length) ? object : undefined;                                                          // 2245
    }                                                                                                                  // 2246
                                                                                                                       // 2247
    /**                                                                                                                // 2248
     * The base implementation of `_.isEqual` without support for `this` binding                                       // 2249
     * `customizer` functions.                                                                                         // 2250
     *                                                                                                                 // 2251
     * @private                                                                                                        // 2252
     * @param {*} value The value to compare.                                                                          // 2253
     * @param {*} other The other value to compare.                                                                    // 2254
     * @param {Function} [customizer] The function to customize comparing values.                                      // 2255
     * @param {boolean} [isLoose] Specify performing partial comparisons.                                              // 2256
     * @param {Array} [stackA] Tracks traversed `value` objects.                                                       // 2257
     * @param {Array} [stackB] Tracks traversed `other` objects.                                                       // 2258
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.                                   // 2259
     */                                                                                                                // 2260
    function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {                                          // 2261
      if (value === other) {                                                                                           // 2262
        return true;                                                                                                   // 2263
      }                                                                                                                // 2264
      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {                              // 2265
        return value !== value && other !== other;                                                                     // 2266
      }                                                                                                                // 2267
      return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);                          // 2268
    }                                                                                                                  // 2269
                                                                                                                       // 2270
    /**                                                                                                                // 2271
     * A specialized version of `baseIsEqual` for arrays and objects which performs                                    // 2272
     * deep comparisons and tracks traversed objects enabling objects with circular                                    // 2273
     * references to be compared.                                                                                      // 2274
     *                                                                                                                 // 2275
     * @private                                                                                                        // 2276
     * @param {Object} object The object to compare.                                                                   // 2277
     * @param {Object} other The other object to compare.                                                              // 2278
     * @param {Function} equalFunc The function to determine equivalents of values.                                    // 2279
     * @param {Function} [customizer] The function to customize comparing objects.                                     // 2280
     * @param {boolean} [isLoose] Specify performing partial comparisons.                                              // 2281
     * @param {Array} [stackA=[]] Tracks traversed `value` objects.                                                    // 2282
     * @param {Array} [stackB=[]] Tracks traversed `other` objects.                                                    // 2283
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.                                  // 2284
     */                                                                                                                // 2285
    function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {                          // 2286
      var objIsArr = isArray(object),                                                                                  // 2287
          othIsArr = isArray(other),                                                                                   // 2288
          objTag = arrayTag,                                                                                           // 2289
          othTag = arrayTag;                                                                                           // 2290
                                                                                                                       // 2291
      if (!objIsArr) {                                                                                                 // 2292
        objTag = objToString.call(object);                                                                             // 2293
        if (objTag == argsTag) {                                                                                       // 2294
          objTag = objectTag;                                                                                          // 2295
        } else if (objTag != objectTag) {                                                                              // 2296
          objIsArr = isTypedArray(object);                                                                             // 2297
        }                                                                                                              // 2298
      }                                                                                                                // 2299
      if (!othIsArr) {                                                                                                 // 2300
        othTag = objToString.call(other);                                                                              // 2301
        if (othTag == argsTag) {                                                                                       // 2302
          othTag = objectTag;                                                                                          // 2303
        } else if (othTag != objectTag) {                                                                              // 2304
          othIsArr = isTypedArray(other);                                                                              // 2305
        }                                                                                                              // 2306
      }                                                                                                                // 2307
      var objIsObj = objTag == objectTag && !isHostObject(object),                                                     // 2308
          othIsObj = othTag == objectTag && !isHostObject(other),                                                      // 2309
          isSameTag = objTag == othTag;                                                                                // 2310
                                                                                                                       // 2311
      if (isSameTag && !(objIsArr || objIsObj)) {                                                                      // 2312
        return equalByTag(object, other, objTag);                                                                      // 2313
      }                                                                                                                // 2314
      if (!isLoose) {                                                                                                  // 2315
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),                                     // 2316
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');                                      // 2317
                                                                                                                       // 2318
        if (objIsWrapped || othIsWrapped) {                                                                            // 2319
          return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
        }                                                                                                              // 2321
      }                                                                                                                // 2322
      if (!isSameTag) {                                                                                                // 2323
        return false;                                                                                                  // 2324
      }                                                                                                                // 2325
      // Assume cyclic values are equal.                                                                               // 2326
      // For more information on detecting circular references see https://es5.github.io/#JO.                          // 2327
      stackA || (stackA = []);                                                                                         // 2328
      stackB || (stackB = []);                                                                                         // 2329
                                                                                                                       // 2330
      var length = stackA.length;                                                                                      // 2331
      while (length--) {                                                                                               // 2332
        if (stackA[length] == object) {                                                                                // 2333
          return stackB[length] == other;                                                                              // 2334
        }                                                                                                              // 2335
      }                                                                                                                // 2336
      // Add `object` and `other` to the stack of traversed objects.                                                   // 2337
      stackA.push(object);                                                                                             // 2338
      stackB.push(other);                                                                                              // 2339
                                                                                                                       // 2340
      var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);
                                                                                                                       // 2342
      stackA.pop();                                                                                                    // 2343
      stackB.pop();                                                                                                    // 2344
                                                                                                                       // 2345
      return result;                                                                                                   // 2346
    }                                                                                                                  // 2347
                                                                                                                       // 2348
    /**                                                                                                                // 2349
     * The base implementation of `_.isMatch` without support for callback                                             // 2350
     * shorthands and `this` binding.                                                                                  // 2351
     *                                                                                                                 // 2352
     * @private                                                                                                        // 2353
     * @param {Object} object The object to inspect.                                                                   // 2354
     * @param {Array} matchData The propery names, values, and compare flags to match.                                 // 2355
     * @param {Function} [customizer] The function to customize comparing objects.                                     // 2356
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.                                         // 2357
     */                                                                                                                // 2358
    function baseIsMatch(object, matchData, customizer) {                                                              // 2359
      var index = matchData.length,                                                                                    // 2360
          length = index,                                                                                              // 2361
          noCustomizer = !customizer;                                                                                  // 2362
                                                                                                                       // 2363
      if (object == null) {                                                                                            // 2364
        return !length;                                                                                                // 2365
      }                                                                                                                // 2366
      object = toObject(object);                                                                                       // 2367
      while (index--) {                                                                                                // 2368
        var data = matchData[index];                                                                                   // 2369
        if ((noCustomizer && data[2])                                                                                  // 2370
              ? data[1] !== object[data[0]]                                                                            // 2371
              : !(data[0] in object)                                                                                   // 2372
            ) {                                                                                                        // 2373
          return false;                                                                                                // 2374
        }                                                                                                              // 2375
      }                                                                                                                // 2376
      while (++index < length) {                                                                                       // 2377
        data = matchData[index];                                                                                       // 2378
        var key = data[0],                                                                                             // 2379
            objValue = object[key],                                                                                    // 2380
            srcValue = data[1];                                                                                        // 2381
                                                                                                                       // 2382
        if (noCustomizer && data[2]) {                                                                                 // 2383
          if (objValue === undefined && !(key in object)) {                                                            // 2384
            return false;                                                                                              // 2385
          }                                                                                                            // 2386
        } else {                                                                                                       // 2387
          var result = customizer ? customizer(objValue, srcValue, key) : undefined;                                   // 2388
          if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {                  // 2389
            return false;                                                                                              // 2390
          }                                                                                                            // 2391
        }                                                                                                              // 2392
      }                                                                                                                // 2393
      return true;                                                                                                     // 2394
    }                                                                                                                  // 2395
                                                                                                                       // 2396
    /**                                                                                                                // 2397
     * The base implementation of `_.map` without support for callback shorthands                                      // 2398
     * and `this` binding.                                                                                             // 2399
     *                                                                                                                 // 2400
     * @private                                                                                                        // 2401
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 2402
     * @param {Function} iteratee The function invoked per iteration.                                                  // 2403
     * @returns {Array} Returns the new mapped array.                                                                  // 2404
     */                                                                                                                // 2405
    function baseMap(collection, iteratee) {                                                                           // 2406
      var index = -1,                                                                                                  // 2407
          result = isArrayLike(collection) ? Array(collection.length) : [];                                            // 2408
                                                                                                                       // 2409
      baseEach(collection, function(value, key, collection) {                                                          // 2410
        result[++index] = iteratee(value, key, collection);                                                            // 2411
      });                                                                                                              // 2412
      return result;                                                                                                   // 2413
    }                                                                                                                  // 2414
                                                                                                                       // 2415
    /**                                                                                                                // 2416
     * The base implementation of `_.matches` which does not clone `source`.                                           // 2417
     *                                                                                                                 // 2418
     * @private                                                                                                        // 2419
     * @param {Object} source The object of property values to match.                                                  // 2420
     * @returns {Function} Returns the new function.                                                                   // 2421
     */                                                                                                                // 2422
    function baseMatches(source) {                                                                                     // 2423
      var matchData = getMatchData(source);                                                                            // 2424
      if (matchData.length == 1 && matchData[0][2]) {                                                                  // 2425
        var key = matchData[0][0],                                                                                     // 2426
            value = matchData[0][1];                                                                                   // 2427
                                                                                                                       // 2428
        return function(object) {                                                                                      // 2429
          if (object == null) {                                                                                        // 2430
            return false;                                                                                              // 2431
          }                                                                                                            // 2432
          object = toObject(object);                                                                                   // 2433
          return object[key] === value && (value !== undefined || (key in object));                                    // 2434
        };                                                                                                             // 2435
      }                                                                                                                // 2436
      return function(object) {                                                                                        // 2437
        return baseIsMatch(object, matchData);                                                                         // 2438
      };                                                                                                               // 2439
    }                                                                                                                  // 2440
                                                                                                                       // 2441
    /**                                                                                                                // 2442
     * The base implementation of `_.matchesProperty` which does not clone `srcValue`.                                 // 2443
     *                                                                                                                 // 2444
     * @private                                                                                                        // 2445
     * @param {string} path The path of the property to get.                                                           // 2446
     * @param {*} srcValue The value to compare.                                                                       // 2447
     * @returns {Function} Returns the new function.                                                                   // 2448
     */                                                                                                                // 2449
    function baseMatchesProperty(path, srcValue) {                                                                     // 2450
      var isArr = isArray(path),                                                                                       // 2451
          isCommon = isKey(path) && isStrictComparable(srcValue),                                                      // 2452
          pathKey = (path + '');                                                                                       // 2453
                                                                                                                       // 2454
      path = toPath(path);                                                                                             // 2455
      return function(object) {                                                                                        // 2456
        if (object == null) {                                                                                          // 2457
          return false;                                                                                                // 2458
        }                                                                                                              // 2459
        var key = pathKey;                                                                                             // 2460
        object = toObject(object);                                                                                     // 2461
        if ((isArr || !isCommon) && !(key in object)) {                                                                // 2462
          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));                                // 2463
          if (object == null) {                                                                                        // 2464
            return false;                                                                                              // 2465
          }                                                                                                            // 2466
          key = last(path);                                                                                            // 2467
          object = toObject(object);                                                                                   // 2468
        }                                                                                                              // 2469
        return object[key] === srcValue                                                                                // 2470
          ? (srcValue !== undefined || (key in object))                                                                // 2471
          : baseIsEqual(srcValue, object[key], undefined, true);                                                       // 2472
      };                                                                                                               // 2473
    }                                                                                                                  // 2474
                                                                                                                       // 2475
    /**                                                                                                                // 2476
     * The base implementation of `_.merge` without support for argument juggling,                                     // 2477
     * multiple sources, and `this` binding `customizer` functions.                                                    // 2478
     *                                                                                                                 // 2479
     * @private                                                                                                        // 2480
     * @param {Object} object The destination object.                                                                  // 2481
     * @param {Object} source The source object.                                                                       // 2482
     * @param {Function} [customizer] The function to customize merged values.                                         // 2483
     * @param {Array} [stackA=[]] Tracks traversed source objects.                                                     // 2484
     * @param {Array} [stackB=[]] Associates values with source counterparts.                                          // 2485
     * @returns {Object} Returns `object`.                                                                             // 2486
     */                                                                                                                // 2487
    function baseMerge(object, source, customizer, stackA, stackB) {                                                   // 2488
      if (!isObject(object)) {                                                                                         // 2489
        return object;                                                                                                 // 2490
      }                                                                                                                // 2491
      var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),                                 // 2492
          props = isSrcArr ? undefined : keys(source);                                                                 // 2493
                                                                                                                       // 2494
      arrayEach(props || source, function(srcValue, key) {                                                             // 2495
        if (props) {                                                                                                   // 2496
          key = srcValue;                                                                                              // 2497
          srcValue = source[key];                                                                                      // 2498
        }                                                                                                              // 2499
        if (isObjectLike(srcValue)) {                                                                                  // 2500
          stackA || (stackA = []);                                                                                     // 2501
          stackB || (stackB = []);                                                                                     // 2502
          baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);                                   // 2503
        }                                                                                                              // 2504
        else {                                                                                                         // 2505
          var value = object[key],                                                                                     // 2506
              result = customizer ? customizer(value, srcValue, key, object, source) : undefined,                      // 2507
              isCommon = result === undefined;                                                                         // 2508
                                                                                                                       // 2509
          if (isCommon) {                                                                                              // 2510
            result = srcValue;                                                                                         // 2511
          }                                                                                                            // 2512
          if ((result !== undefined || (isSrcArr && !(key in object))) &&                                              // 2513
              (isCommon || (result === result ? (result !== value) : (value === value)))) {                            // 2514
            object[key] = result;                                                                                      // 2515
          }                                                                                                            // 2516
        }                                                                                                              // 2517
      });                                                                                                              // 2518
      return object;                                                                                                   // 2519
    }                                                                                                                  // 2520
                                                                                                                       // 2521
    /**                                                                                                                // 2522
     * A specialized version of `baseMerge` for arrays and objects which performs                                      // 2523
     * deep merges and tracks traversed objects enabling objects with circular                                         // 2524
     * references to be merged.                                                                                        // 2525
     *                                                                                                                 // 2526
     * @private                                                                                                        // 2527
     * @param {Object} object The destination object.                                                                  // 2528
     * @param {Object} source The source object.                                                                       // 2529
     * @param {string} key The key of the value to merge.                                                              // 2530
     * @param {Function} mergeFunc The function to merge values.                                                       // 2531
     * @param {Function} [customizer] The function to customize merged values.                                         // 2532
     * @param {Array} [stackA=[]] Tracks traversed source objects.                                                     // 2533
     * @param {Array} [stackB=[]] Associates values with source counterparts.                                          // 2534
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.                                  // 2535
     */                                                                                                                // 2536
    function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {                               // 2537
      var length = stackA.length,                                                                                      // 2538
          srcValue = source[key];                                                                                      // 2539
                                                                                                                       // 2540
      while (length--) {                                                                                               // 2541
        if (stackA[length] == srcValue) {                                                                              // 2542
          object[key] = stackB[length];                                                                                // 2543
          return;                                                                                                      // 2544
        }                                                                                                              // 2545
      }                                                                                                                // 2546
      var value = object[key],                                                                                         // 2547
          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,                          // 2548
          isCommon = result === undefined;                                                                             // 2549
                                                                                                                       // 2550
      if (isCommon) {                                                                                                  // 2551
        result = srcValue;                                                                                             // 2552
        if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {                                  // 2553
          result = isArray(value)                                                                                      // 2554
            ? value                                                                                                    // 2555
            : (isArrayLike(value) ? arrayCopy(value) : []);                                                            // 2556
        }                                                                                                              // 2557
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {                                                   // 2558
          result = isArguments(value)                                                                                  // 2559
            ? toPlainObject(value)                                                                                     // 2560
            : (isPlainObject(value) ? value : {});                                                                     // 2561
        }                                                                                                              // 2562
        else {                                                                                                         // 2563
          isCommon = false;                                                                                            // 2564
        }                                                                                                              // 2565
      }                                                                                                                // 2566
      // Add the source value to the stack of traversed objects and associate                                          // 2567
      // it with its merged value.                                                                                     // 2568
      stackA.push(srcValue);                                                                                           // 2569
      stackB.push(result);                                                                                             // 2570
                                                                                                                       // 2571
      if (isCommon) {                                                                                                  // 2572
        // Recursively merge objects and arrays (susceptible to call stack limits).                                    // 2573
        object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);                                         // 2574
      } else if (result === result ? (result !== value) : (value === value)) {                                         // 2575
        object[key] = result;                                                                                          // 2576
      }                                                                                                                // 2577
    }                                                                                                                  // 2578
                                                                                                                       // 2579
    /**                                                                                                                // 2580
     * The base implementation of `_.property` without support for deep paths.                                         // 2581
     *                                                                                                                 // 2582
     * @private                                                                                                        // 2583
     * @param {string} key The key of the property to get.                                                             // 2584
     * @returns {Function} Returns the new function.                                                                   // 2585
     */                                                                                                                // 2586
    function baseProperty(key) {                                                                                       // 2587
      return function(object) {                                                                                        // 2588
        return object == null ? undefined : toObject(object)[key];                                                     // 2589
      };                                                                                                               // 2590
    }                                                                                                                  // 2591
                                                                                                                       // 2592
    /**                                                                                                                // 2593
     * A specialized version of `baseProperty` which supports deep paths.                                              // 2594
     *                                                                                                                 // 2595
     * @private                                                                                                        // 2596
     * @param {Array|string} path The path of the property to get.                                                     // 2597
     * @returns {Function} Returns the new function.                                                                   // 2598
     */                                                                                                                // 2599
    function basePropertyDeep(path) {                                                                                  // 2600
      var pathKey = (path + '');                                                                                       // 2601
      path = toPath(path);                                                                                             // 2602
      return function(object) {                                                                                        // 2603
        return baseGet(object, path, pathKey);                                                                         // 2604
      };                                                                                                               // 2605
    }                                                                                                                  // 2606
                                                                                                                       // 2607
    /**                                                                                                                // 2608
     * The base implementation of `_.pullAt` without support for individual                                            // 2609
     * index arguments and capturing the removed elements.                                                             // 2610
     *                                                                                                                 // 2611
     * @private                                                                                                        // 2612
     * @param {Array} array The array to modify.                                                                       // 2613
     * @param {number[]} indexes The indexes of elements to remove.                                                    // 2614
     * @returns {Array} Returns `array`.                                                                               // 2615
     */                                                                                                                // 2616
    function basePullAt(array, indexes) {                                                                              // 2617
      var length = array ? indexes.length : 0;                                                                         // 2618
      while (length--) {                                                                                               // 2619
        var index = indexes[length];                                                                                   // 2620
        if (index != previous && isIndex(index)) {                                                                     // 2621
          var previous = index;                                                                                        // 2622
          splice.call(array, index, 1);                                                                                // 2623
        }                                                                                                              // 2624
      }                                                                                                                // 2625
      return array;                                                                                                    // 2626
    }                                                                                                                  // 2627
                                                                                                                       // 2628
    /**                                                                                                                // 2629
     * The base implementation of `_.random` without support for argument juggling                                     // 2630
     * and returning floating-point numbers.                                                                           // 2631
     *                                                                                                                 // 2632
     * @private                                                                                                        // 2633
     * @param {number} min The minimum possible value.                                                                 // 2634
     * @param {number} max The maximum possible value.                                                                 // 2635
     * @returns {number} Returns the random number.                                                                    // 2636
     */                                                                                                                // 2637
    function baseRandom(min, max) {                                                                                    // 2638
      return min + nativeFloor(nativeRandom() * (max - min + 1));                                                      // 2639
    }                                                                                                                  // 2640
                                                                                                                       // 2641
    /**                                                                                                                // 2642
     * The base implementation of `_.reduce` and `_.reduceRight` without support                                       // 2643
     * for callback shorthands and `this` binding, which iterates over `collection`                                    // 2644
     * using the provided `eachFunc`.                                                                                  // 2645
     *                                                                                                                 // 2646
     * @private                                                                                                        // 2647
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 2648
     * @param {Function} iteratee The function invoked per iteration.                                                  // 2649
     * @param {*} accumulator The initial value.                                                                       // 2650
     * @param {boolean} initFromCollection Specify using the first or last element                                     // 2651
     *  of `collection` as the initial value.                                                                          // 2652
     * @param {Function} eachFunc The function to iterate over `collection`.                                           // 2653
     * @returns {*} Returns the accumulated value.                                                                     // 2654
     */                                                                                                                // 2655
    function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {                             // 2656
      eachFunc(collection, function(value, index, collection) {                                                        // 2657
        accumulator = initFromCollection                                                                               // 2658
          ? (initFromCollection = false, value)                                                                        // 2659
          : iteratee(accumulator, value, index, collection);                                                           // 2660
      });                                                                                                              // 2661
      return accumulator;                                                                                              // 2662
    }                                                                                                                  // 2663
                                                                                                                       // 2664
    /**                                                                                                                // 2665
     * The base implementation of `setData` without support for hot loop detection.                                    // 2666
     *                                                                                                                 // 2667
     * @private                                                                                                        // 2668
     * @param {Function} func The function to associate metadata with.                                                 // 2669
     * @param {*} data The metadata.                                                                                   // 2670
     * @returns {Function} Returns `func`.                                                                             // 2671
     */                                                                                                                // 2672
    var baseSetData = !metaMap ? identity : function(func, data) {                                                     // 2673
      metaMap.set(func, data);                                                                                         // 2674
      return func;                                                                                                     // 2675
    };                                                                                                                 // 2676
                                                                                                                       // 2677
    /**                                                                                                                // 2678
     * The base implementation of `_.slice` without an iteratee call guard.                                            // 2679
     *                                                                                                                 // 2680
     * @private                                                                                                        // 2681
     * @param {Array} array The array to slice.                                                                        // 2682
     * @param {number} [start=0] The start position.                                                                   // 2683
     * @param {number} [end=array.length] The end position.                                                            // 2684
     * @returns {Array} Returns the slice of `array`.                                                                  // 2685
     */                                                                                                                // 2686
    function baseSlice(array, start, end) {                                                                            // 2687
      var index = -1,                                                                                                  // 2688
          length = array.length;                                                                                       // 2689
                                                                                                                       // 2690
      start = start == null ? 0 : (+start || 0);                                                                       // 2691
      if (start < 0) {                                                                                                 // 2692
        start = -start > length ? 0 : (length + start);                                                                // 2693
      }                                                                                                                // 2694
      end = (end === undefined || end > length) ? length : (+end || 0);                                                // 2695
      if (end < 0) {                                                                                                   // 2696
        end += length;                                                                                                 // 2697
      }                                                                                                                // 2698
      length = start > end ? 0 : ((end - start) >>> 0);                                                                // 2699
      start >>>= 0;                                                                                                    // 2700
                                                                                                                       // 2701
      var result = Array(length);                                                                                      // 2702
      while (++index < length) {                                                                                       // 2703
        result[index] = array[index + start];                                                                          // 2704
      }                                                                                                                // 2705
      return result;                                                                                                   // 2706
    }                                                                                                                  // 2707
                                                                                                                       // 2708
    /**                                                                                                                // 2709
     * The base implementation of `_.some` without support for callback shorthands                                     // 2710
     * and `this` binding.                                                                                             // 2711
     *                                                                                                                 // 2712
     * @private                                                                                                        // 2713
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 2714
     * @param {Function} predicate The function invoked per iteration.                                                 // 2715
     * @returns {boolean} Returns `true` if any element passes the predicate check,                                    // 2716
     *  else `false`.                                                                                                  // 2717
     */                                                                                                                // 2718
    function baseSome(collection, predicate) {                                                                         // 2719
      var result;                                                                                                      // 2720
                                                                                                                       // 2721
      baseEach(collection, function(value, index, collection) {                                                        // 2722
        result = predicate(value, index, collection);                                                                  // 2723
        return !result;                                                                                                // 2724
      });                                                                                                              // 2725
      return !!result;                                                                                                 // 2726
    }                                                                                                                  // 2727
                                                                                                                       // 2728
    /**                                                                                                                // 2729
     * The base implementation of `_.sortBy` which uses `comparer` to define                                           // 2730
     * the sort order of `array` and replaces criteria objects with their                                              // 2731
     * corresponding values.                                                                                           // 2732
     *                                                                                                                 // 2733
     * @private                                                                                                        // 2734
     * @param {Array} array The array to sort.                                                                         // 2735
     * @param {Function} comparer The function to define sort order.                                                   // 2736
     * @returns {Array} Returns `array`.                                                                               // 2737
     */                                                                                                                // 2738
    function baseSortBy(array, comparer) {                                                                             // 2739
      var length = array.length;                                                                                       // 2740
                                                                                                                       // 2741
      array.sort(comparer);                                                                                            // 2742
      while (length--) {                                                                                               // 2743
        array[length] = array[length].value;                                                                           // 2744
      }                                                                                                                // 2745
      return array;                                                                                                    // 2746
    }                                                                                                                  // 2747
                                                                                                                       // 2748
    /**                                                                                                                // 2749
     * The base implementation of `_.sortByOrder` without param guards.                                                // 2750
     *                                                                                                                 // 2751
     * @private                                                                                                        // 2752
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 2753
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.                                       // 2754
     * @param {boolean[]} orders The sort orders of `iteratees`.                                                       // 2755
     * @returns {Array} Returns the new sorted array.                                                                  // 2756
     */                                                                                                                // 2757
    function baseSortByOrder(collection, iteratees, orders) {                                                          // 2758
      var callback = getCallback(),                                                                                    // 2759
          index = -1;                                                                                                  // 2760
                                                                                                                       // 2761
      iteratees = arrayMap(iteratees, function(iteratee) { return callback(iteratee); });                              // 2762
                                                                                                                       // 2763
      var result = baseMap(collection, function(value) {                                                               // 2764
        var criteria = arrayMap(iteratees, function(iteratee) { return iteratee(value); });                            // 2765
        return { 'criteria': criteria, 'index': ++index, 'value': value };                                             // 2766
      });                                                                                                              // 2767
                                                                                                                       // 2768
      return baseSortBy(result, function(object, other) {                                                              // 2769
        return compareMultiple(object, other, orders);                                                                 // 2770
      });                                                                                                              // 2771
    }                                                                                                                  // 2772
                                                                                                                       // 2773
    /**                                                                                                                // 2774
     * The base implementation of `_.sum` without support for callback shorthands                                      // 2775
     * and `this` binding.                                                                                             // 2776
     *                                                                                                                 // 2777
     * @private                                                                                                        // 2778
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 2779
     * @param {Function} iteratee The function invoked per iteration.                                                  // 2780
     * @returns {number} Returns the sum.                                                                              // 2781
     */                                                                                                                // 2782
    function baseSum(collection, iteratee) {                                                                           // 2783
      var result = 0;                                                                                                  // 2784
      baseEach(collection, function(value, index, collection) {                                                        // 2785
        result += +iteratee(value, index, collection) || 0;                                                            // 2786
      });                                                                                                              // 2787
      return result;                                                                                                   // 2788
    }                                                                                                                  // 2789
                                                                                                                       // 2790
    /**                                                                                                                // 2791
     * The base implementation of `_.uniq` without support for callback shorthands                                     // 2792
     * and `this` binding.                                                                                             // 2793
     *                                                                                                                 // 2794
     * @private                                                                                                        // 2795
     * @param {Array} array The array to inspect.                                                                      // 2796
     * @param {Function} [iteratee] The function invoked per iteration.                                                // 2797
     * @returns {Array} Returns the new duplicate free array.                                                          // 2798
     */                                                                                                                // 2799
    function baseUniq(array, iteratee) {                                                                               // 2800
      var index = -1,                                                                                                  // 2801
          indexOf = getIndexOf(),                                                                                      // 2802
          length = array.length,                                                                                       // 2803
          isCommon = indexOf === baseIndexOf,                                                                          // 2804
          isLarge = isCommon && length >= LARGE_ARRAY_SIZE,                                                            // 2805
          seen = isLarge ? createCache() : null,                                                                       // 2806
          result = [];                                                                                                 // 2807
                                                                                                                       // 2808
      if (seen) {                                                                                                      // 2809
        indexOf = cacheIndexOf;                                                                                        // 2810
        isCommon = false;                                                                                              // 2811
      } else {                                                                                                         // 2812
        isLarge = false;                                                                                               // 2813
        seen = iteratee ? [] : result;                                                                                 // 2814
      }                                                                                                                // 2815
      outer:                                                                                                           // 2816
      while (++index < length) {                                                                                       // 2817
        var value = array[index],                                                                                      // 2818
            computed = iteratee ? iteratee(value, index, array) : value;                                               // 2819
                                                                                                                       // 2820
        if (isCommon && value === value) {                                                                             // 2821
          var seenIndex = seen.length;                                                                                 // 2822
          while (seenIndex--) {                                                                                        // 2823
            if (seen[seenIndex] === computed) {                                                                        // 2824
              continue outer;                                                                                          // 2825
            }                                                                                                          // 2826
          }                                                                                                            // 2827
          if (iteratee) {                                                                                              // 2828
            seen.push(computed);                                                                                       // 2829
          }                                                                                                            // 2830
          result.push(value);                                                                                          // 2831
        }                                                                                                              // 2832
        else if (indexOf(seen, computed, 0) < 0) {                                                                     // 2833
          if (iteratee || isLarge) {                                                                                   // 2834
            seen.push(computed);                                                                                       // 2835
          }                                                                                                            // 2836
          result.push(value);                                                                                          // 2837
        }                                                                                                              // 2838
      }                                                                                                                // 2839
      return result;                                                                                                   // 2840
    }                                                                                                                  // 2841
                                                                                                                       // 2842
    /**                                                                                                                // 2843
     * The base implementation of `_.values` and `_.valuesIn` which creates an                                         // 2844
     * array of `object` property values corresponding to the property names                                           // 2845
     * of `props`.                                                                                                     // 2846
     *                                                                                                                 // 2847
     * @private                                                                                                        // 2848
     * @param {Object} object The object to query.                                                                     // 2849
     * @param {Array} props The property names to get values for.                                                      // 2850
     * @returns {Object} Returns the array of property values.                                                         // 2851
     */                                                                                                                // 2852
    function baseValues(object, props) {                                                                               // 2853
      var index = -1,                                                                                                  // 2854
          length = props.length,                                                                                       // 2855
          result = Array(length);                                                                                      // 2856
                                                                                                                       // 2857
      while (++index < length) {                                                                                       // 2858
        result[index] = object[props[index]];                                                                          // 2859
      }                                                                                                                // 2860
      return result;                                                                                                   // 2861
    }                                                                                                                  // 2862
                                                                                                                       // 2863
    /**                                                                                                                // 2864
     * The base implementation of `_.dropRightWhile`, `_.dropWhile`, `_.takeRightWhile`,                               // 2865
     * and `_.takeWhile` without support for callback shorthands and `this` binding.                                   // 2866
     *                                                                                                                 // 2867
     * @private                                                                                                        // 2868
     * @param {Array} array The array to query.                                                                        // 2869
     * @param {Function} predicate The function invoked per iteration.                                                 // 2870
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.                                     // 2871
     * @param {boolean} [fromRight] Specify iterating from right to left.                                              // 2872
     * @returns {Array} Returns the slice of `array`.                                                                  // 2873
     */                                                                                                                // 2874
    function baseWhile(array, predicate, isDrop, fromRight) {                                                          // 2875
      var length = array.length,                                                                                       // 2876
          index = fromRight ? length : -1;                                                                             // 2877
                                                                                                                       // 2878
      while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}                     // 2879
      return isDrop                                                                                                    // 2880
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))                                  // 2881
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));                                 // 2882
    }                                                                                                                  // 2883
                                                                                                                       // 2884
    /**                                                                                                                // 2885
     * The base implementation of `wrapperValue` which returns the result of                                           // 2886
     * performing a sequence of actions on the unwrapped `value`, where each                                           // 2887
     * successive action is supplied the return value of the previous.                                                 // 2888
     *                                                                                                                 // 2889
     * @private                                                                                                        // 2890
     * @param {*} value The unwrapped value.                                                                           // 2891
     * @param {Array} actions Actions to peform to resolve the unwrapped value.                                        // 2892
     * @returns {*} Returns the resolved value.                                                                        // 2893
     */                                                                                                                // 2894
    function baseWrapperValue(value, actions) {                                                                        // 2895
      var result = value;                                                                                              // 2896
      if (result instanceof LazyWrapper) {                                                                             // 2897
        result = result.value();                                                                                       // 2898
      }                                                                                                                // 2899
      var index = -1,                                                                                                  // 2900
          length = actions.length;                                                                                     // 2901
                                                                                                                       // 2902
      while (++index < length) {                                                                                       // 2903
        var action = actions[index];                                                                                   // 2904
        result = action.func.apply(action.thisArg, arrayPush([result], action.args));                                  // 2905
      }                                                                                                                // 2906
      return result;                                                                                                   // 2907
    }                                                                                                                  // 2908
                                                                                                                       // 2909
    /**                                                                                                                // 2910
     * Performs a binary search of `array` to determine the index at which `value`                                     // 2911
     * should be inserted into `array` in order to maintain its sort order.                                            // 2912
     *                                                                                                                 // 2913
     * @private                                                                                                        // 2914
     * @param {Array} array The sorted array to inspect.                                                               // 2915
     * @param {*} value The value to evaluate.                                                                         // 2916
     * @param {boolean} [retHighest] Specify returning the highest qualified index.                                    // 2917
     * @returns {number} Returns the index at which `value` should be inserted                                         // 2918
     *  into `array`.                                                                                                  // 2919
     */                                                                                                                // 2920
    function binaryIndex(array, value, retHighest) {                                                                   // 2921
      var low = 0,                                                                                                     // 2922
          high = array ? array.length : low;                                                                           // 2923
                                                                                                                       // 2924
      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {                              // 2925
        while (low < high) {                                                                                           // 2926
          var mid = (low + high) >>> 1,                                                                                // 2927
              computed = array[mid];                                                                                   // 2928
                                                                                                                       // 2929
          if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {                          // 2930
            low = mid + 1;                                                                                             // 2931
          } else {                                                                                                     // 2932
            high = mid;                                                                                                // 2933
          }                                                                                                            // 2934
        }                                                                                                              // 2935
        return high;                                                                                                   // 2936
      }                                                                                                                // 2937
      return binaryIndexBy(array, value, identity, retHighest);                                                        // 2938
    }                                                                                                                  // 2939
                                                                                                                       // 2940
    /**                                                                                                                // 2941
     * This function is like `binaryIndex` except that it invokes `iteratee` for                                       // 2942
     * `value` and each element of `array` to compute their sort ranking. The                                          // 2943
     * iteratee is invoked with one argument; (value).                                                                 // 2944
     *                                                                                                                 // 2945
     * @private                                                                                                        // 2946
     * @param {Array} array The sorted array to inspect.                                                               // 2947
     * @param {*} value The value to evaluate.                                                                         // 2948
     * @param {Function} iteratee The function invoked per iteration.                                                  // 2949
     * @param {boolean} [retHighest] Specify returning the highest qualified index.                                    // 2950
     * @returns {number} Returns the index at which `value` should be inserted                                         // 2951
     *  into `array`.                                                                                                  // 2952
     */                                                                                                                // 2953
    function binaryIndexBy(array, value, iteratee, retHighest) {                                                       // 2954
      value = iteratee(value);                                                                                         // 2955
                                                                                                                       // 2956
      var low = 0,                                                                                                     // 2957
          high = array ? array.length : 0,                                                                             // 2958
          valIsNaN = value !== value,                                                                                  // 2959
          valIsNull = value === null,                                                                                  // 2960
          valIsUndef = value === undefined;                                                                            // 2961
                                                                                                                       // 2962
      while (low < high) {                                                                                             // 2963
        var mid = nativeFloor((low + high) / 2),                                                                       // 2964
            computed = iteratee(array[mid]),                                                                           // 2965
            isDef = computed !== undefined,                                                                            // 2966
            isReflexive = computed === computed;                                                                       // 2967
                                                                                                                       // 2968
        if (valIsNaN) {                                                                                                // 2969
          var setLow = isReflexive || retHighest;                                                                      // 2970
        } else if (valIsNull) {                                                                                        // 2971
          setLow = isReflexive && isDef && (retHighest || computed != null);                                           // 2972
        } else if (valIsUndef) {                                                                                       // 2973
          setLow = isReflexive && (retHighest || isDef);                                                               // 2974
        } else if (computed == null) {                                                                                 // 2975
          setLow = false;                                                                                              // 2976
        } else {                                                                                                       // 2977
          setLow = retHighest ? (computed <= value) : (computed < value);                                              // 2978
        }                                                                                                              // 2979
        if (setLow) {                                                                                                  // 2980
          low = mid + 1;                                                                                               // 2981
        } else {                                                                                                       // 2982
          high = mid;                                                                                                  // 2983
        }                                                                                                              // 2984
      }                                                                                                                // 2985
      return nativeMin(high, MAX_ARRAY_INDEX);                                                                         // 2986
    }                                                                                                                  // 2987
                                                                                                                       // 2988
    /**                                                                                                                // 2989
     * A specialized version of `baseCallback` which only supports `this` binding                                      // 2990
     * and specifying the number of arguments to provide to `func`.                                                    // 2991
     *                                                                                                                 // 2992
     * @private                                                                                                        // 2993
     * @param {Function} func The function to bind.                                                                    // 2994
     * @param {*} thisArg The `this` binding of `func`.                                                                // 2995
     * @param {number} [argCount] The number of arguments to provide to `func`.                                        // 2996
     * @returns {Function} Returns the callback.                                                                       // 2997
     */                                                                                                                // 2998
    function bindCallback(func, thisArg, argCount) {                                                                   // 2999
      if (typeof func != 'function') {                                                                                 // 3000
        return identity;                                                                                               // 3001
      }                                                                                                                // 3002
      if (thisArg === undefined) {                                                                                     // 3003
        return func;                                                                                                   // 3004
      }                                                                                                                // 3005
      switch (argCount) {                                                                                              // 3006
        case 1: return function(value) {                                                                               // 3007
          return func.call(thisArg, value);                                                                            // 3008
        };                                                                                                             // 3009
        case 3: return function(value, index, collection) {                                                            // 3010
          return func.call(thisArg, value, index, collection);                                                         // 3011
        };                                                                                                             // 3012
        case 4: return function(accumulator, value, index, collection) {                                               // 3013
          return func.call(thisArg, accumulator, value, index, collection);                                            // 3014
        };                                                                                                             // 3015
        case 5: return function(value, other, key, object, source) {                                                   // 3016
          return func.call(thisArg, value, other, key, object, source);                                                // 3017
        };                                                                                                             // 3018
      }                                                                                                                // 3019
      return function() {                                                                                              // 3020
        return func.apply(thisArg, arguments);                                                                         // 3021
      };                                                                                                               // 3022
    }                                                                                                                  // 3023
                                                                                                                       // 3024
    /**                                                                                                                // 3025
     * Creates a clone of the given array buffer.                                                                      // 3026
     *                                                                                                                 // 3027
     * @private                                                                                                        // 3028
     * @param {ArrayBuffer} buffer The array buffer to clone.                                                          // 3029
     * @returns {ArrayBuffer} Returns the cloned array buffer.                                                         // 3030
     */                                                                                                                // 3031
    function bufferClone(buffer) {                                                                                     // 3032
      var result = new ArrayBuffer(buffer.byteLength),                                                                 // 3033
          view = new Uint8Array(result);                                                                               // 3034
                                                                                                                       // 3035
      view.set(new Uint8Array(buffer));                                                                                // 3036
      return result;                                                                                                   // 3037
    }                                                                                                                  // 3038
                                                                                                                       // 3039
    /**                                                                                                                // 3040
     * Creates an array that is the composition of partially applied arguments,                                        // 3041
     * placeholders, and provided arguments into a single array of arguments.                                          // 3042
     *                                                                                                                 // 3043
     * @private                                                                                                        // 3044
     * @param {Array|Object} args The provided arguments.                                                              // 3045
     * @param {Array} partials The arguments to prepend to those provided.                                             // 3046
     * @param {Array} holders The `partials` placeholder indexes.                                                      // 3047
     * @returns {Array} Returns the new array of composed arguments.                                                   // 3048
     */                                                                                                                // 3049
    function composeArgs(args, partials, holders) {                                                                    // 3050
      var holdersLength = holders.length,                                                                              // 3051
          argsIndex = -1,                                                                                              // 3052
          argsLength = nativeMax(args.length - holdersLength, 0),                                                      // 3053
          leftIndex = -1,                                                                                              // 3054
          leftLength = partials.length,                                                                                // 3055
          result = Array(leftLength + argsLength);                                                                     // 3056
                                                                                                                       // 3057
      while (++leftIndex < leftLength) {                                                                               // 3058
        result[leftIndex] = partials[leftIndex];                                                                       // 3059
      }                                                                                                                // 3060
      while (++argsIndex < holdersLength) {                                                                            // 3061
        result[holders[argsIndex]] = args[argsIndex];                                                                  // 3062
      }                                                                                                                // 3063
      while (argsLength--) {                                                                                           // 3064
        result[leftIndex++] = args[argsIndex++];                                                                       // 3065
      }                                                                                                                // 3066
      return result;                                                                                                   // 3067
    }                                                                                                                  // 3068
                                                                                                                       // 3069
    /**                                                                                                                // 3070
     * This function is like `composeArgs` except that the arguments composition                                       // 3071
     * is tailored for `_.partialRight`.                                                                               // 3072
     *                                                                                                                 // 3073
     * @private                                                                                                        // 3074
     * @param {Array|Object} args The provided arguments.                                                              // 3075
     * @param {Array} partials The arguments to append to those provided.                                              // 3076
     * @param {Array} holders The `partials` placeholder indexes.                                                      // 3077
     * @returns {Array} Returns the new array of composed arguments.                                                   // 3078
     */                                                                                                                // 3079
    function composeArgsRight(args, partials, holders) {                                                               // 3080
      var holdersIndex = -1,                                                                                           // 3081
          holdersLength = holders.length,                                                                              // 3082
          argsIndex = -1,                                                                                              // 3083
          argsLength = nativeMax(args.length - holdersLength, 0),                                                      // 3084
          rightIndex = -1,                                                                                             // 3085
          rightLength = partials.length,                                                                               // 3086
          result = Array(argsLength + rightLength);                                                                    // 3087
                                                                                                                       // 3088
      while (++argsIndex < argsLength) {                                                                               // 3089
        result[argsIndex] = args[argsIndex];                                                                           // 3090
      }                                                                                                                // 3091
      var offset = argsIndex;                                                                                          // 3092
      while (++rightIndex < rightLength) {                                                                             // 3093
        result[offset + rightIndex] = partials[rightIndex];                                                            // 3094
      }                                                                                                                // 3095
      while (++holdersIndex < holdersLength) {                                                                         // 3096
        result[offset + holders[holdersIndex]] = args[argsIndex++];                                                    // 3097
      }                                                                                                                // 3098
      return result;                                                                                                   // 3099
    }                                                                                                                  // 3100
                                                                                                                       // 3101
    /**                                                                                                                // 3102
     * Creates a `_.countBy`, `_.groupBy`, `_.indexBy`, or `_.partition` function.                                     // 3103
     *                                                                                                                 // 3104
     * @private                                                                                                        // 3105
     * @param {Function} setter The function to set keys and values of the accumulator object.                         // 3106
     * @param {Function} [initializer] The function to initialize the accumulator object.                              // 3107
     * @returns {Function} Returns the new aggregator function.                                                        // 3108
     */                                                                                                                // 3109
    function createAggregator(setter, initializer) {                                                                   // 3110
      return function(collection, iteratee, thisArg) {                                                                 // 3111
        var result = initializer ? initializer() : {};                                                                 // 3112
        iteratee = getCallback(iteratee, thisArg, 3);                                                                  // 3113
                                                                                                                       // 3114
        if (isArray(collection)) {                                                                                     // 3115
          var index = -1,                                                                                              // 3116
              length = collection.length;                                                                              // 3117
                                                                                                                       // 3118
          while (++index < length) {                                                                                   // 3119
            var value = collection[index];                                                                             // 3120
            setter(result, value, iteratee(value, index, collection), collection);                                     // 3121
          }                                                                                                            // 3122
        } else {                                                                                                       // 3123
          baseEach(collection, function(value, key, collection) {                                                      // 3124
            setter(result, value, iteratee(value, key, collection), collection);                                       // 3125
          });                                                                                                          // 3126
        }                                                                                                              // 3127
        return result;                                                                                                 // 3128
      };                                                                                                               // 3129
    }                                                                                                                  // 3130
                                                                                                                       // 3131
    /**                                                                                                                // 3132
     * Creates a `_.assign`, `_.defaults`, or `_.merge` function.                                                      // 3133
     *                                                                                                                 // 3134
     * @private                                                                                                        // 3135
     * @param {Function} assigner The function to assign values.                                                       // 3136
     * @returns {Function} Returns the new assigner function.                                                          // 3137
     */                                                                                                                // 3138
    function createAssigner(assigner) {                                                                                // 3139
      return restParam(function(object, sources) {                                                                     // 3140
        var index = -1,                                                                                                // 3141
            length = object == null ? 0 : sources.length,                                                              // 3142
            customizer = length > 2 ? sources[length - 2] : undefined,                                                 // 3143
            guard = length > 2 ? sources[2] : undefined,                                                               // 3144
            thisArg = length > 1 ? sources[length - 1] : undefined;                                                    // 3145
                                                                                                                       // 3146
        if (typeof customizer == 'function') {                                                                         // 3147
          customizer = bindCallback(customizer, thisArg, 5);                                                           // 3148
          length -= 2;                                                                                                 // 3149
        } else {                                                                                                       // 3150
          customizer = typeof thisArg == 'function' ? thisArg : undefined;                                             // 3151
          length -= (customizer ? 1 : 0);                                                                              // 3152
        }                                                                                                              // 3153
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {                                                  // 3154
          customizer = length < 3 ? undefined : customizer;                                                            // 3155
          length = 1;                                                                                                  // 3156
        }                                                                                                              // 3157
        while (++index < length) {                                                                                     // 3158
          var source = sources[index];                                                                                 // 3159
          if (source) {                                                                                                // 3160
            assigner(object, source, customizer);                                                                      // 3161
          }                                                                                                            // 3162
        }                                                                                                              // 3163
        return object;                                                                                                 // 3164
      });                                                                                                              // 3165
    }                                                                                                                  // 3166
                                                                                                                       // 3167
    /**                                                                                                                // 3168
     * Creates a `baseEach` or `baseEachRight` function.                                                               // 3169
     *                                                                                                                 // 3170
     * @private                                                                                                        // 3171
     * @param {Function} eachFunc The function to iterate over a collection.                                           // 3172
     * @param {boolean} [fromRight] Specify iterating from right to left.                                              // 3173
     * @returns {Function} Returns the new base function.                                                              // 3174
     */                                                                                                                // 3175
    function createBaseEach(eachFunc, fromRight) {                                                                     // 3176
      return function(collection, iteratee) {                                                                          // 3177
        var length = collection ? getLength(collection) : 0;                                                           // 3178
        if (!isLength(length)) {                                                                                       // 3179
          return eachFunc(collection, iteratee);                                                                       // 3180
        }                                                                                                              // 3181
        var index = fromRight ? length : -1,                                                                           // 3182
            iterable = toObject(collection);                                                                           // 3183
                                                                                                                       // 3184
        while ((fromRight ? index-- : ++index < length)) {                                                             // 3185
          if (iteratee(iterable[index], index, iterable) === false) {                                                  // 3186
            break;                                                                                                     // 3187
          }                                                                                                            // 3188
        }                                                                                                              // 3189
        return collection;                                                                                             // 3190
      };                                                                                                               // 3191
    }                                                                                                                  // 3192
                                                                                                                       // 3193
    /**                                                                                                                // 3194
     * Creates a base function for `_.forIn` or `_.forInRight`.                                                        // 3195
     *                                                                                                                 // 3196
     * @private                                                                                                        // 3197
     * @param {boolean} [fromRight] Specify iterating from right to left.                                              // 3198
     * @returns {Function} Returns the new base function.                                                              // 3199
     */                                                                                                                // 3200
    function createBaseFor(fromRight) {                                                                                // 3201
      return function(object, iteratee, keysFunc) {                                                                    // 3202
        var iterable = toObject(object),                                                                               // 3203
            props = keysFunc(object),                                                                                  // 3204
            length = props.length,                                                                                     // 3205
            index = fromRight ? length : -1;                                                                           // 3206
                                                                                                                       // 3207
        while ((fromRight ? index-- : ++index < length)) {                                                             // 3208
          var key = props[index];                                                                                      // 3209
          if (iteratee(iterable[key], key, iterable) === false) {                                                      // 3210
            break;                                                                                                     // 3211
          }                                                                                                            // 3212
        }                                                                                                              // 3213
        return object;                                                                                                 // 3214
      };                                                                                                               // 3215
    }                                                                                                                  // 3216
                                                                                                                       // 3217
    /**                                                                                                                // 3218
     * Creates a function that wraps `func` and invokes it with the `this`                                             // 3219
     * binding of `thisArg`.                                                                                           // 3220
     *                                                                                                                 // 3221
     * @private                                                                                                        // 3222
     * @param {Function} func The function to bind.                                                                    // 3223
     * @param {*} [thisArg] The `this` binding of `func`.                                                              // 3224
     * @returns {Function} Returns the new bound function.                                                             // 3225
     */                                                                                                                // 3226
    function createBindWrapper(func, thisArg) {                                                                        // 3227
      var Ctor = createCtorWrapper(func);                                                                              // 3228
                                                                                                                       // 3229
      function wrapper() {                                                                                             // 3230
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;                                     // 3231
        return fn.apply(thisArg, arguments);                                                                           // 3232
      }                                                                                                                // 3233
      return wrapper;                                                                                                  // 3234
    }                                                                                                                  // 3235
                                                                                                                       // 3236
    /**                                                                                                                // 3237
     * Creates a `Set` cache object to optimize linear searches of large arrays.                                       // 3238
     *                                                                                                                 // 3239
     * @private                                                                                                        // 3240
     * @param {Array} [values] The values to cache.                                                                    // 3241
     * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.                         // 3242
     */                                                                                                                // 3243
    function createCache(values) {                                                                                     // 3244
      return (nativeCreate && Set) ? new SetCache(values) : null;                                                      // 3245
    }                                                                                                                  // 3246
                                                                                                                       // 3247
    /**                                                                                                                // 3248
     * Creates a function that produces compound words out of the words in a                                           // 3249
     * given string.                                                                                                   // 3250
     *                                                                                                                 // 3251
     * @private                                                                                                        // 3252
     * @param {Function} callback The function to combine each word.                                                   // 3253
     * @returns {Function} Returns the new compounder function.                                                        // 3254
     */                                                                                                                // 3255
    function createCompounder(callback) {                                                                              // 3256
      return function(string) {                                                                                        // 3257
        var index = -1,                                                                                                // 3258
            array = words(deburr(string)),                                                                             // 3259
            length = array.length,                                                                                     // 3260
            result = '';                                                                                               // 3261
                                                                                                                       // 3262
        while (++index < length) {                                                                                     // 3263
          result = callback(result, array[index], index);                                                              // 3264
        }                                                                                                              // 3265
        return result;                                                                                                 // 3266
      };                                                                                                               // 3267
    }                                                                                                                  // 3268
                                                                                                                       // 3269
    /**                                                                                                                // 3270
     * Creates a function that produces an instance of `Ctor` regardless of                                            // 3271
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.                                   // 3272
     *                                                                                                                 // 3273
     * @private                                                                                                        // 3274
     * @param {Function} Ctor The constructor to wrap.                                                                 // 3275
     * @returns {Function} Returns the new wrapped function.                                                           // 3276
     */                                                                                                                // 3277
    function createCtorWrapper(Ctor) {                                                                                 // 3278
      return function() {                                                                                              // 3279
        // Use a `switch` statement to work with class constructors.                                                   // 3280
        // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.                                                                                           // 3282
        var args = arguments;                                                                                          // 3283
        switch (args.length) {                                                                                         // 3284
          case 0: return new Ctor;                                                                                     // 3285
          case 1: return new Ctor(args[0]);                                                                            // 3286
          case 2: return new Ctor(args[0], args[1]);                                                                   // 3287
          case 3: return new Ctor(args[0], args[1], args[2]);                                                          // 3288
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);                                                 // 3289
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);                                        // 3290
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);                               // 3291
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);                      // 3292
        }                                                                                                              // 3293
        var thisBinding = baseCreate(Ctor.prototype),                                                                  // 3294
            result = Ctor.apply(thisBinding, args);                                                                    // 3295
                                                                                                                       // 3296
        // Mimic the constructor's `return` behavior.                                                                  // 3297
        // See https://es5.github.io/#x13.2.2 for more details.                                                        // 3298
        return isObject(result) ? result : thisBinding;                                                                // 3299
      };                                                                                                               // 3300
    }                                                                                                                  // 3301
                                                                                                                       // 3302
    /**                                                                                                                // 3303
     * Creates a `_.curry` or `_.curryRight` function.                                                                 // 3304
     *                                                                                                                 // 3305
     * @private                                                                                                        // 3306
     * @param {boolean} flag The curry bit flag.                                                                       // 3307
     * @returns {Function} Returns the new curry function.                                                             // 3308
     */                                                                                                                // 3309
    function createCurry(flag) {                                                                                       // 3310
      function curryFunc(func, arity, guard) {                                                                         // 3311
        if (guard && isIterateeCall(func, arity, guard)) {                                                             // 3312
          arity = undefined;                                                                                           // 3313
        }                                                                                                              // 3314
        var result = createWrapper(func, flag, undefined, undefined, undefined, undefined, undefined, arity);          // 3315
        result.placeholder = curryFunc.placeholder;                                                                    // 3316
        return result;                                                                                                 // 3317
      }                                                                                                                // 3318
      return curryFunc;                                                                                                // 3319
    }                                                                                                                  // 3320
                                                                                                                       // 3321
    /**                                                                                                                // 3322
     * Creates a `_.defaults` or `_.defaultsDeep` function.                                                            // 3323
     *                                                                                                                 // 3324
     * @private                                                                                                        // 3325
     * @param {Function} assigner The function to assign values.                                                       // 3326
     * @param {Function} customizer The function to customize assigned values.                                         // 3327
     * @returns {Function} Returns the new defaults function.                                                          // 3328
     */                                                                                                                // 3329
    function createDefaults(assigner, customizer) {                                                                    // 3330
      return restParam(function(args) {                                                                                // 3331
        var object = args[0];                                                                                          // 3332
        if (object == null) {                                                                                          // 3333
          return object;                                                                                               // 3334
        }                                                                                                              // 3335
        args.push(customizer);                                                                                         // 3336
        return assigner.apply(undefined, args);                                                                        // 3337
      });                                                                                                              // 3338
    }                                                                                                                  // 3339
                                                                                                                       // 3340
    /**                                                                                                                // 3341
     * Creates a `_.max` or `_.min` function.                                                                          // 3342
     *                                                                                                                 // 3343
     * @private                                                                                                        // 3344
     * @param {Function} comparator The function used to compare values.                                               // 3345
     * @param {*} exValue The initial extremum value.                                                                  // 3346
     * @returns {Function} Returns the new extremum function.                                                          // 3347
     */                                                                                                                // 3348
    function createExtremum(comparator, exValue) {                                                                     // 3349
      return function(collection, iteratee, thisArg) {                                                                 // 3350
        if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {                                                // 3351
          iteratee = undefined;                                                                                        // 3352
        }                                                                                                              // 3353
        iteratee = getCallback(iteratee, thisArg, 3);                                                                  // 3354
        if (iteratee.length == 1) {                                                                                    // 3355
          collection = isArray(collection) ? collection : toIterable(collection);                                      // 3356
          var result = arrayExtremum(collection, iteratee, comparator, exValue);                                       // 3357
          if (!(collection.length && result === exValue)) {                                                            // 3358
            return result;                                                                                             // 3359
          }                                                                                                            // 3360
        }                                                                                                              // 3361
        return baseExtremum(collection, iteratee, comparator, exValue);                                                // 3362
      };                                                                                                               // 3363
    }                                                                                                                  // 3364
                                                                                                                       // 3365
    /**                                                                                                                // 3366
     * Creates a `_.find` or `_.findLast` function.                                                                    // 3367
     *                                                                                                                 // 3368
     * @private                                                                                                        // 3369
     * @param {Function} eachFunc The function to iterate over a collection.                                           // 3370
     * @param {boolean} [fromRight] Specify iterating from right to left.                                              // 3371
     * @returns {Function} Returns the new find function.                                                              // 3372
     */                                                                                                                // 3373
    function createFind(eachFunc, fromRight) {                                                                         // 3374
      return function(collection, predicate, thisArg) {                                                                // 3375
        predicate = getCallback(predicate, thisArg, 3);                                                                // 3376
        if (isArray(collection)) {                                                                                     // 3377
          var index = baseFindIndex(collection, predicate, fromRight);                                                 // 3378
          return index > -1 ? collection[index] : undefined;                                                           // 3379
        }                                                                                                              // 3380
        return baseFind(collection, predicate, eachFunc);                                                              // 3381
      };                                                                                                               // 3382
    }                                                                                                                  // 3383
                                                                                                                       // 3384
    /**                                                                                                                // 3385
     * Creates a `_.findIndex` or `_.findLastIndex` function.                                                          // 3386
     *                                                                                                                 // 3387
     * @private                                                                                                        // 3388
     * @param {boolean} [fromRight] Specify iterating from right to left.                                              // 3389
     * @returns {Function} Returns the new find function.                                                              // 3390
     */                                                                                                                // 3391
    function createFindIndex(fromRight) {                                                                              // 3392
      return function(array, predicate, thisArg) {                                                                     // 3393
        if (!(array && array.length)) {                                                                                // 3394
          return -1;                                                                                                   // 3395
        }                                                                                                              // 3396
        predicate = getCallback(predicate, thisArg, 3);                                                                // 3397
        return baseFindIndex(array, predicate, fromRight);                                                             // 3398
      };                                                                                                               // 3399
    }                                                                                                                  // 3400
                                                                                                                       // 3401
    /**                                                                                                                // 3402
     * Creates a `_.findKey` or `_.findLastKey` function.                                                              // 3403
     *                                                                                                                 // 3404
     * @private                                                                                                        // 3405
     * @param {Function} objectFunc The function to iterate over an object.                                            // 3406
     * @returns {Function} Returns the new find function.                                                              // 3407
     */                                                                                                                // 3408
    function createFindKey(objectFunc) {                                                                               // 3409
      return function(object, predicate, thisArg) {                                                                    // 3410
        predicate = getCallback(predicate, thisArg, 3);                                                                // 3411
        return baseFind(object, predicate, objectFunc, true);                                                          // 3412
      };                                                                                                               // 3413
    }                                                                                                                  // 3414
                                                                                                                       // 3415
    /**                                                                                                                // 3416
     * Creates a `_.flow` or `_.flowRight` function.                                                                   // 3417
     *                                                                                                                 // 3418
     * @private                                                                                                        // 3419
     * @param {boolean} [fromRight] Specify iterating from right to left.                                              // 3420
     * @returns {Function} Returns the new flow function.                                                              // 3421
     */                                                                                                                // 3422
    function createFlow(fromRight) {                                                                                   // 3423
      return function() {                                                                                              // 3424
        var wrapper,                                                                                                   // 3425
            length = arguments.length,                                                                                 // 3426
            index = fromRight ? length : -1,                                                                           // 3427
            leftIndex = 0,                                                                                             // 3428
            funcs = Array(length);                                                                                     // 3429
                                                                                                                       // 3430
        while ((fromRight ? index-- : ++index < length)) {                                                             // 3431
          var func = funcs[leftIndex++] = arguments[index];                                                            // 3432
          if (typeof func != 'function') {                                                                             // 3433
            throw new TypeError(FUNC_ERROR_TEXT);                                                                      // 3434
          }                                                                                                            // 3435
          if (!wrapper && LodashWrapper.prototype.thru && getFuncName(func) == 'wrapper') {                            // 3436
            wrapper = new LodashWrapper([], true);                                                                     // 3437
          }                                                                                                            // 3438
        }                                                                                                              // 3439
        index = wrapper ? -1 : length;                                                                                 // 3440
        while (++index < length) {                                                                                     // 3441
          func = funcs[index];                                                                                         // 3442
                                                                                                                       // 3443
          var funcName = getFuncName(func),                                                                            // 3444
              data = funcName == 'wrapper' ? getData(func) : undefined;                                                // 3445
                                                                                                                       // 3446
          if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);                                           // 3448
          } else {                                                                                                     // 3449
            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);               // 3450
          }                                                                                                            // 3451
        }                                                                                                              // 3452
        return function() {                                                                                            // 3453
          var args = arguments,                                                                                        // 3454
              value = args[0];                                                                                         // 3455
                                                                                                                       // 3456
          if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {                     // 3457
            return wrapper.plant(value).value();                                                                       // 3458
          }                                                                                                            // 3459
          var index = 0,                                                                                               // 3460
              result = length ? funcs[index].apply(this, args) : value;                                                // 3461
                                                                                                                       // 3462
          while (++index < length) {                                                                                   // 3463
            result = funcs[index].call(this, result);                                                                  // 3464
          }                                                                                                            // 3465
          return result;                                                                                               // 3466
        };                                                                                                             // 3467
      };                                                                                                               // 3468
    }                                                                                                                  // 3469
                                                                                                                       // 3470
    /**                                                                                                                // 3471
     * Creates a function for `_.forEach` or `_.forEachRight`.                                                         // 3472
     *                                                                                                                 // 3473
     * @private                                                                                                        // 3474
     * @param {Function} arrayFunc The function to iterate over an array.                                              // 3475
     * @param {Function} eachFunc The function to iterate over a collection.                                           // 3476
     * @returns {Function} Returns the new each function.                                                              // 3477
     */                                                                                                                // 3478
    function createForEach(arrayFunc, eachFunc) {                                                                      // 3479
      return function(collection, iteratee, thisArg) {                                                                 // 3480
        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))                         // 3481
          ? arrayFunc(collection, iteratee)                                                                            // 3482
          : eachFunc(collection, bindCallback(iteratee, thisArg, 3));                                                  // 3483
      };                                                                                                               // 3484
    }                                                                                                                  // 3485
                                                                                                                       // 3486
    /**                                                                                                                // 3487
     * Creates a function for `_.forIn` or `_.forInRight`.                                                             // 3488
     *                                                                                                                 // 3489
     * @private                                                                                                        // 3490
     * @param {Function} objectFunc The function to iterate over an object.                                            // 3491
     * @returns {Function} Returns the new each function.                                                              // 3492
     */                                                                                                                // 3493
    function createForIn(objectFunc) {                                                                                 // 3494
      return function(object, iteratee, thisArg) {                                                                     // 3495
        if (typeof iteratee != 'function' || thisArg !== undefined) {                                                  // 3496
          iteratee = bindCallback(iteratee, thisArg, 3);                                                               // 3497
        }                                                                                                              // 3498
        return objectFunc(object, iteratee, keysIn);                                                                   // 3499
      };                                                                                                               // 3500
    }                                                                                                                  // 3501
                                                                                                                       // 3502
    /**                                                                                                                // 3503
     * Creates a function for `_.forOwn` or `_.forOwnRight`.                                                           // 3504
     *                                                                                                                 // 3505
     * @private                                                                                                        // 3506
     * @param {Function} objectFunc The function to iterate over an object.                                            // 3507
     * @returns {Function} Returns the new each function.                                                              // 3508
     */                                                                                                                // 3509
    function createForOwn(objectFunc) {                                                                                // 3510
      return function(object, iteratee, thisArg) {                                                                     // 3511
        if (typeof iteratee != 'function' || thisArg !== undefined) {                                                  // 3512
          iteratee = bindCallback(iteratee, thisArg, 3);                                                               // 3513
        }                                                                                                              // 3514
        return objectFunc(object, iteratee);                                                                           // 3515
      };                                                                                                               // 3516
    }                                                                                                                  // 3517
                                                                                                                       // 3518
    /**                                                                                                                // 3519
     * Creates a function for `_.mapKeys` or `_.mapValues`.                                                            // 3520
     *                                                                                                                 // 3521
     * @private                                                                                                        // 3522
     * @param {boolean} [isMapKeys] Specify mapping keys instead of values.                                            // 3523
     * @returns {Function} Returns the new map function.                                                               // 3524
     */                                                                                                                // 3525
    function createObjectMapper(isMapKeys) {                                                                           // 3526
      return function(object, iteratee, thisArg) {                                                                     // 3527
        var result = {};                                                                                               // 3528
        iteratee = getCallback(iteratee, thisArg, 3);                                                                  // 3529
                                                                                                                       // 3530
        baseForOwn(object, function(value, key, object) {                                                              // 3531
          var mapped = iteratee(value, key, object);                                                                   // 3532
          key = isMapKeys ? mapped : key;                                                                              // 3533
          value = isMapKeys ? value : mapped;                                                                          // 3534
          result[key] = value;                                                                                         // 3535
        });                                                                                                            // 3536
        return result;                                                                                                 // 3537
      };                                                                                                               // 3538
    }                                                                                                                  // 3539
                                                                                                                       // 3540
    /**                                                                                                                // 3541
     * Creates a function for `_.padLeft` or `_.padRight`.                                                             // 3542
     *                                                                                                                 // 3543
     * @private                                                                                                        // 3544
     * @param {boolean} [fromRight] Specify padding from the right.                                                    // 3545
     * @returns {Function} Returns the new pad function.                                                               // 3546
     */                                                                                                                // 3547
    function createPadDir(fromRight) {                                                                                 // 3548
      return function(string, length, chars) {                                                                         // 3549
        string = baseToString(string);                                                                                 // 3550
        return (fromRight ? string : '') + createPadding(string, length, chars) + (fromRight ? '' : string);           // 3551
      };                                                                                                               // 3552
    }                                                                                                                  // 3553
                                                                                                                       // 3554
    /**                                                                                                                // 3555
     * Creates a `_.partial` or `_.partialRight` function.                                                             // 3556
     *                                                                                                                 // 3557
     * @private                                                                                                        // 3558
     * @param {boolean} flag The partial bit flag.                                                                     // 3559
     * @returns {Function} Returns the new partial function.                                                           // 3560
     */                                                                                                                // 3561
    function createPartial(flag) {                                                                                     // 3562
      var partialFunc = restParam(function(func, partials) {                                                           // 3563
        var holders = replaceHolders(partials, partialFunc.placeholder);                                               // 3564
        return createWrapper(func, flag, undefined, partials, holders);                                                // 3565
      });                                                                                                              // 3566
      return partialFunc;                                                                                              // 3567
    }                                                                                                                  // 3568
                                                                                                                       // 3569
    /**                                                                                                                // 3570
     * Creates a function for `_.reduce` or `_.reduceRight`.                                                           // 3571
     *                                                                                                                 // 3572
     * @private                                                                                                        // 3573
     * @param {Function} arrayFunc The function to iterate over an array.                                              // 3574
     * @param {Function} eachFunc The function to iterate over a collection.                                           // 3575
     * @returns {Function} Returns the new each function.                                                              // 3576
     */                                                                                                                // 3577
    function createReduce(arrayFunc, eachFunc) {                                                                       // 3578
      return function(collection, iteratee, accumulator, thisArg) {                                                    // 3579
        var initFromArray = arguments.length < 3;                                                                      // 3580
        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))                         // 3581
          ? arrayFunc(collection, iteratee, accumulator, initFromArray)                                                // 3582
          : baseReduce(collection, getCallback(iteratee, thisArg, 4), accumulator, initFromArray, eachFunc);           // 3583
      };                                                                                                               // 3584
    }                                                                                                                  // 3585
                                                                                                                       // 3586
    /**                                                                                                                // 3587
     * Creates a function that wraps `func` and invokes it with optional `this`                                        // 3588
     * binding of, partial application, and currying.                                                                  // 3589
     *                                                                                                                 // 3590
     * @private                                                                                                        // 3591
     * @param {Function|string} func The function or method name to reference.                                         // 3592
     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.                             // 3593
     * @param {*} [thisArg] The `this` binding of `func`.                                                              // 3594
     * @param {Array} [partials] The arguments to prepend to those provided to the new function.                       // 3595
     * @param {Array} [holders] The `partials` placeholder indexes.                                                    // 3596
     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.                   // 3597
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.                                          // 3598
     * @param {Array} [argPos] The argument positions of the new function.                                             // 3599
     * @param {number} [ary] The arity cap of `func`.                                                                  // 3600
     * @param {number} [arity] The arity of `func`.                                                                    // 3601
     * @returns {Function} Returns the new wrapped function.                                                           // 3602
     */                                                                                                                // 3603
    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & ARY_FLAG,                                                                                  // 3605
          isBind = bitmask & BIND_FLAG,                                                                                // 3606
          isBindKey = bitmask & BIND_KEY_FLAG,                                                                         // 3607
          isCurry = bitmask & CURRY_FLAG,                                                                              // 3608
          isCurryBound = bitmask & CURRY_BOUND_FLAG,                                                                   // 3609
          isCurryRight = bitmask & CURRY_RIGHT_FLAG,                                                                   // 3610
          Ctor = isBindKey ? undefined : createCtorWrapper(func);                                                      // 3611
                                                                                                                       // 3612
      function wrapper() {                                                                                             // 3613
        // Avoid `arguments` object use disqualifying optimizations by                                                 // 3614
        // converting it to an array before providing it to other functions.                                           // 3615
        var length = arguments.length,                                                                                 // 3616
            index = length,                                                                                            // 3617
            args = Array(length);                                                                                      // 3618
                                                                                                                       // 3619
        while (index--) {                                                                                              // 3620
          args[index] = arguments[index];                                                                              // 3621
        }                                                                                                              // 3622
        if (partials) {                                                                                                // 3623
          args = composeArgs(args, partials, holders);                                                                 // 3624
        }                                                                                                              // 3625
        if (partialsRight) {                                                                                           // 3626
          args = composeArgsRight(args, partialsRight, holdersRight);                                                  // 3627
        }                                                                                                              // 3628
        if (isCurry || isCurryRight) {                                                                                 // 3629
          var placeholder = wrapper.placeholder,                                                                       // 3630
              argsHolders = replaceHolders(args, placeholder);                                                         // 3631
                                                                                                                       // 3632
          length -= argsHolders.length;                                                                                // 3633
          if (length < arity) {                                                                                        // 3634
            var newArgPos = argPos ? arrayCopy(argPos) : undefined,                                                    // 3635
                newArity = nativeMax(arity - length, 0),                                                               // 3636
                newsHolders = isCurry ? argsHolders : undefined,                                                       // 3637
                newHoldersRight = isCurry ? undefined : argsHolders,                                                   // 3638
                newPartials = isCurry ? args : undefined,                                                              // 3639
                newPartialsRight = isCurry ? undefined : args;                                                         // 3640
                                                                                                                       // 3641
            bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);                                                  // 3642
            bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);                                                 // 3643
                                                                                                                       // 3644
            if (!isCurryBound) {                                                                                       // 3645
              bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);                                                                 // 3646
            }                                                                                                          // 3647
            var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity],
                result = createHybridWrapper.apply(undefined, newData);                                                // 3649
                                                                                                                       // 3650
            if (isLaziable(func)) {                                                                                    // 3651
              setData(result, newData);                                                                                // 3652
            }                                                                                                          // 3653
            result.placeholder = placeholder;                                                                          // 3654
            return result;                                                                                             // 3655
          }                                                                                                            // 3656
        }                                                                                                              // 3657
        var thisBinding = isBind ? thisArg : this,                                                                     // 3658
            fn = isBindKey ? thisBinding[func] : func;                                                                 // 3659
                                                                                                                       // 3660
        if (argPos) {                                                                                                  // 3661
          args = reorder(args, argPos);                                                                                // 3662
        }                                                                                                              // 3663
        if (isAry && ary < args.length) {                                                                              // 3664
          args.length = ary;                                                                                           // 3665
        }                                                                                                              // 3666
        if (this && this !== root && this instanceof wrapper) {                                                        // 3667
          fn = Ctor || createCtorWrapper(func);                                                                        // 3668
        }                                                                                                              // 3669
        return fn.apply(thisBinding, args);                                                                            // 3670
      }                                                                                                                // 3671
      return wrapper;                                                                                                  // 3672
    }                                                                                                                  // 3673
                                                                                                                       // 3674
    /**                                                                                                                // 3675
     * Creates the padding required for `string` based on the given `length`.                                          // 3676
     * The `chars` string is truncated if the number of characters exceeds `length`.                                   // 3677
     *                                                                                                                 // 3678
     * @private                                                                                                        // 3679
     * @param {string} string The string to create padding for.                                                        // 3680
     * @param {number} [length=0] The padding length.                                                                  // 3681
     * @param {string} [chars=' '] The string used as padding.                                                         // 3682
     * @returns {string} Returns the pad for `string`.                                                                 // 3683
     */                                                                                                                // 3684
    function createPadding(string, length, chars) {                                                                    // 3685
      var strLength = string.length;                                                                                   // 3686
      length = +length;                                                                                                // 3687
                                                                                                                       // 3688
      if (strLength >= length || !nativeIsFinite(length)) {                                                            // 3689
        return '';                                                                                                     // 3690
      }                                                                                                                // 3691
      var padLength = length - strLength;                                                                              // 3692
      chars = chars == null ? ' ' : (chars + '');                                                                      // 3693
      return repeat(chars, nativeCeil(padLength / chars.length)).slice(0, padLength);                                  // 3694
    }                                                                                                                  // 3695
                                                                                                                       // 3696
    /**                                                                                                                // 3697
     * Creates a function that wraps `func` and invokes it with the optional `this`                                    // 3698
     * binding of `thisArg` and the `partials` prepended to those provided to                                          // 3699
     * the wrapper.                                                                                                    // 3700
     *                                                                                                                 // 3701
     * @private                                                                                                        // 3702
     * @param {Function} func The function to partially apply arguments to.                                            // 3703
     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.                             // 3704
     * @param {*} thisArg The `this` binding of `func`.                                                                // 3705
     * @param {Array} partials The arguments to prepend to those provided to the new function.                         // 3706
     * @returns {Function} Returns the new bound function.                                                             // 3707
     */                                                                                                                // 3708
    function createPartialWrapper(func, bitmask, thisArg, partials) {                                                  // 3709
      var isBind = bitmask & BIND_FLAG,                                                                                // 3710
          Ctor = createCtorWrapper(func);                                                                              // 3711
                                                                                                                       // 3712
      function wrapper() {                                                                                             // 3713
        // Avoid `arguments` object use disqualifying optimizations by                                                 // 3714
        // converting it to an array before providing it `func`.                                                       // 3715
        var argsIndex = -1,                                                                                            // 3716
            argsLength = arguments.length,                                                                             // 3717
            leftIndex = -1,                                                                                            // 3718
            leftLength = partials.length,                                                                              // 3719
            args = Array(leftLength + argsLength);                                                                     // 3720
                                                                                                                       // 3721
        while (++leftIndex < leftLength) {                                                                             // 3722
          args[leftIndex] = partials[leftIndex];                                                                       // 3723
        }                                                                                                              // 3724
        while (argsLength--) {                                                                                         // 3725
          args[leftIndex++] = arguments[++argsIndex];                                                                  // 3726
        }                                                                                                              // 3727
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;                                     // 3728
        return fn.apply(isBind ? thisArg : this, args);                                                                // 3729
      }                                                                                                                // 3730
      return wrapper;                                                                                                  // 3731
    }                                                                                                                  // 3732
                                                                                                                       // 3733
    /**                                                                                                                // 3734
     * Creates a `_.ceil`, `_.floor`, or `_.round` function.                                                           // 3735
     *                                                                                                                 // 3736
     * @private                                                                                                        // 3737
     * @param {string} methodName The name of the `Math` method to use when rounding.                                  // 3738
     * @returns {Function} Returns the new round function.                                                             // 3739
     */                                                                                                                // 3740
    function createRound(methodName) {                                                                                 // 3741
      var func = Math[methodName];                                                                                     // 3742
      return function(number, precision) {                                                                             // 3743
        precision = precision === undefined ? 0 : (+precision || 0);                                                   // 3744
        if (precision) {                                                                                               // 3745
          precision = pow(10, precision);                                                                              // 3746
          return func(number * precision) / precision;                                                                 // 3747
        }                                                                                                              // 3748
        return func(number);                                                                                           // 3749
      };                                                                                                               // 3750
    }                                                                                                                  // 3751
                                                                                                                       // 3752
    /**                                                                                                                // 3753
     * Creates a `_.sortedIndex` or `_.sortedLastIndex` function.                                                      // 3754
     *                                                                                                                 // 3755
     * @private                                                                                                        // 3756
     * @param {boolean} [retHighest] Specify returning the highest qualified index.                                    // 3757
     * @returns {Function} Returns the new index function.                                                             // 3758
     */                                                                                                                // 3759
    function createSortedIndex(retHighest) {                                                                           // 3760
      return function(array, value, iteratee, thisArg) {                                                               // 3761
        var callback = getCallback(iteratee);                                                                          // 3762
        return (iteratee == null && callback === baseCallback)                                                         // 3763
          ? binaryIndex(array, value, retHighest)                                                                      // 3764
          : binaryIndexBy(array, value, callback(iteratee, thisArg, 1), retHighest);                                   // 3765
      };                                                                                                               // 3766
    }                                                                                                                  // 3767
                                                                                                                       // 3768
    /**                                                                                                                // 3769
     * Creates a function that either curries or invokes `func` with optional                                          // 3770
     * `this` binding and partially applied arguments.                                                                 // 3771
     *                                                                                                                 // 3772
     * @private                                                                                                        // 3773
     * @param {Function|string} func The function or method name to reference.                                         // 3774
     * @param {number} bitmask The bitmask of flags.                                                                   // 3775
     *  The bitmask may be composed of the following flags:                                                            // 3776
     *     1 - `_.bind`                                                                                                // 3777
     *     2 - `_.bindKey`                                                                                             // 3778
     *     4 - `_.curry` or `_.curryRight` of a bound function                                                         // 3779
     *     8 - `_.curry`                                                                                               // 3780
     *    16 - `_.curryRight`                                                                                          // 3781
     *    32 - `_.partial`                                                                                             // 3782
     *    64 - `_.partialRight`                                                                                        // 3783
     *   128 - `_.rearg`                                                                                               // 3784
     *   256 - `_.ary`                                                                                                 // 3785
     * @param {*} [thisArg] The `this` binding of `func`.                                                              // 3786
     * @param {Array} [partials] The arguments to be partially applied.                                                // 3787
     * @param {Array} [holders] The `partials` placeholder indexes.                                                    // 3788
     * @param {Array} [argPos] The argument positions of the new function.                                             // 3789
     * @param {number} [ary] The arity cap of `func`.                                                                  // 3790
     * @param {number} [arity] The arity of `func`.                                                                    // 3791
     * @returns {Function} Returns the new wrapped function.                                                           // 3792
     */                                                                                                                // 3793
    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {                            // 3794
      var isBindKey = bitmask & BIND_KEY_FLAG;                                                                         // 3795
      if (!isBindKey && typeof func != 'function') {                                                                   // 3796
        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 3797
      }                                                                                                                // 3798
      var length = partials ? partials.length : 0;                                                                     // 3799
      if (!length) {                                                                                                   // 3800
        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);                                                               // 3801
        partials = holders = undefined;                                                                                // 3802
      }                                                                                                                // 3803
      length -= (holders ? holders.length : 0);                                                                        // 3804
      if (bitmask & PARTIAL_RIGHT_FLAG) {                                                                              // 3805
        var partialsRight = partials,                                                                                  // 3806
            holdersRight = holders;                                                                                    // 3807
                                                                                                                       // 3808
        partials = holders = undefined;                                                                                // 3809
      }                                                                                                                // 3810
      var data = isBindKey ? undefined : getData(func),                                                                // 3811
          newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];      // 3812
                                                                                                                       // 3813
      if (data) {                                                                                                      // 3814
        mergeData(newData, data);                                                                                      // 3815
        bitmask = newData[1];                                                                                          // 3816
        arity = newData[9];                                                                                            // 3817
      }                                                                                                                // 3818
      newData[9] = arity == null                                                                                       // 3819
        ? (isBindKey ? 0 : func.length)                                                                                // 3820
        : (nativeMax(arity - length, 0) || 0);                                                                         // 3821
                                                                                                                       // 3822
      if (bitmask == BIND_FLAG) {                                                                                      // 3823
        var result = createBindWrapper(newData[0], newData[2]);                                                        // 3824
      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {           // 3825
        result = createPartialWrapper.apply(undefined, newData);                                                       // 3826
      } else {                                                                                                         // 3827
        result = createHybridWrapper.apply(undefined, newData);                                                        // 3828
      }                                                                                                                // 3829
      var setter = data ? baseSetData : setData;                                                                       // 3830
      return setter(result, newData);                                                                                  // 3831
    }                                                                                                                  // 3832
                                                                                                                       // 3833
    /**                                                                                                                // 3834
     * A specialized version of `baseIsEqualDeep` for arrays with support for                                          // 3835
     * partial deep comparisons.                                                                                       // 3836
     *                                                                                                                 // 3837
     * @private                                                                                                        // 3838
     * @param {Array} array The array to compare.                                                                      // 3839
     * @param {Array} other The other array to compare.                                                                // 3840
     * @param {Function} equalFunc The function to determine equivalents of values.                                    // 3841
     * @param {Function} [customizer] The function to customize comparing arrays.                                      // 3842
     * @param {boolean} [isLoose] Specify performing partial comparisons.                                              // 3843
     * @param {Array} [stackA] Tracks traversed `value` objects.                                                       // 3844
     * @param {Array} [stackB] Tracks traversed `other` objects.                                                       // 3845
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.                                   // 3846
     */                                                                                                                // 3847
    function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {                               // 3848
      var index = -1,                                                                                                  // 3849
          arrLength = array.length,                                                                                    // 3850
          othLength = other.length;                                                                                    // 3851
                                                                                                                       // 3852
      if (arrLength != othLength && !(isLoose && othLength > arrLength)) {                                             // 3853
        return false;                                                                                                  // 3854
      }                                                                                                                // 3855
      // Ignore non-index properties.                                                                                  // 3856
      while (++index < arrLength) {                                                                                    // 3857
        var arrValue = array[index],                                                                                   // 3858
            othValue = other[index],                                                                                   // 3859
            result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;
                                                                                                                       // 3861
        if (result !== undefined) {                                                                                    // 3862
          if (result) {                                                                                                // 3863
            continue;                                                                                                  // 3864
          }                                                                                                            // 3865
          return false;                                                                                                // 3866
        }                                                                                                              // 3867
        // Recursively compare arrays (susceptible to call stack limits).                                              // 3868
        if (isLoose) {                                                                                                 // 3869
          if (!arraySome(other, function(othValue) {                                                                   // 3870
                return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);    // 3871
              })) {                                                                                                    // 3872
            return false;                                                                                              // 3873
          }                                                                                                            // 3874
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {   // 3875
          return false;                                                                                                // 3876
        }                                                                                                              // 3877
      }                                                                                                                // 3878
      return true;                                                                                                     // 3879
    }                                                                                                                  // 3880
                                                                                                                       // 3881
    /**                                                                                                                // 3882
     * A specialized version of `baseIsEqualDeep` for comparing objects of                                             // 3883
     * the same `toStringTag`.                                                                                         // 3884
     *                                                                                                                 // 3885
     * **Note:** This function only supports comparing values with tags of                                             // 3886
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.                                                    // 3887
     *                                                                                                                 // 3888
     * @private                                                                                                        // 3889
     * @param {Object} object The object to compare.                                                                   // 3890
     * @param {Object} other The other object to compare.                                                              // 3891
     * @param {string} tag The `toStringTag` of the objects to compare.                                                // 3892
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.                                  // 3893
     */                                                                                                                // 3894
    function equalByTag(object, other, tag) {                                                                          // 3895
      switch (tag) {                                                                                                   // 3896
        case boolTag:                                                                                                  // 3897
        case dateTag:                                                                                                  // 3898
          // Coerce dates and booleans to numbers, dates to milliseconds and booleans                                  // 3899
          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.                                       // 3900
          return +object == +other;                                                                                    // 3901
                                                                                                                       // 3902
        case errorTag:                                                                                                 // 3903
          return object.name == other.name && object.message == other.message;                                         // 3904
                                                                                                                       // 3905
        case numberTag:                                                                                                // 3906
          // Treat `NaN` vs. `NaN` as equal.                                                                           // 3907
          return (object != +object)                                                                                   // 3908
            ? other != +other                                                                                          // 3909
            : object == +other;                                                                                        // 3910
                                                                                                                       // 3911
        case regexpTag:                                                                                                // 3912
        case stringTag:                                                                                                // 3913
          // Coerce regexes to strings and treat strings primitives and string                                         // 3914
          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.                                 // 3915
          return object == (other + '');                                                                               // 3916
      }                                                                                                                // 3917
      return false;                                                                                                    // 3918
    }                                                                                                                  // 3919
                                                                                                                       // 3920
    /**                                                                                                                // 3921
     * A specialized version of `baseIsEqualDeep` for objects with support for                                         // 3922
     * partial deep comparisons.                                                                                       // 3923
     *                                                                                                                 // 3924
     * @private                                                                                                        // 3925
     * @param {Object} object The object to compare.                                                                   // 3926
     * @param {Object} other The other object to compare.                                                              // 3927
     * @param {Function} equalFunc The function to determine equivalents of values.                                    // 3928
     * @param {Function} [customizer] The function to customize comparing values.                                      // 3929
     * @param {boolean} [isLoose] Specify performing partial comparisons.                                              // 3930
     * @param {Array} [stackA] Tracks traversed `value` objects.                                                       // 3931
     * @param {Array} [stackB] Tracks traversed `other` objects.                                                       // 3932
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.                                  // 3933
     */                                                                                                                // 3934
    function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {                             // 3935
      var objProps = keys(object),                                                                                     // 3936
          objLength = objProps.length,                                                                                 // 3937
          othProps = keys(other),                                                                                      // 3938
          othLength = othProps.length;                                                                                 // 3939
                                                                                                                       // 3940
      if (objLength != othLength && !isLoose) {                                                                        // 3941
        return false;                                                                                                  // 3942
      }                                                                                                                // 3943
      var index = objLength;                                                                                           // 3944
      while (index--) {                                                                                                // 3945
        var key = objProps[index];                                                                                     // 3946
        if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {                                             // 3947
          return false;                                                                                                // 3948
        }                                                                                                              // 3949
      }                                                                                                                // 3950
      var skipCtor = isLoose;                                                                                          // 3951
      while (++index < objLength) {                                                                                    // 3952
        key = objProps[index];                                                                                         // 3953
        var objValue = object[key],                                                                                    // 3954
            othValue = other[key],                                                                                     // 3955
            result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;
                                                                                                                       // 3957
        // Recursively compare objects (susceptible to call stack limits).                                             // 3958
        if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {   // 3959
          return false;                                                                                                // 3960
        }                                                                                                              // 3961
        skipCtor || (skipCtor = key == 'constructor');                                                                 // 3962
      }                                                                                                                // 3963
      if (!skipCtor) {                                                                                                 // 3964
        var objCtor = object.constructor,                                                                              // 3965
            othCtor = other.constructor;                                                                               // 3966
                                                                                                                       // 3967
        // Non `Object` object instances with different constructors are not equal.                                    // 3968
        if (objCtor != othCtor &&                                                                                      // 3969
            ('constructor' in object && 'constructor' in other) &&                                                     // 3970
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&                                            // 3971
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {                                           // 3972
          return false;                                                                                                // 3973
        }                                                                                                              // 3974
      }                                                                                                                // 3975
      return true;                                                                                                     // 3976
    }                                                                                                                  // 3977
                                                                                                                       // 3978
    /**                                                                                                                // 3979
     * Gets the appropriate "callback" function. If the `_.callback` method is                                         // 3980
     * customized this function returns the custom method, otherwise it returns                                        // 3981
     * the `baseCallback` function. If arguments are provided the chosen function                                      // 3982
     * is invoked with them and its result is returned.                                                                // 3983
     *                                                                                                                 // 3984
     * @private                                                                                                        // 3985
     * @returns {Function} Returns the chosen function or its result.                                                  // 3986
     */                                                                                                                // 3987
    function getCallback(func, thisArg, argCount) {                                                                    // 3988
      var result = lodash.callback || callback;                                                                        // 3989
      result = result === callback ? baseCallback : result;                                                            // 3990
      return argCount ? result(func, thisArg, argCount) : result;                                                      // 3991
    }                                                                                                                  // 3992
                                                                                                                       // 3993
    /**                                                                                                                // 3994
     * Gets metadata for `func`.                                                                                       // 3995
     *                                                                                                                 // 3996
     * @private                                                                                                        // 3997
     * @param {Function} func The function to query.                                                                   // 3998
     * @returns {*} Returns the metadata for `func`.                                                                   // 3999
     */                                                                                                                // 4000
    var getData = !metaMap ? noop : function(func) {                                                                   // 4001
      return metaMap.get(func);                                                                                        // 4002
    };                                                                                                                 // 4003
                                                                                                                       // 4004
    /**                                                                                                                // 4005
     * Gets the name of `func`.                                                                                        // 4006
     *                                                                                                                 // 4007
     * @private                                                                                                        // 4008
     * @param {Function} func The function to query.                                                                   // 4009
     * @returns {string} Returns the function name.                                                                    // 4010
     */                                                                                                                // 4011
    function getFuncName(func) {                                                                                       // 4012
      var result = (func.name + ''),                                                                                   // 4013
          array = realNames[result],                                                                                   // 4014
          length = array ? array.length : 0;                                                                           // 4015
                                                                                                                       // 4016
      while (length--) {                                                                                               // 4017
        var data = array[length],                                                                                      // 4018
            otherFunc = data.func;                                                                                     // 4019
        if (otherFunc == null || otherFunc == func) {                                                                  // 4020
          return data.name;                                                                                            // 4021
        }                                                                                                              // 4022
      }                                                                                                                // 4023
      return result;                                                                                                   // 4024
    }                                                                                                                  // 4025
                                                                                                                       // 4026
    /**                                                                                                                // 4027
     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is                                           // 4028
     * customized this function returns the custom method, otherwise it returns                                        // 4029
     * the `baseIndexOf` function. If arguments are provided the chosen function                                       // 4030
     * is invoked with them and its result is returned.                                                                // 4031
     *                                                                                                                 // 4032
     * @private                                                                                                        // 4033
     * @returns {Function|number} Returns the chosen function or its result.                                           // 4034
     */                                                                                                                // 4035
    function getIndexOf(collection, target, fromIndex) {                                                               // 4036
      var result = lodash.indexOf || indexOf;                                                                          // 4037
      result = result === indexOf ? baseIndexOf : result;                                                              // 4038
      return collection ? result(collection, target, fromIndex) : result;                                              // 4039
    }                                                                                                                  // 4040
                                                                                                                       // 4041
    /**                                                                                                                // 4042
     * Gets the "length" property value of `object`.                                                                   // 4043
     *                                                                                                                 // 4044
     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)            // 4045
     * that affects Safari on at least iOS 8.1-8.3 ARM64.                                                              // 4046
     *                                                                                                                 // 4047
     * @private                                                                                                        // 4048
     * @param {Object} object The object to query.                                                                     // 4049
     * @returns {*} Returns the "length" value.                                                                        // 4050
     */                                                                                                                // 4051
    var getLength = baseProperty('length');                                                                            // 4052
                                                                                                                       // 4053
    /**                                                                                                                // 4054
     * Gets the propery names, values, and compare flags of `object`.                                                  // 4055
     *                                                                                                                 // 4056
     * @private                                                                                                        // 4057
     * @param {Object} object The object to query.                                                                     // 4058
     * @returns {Array} Returns the match data of `object`.                                                            // 4059
     */                                                                                                                // 4060
    function getMatchData(object) {                                                                                    // 4061
      var result = pairs(object),                                                                                      // 4062
          length = result.length;                                                                                      // 4063
                                                                                                                       // 4064
      while (length--) {                                                                                               // 4065
        result[length][2] = isStrictComparable(result[length][1]);                                                     // 4066
      }                                                                                                                // 4067
      return result;                                                                                                   // 4068
    }                                                                                                                  // 4069
                                                                                                                       // 4070
    /**                                                                                                                // 4071
     * Gets the native function at `key` of `object`.                                                                  // 4072
     *                                                                                                                 // 4073
     * @private                                                                                                        // 4074
     * @param {Object} object The object to query.                                                                     // 4075
     * @param {string} key The key of the method to get.                                                               // 4076
     * @returns {*} Returns the function if it's native, else `undefined`.                                             // 4077
     */                                                                                                                // 4078
    function getNative(object, key) {                                                                                  // 4079
      var value = object == null ? undefined : object[key];                                                            // 4080
      return isNative(value) ? value : undefined;                                                                      // 4081
    }                                                                                                                  // 4082
                                                                                                                       // 4083
    /**                                                                                                                // 4084
     * Gets the view, applying any `transforms` to the `start` and `end` positions.                                    // 4085
     *                                                                                                                 // 4086
     * @private                                                                                                        // 4087
     * @param {number} start The start of the view.                                                                    // 4088
     * @param {number} end The end of the view.                                                                        // 4089
     * @param {Array} transforms The transformations to apply to the view.                                             // 4090
     * @returns {Object} Returns an object containing the `start` and `end`                                            // 4091
     *  positions of the view.                                                                                         // 4092
     */                                                                                                                // 4093
    function getView(start, end, transforms) {                                                                         // 4094
      var index = -1,                                                                                                  // 4095
          length = transforms.length;                                                                                  // 4096
                                                                                                                       // 4097
      while (++index < length) {                                                                                       // 4098
        var data = transforms[index],                                                                                  // 4099
            size = data.size;                                                                                          // 4100
                                                                                                                       // 4101
        switch (data.type) {                                                                                           // 4102
          case 'drop':      start += size; break;                                                                      // 4103
          case 'dropRight': end -= size; break;                                                                        // 4104
          case 'take':      end = nativeMin(end, start + size); break;                                                 // 4105
          case 'takeRight': start = nativeMax(start, end - size); break;                                               // 4106
        }                                                                                                              // 4107
      }                                                                                                                // 4108
      return { 'start': start, 'end': end };                                                                           // 4109
    }                                                                                                                  // 4110
                                                                                                                       // 4111
    /**                                                                                                                // 4112
     * Initializes an array clone.                                                                                     // 4113
     *                                                                                                                 // 4114
     * @private                                                                                                        // 4115
     * @param {Array} array The array to clone.                                                                        // 4116
     * @returns {Array} Returns the initialized clone.                                                                 // 4117
     */                                                                                                                // 4118
    function initCloneArray(array) {                                                                                   // 4119
      var length = array.length,                                                                                       // 4120
          result = new array.constructor(length);                                                                      // 4121
                                                                                                                       // 4122
      // Add array properties assigned by `RegExp#exec`.                                                               // 4123
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {                              // 4124
        result.index = array.index;                                                                                    // 4125
        result.input = array.input;                                                                                    // 4126
      }                                                                                                                // 4127
      return result;                                                                                                   // 4128
    }                                                                                                                  // 4129
                                                                                                                       // 4130
    /**                                                                                                                // 4131
     * Initializes an object clone.                                                                                    // 4132
     *                                                                                                                 // 4133
     * @private                                                                                                        // 4134
     * @param {Object} object The object to clone.                                                                     // 4135
     * @returns {Object} Returns the initialized clone.                                                                // 4136
     */                                                                                                                // 4137
    function initCloneObject(object) {                                                                                 // 4138
      var Ctor = object.constructor;                                                                                   // 4139
      if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {                                                      // 4140
        Ctor = Object;                                                                                                 // 4141
      }                                                                                                                // 4142
      return new Ctor;                                                                                                 // 4143
    }                                                                                                                  // 4144
                                                                                                                       // 4145
    /**                                                                                                                // 4146
     * Initializes an object clone based on its `toStringTag`.                                                         // 4147
     *                                                                                                                 // 4148
     * **Note:** This function only supports cloning values with tags of                                               // 4149
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.                                                    // 4150
     *                                                                                                                 // 4151
     * @private                                                                                                        // 4152
     * @param {Object} object The object to clone.                                                                     // 4153
     * @param {string} tag The `toStringTag` of the object to clone.                                                   // 4154
     * @param {boolean} [isDeep] Specify a deep clone.                                                                 // 4155
     * @returns {Object} Returns the initialized clone.                                                                // 4156
     */                                                                                                                // 4157
    function initCloneByTag(object, tag, isDeep) {                                                                     // 4158
      var Ctor = object.constructor;                                                                                   // 4159
      switch (tag) {                                                                                                   // 4160
        case arrayBufferTag:                                                                                           // 4161
          return bufferClone(object);                                                                                  // 4162
                                                                                                                       // 4163
        case boolTag:                                                                                                  // 4164
        case dateTag:                                                                                                  // 4165
          return new Ctor(+object);                                                                                    // 4166
                                                                                                                       // 4167
        case float32Tag: case float64Tag:                                                                              // 4168
        case int8Tag: case int16Tag: case int32Tag:                                                                    // 4169
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:                                           // 4170
          // Safari 5 mobile incorrectly has `Object` as the constructor of typed arrays.                              // 4171
          if (Ctor instanceof Ctor) {                                                                                  // 4172
            Ctor = ctorByTag[tag];                                                                                     // 4173
          }                                                                                                            // 4174
          var buffer = object.buffer;                                                                                  // 4175
          return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);                    // 4176
                                                                                                                       // 4177
        case numberTag:                                                                                                // 4178
        case stringTag:                                                                                                // 4179
          return new Ctor(object);                                                                                     // 4180
                                                                                                                       // 4181
        case regexpTag:                                                                                                // 4182
          var result = new Ctor(object.source, reFlags.exec(object));                                                  // 4183
          result.lastIndex = object.lastIndex;                                                                         // 4184
      }                                                                                                                // 4185
      return result;                                                                                                   // 4186
    }                                                                                                                  // 4187
                                                                                                                       // 4188
    /**                                                                                                                // 4189
     * Invokes the method at `path` on `object`.                                                                       // 4190
     *                                                                                                                 // 4191
     * @private                                                                                                        // 4192
     * @param {Object} object The object to query.                                                                     // 4193
     * @param {Array|string} path The path of the method to invoke.                                                    // 4194
     * @param {Array} args The arguments to invoke the method with.                                                    // 4195
     * @returns {*} Returns the result of the invoked method.                                                          // 4196
     */                                                                                                                // 4197
    function invokePath(object, path, args) {                                                                          // 4198
      if (object != null && !isKey(path, object)) {                                                                    // 4199
        path = toPath(path);                                                                                           // 4200
        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));                                  // 4201
        path = last(path);                                                                                             // 4202
      }                                                                                                                // 4203
      var func = object == null ? object : object[path];                                                               // 4204
      return func == null ? undefined : func.apply(object, args);                                                      // 4205
    }                                                                                                                  // 4206
                                                                                                                       // 4207
    /**                                                                                                                // 4208
     * Checks if `value` is array-like.                                                                                // 4209
     *                                                                                                                 // 4210
     * @private                                                                                                        // 4211
     * @param {*} value The value to check.                                                                            // 4212
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.                                       // 4213
     */                                                                                                                // 4214
    function isArrayLike(value) {                                                                                      // 4215
      return value != null && isLength(getLength(value));                                                              // 4216
    }                                                                                                                  // 4217
                                                                                                                       // 4218
    /**                                                                                                                // 4219
     * Checks if `value` is a valid array-like index.                                                                  // 4220
     *                                                                                                                 // 4221
     * @private                                                                                                        // 4222
     * @param {*} value The value to check.                                                                            // 4223
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.                                    // 4224
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.                                    // 4225
     */                                                                                                                // 4226
    function isIndex(value, length) {                                                                                  // 4227
      value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;                                        // 4228
      length = length == null ? MAX_SAFE_INTEGER : length;                                                             // 4229
      return value > -1 && value % 1 == 0 && value < length;                                                           // 4230
    }                                                                                                                  // 4231
                                                                                                                       // 4232
    /**                                                                                                                // 4233
     * Checks if the provided arguments are from an iteratee call.                                                     // 4234
     *                                                                                                                 // 4235
     * @private                                                                                                        // 4236
     * @param {*} value The potential iteratee value argument.                                                         // 4237
     * @param {*} index The potential iteratee index or key argument.                                                  // 4238
     * @param {*} object The potential iteratee object argument.                                                       // 4239
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.                     // 4240
     */                                                                                                                // 4241
    function isIterateeCall(value, index, object) {                                                                    // 4242
      if (!isObject(object)) {                                                                                         // 4243
        return false;                                                                                                  // 4244
      }                                                                                                                // 4245
      var type = typeof index;                                                                                         // 4246
      if (type == 'number'                                                                                             // 4247
          ? (isArrayLike(object) && isIndex(index, object.length))                                                     // 4248
          : (type == 'string' && index in object)) {                                                                   // 4249
        var other = object[index];                                                                                     // 4250
        return value === value ? (value === other) : (other !== other);                                                // 4251
      }                                                                                                                // 4252
      return false;                                                                                                    // 4253
    }                                                                                                                  // 4254
                                                                                                                       // 4255
    /**                                                                                                                // 4256
     * Checks if `value` is a property name and not a property path.                                                   // 4257
     *                                                                                                                 // 4258
     * @private                                                                                                        // 4259
     * @param {*} value The value to check.                                                                            // 4260
     * @param {Object} [object] The object to query keys on.                                                           // 4261
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.                                  // 4262
     */                                                                                                                // 4263
    function isKey(value, object) {                                                                                    // 4264
      var type = typeof value;                                                                                         // 4265
      if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {                                       // 4266
        return true;                                                                                                   // 4267
      }                                                                                                                // 4268
      if (isArray(value)) {                                                                                            // 4269
        return false;                                                                                                  // 4270
      }                                                                                                                // 4271
      var result = !reIsDeepProp.test(value);                                                                          // 4272
      return result || (object != null && value in toObject(object));                                                  // 4273
    }                                                                                                                  // 4274
                                                                                                                       // 4275
    /**                                                                                                                // 4276
     * Checks if `func` has a lazy counterpart.                                                                        // 4277
     *                                                                                                                 // 4278
     * @private                                                                                                        // 4279
     * @param {Function} func The function to check.                                                                   // 4280
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.                               // 4281
     */                                                                                                                // 4282
    function isLaziable(func) {                                                                                        // 4283
      var funcName = getFuncName(func),                                                                                // 4284
          other = lodash[funcName];                                                                                    // 4285
                                                                                                                       // 4286
      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {                                        // 4287
        return false;                                                                                                  // 4288
      }                                                                                                                // 4289
      if (func === other) {                                                                                            // 4290
        return true;                                                                                                   // 4291
      }                                                                                                                // 4292
      var data = getData(other);                                                                                       // 4293
      return !!data && func === data[0];                                                                               // 4294
    }                                                                                                                  // 4295
                                                                                                                       // 4296
    /**                                                                                                                // 4297
     * Checks if `value` is a valid array-like length.                                                                 // 4298
     *                                                                                                                 // 4299
     * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).     // 4300
     *                                                                                                                 // 4301
     * @private                                                                                                        // 4302
     * @param {*} value The value to check.                                                                            // 4303
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.                                   // 4304
     */                                                                                                                // 4305
    function isLength(value) {                                                                                         // 4306
      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;                    // 4307
    }                                                                                                                  // 4308
                                                                                                                       // 4309
    /**                                                                                                                // 4310
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.                                      // 4311
     *                                                                                                                 // 4312
     * @private                                                                                                        // 4313
     * @param {*} value The value to check.                                                                            // 4314
     * @returns {boolean} Returns `true` if `value` if suitable for strict                                             // 4315
     *  equality comparisons, else `false`.                                                                            // 4316
     */                                                                                                                // 4317
    function isStrictComparable(value) {                                                                               // 4318
      return value === value && !isObject(value);                                                                      // 4319
    }                                                                                                                  // 4320
                                                                                                                       // 4321
    /**                                                                                                                // 4322
     * Merges the function metadata of `source` into `data`.                                                           // 4323
     *                                                                                                                 // 4324
     * Merging metadata reduces the number of wrappers required to invoke a function.                                  // 4325
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`                                      // 4326
     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`                                // 4327
     * augment function arguments, making the order in which they are executed important,                              // 4328
     * preventing the merging of metadata. However, we make an exception for a safe                                    // 4329
     * common case where curried functions have `_.ary` and or `_.rearg` applied.                                      // 4330
     *                                                                                                                 // 4331
     * @private                                                                                                        // 4332
     * @param {Array} data The destination metadata.                                                                   // 4333
     * @param {Array} source The source metadata.                                                                      // 4334
     * @returns {Array} Returns `data`.                                                                                // 4335
     */                                                                                                                // 4336
    function mergeData(data, source) {                                                                                 // 4337
      var bitmask = data[1],                                                                                           // 4338
          srcBitmask = source[1],                                                                                      // 4339
          newBitmask = bitmask | srcBitmask,                                                                           // 4340
          isCommon = newBitmask < ARY_FLAG;                                                                            // 4341
                                                                                                                       // 4342
      var isCombo =                                                                                                    // 4343
        (srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG) ||                                                           // 4344
        (srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8]) ||                            // 4345
        (srcBitmask == (ARY_FLAG | REARG_FLAG) && bitmask == CURRY_FLAG);                                              // 4346
                                                                                                                       // 4347
      // Exit early if metadata can't be merged.                                                                       // 4348
      if (!(isCommon || isCombo)) {                                                                                    // 4349
        return data;                                                                                                   // 4350
      }                                                                                                                // 4351
      // Use source `thisArg` if available.                                                                            // 4352
      if (srcBitmask & BIND_FLAG) {                                                                                    // 4353
        data[2] = source[2];                                                                                           // 4354
        // Set when currying a bound function.                                                                         // 4355
        newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;                                                    // 4356
      }                                                                                                                // 4357
      // Compose partial arguments.                                                                                    // 4358
      var value = source[3];                                                                                           // 4359
      if (value) {                                                                                                     // 4360
        var partials = data[3];                                                                                        // 4361
        data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);                               // 4362
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);                              // 4363
      }                                                                                                                // 4364
      // Compose partial right arguments.                                                                              // 4365
      value = source[5];                                                                                               // 4366
      if (value) {                                                                                                     // 4367
        partials = data[5];                                                                                            // 4368
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);                          // 4369
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);                              // 4370
      }                                                                                                                // 4371
      // Use source `argPos` if available.                                                                             // 4372
      value = source[7];                                                                                               // 4373
      if (value) {                                                                                                     // 4374
        data[7] = arrayCopy(value);                                                                                    // 4375
      }                                                                                                                // 4376
      // Use source `ary` if it's smaller.                                                                             // 4377
      if (srcBitmask & ARY_FLAG) {                                                                                     // 4378
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);                                         // 4379
      }                                                                                                                // 4380
      // Use source `arity` if one is not provided.                                                                    // 4381
      if (data[9] == null) {                                                                                           // 4382
        data[9] = source[9];                                                                                           // 4383
      }                                                                                                                // 4384
      // Use source `func` and merge bitmasks.                                                                         // 4385
      data[0] = source[0];                                                                                             // 4386
      data[1] = newBitmask;                                                                                            // 4387
                                                                                                                       // 4388
      return data;                                                                                                     // 4389
    }                                                                                                                  // 4390
                                                                                                                       // 4391
    /**                                                                                                                // 4392
     * Used by `_.defaultsDeep` to customize its `_.merge` use.                                                        // 4393
     *                                                                                                                 // 4394
     * @private                                                                                                        // 4395
     * @param {*} objectValue The destination object property value.                                                   // 4396
     * @param {*} sourceValue The source object property value.                                                        // 4397
     * @returns {*} Returns the value to assign to the destination object.                                             // 4398
     */                                                                                                                // 4399
    function mergeDefaults(objectValue, sourceValue) {                                                                 // 4400
      return objectValue === undefined ? sourceValue : merge(objectValue, sourceValue, mergeDefaults);                 // 4401
    }                                                                                                                  // 4402
                                                                                                                       // 4403
    /**                                                                                                                // 4404
     * A specialized version of `_.pick` which picks `object` properties specified                                     // 4405
     * by `props`.                                                                                                     // 4406
     *                                                                                                                 // 4407
     * @private                                                                                                        // 4408
     * @param {Object} object The source object.                                                                       // 4409
     * @param {string[]} props The property names to pick.                                                             // 4410
     * @returns {Object} Returns the new object.                                                                       // 4411
     */                                                                                                                // 4412
    function pickByArray(object, props) {                                                                              // 4413
      object = toObject(object);                                                                                       // 4414
                                                                                                                       // 4415
      var index = -1,                                                                                                  // 4416
          length = props.length,                                                                                       // 4417
          result = {};                                                                                                 // 4418
                                                                                                                       // 4419
      while (++index < length) {                                                                                       // 4420
        var key = props[index];                                                                                        // 4421
        if (key in object) {                                                                                           // 4422
          result[key] = object[key];                                                                                   // 4423
        }                                                                                                              // 4424
      }                                                                                                                // 4425
      return result;                                                                                                   // 4426
    }                                                                                                                  // 4427
                                                                                                                       // 4428
    /**                                                                                                                // 4429
     * A specialized version of `_.pick` which picks `object` properties `predicate`                                   // 4430
     * returns truthy for.                                                                                             // 4431
     *                                                                                                                 // 4432
     * @private                                                                                                        // 4433
     * @param {Object} object The source object.                                                                       // 4434
     * @param {Function} predicate The function invoked per iteration.                                                 // 4435
     * @returns {Object} Returns the new object.                                                                       // 4436
     */                                                                                                                // 4437
    function pickByCallback(object, predicate) {                                                                       // 4438
      var result = {};                                                                                                 // 4439
      baseForIn(object, function(value, key, object) {                                                                 // 4440
        if (predicate(value, key, object)) {                                                                           // 4441
          result[key] = value;                                                                                         // 4442
        }                                                                                                              // 4443
      });                                                                                                              // 4444
      return result;                                                                                                   // 4445
    }                                                                                                                  // 4446
                                                                                                                       // 4447
    /**                                                                                                                // 4448
     * Reorder `array` according to the specified indexes where the element at                                         // 4449
     * the first index is assigned as the first element, the element at                                                // 4450
     * the second index is assigned as the second element, and so on.                                                  // 4451
     *                                                                                                                 // 4452
     * @private                                                                                                        // 4453
     * @param {Array} array The array to reorder.                                                                      // 4454
     * @param {Array} indexes The arranged array indexes.                                                              // 4455
     * @returns {Array} Returns `array`.                                                                               // 4456
     */                                                                                                                // 4457
    function reorder(array, indexes) {                                                                                 // 4458
      var arrLength = array.length,                                                                                    // 4459
          length = nativeMin(indexes.length, arrLength),                                                               // 4460
          oldArray = arrayCopy(array);                                                                                 // 4461
                                                                                                                       // 4462
      while (length--) {                                                                                               // 4463
        var index = indexes[length];                                                                                   // 4464
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;                                       // 4465
      }                                                                                                                // 4466
      return array;                                                                                                    // 4467
    }                                                                                                                  // 4468
                                                                                                                       // 4469
    /**                                                                                                                // 4470
     * Sets metadata for `func`.                                                                                       // 4471
     *                                                                                                                 // 4472
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short                                        // 4473
     * period of time, it will trip its breaker and transition to an identity function                                 // 4474
     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
     * for more details.                                                                                               // 4476
     *                                                                                                                 // 4477
     * @private                                                                                                        // 4478
     * @param {Function} func The function to associate metadata with.                                                 // 4479
     * @param {*} data The metadata.                                                                                   // 4480
     * @returns {Function} Returns `func`.                                                                             // 4481
     */                                                                                                                // 4482
    var setData = (function() {                                                                                        // 4483
      var count = 0,                                                                                                   // 4484
          lastCalled = 0;                                                                                              // 4485
                                                                                                                       // 4486
      return function(key, value) {                                                                                    // 4487
        var stamp = now(),                                                                                             // 4488
            remaining = HOT_SPAN - (stamp - lastCalled);                                                               // 4489
                                                                                                                       // 4490
        lastCalled = stamp;                                                                                            // 4491
        if (remaining > 0) {                                                                                           // 4492
          if (++count >= HOT_COUNT) {                                                                                  // 4493
            return key;                                                                                                // 4494
          }                                                                                                            // 4495
        } else {                                                                                                       // 4496
          count = 0;                                                                                                   // 4497
        }                                                                                                              // 4498
        return baseSetData(key, value);                                                                                // 4499
      };                                                                                                               // 4500
    }());                                                                                                              // 4501
                                                                                                                       // 4502
    /**                                                                                                                // 4503
     * A fallback implementation of `Object.keys` which creates an array of the                                        // 4504
     * own enumerable property names of `object`.                                                                      // 4505
     *                                                                                                                 // 4506
     * @private                                                                                                        // 4507
     * @param {Object} object The object to query.                                                                     // 4508
     * @returns {Array} Returns the array of property names.                                                           // 4509
     */                                                                                                                // 4510
    function shimKeys(object) {                                                                                        // 4511
      var props = keysIn(object),                                                                                      // 4512
          propsLength = props.length,                                                                                  // 4513
          length = propsLength && object.length;                                                                       // 4514
                                                                                                                       // 4515
      var allowIndexes = !!length && isLength(length) &&                                                               // 4516
        (isArray(object) || isArguments(object) || isString(object));                                                  // 4517
                                                                                                                       // 4518
      var index = -1,                                                                                                  // 4519
          result = [];                                                                                                 // 4520
                                                                                                                       // 4521
      while (++index < propsLength) {                                                                                  // 4522
        var key = props[index];                                                                                        // 4523
        if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {                              // 4524
          result.push(key);                                                                                            // 4525
        }                                                                                                              // 4526
      }                                                                                                                // 4527
      return result;                                                                                                   // 4528
    }                                                                                                                  // 4529
                                                                                                                       // 4530
    /**                                                                                                                // 4531
     * Converts `value` to an array-like object if it's not one.                                                       // 4532
     *                                                                                                                 // 4533
     * @private                                                                                                        // 4534
     * @param {*} value The value to process.                                                                          // 4535
     * @returns {Array|Object} Returns the array-like object.                                                          // 4536
     */                                                                                                                // 4537
    function toIterable(value) {                                                                                       // 4538
      if (value == null) {                                                                                             // 4539
        return [];                                                                                                     // 4540
      }                                                                                                                // 4541
      if (!isArrayLike(value)) {                                                                                       // 4542
        return values(value);                                                                                          // 4543
      }                                                                                                                // 4544
      if (lodash.support.unindexedChars && isString(value)) {                                                          // 4545
        return value.split('');                                                                                        // 4546
      }                                                                                                                // 4547
      return isObject(value) ? value : Object(value);                                                                  // 4548
    }                                                                                                                  // 4549
                                                                                                                       // 4550
    /**                                                                                                                // 4551
     * Converts `value` to an object if it's not one.                                                                  // 4552
     *                                                                                                                 // 4553
     * @private                                                                                                        // 4554
     * @param {*} value The value to process.                                                                          // 4555
     * @returns {Object} Returns the object.                                                                           // 4556
     */                                                                                                                // 4557
    function toObject(value) {                                                                                         // 4558
      if (lodash.support.unindexedChars && isString(value)) {                                                          // 4559
        var index = -1,                                                                                                // 4560
            length = value.length,                                                                                     // 4561
            result = Object(value);                                                                                    // 4562
                                                                                                                       // 4563
        while (++index < length) {                                                                                     // 4564
          result[index] = value.charAt(index);                                                                         // 4565
        }                                                                                                              // 4566
        return result;                                                                                                 // 4567
      }                                                                                                                // 4568
      return isObject(value) ? value : Object(value);                                                                  // 4569
    }                                                                                                                  // 4570
                                                                                                                       // 4571
    /**                                                                                                                // 4572
     * Converts `value` to property path array if it's not one.                                                        // 4573
     *                                                                                                                 // 4574
     * @private                                                                                                        // 4575
     * @param {*} value The value to process.                                                                          // 4576
     * @returns {Array} Returns the property path array.                                                               // 4577
     */                                                                                                                // 4578
    function toPath(value) {                                                                                           // 4579
      if (isArray(value)) {                                                                                            // 4580
        return value;                                                                                                  // 4581
      }                                                                                                                // 4582
      var result = [];                                                                                                 // 4583
      baseToString(value).replace(rePropName, function(match, number, quote, string) {                                 // 4584
        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));                                   // 4585
      });                                                                                                              // 4586
      return result;                                                                                                   // 4587
    }                                                                                                                  // 4588
                                                                                                                       // 4589
    /**                                                                                                                // 4590
     * Creates a clone of `wrapper`.                                                                                   // 4591
     *                                                                                                                 // 4592
     * @private                                                                                                        // 4593
     * @param {Object} wrapper The wrapper to clone.                                                                   // 4594
     * @returns {Object} Returns the cloned wrapper.                                                                   // 4595
     */                                                                                                                // 4596
    function wrapperClone(wrapper) {                                                                                   // 4597
      return wrapper instanceof LazyWrapper                                                                            // 4598
        ? wrapper.clone()                                                                                              // 4599
        : new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__, arrayCopy(wrapper.__actions__));                   // 4600
    }                                                                                                                  // 4601
                                                                                                                       // 4602
    /*------------------------------------------------------------------------*/                                       // 4603
                                                                                                                       // 4604
    /**                                                                                                                // 4605
     * Creates an array of elements split into groups the length of `size`.                                            // 4606
     * If `collection` can't be split evenly, the final chunk will be the remaining                                    // 4607
     * elements.                                                                                                       // 4608
     *                                                                                                                 // 4609
     * @static                                                                                                         // 4610
     * @memberOf _                                                                                                     // 4611
     * @category Array                                                                                                 // 4612
     * @param {Array} array The array to process.                                                                      // 4613
     * @param {number} [size=1] The length of each chunk.                                                              // 4614
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 4615
     * @returns {Array} Returns the new array containing chunks.                                                       // 4616
     * @example                                                                                                        // 4617
     *                                                                                                                 // 4618
     * _.chunk(['a', 'b', 'c', 'd'], 2);                                                                               // 4619
     * // => [['a', 'b'], ['c', 'd']]                                                                                  // 4620
     *                                                                                                                 // 4621
     * _.chunk(['a', 'b', 'c', 'd'], 3);                                                                               // 4622
     * // => [['a', 'b', 'c'], ['d']]                                                                                  // 4623
     */                                                                                                                // 4624
    function chunk(array, size, guard) {                                                                               // 4625
      if (guard ? isIterateeCall(array, size, guard) : size == null) {                                                 // 4626
        size = 1;                                                                                                      // 4627
      } else {                                                                                                         // 4628
        size = nativeMax(nativeFloor(size) || 1, 1);                                                                   // 4629
      }                                                                                                                // 4630
      var index = 0,                                                                                                   // 4631
          length = array ? array.length : 0,                                                                           // 4632
          resIndex = -1,                                                                                               // 4633
          result = Array(nativeCeil(length / size));                                                                   // 4634
                                                                                                                       // 4635
      while (index < length) {                                                                                         // 4636
        result[++resIndex] = baseSlice(array, index, (index += size));                                                 // 4637
      }                                                                                                                // 4638
      return result;                                                                                                   // 4639
    }                                                                                                                  // 4640
                                                                                                                       // 4641
    /**                                                                                                                // 4642
     * Creates an array with all falsey values removed. The values `false`, `null`,                                    // 4643
     * `0`, `""`, `undefined`, and `NaN` are falsey.                                                                   // 4644
     *                                                                                                                 // 4645
     * @static                                                                                                         // 4646
     * @memberOf _                                                                                                     // 4647
     * @category Array                                                                                                 // 4648
     * @param {Array} array The array to compact.                                                                      // 4649
     * @returns {Array} Returns the new array of filtered values.                                                      // 4650
     * @example                                                                                                        // 4651
     *                                                                                                                 // 4652
     * _.compact([0, 1, false, 2, '', 3]);                                                                             // 4653
     * // => [1, 2, 3]                                                                                                 // 4654
     */                                                                                                                // 4655
    function compact(array) {                                                                                          // 4656
      var index = -1,                                                                                                  // 4657
          length = array ? array.length : 0,                                                                           // 4658
          resIndex = -1,                                                                                               // 4659
          result = [];                                                                                                 // 4660
                                                                                                                       // 4661
      while (++index < length) {                                                                                       // 4662
        var value = array[index];                                                                                      // 4663
        if (value) {                                                                                                   // 4664
          result[++resIndex] = value;                                                                                  // 4665
        }                                                                                                              // 4666
      }                                                                                                                // 4667
      return result;                                                                                                   // 4668
    }                                                                                                                  // 4669
                                                                                                                       // 4670
    /**                                                                                                                // 4671
     * Creates an array of unique `array` values not included in the other                                             // 4672
     * provided arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)          // 4673
     * for equality comparisons.                                                                                       // 4674
     *                                                                                                                 // 4675
     * @static                                                                                                         // 4676
     * @memberOf _                                                                                                     // 4677
     * @category Array                                                                                                 // 4678
     * @param {Array} array The array to inspect.                                                                      // 4679
     * @param {...Array} [values] The arrays of values to exclude.                                                     // 4680
     * @returns {Array} Returns the new array of filtered values.                                                      // 4681
     * @example                                                                                                        // 4682
     *                                                                                                                 // 4683
     * _.difference([1, 2, 3], [4, 2]);                                                                                // 4684
     * // => [1, 3]                                                                                                    // 4685
     */                                                                                                                // 4686
    var difference = restParam(function(array, values) {                                                               // 4687
      return (isObjectLike(array) && isArrayLike(array))                                                               // 4688
        ? baseDifference(array, baseFlatten(values, false, true))                                                      // 4689
        : [];                                                                                                          // 4690
    });                                                                                                                // 4691
                                                                                                                       // 4692
    /**                                                                                                                // 4693
     * Creates a slice of `array` with `n` elements dropped from the beginning.                                        // 4694
     *                                                                                                                 // 4695
     * @static                                                                                                         // 4696
     * @memberOf _                                                                                                     // 4697
     * @category Array                                                                                                 // 4698
     * @param {Array} array The array to query.                                                                        // 4699
     * @param {number} [n=1] The number of elements to drop.                                                           // 4700
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 4701
     * @returns {Array} Returns the slice of `array`.                                                                  // 4702
     * @example                                                                                                        // 4703
     *                                                                                                                 // 4704
     * _.drop([1, 2, 3]);                                                                                              // 4705
     * // => [2, 3]                                                                                                    // 4706
     *                                                                                                                 // 4707
     * _.drop([1, 2, 3], 2);                                                                                           // 4708
     * // => [3]                                                                                                       // 4709
     *                                                                                                                 // 4710
     * _.drop([1, 2, 3], 5);                                                                                           // 4711
     * // => []                                                                                                        // 4712
     *                                                                                                                 // 4713
     * _.drop([1, 2, 3], 0);                                                                                           // 4714
     * // => [1, 2, 3]                                                                                                 // 4715
     */                                                                                                                // 4716
    function drop(array, n, guard) {                                                                                   // 4717
      var length = array ? array.length : 0;                                                                           // 4718
      if (!length) {                                                                                                   // 4719
        return [];                                                                                                     // 4720
      }                                                                                                                // 4721
      if (guard ? isIterateeCall(array, n, guard) : n == null) {                                                       // 4722
        n = 1;                                                                                                         // 4723
      }                                                                                                                // 4724
      return baseSlice(array, n < 0 ? 0 : n);                                                                          // 4725
    }                                                                                                                  // 4726
                                                                                                                       // 4727
    /**                                                                                                                // 4728
     * Creates a slice of `array` with `n` elements dropped from the end.                                              // 4729
     *                                                                                                                 // 4730
     * @static                                                                                                         // 4731
     * @memberOf _                                                                                                     // 4732
     * @category Array                                                                                                 // 4733
     * @param {Array} array The array to query.                                                                        // 4734
     * @param {number} [n=1] The number of elements to drop.                                                           // 4735
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 4736
     * @returns {Array} Returns the slice of `array`.                                                                  // 4737
     * @example                                                                                                        // 4738
     *                                                                                                                 // 4739
     * _.dropRight([1, 2, 3]);                                                                                         // 4740
     * // => [1, 2]                                                                                                    // 4741
     *                                                                                                                 // 4742
     * _.dropRight([1, 2, 3], 2);                                                                                      // 4743
     * // => [1]                                                                                                       // 4744
     *                                                                                                                 // 4745
     * _.dropRight([1, 2, 3], 5);                                                                                      // 4746
     * // => []                                                                                                        // 4747
     *                                                                                                                 // 4748
     * _.dropRight([1, 2, 3], 0);                                                                                      // 4749
     * // => [1, 2, 3]                                                                                                 // 4750
     */                                                                                                                // 4751
    function dropRight(array, n, guard) {                                                                              // 4752
      var length = array ? array.length : 0;                                                                           // 4753
      if (!length) {                                                                                                   // 4754
        return [];                                                                                                     // 4755
      }                                                                                                                // 4756
      if (guard ? isIterateeCall(array, n, guard) : n == null) {                                                       // 4757
        n = 1;                                                                                                         // 4758
      }                                                                                                                // 4759
      n = length - (+n || 0);                                                                                          // 4760
      return baseSlice(array, 0, n < 0 ? 0 : n);                                                                       // 4761
    }                                                                                                                  // 4762
                                                                                                                       // 4763
    /**                                                                                                                // 4764
     * Creates a slice of `array` excluding elements dropped from the end.                                             // 4765
     * Elements are dropped until `predicate` returns falsey. The predicate is                                         // 4766
     * bound to `thisArg` and invoked with three arguments: (value, index, array).                                     // 4767
     *                                                                                                                 // 4768
     * If a property name is provided for `predicate` the created `_.property`                                         // 4769
     * style callback returns the property value of the given element.                                                 // 4770
     *                                                                                                                 // 4771
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 4772
     * style callback returns `true` for elements that have a matching property                                        // 4773
     * value, else `false`.                                                                                            // 4774
     *                                                                                                                 // 4775
     * If an object is provided for `predicate` the created `_.matches` style                                          // 4776
     * callback returns `true` for elements that match the properties of the given                                     // 4777
     * object, else `false`.                                                                                           // 4778
     *                                                                                                                 // 4779
     * @static                                                                                                         // 4780
     * @memberOf _                                                                                                     // 4781
     * @category Array                                                                                                 // 4782
     * @param {Array} array The array to query.                                                                        // 4783
     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 4784
     *  per iteration.                                                                                                 // 4785
     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 4786
     * @returns {Array} Returns the slice of `array`.                                                                  // 4787
     * @example                                                                                                        // 4788
     *                                                                                                                 // 4789
     * _.dropRightWhile([1, 2, 3], function(n) {                                                                       // 4790
     *   return n > 1;                                                                                                 // 4791
     * });                                                                                                             // 4792
     * // => [1]                                                                                                       // 4793
     *                                                                                                                 // 4794
     * var users = [                                                                                                   // 4795
     *   { 'user': 'barney',  'active': true },                                                                        // 4796
     *   { 'user': 'fred',    'active': false },                                                                       // 4797
     *   { 'user': 'pebbles', 'active': false }                                                                        // 4798
     * ];                                                                                                              // 4799
     *                                                                                                                 // 4800
     * // using the `_.matches` callback shorthand                                                                     // 4801
     * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');                               // 4802
     * // => ['barney', 'fred']                                                                                        // 4803
     *                                                                                                                 // 4804
     * // using the `_.matchesProperty` callback shorthand                                                             // 4805
     * _.pluck(_.dropRightWhile(users, 'active', false), 'user');                                                      // 4806
     * // => ['barney']                                                                                                // 4807
     *                                                                                                                 // 4808
     * // using the `_.property` callback shorthand                                                                    // 4809
     * _.pluck(_.dropRightWhile(users, 'active'), 'user');                                                             // 4810
     * // => ['barney', 'fred', 'pebbles']                                                                             // 4811
     */                                                                                                                // 4812
    function dropRightWhile(array, predicate, thisArg) {                                                               // 4813
      return (array && array.length)                                                                                   // 4814
        ? baseWhile(array, getCallback(predicate, thisArg, 3), true, true)                                             // 4815
        : [];                                                                                                          // 4816
    }                                                                                                                  // 4817
                                                                                                                       // 4818
    /**                                                                                                                // 4819
     * Creates a slice of `array` excluding elements dropped from the beginning.                                       // 4820
     * Elements are dropped until `predicate` returns falsey. The predicate is                                         // 4821
     * bound to `thisArg` and invoked with three arguments: (value, index, array).                                     // 4822
     *                                                                                                                 // 4823
     * If a property name is provided for `predicate` the created `_.property`                                         // 4824
     * style callback returns the property value of the given element.                                                 // 4825
     *                                                                                                                 // 4826
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 4827
     * style callback returns `true` for elements that have a matching property                                        // 4828
     * value, else `false`.                                                                                            // 4829
     *                                                                                                                 // 4830
     * If an object is provided for `predicate` the created `_.matches` style                                          // 4831
     * callback returns `true` for elements that have the properties of the given                                      // 4832
     * object, else `false`.                                                                                           // 4833
     *                                                                                                                 // 4834
     * @static                                                                                                         // 4835
     * @memberOf _                                                                                                     // 4836
     * @category Array                                                                                                 // 4837
     * @param {Array} array The array to query.                                                                        // 4838
     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 4839
     *  per iteration.                                                                                                 // 4840
     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 4841
     * @returns {Array} Returns the slice of `array`.                                                                  // 4842
     * @example                                                                                                        // 4843
     *                                                                                                                 // 4844
     * _.dropWhile([1, 2, 3], function(n) {                                                                            // 4845
     *   return n < 3;                                                                                                 // 4846
     * });                                                                                                             // 4847
     * // => [3]                                                                                                       // 4848
     *                                                                                                                 // 4849
     * var users = [                                                                                                   // 4850
     *   { 'user': 'barney',  'active': false },                                                                       // 4851
     *   { 'user': 'fred',    'active': false },                                                                       // 4852
     *   { 'user': 'pebbles', 'active': true }                                                                         // 4853
     * ];                                                                                                              // 4854
     *                                                                                                                 // 4855
     * // using the `_.matches` callback shorthand                                                                     // 4856
     * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');                                     // 4857
     * // => ['fred', 'pebbles']                                                                                       // 4858
     *                                                                                                                 // 4859
     * // using the `_.matchesProperty` callback shorthand                                                             // 4860
     * _.pluck(_.dropWhile(users, 'active', false), 'user');                                                           // 4861
     * // => ['pebbles']                                                                                               // 4862
     *                                                                                                                 // 4863
     * // using the `_.property` callback shorthand                                                                    // 4864
     * _.pluck(_.dropWhile(users, 'active'), 'user');                                                                  // 4865
     * // => ['barney', 'fred', 'pebbles']                                                                             // 4866
     */                                                                                                                // 4867
    function dropWhile(array, predicate, thisArg) {                                                                    // 4868
      return (array && array.length)                                                                                   // 4869
        ? baseWhile(array, getCallback(predicate, thisArg, 3), true)                                                   // 4870
        : [];                                                                                                          // 4871
    }                                                                                                                  // 4872
                                                                                                                       // 4873
    /**                                                                                                                // 4874
     * Fills elements of `array` with `value` from `start` up to, but not                                              // 4875
     * including, `end`.                                                                                               // 4876
     *                                                                                                                 // 4877
     * **Note:** This method mutates `array`.                                                                          // 4878
     *                                                                                                                 // 4879
     * @static                                                                                                         // 4880
     * @memberOf _                                                                                                     // 4881
     * @category Array                                                                                                 // 4882
     * @param {Array} array The array to fill.                                                                         // 4883
     * @param {*} value The value to fill `array` with.                                                                // 4884
     * @param {number} [start=0] The start position.                                                                   // 4885
     * @param {number} [end=array.length] The end position.                                                            // 4886
     * @returns {Array} Returns `array`.                                                                               // 4887
     * @example                                                                                                        // 4888
     *                                                                                                                 // 4889
     * var array = [1, 2, 3];                                                                                          // 4890
     *                                                                                                                 // 4891
     * _.fill(array, 'a');                                                                                             // 4892
     * console.log(array);                                                                                             // 4893
     * // => ['a', 'a', 'a']                                                                                           // 4894
     *                                                                                                                 // 4895
     * _.fill(Array(3), 2);                                                                                            // 4896
     * // => [2, 2, 2]                                                                                                 // 4897
     *                                                                                                                 // 4898
     * _.fill([4, 6, 8], '*', 1, 2);                                                                                   // 4899
     * // => [4, '*', 8]                                                                                               // 4900
     */                                                                                                                // 4901
    function fill(array, value, start, end) {                                                                          // 4902
      var length = array ? array.length : 0;                                                                           // 4903
      if (!length) {                                                                                                   // 4904
        return [];                                                                                                     // 4905
      }                                                                                                                // 4906
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {                                  // 4907
        start = 0;                                                                                                     // 4908
        end = length;                                                                                                  // 4909
      }                                                                                                                // 4910
      return baseFill(array, value, start, end);                                                                       // 4911
    }                                                                                                                  // 4912
                                                                                                                       // 4913
    /**                                                                                                                // 4914
     * This method is like `_.find` except that it returns the index of the first                                      // 4915
     * element `predicate` returns truthy for instead of the element itself.                                           // 4916
     *                                                                                                                 // 4917
     * If a property name is provided for `predicate` the created `_.property`                                         // 4918
     * style callback returns the property value of the given element.                                                 // 4919
     *                                                                                                                 // 4920
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 4921
     * style callback returns `true` for elements that have a matching property                                        // 4922
     * value, else `false`.                                                                                            // 4923
     *                                                                                                                 // 4924
     * If an object is provided for `predicate` the created `_.matches` style                                          // 4925
     * callback returns `true` for elements that have the properties of the given                                      // 4926
     * object, else `false`.                                                                                           // 4927
     *                                                                                                                 // 4928
     * @static                                                                                                         // 4929
     * @memberOf _                                                                                                     // 4930
     * @category Array                                                                                                 // 4931
     * @param {Array} array The array to search.                                                                       // 4932
     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 4933
     *  per iteration.                                                                                                 // 4934
     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 4935
     * @returns {number} Returns the index of the found element, else `-1`.                                            // 4936
     * @example                                                                                                        // 4937
     *                                                                                                                 // 4938
     * var users = [                                                                                                   // 4939
     *   { 'user': 'barney',  'active': false },                                                                       // 4940
     *   { 'user': 'fred',    'active': false },                                                                       // 4941
     *   { 'user': 'pebbles', 'active': true }                                                                         // 4942
     * ];                                                                                                              // 4943
     *                                                                                                                 // 4944
     * _.findIndex(users, function(chr) {                                                                              // 4945
     *   return chr.user == 'barney';                                                                                  // 4946
     * });                                                                                                             // 4947
     * // => 0                                                                                                         // 4948
     *                                                                                                                 // 4949
     * // using the `_.matches` callback shorthand                                                                     // 4950
     * _.findIndex(users, { 'user': 'fred', 'active': false });                                                        // 4951
     * // => 1                                                                                                         // 4952
     *                                                                                                                 // 4953
     * // using the `_.matchesProperty` callback shorthand                                                             // 4954
     * _.findIndex(users, 'active', false);                                                                            // 4955
     * // => 0                                                                                                         // 4956
     *                                                                                                                 // 4957
     * // using the `_.property` callback shorthand                                                                    // 4958
     * _.findIndex(users, 'active');                                                                                   // 4959
     * // => 2                                                                                                         // 4960
     */                                                                                                                // 4961
    var findIndex = createFindIndex();                                                                                 // 4962
                                                                                                                       // 4963
    /**                                                                                                                // 4964
     * This method is like `_.findIndex` except that it iterates over elements                                         // 4965
     * of `collection` from right to left.                                                                             // 4966
     *                                                                                                                 // 4967
     * If a property name is provided for `predicate` the created `_.property`                                         // 4968
     * style callback returns the property value of the given element.                                                 // 4969
     *                                                                                                                 // 4970
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 4971
     * style callback returns `true` for elements that have a matching property                                        // 4972
     * value, else `false`.                                                                                            // 4973
     *                                                                                                                 // 4974
     * If an object is provided for `predicate` the created `_.matches` style                                          // 4975
     * callback returns `true` for elements that have the properties of the given                                      // 4976
     * object, else `false`.                                                                                           // 4977
     *                                                                                                                 // 4978
     * @static                                                                                                         // 4979
     * @memberOf _                                                                                                     // 4980
     * @category Array                                                                                                 // 4981
     * @param {Array} array The array to search.                                                                       // 4982
     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 4983
     *  per iteration.                                                                                                 // 4984
     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 4985
     * @returns {number} Returns the index of the found element, else `-1`.                                            // 4986
     * @example                                                                                                        // 4987
     *                                                                                                                 // 4988
     * var users = [                                                                                                   // 4989
     *   { 'user': 'barney',  'active': true },                                                                        // 4990
     *   { 'user': 'fred',    'active': false },                                                                       // 4991
     *   { 'user': 'pebbles', 'active': false }                                                                        // 4992
     * ];                                                                                                              // 4993
     *                                                                                                                 // 4994
     * _.findLastIndex(users, function(chr) {                                                                          // 4995
     *   return chr.user == 'pebbles';                                                                                 // 4996
     * });                                                                                                             // 4997
     * // => 2                                                                                                         // 4998
     *                                                                                                                 // 4999
     * // using the `_.matches` callback shorthand                                                                     // 5000
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });                                                   // 5001
     * // => 0                                                                                                         // 5002
     *                                                                                                                 // 5003
     * // using the `_.matchesProperty` callback shorthand                                                             // 5004
     * _.findLastIndex(users, 'active', false);                                                                        // 5005
     * // => 2                                                                                                         // 5006
     *                                                                                                                 // 5007
     * // using the `_.property` callback shorthand                                                                    // 5008
     * _.findLastIndex(users, 'active');                                                                               // 5009
     * // => 0                                                                                                         // 5010
     */                                                                                                                // 5011
    var findLastIndex = createFindIndex(true);                                                                         // 5012
                                                                                                                       // 5013
    /**                                                                                                                // 5014
     * Gets the first element of `array`.                                                                              // 5015
     *                                                                                                                 // 5016
     * @static                                                                                                         // 5017
     * @memberOf _                                                                                                     // 5018
     * @alias head                                                                                                     // 5019
     * @category Array                                                                                                 // 5020
     * @param {Array} array The array to query.                                                                        // 5021
     * @returns {*} Returns the first element of `array`.                                                              // 5022
     * @example                                                                                                        // 5023
     *                                                                                                                 // 5024
     * _.first([1, 2, 3]);                                                                                             // 5025
     * // => 1                                                                                                         // 5026
     *                                                                                                                 // 5027
     * _.first([]);                                                                                                    // 5028
     * // => undefined                                                                                                 // 5029
     */                                                                                                                // 5030
    function first(array) {                                                                                            // 5031
      return array ? array[0] : undefined;                                                                             // 5032
    }                                                                                                                  // 5033
                                                                                                                       // 5034
    /**                                                                                                                // 5035
     * Flattens a nested array. If `isDeep` is `true` the array is recursively                                         // 5036
     * flattened, otherwise it's only flattened a single level.                                                        // 5037
     *                                                                                                                 // 5038
     * @static                                                                                                         // 5039
     * @memberOf _                                                                                                     // 5040
     * @category Array                                                                                                 // 5041
     * @param {Array} array The array to flatten.                                                                      // 5042
     * @param {boolean} [isDeep] Specify a deep flatten.                                                               // 5043
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 5044
     * @returns {Array} Returns the new flattened array.                                                               // 5045
     * @example                                                                                                        // 5046
     *                                                                                                                 // 5047
     * _.flatten([1, [2, 3, [4]]]);                                                                                    // 5048
     * // => [1, 2, 3, [4]]                                                                                            // 5049
     *                                                                                                                 // 5050
     * // using `isDeep`                                                                                               // 5051
     * _.flatten([1, [2, 3, [4]]], true);                                                                              // 5052
     * // => [1, 2, 3, 4]                                                                                              // 5053
     */                                                                                                                // 5054
    function flatten(array, isDeep, guard) {                                                                           // 5055
      var length = array ? array.length : 0;                                                                           // 5056
      if (guard && isIterateeCall(array, isDeep, guard)) {                                                             // 5057
        isDeep = false;                                                                                                // 5058
      }                                                                                                                // 5059
      return length ? baseFlatten(array, isDeep) : [];                                                                 // 5060
    }                                                                                                                  // 5061
                                                                                                                       // 5062
    /**                                                                                                                // 5063
     * Recursively flattens a nested array.                                                                            // 5064
     *                                                                                                                 // 5065
     * @static                                                                                                         // 5066
     * @memberOf _                                                                                                     // 5067
     * @category Array                                                                                                 // 5068
     * @param {Array} array The array to recursively flatten.                                                          // 5069
     * @returns {Array} Returns the new flattened array.                                                               // 5070
     * @example                                                                                                        // 5071
     *                                                                                                                 // 5072
     * _.flattenDeep([1, [2, 3, [4]]]);                                                                                // 5073
     * // => [1, 2, 3, 4]                                                                                              // 5074
     */                                                                                                                // 5075
    function flattenDeep(array) {                                                                                      // 5076
      var length = array ? array.length : 0;                                                                           // 5077
      return length ? baseFlatten(array, true) : [];                                                                   // 5078
    }                                                                                                                  // 5079
                                                                                                                       // 5080
    /**                                                                                                                // 5081
     * Gets the index at which the first occurrence of `value` is found in `array`                                     // 5082
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                          // 5083
     * for equality comparisons. If `fromIndex` is negative, it's used as the offset                                   // 5084
     * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`                                  // 5085
     * performs a faster binary search.                                                                                // 5086
     *                                                                                                                 // 5087
     * @static                                                                                                         // 5088
     * @memberOf _                                                                                                     // 5089
     * @category Array                                                                                                 // 5090
     * @param {Array} array The array to search.                                                                       // 5091
     * @param {*} value The value to search for.                                                                       // 5092
     * @param {boolean|number} [fromIndex=0] The index to search from or `true`                                        // 5093
     *  to perform a binary search on a sorted array.                                                                  // 5094
     * @returns {number} Returns the index of the matched value, else `-1`.                                            // 5095
     * @example                                                                                                        // 5096
     *                                                                                                                 // 5097
     * _.indexOf([1, 2, 1, 2], 2);                                                                                     // 5098
     * // => 1                                                                                                         // 5099
     *                                                                                                                 // 5100
     * // using `fromIndex`                                                                                            // 5101
     * _.indexOf([1, 2, 1, 2], 2, 2);                                                                                  // 5102
     * // => 3                                                                                                         // 5103
     *                                                                                                                 // 5104
     * // performing a binary search                                                                                   // 5105
     * _.indexOf([1, 1, 2, 2], 2, true);                                                                               // 5106
     * // => 2                                                                                                         // 5107
     */                                                                                                                // 5108
    function indexOf(array, value, fromIndex) {                                                                        // 5109
      var length = array ? array.length : 0;                                                                           // 5110
      if (!length) {                                                                                                   // 5111
        return -1;                                                                                                     // 5112
      }                                                                                                                // 5113
      if (typeof fromIndex == 'number') {                                                                              // 5114
        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;                                      // 5115
      } else if (fromIndex) {                                                                                          // 5116
        var index = binaryIndex(array, value);                                                                         // 5117
        if (index < length &&                                                                                          // 5118
            (value === value ? (value === array[index]) : (array[index] !== array[index]))) {                          // 5119
          return index;                                                                                                // 5120
        }                                                                                                              // 5121
        return -1;                                                                                                     // 5122
      }                                                                                                                // 5123
      return baseIndexOf(array, value, fromIndex || 0);                                                                // 5124
    }                                                                                                                  // 5125
                                                                                                                       // 5126
    /**                                                                                                                // 5127
     * Gets all but the last element of `array`.                                                                       // 5128
     *                                                                                                                 // 5129
     * @static                                                                                                         // 5130
     * @memberOf _                                                                                                     // 5131
     * @category Array                                                                                                 // 5132
     * @param {Array} array The array to query.                                                                        // 5133
     * @returns {Array} Returns the slice of `array`.                                                                  // 5134
     * @example                                                                                                        // 5135
     *                                                                                                                 // 5136
     * _.initial([1, 2, 3]);                                                                                           // 5137
     * // => [1, 2]                                                                                                    // 5138
     */                                                                                                                // 5139
    function initial(array) {                                                                                          // 5140
      return dropRight(array, 1);                                                                                      // 5141
    }                                                                                                                  // 5142
                                                                                                                       // 5143
    /**                                                                                                                // 5144
     * Creates an array of unique values that are included in all of the provided                                      // 5145
     * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                   // 5146
     * for equality comparisons.                                                                                       // 5147
     *                                                                                                                 // 5148
     * @static                                                                                                         // 5149
     * @memberOf _                                                                                                     // 5150
     * @category Array                                                                                                 // 5151
     * @param {...Array} [arrays] The arrays to inspect.                                                               // 5152
     * @returns {Array} Returns the new array of shared values.                                                        // 5153
     * @example                                                                                                        // 5154
     * _.intersection([1, 2], [4, 2], [2, 1]);                                                                         // 5155
     * // => [2]                                                                                                       // 5156
     */                                                                                                                // 5157
    var intersection = restParam(function(arrays) {                                                                    // 5158
      var othLength = arrays.length,                                                                                   // 5159
          othIndex = othLength,                                                                                        // 5160
          caches = Array(length),                                                                                      // 5161
          indexOf = getIndexOf(),                                                                                      // 5162
          isCommon = indexOf === baseIndexOf,                                                                          // 5163
          result = [];                                                                                                 // 5164
                                                                                                                       // 5165
      while (othIndex--) {                                                                                             // 5166
        var value = arrays[othIndex] = isArrayLike(value = arrays[othIndex]) ? value : [];                             // 5167
        caches[othIndex] = (isCommon && value.length >= 120) ? createCache(othIndex && value) : null;                  // 5168
      }                                                                                                                // 5169
      var array = arrays[0],                                                                                           // 5170
          index = -1,                                                                                                  // 5171
          length = array ? array.length : 0,                                                                           // 5172
          seen = caches[0];                                                                                            // 5173
                                                                                                                       // 5174
      outer:                                                                                                           // 5175
      while (++index < length) {                                                                                       // 5176
        value = array[index];                                                                                          // 5177
        if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value, 0)) < 0) {                                      // 5178
          var othIndex = othLength;                                                                                    // 5179
          while (--othIndex) {                                                                                         // 5180
            var cache = caches[othIndex];                                                                              // 5181
            if ((cache ? cacheIndexOf(cache, value) : indexOf(arrays[othIndex], value, 0)) < 0) {                      // 5182
              continue outer;                                                                                          // 5183
            }                                                                                                          // 5184
          }                                                                                                            // 5185
          if (seen) {                                                                                                  // 5186
            seen.push(value);                                                                                          // 5187
          }                                                                                                            // 5188
          result.push(value);                                                                                          // 5189
        }                                                                                                              // 5190
      }                                                                                                                // 5191
      return result;                                                                                                   // 5192
    });                                                                                                                // 5193
                                                                                                                       // 5194
    /**                                                                                                                // 5195
     * Gets the last element of `array`.                                                                               // 5196
     *                                                                                                                 // 5197
     * @static                                                                                                         // 5198
     * @memberOf _                                                                                                     // 5199
     * @category Array                                                                                                 // 5200
     * @param {Array} array The array to query.                                                                        // 5201
     * @returns {*} Returns the last element of `array`.                                                               // 5202
     * @example                                                                                                        // 5203
     *                                                                                                                 // 5204
     * _.last([1, 2, 3]);                                                                                              // 5205
     * // => 3                                                                                                         // 5206
     */                                                                                                                // 5207
    function last(array) {                                                                                             // 5208
      var length = array ? array.length : 0;                                                                           // 5209
      return length ? array[length - 1] : undefined;                                                                   // 5210
    }                                                                                                                  // 5211
                                                                                                                       // 5212
    /**                                                                                                                // 5213
     * This method is like `_.indexOf` except that it iterates over elements of                                        // 5214
     * `array` from right to left.                                                                                     // 5215
     *                                                                                                                 // 5216
     * @static                                                                                                         // 5217
     * @memberOf _                                                                                                     // 5218
     * @category Array                                                                                                 // 5219
     * @param {Array} array The array to search.                                                                       // 5220
     * @param {*} value The value to search for.                                                                       // 5221
     * @param {boolean|number} [fromIndex=array.length-1] The index to search from                                     // 5222
     *  or `true` to perform a binary search on a sorted array.                                                        // 5223
     * @returns {number} Returns the index of the matched value, else `-1`.                                            // 5224
     * @example                                                                                                        // 5225
     *                                                                                                                 // 5226
     * _.lastIndexOf([1, 2, 1, 2], 2);                                                                                 // 5227
     * // => 3                                                                                                         // 5228
     *                                                                                                                 // 5229
     * // using `fromIndex`                                                                                            // 5230
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);                                                                              // 5231
     * // => 1                                                                                                         // 5232
     *                                                                                                                 // 5233
     * // performing a binary search                                                                                   // 5234
     * _.lastIndexOf([1, 1, 2, 2], 2, true);                                                                           // 5235
     * // => 3                                                                                                         // 5236
     */                                                                                                                // 5237
    function lastIndexOf(array, value, fromIndex) {                                                                    // 5238
      var length = array ? array.length : 0;                                                                           // 5239
      if (!length) {                                                                                                   // 5240
        return -1;                                                                                                     // 5241
      }                                                                                                                // 5242
      var index = length;                                                                                              // 5243
      if (typeof fromIndex == 'number') {                                                                              // 5244
        index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;        // 5245
      } else if (fromIndex) {                                                                                          // 5246
        index = binaryIndex(array, value, true) - 1;                                                                   // 5247
        var other = array[index];                                                                                      // 5248
        if (value === value ? (value === other) : (other !== other)) {                                                 // 5249
          return index;                                                                                                // 5250
        }                                                                                                              // 5251
        return -1;                                                                                                     // 5252
      }                                                                                                                // 5253
      if (value !== value) {                                                                                           // 5254
        return indexOfNaN(array, index, true);                                                                         // 5255
      }                                                                                                                // 5256
      while (index--) {                                                                                                // 5257
        if (array[index] === value) {                                                                                  // 5258
          return index;                                                                                                // 5259
        }                                                                                                              // 5260
      }                                                                                                                // 5261
      return -1;                                                                                                       // 5262
    }                                                                                                                  // 5263
                                                                                                                       // 5264
    /**                                                                                                                // 5265
     * Removes all provided values from `array` using                                                                  // 5266
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                                // 5267
     * for equality comparisons.                                                                                       // 5268
     *                                                                                                                 // 5269
     * **Note:** Unlike `_.without`, this method mutates `array`.                                                      // 5270
     *                                                                                                                 // 5271
     * @static                                                                                                         // 5272
     * @memberOf _                                                                                                     // 5273
     * @category Array                                                                                                 // 5274
     * @param {Array} array The array to modify.                                                                       // 5275
     * @param {...*} [values] The values to remove.                                                                    // 5276
     * @returns {Array} Returns `array`.                                                                               // 5277
     * @example                                                                                                        // 5278
     *                                                                                                                 // 5279
     * var array = [1, 2, 3, 1, 2, 3];                                                                                 // 5280
     *                                                                                                                 // 5281
     * _.pull(array, 2, 3);                                                                                            // 5282
     * console.log(array);                                                                                             // 5283
     * // => [1, 1]                                                                                                    // 5284
     */                                                                                                                // 5285
    function pull() {                                                                                                  // 5286
      var args = arguments,                                                                                            // 5287
          array = args[0];                                                                                             // 5288
                                                                                                                       // 5289
      if (!(array && array.length)) {                                                                                  // 5290
        return array;                                                                                                  // 5291
      }                                                                                                                // 5292
      var index = 0,                                                                                                   // 5293
          indexOf = getIndexOf(),                                                                                      // 5294
          length = args.length;                                                                                        // 5295
                                                                                                                       // 5296
      while (++index < length) {                                                                                       // 5297
        var fromIndex = 0,                                                                                             // 5298
            value = args[index];                                                                                       // 5299
                                                                                                                       // 5300
        while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {                                                  // 5301
          splice.call(array, fromIndex, 1);                                                                            // 5302
        }                                                                                                              // 5303
      }                                                                                                                // 5304
      return array;                                                                                                    // 5305
    }                                                                                                                  // 5306
                                                                                                                       // 5307
    /**                                                                                                                // 5308
     * Removes elements from `array` corresponding to the given indexes and returns                                    // 5309
     * an array of the removed elements. Indexes may be specified as an array of                                       // 5310
     * indexes or as individual arguments.                                                                             // 5311
     *                                                                                                                 // 5312
     * **Note:** Unlike `_.at`, this method mutates `array`.                                                           // 5313
     *                                                                                                                 // 5314
     * @static                                                                                                         // 5315
     * @memberOf _                                                                                                     // 5316
     * @category Array                                                                                                 // 5317
     * @param {Array} array The array to modify.                                                                       // 5318
     * @param {...(number|number[])} [indexes] The indexes of elements to remove,                                      // 5319
     *  specified as individual indexes or arrays of indexes.                                                          // 5320
     * @returns {Array} Returns the new array of removed elements.                                                     // 5321
     * @example                                                                                                        // 5322
     *                                                                                                                 // 5323
     * var array = [5, 10, 15, 20];                                                                                    // 5324
     * var evens = _.pullAt(array, 1, 3);                                                                              // 5325
     *                                                                                                                 // 5326
     * console.log(array);                                                                                             // 5327
     * // => [5, 15]                                                                                                   // 5328
     *                                                                                                                 // 5329
     * console.log(evens);                                                                                             // 5330
     * // => [10, 20]                                                                                                  // 5331
     */                                                                                                                // 5332
    var pullAt = restParam(function(array, indexes) {                                                                  // 5333
      indexes = baseFlatten(indexes);                                                                                  // 5334
                                                                                                                       // 5335
      var result = baseAt(array, indexes);                                                                             // 5336
      basePullAt(array, indexes.sort(baseCompareAscending));                                                           // 5337
      return result;                                                                                                   // 5338
    });                                                                                                                // 5339
                                                                                                                       // 5340
    /**                                                                                                                // 5341
     * Removes all elements from `array` that `predicate` returns truthy for                                           // 5342
     * and returns an array of the removed elements. The predicate is bound to                                         // 5343
     * `thisArg` and invoked with three arguments: (value, index, array).                                              // 5344
     *                                                                                                                 // 5345
     * If a property name is provided for `predicate` the created `_.property`                                         // 5346
     * style callback returns the property value of the given element.                                                 // 5347
     *                                                                                                                 // 5348
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 5349
     * style callback returns `true` for elements that have a matching property                                        // 5350
     * value, else `false`.                                                                                            // 5351
     *                                                                                                                 // 5352
     * If an object is provided for `predicate` the created `_.matches` style                                          // 5353
     * callback returns `true` for elements that have the properties of the given                                      // 5354
     * object, else `false`.                                                                                           // 5355
     *                                                                                                                 // 5356
     * **Note:** Unlike `_.filter`, this method mutates `array`.                                                       // 5357
     *                                                                                                                 // 5358
     * @static                                                                                                         // 5359
     * @memberOf _                                                                                                     // 5360
     * @category Array                                                                                                 // 5361
     * @param {Array} array The array to modify.                                                                       // 5362
     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 5363
     *  per iteration.                                                                                                 // 5364
     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 5365
     * @returns {Array} Returns the new array of removed elements.                                                     // 5366
     * @example                                                                                                        // 5367
     *                                                                                                                 // 5368
     * var array = [1, 2, 3, 4];                                                                                       // 5369
     * var evens = _.remove(array, function(n) {                                                                       // 5370
     *   return n % 2 == 0;                                                                                            // 5371
     * });                                                                                                             // 5372
     *                                                                                                                 // 5373
     * console.log(array);                                                                                             // 5374
     * // => [1, 3]                                                                                                    // 5375
     *                                                                                                                 // 5376
     * console.log(evens);                                                                                             // 5377
     * // => [2, 4]                                                                                                    // 5378
     */                                                                                                                // 5379
    function remove(array, predicate, thisArg) {                                                                       // 5380
      var result = [];                                                                                                 // 5381
      if (!(array && array.length)) {                                                                                  // 5382
        return result;                                                                                                 // 5383
      }                                                                                                                // 5384
      var index = -1,                                                                                                  // 5385
          indexes = [],                                                                                                // 5386
          length = array.length;                                                                                       // 5387
                                                                                                                       // 5388
      predicate = getCallback(predicate, thisArg, 3);                                                                  // 5389
      while (++index < length) {                                                                                       // 5390
        var value = array[index];                                                                                      // 5391
        if (predicate(value, index, array)) {                                                                          // 5392
          result.push(value);                                                                                          // 5393
          indexes.push(index);                                                                                         // 5394
        }                                                                                                              // 5395
      }                                                                                                                // 5396
      basePullAt(array, indexes);                                                                                      // 5397
      return result;                                                                                                   // 5398
    }                                                                                                                  // 5399
                                                                                                                       // 5400
    /**                                                                                                                // 5401
     * Gets all but the first element of `array`.                                                                      // 5402
     *                                                                                                                 // 5403
     * @static                                                                                                         // 5404
     * @memberOf _                                                                                                     // 5405
     * @alias tail                                                                                                     // 5406
     * @category Array                                                                                                 // 5407
     * @param {Array} array The array to query.                                                                        // 5408
     * @returns {Array} Returns the slice of `array`.                                                                  // 5409
     * @example                                                                                                        // 5410
     *                                                                                                                 // 5411
     * _.rest([1, 2, 3]);                                                                                              // 5412
     * // => [2, 3]                                                                                                    // 5413
     */                                                                                                                // 5414
    function rest(array) {                                                                                             // 5415
      return drop(array, 1);                                                                                           // 5416
    }                                                                                                                  // 5417
                                                                                                                       // 5418
    /**                                                                                                                // 5419
     * Creates a slice of `array` from `start` up to, but not including, `end`.                                        // 5420
     *                                                                                                                 // 5421
     * **Note:** This method is used instead of `Array#slice` to support node                                          // 5422
     * lists in IE < 9 and to ensure dense arrays are returned.                                                        // 5423
     *                                                                                                                 // 5424
     * @static                                                                                                         // 5425
     * @memberOf _                                                                                                     // 5426
     * @category Array                                                                                                 // 5427
     * @param {Array} array The array to slice.                                                                        // 5428
     * @param {number} [start=0] The start position.                                                                   // 5429
     * @param {number} [end=array.length] The end position.                                                            // 5430
     * @returns {Array} Returns the slice of `array`.                                                                  // 5431
     */                                                                                                                // 5432
    function slice(array, start, end) {                                                                                // 5433
      var length = array ? array.length : 0;                                                                           // 5434
      if (!length) {                                                                                                   // 5435
        return [];                                                                                                     // 5436
      }                                                                                                                // 5437
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {                                        // 5438
        start = 0;                                                                                                     // 5439
        end = length;                                                                                                  // 5440
      }                                                                                                                // 5441
      return baseSlice(array, start, end);                                                                             // 5442
    }                                                                                                                  // 5443
                                                                                                                       // 5444
    /**                                                                                                                // 5445
     * Uses a binary search to determine the lowest index at which `value` should                                      // 5446
     * be inserted into `array` in order to maintain its sort order. If an iteratee                                    // 5447
     * function is provided it's invoked for `value` and each element of `array`                                       // 5448
     * to compute their sort ranking. The iteratee is bound to `thisArg` and                                           // 5449
     * invoked with one argument; (value).                                                                             // 5450
     *                                                                                                                 // 5451
     * If a property name is provided for `iteratee` the created `_.property`                                          // 5452
     * style callback returns the property value of the given element.                                                 // 5453
     *                                                                                                                 // 5454
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 5455
     * style callback returns `true` for elements that have a matching property                                        // 5456
     * value, else `false`.                                                                                            // 5457
     *                                                                                                                 // 5458
     * If an object is provided for `iteratee` the created `_.matches` style                                           // 5459
     * callback returns `true` for elements that have the properties of the given                                      // 5460
     * object, else `false`.                                                                                           // 5461
     *                                                                                                                 // 5462
     * @static                                                                                                         // 5463
     * @memberOf _                                                                                                     // 5464
     * @category Array                                                                                                 // 5465
     * @param {Array} array The sorted array to inspect.                                                               // 5466
     * @param {*} value The value to evaluate.                                                                         // 5467
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked                                      // 5468
     *  per iteration.                                                                                                 // 5469
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 5470
     * @returns {number} Returns the index at which `value` should be inserted                                         // 5471
     *  into `array`.                                                                                                  // 5472
     * @example                                                                                                        // 5473
     *                                                                                                                 // 5474
     * _.sortedIndex([30, 50], 40);                                                                                    // 5475
     * // => 1                                                                                                         // 5476
     *                                                                                                                 // 5477
     * _.sortedIndex([4, 4, 5, 5], 5);                                                                                 // 5478
     * // => 2                                                                                                         // 5479
     *                                                                                                                 // 5480
     * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };                                              // 5481
     *                                                                                                                 // 5482
     * // using an iteratee function                                                                                   // 5483
     * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {                                                    // 5484
     *   return this.data[word];                                                                                       // 5485
     * }, dict);                                                                                                       // 5486
     * // => 1                                                                                                         // 5487
     *                                                                                                                 // 5488
     * // using the `_.property` callback shorthand                                                                    // 5489
     * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');                                                    // 5490
     * // => 1                                                                                                         // 5491
     */                                                                                                                // 5492
    var sortedIndex = createSortedIndex();                                                                             // 5493
                                                                                                                       // 5494
    /**                                                                                                                // 5495
     * This method is like `_.sortedIndex` except that it returns the highest                                          // 5496
     * index at which `value` should be inserted into `array` in order to                                              // 5497
     * maintain its sort order.                                                                                        // 5498
     *                                                                                                                 // 5499
     * @static                                                                                                         // 5500
     * @memberOf _                                                                                                     // 5501
     * @category Array                                                                                                 // 5502
     * @param {Array} array The sorted array to inspect.                                                               // 5503
     * @param {*} value The value to evaluate.                                                                         // 5504
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked                                      // 5505
     *  per iteration.                                                                                                 // 5506
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 5507
     * @returns {number} Returns the index at which `value` should be inserted                                         // 5508
     *  into `array`.                                                                                                  // 5509
     * @example                                                                                                        // 5510
     *                                                                                                                 // 5511
     * _.sortedLastIndex([4, 4, 5, 5], 5);                                                                             // 5512
     * // => 4                                                                                                         // 5513
     */                                                                                                                // 5514
    var sortedLastIndex = createSortedIndex(true);                                                                     // 5515
                                                                                                                       // 5516
    /**                                                                                                                // 5517
     * Creates a slice of `array` with `n` elements taken from the beginning.                                          // 5518
     *                                                                                                                 // 5519
     * @static                                                                                                         // 5520
     * @memberOf _                                                                                                     // 5521
     * @category Array                                                                                                 // 5522
     * @param {Array} array The array to query.                                                                        // 5523
     * @param {number} [n=1] The number of elements to take.                                                           // 5524
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 5525
     * @returns {Array} Returns the slice of `array`.                                                                  // 5526
     * @example                                                                                                        // 5527
     *                                                                                                                 // 5528
     * _.take([1, 2, 3]);                                                                                              // 5529
     * // => [1]                                                                                                       // 5530
     *                                                                                                                 // 5531
     * _.take([1, 2, 3], 2);                                                                                           // 5532
     * // => [1, 2]                                                                                                    // 5533
     *                                                                                                                 // 5534
     * _.take([1, 2, 3], 5);                                                                                           // 5535
     * // => [1, 2, 3]                                                                                                 // 5536
     *                                                                                                                 // 5537
     * _.take([1, 2, 3], 0);                                                                                           // 5538
     * // => []                                                                                                        // 5539
     */                                                                                                                // 5540
    function take(array, n, guard) {                                                                                   // 5541
      var length = array ? array.length : 0;                                                                           // 5542
      if (!length) {                                                                                                   // 5543
        return [];                                                                                                     // 5544
      }                                                                                                                // 5545
      if (guard ? isIterateeCall(array, n, guard) : n == null) {                                                       // 5546
        n = 1;                                                                                                         // 5547
      }                                                                                                                // 5548
      return baseSlice(array, 0, n < 0 ? 0 : n);                                                                       // 5549
    }                                                                                                                  // 5550
                                                                                                                       // 5551
    /**                                                                                                                // 5552
     * Creates a slice of `array` with `n` elements taken from the end.                                                // 5553
     *                                                                                                                 // 5554
     * @static                                                                                                         // 5555
     * @memberOf _                                                                                                     // 5556
     * @category Array                                                                                                 // 5557
     * @param {Array} array The array to query.                                                                        // 5558
     * @param {number} [n=1] The number of elements to take.                                                           // 5559
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 5560
     * @returns {Array} Returns the slice of `array`.                                                                  // 5561
     * @example                                                                                                        // 5562
     *                                                                                                                 // 5563
     * _.takeRight([1, 2, 3]);                                                                                         // 5564
     * // => [3]                                                                                                       // 5565
     *                                                                                                                 // 5566
     * _.takeRight([1, 2, 3], 2);                                                                                      // 5567
     * // => [2, 3]                                                                                                    // 5568
     *                                                                                                                 // 5569
     * _.takeRight([1, 2, 3], 5);                                                                                      // 5570
     * // => [1, 2, 3]                                                                                                 // 5571
     *                                                                                                                 // 5572
     * _.takeRight([1, 2, 3], 0);                                                                                      // 5573
     * // => []                                                                                                        // 5574
     */                                                                                                                // 5575
    function takeRight(array, n, guard) {                                                                              // 5576
      var length = array ? array.length : 0;                                                                           // 5577
      if (!length) {                                                                                                   // 5578
        return [];                                                                                                     // 5579
      }                                                                                                                // 5580
      if (guard ? isIterateeCall(array, n, guard) : n == null) {                                                       // 5581
        n = 1;                                                                                                         // 5582
      }                                                                                                                // 5583
      n = length - (+n || 0);                                                                                          // 5584
      return baseSlice(array, n < 0 ? 0 : n);                                                                          // 5585
    }                                                                                                                  // 5586
                                                                                                                       // 5587
    /**                                                                                                                // 5588
     * Creates a slice of `array` with elements taken from the end. Elements are                                       // 5589
     * taken until `predicate` returns falsey. The predicate is bound to `thisArg`                                     // 5590
     * and invoked with three arguments: (value, index, array).                                                        // 5591
     *                                                                                                                 // 5592
     * If a property name is provided for `predicate` the created `_.property`                                         // 5593
     * style callback returns the property value of the given element.                                                 // 5594
     *                                                                                                                 // 5595
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 5596
     * style callback returns `true` for elements that have a matching property                                        // 5597
     * value, else `false`.                                                                                            // 5598
     *                                                                                                                 // 5599
     * If an object is provided for `predicate` the created `_.matches` style                                          // 5600
     * callback returns `true` for elements that have the properties of the given                                      // 5601
     * object, else `false`.                                                                                           // 5602
     *                                                                                                                 // 5603
     * @static                                                                                                         // 5604
     * @memberOf _                                                                                                     // 5605
     * @category Array                                                                                                 // 5606
     * @param {Array} array The array to query.                                                                        // 5607
     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 5608
     *  per iteration.                                                                                                 // 5609
     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 5610
     * @returns {Array} Returns the slice of `array`.                                                                  // 5611
     * @example                                                                                                        // 5612
     *                                                                                                                 // 5613
     * _.takeRightWhile([1, 2, 3], function(n) {                                                                       // 5614
     *   return n > 1;                                                                                                 // 5615
     * });                                                                                                             // 5616
     * // => [2, 3]                                                                                                    // 5617
     *                                                                                                                 // 5618
     * var users = [                                                                                                   // 5619
     *   { 'user': 'barney',  'active': true },                                                                        // 5620
     *   { 'user': 'fred',    'active': false },                                                                       // 5621
     *   { 'user': 'pebbles', 'active': false }                                                                        // 5622
     * ];                                                                                                              // 5623
     *                                                                                                                 // 5624
     * // using the `_.matches` callback shorthand                                                                     // 5625
     * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');                               // 5626
     * // => ['pebbles']                                                                                               // 5627
     *                                                                                                                 // 5628
     * // using the `_.matchesProperty` callback shorthand                                                             // 5629
     * _.pluck(_.takeRightWhile(users, 'active', false), 'user');                                                      // 5630
     * // => ['fred', 'pebbles']                                                                                       // 5631
     *                                                                                                                 // 5632
     * // using the `_.property` callback shorthand                                                                    // 5633
     * _.pluck(_.takeRightWhile(users, 'active'), 'user');                                                             // 5634
     * // => []                                                                                                        // 5635
     */                                                                                                                // 5636
    function takeRightWhile(array, predicate, thisArg) {                                                               // 5637
      return (array && array.length)                                                                                   // 5638
        ? baseWhile(array, getCallback(predicate, thisArg, 3), false, true)                                            // 5639
        : [];                                                                                                          // 5640
    }                                                                                                                  // 5641
                                                                                                                       // 5642
    /**                                                                                                                // 5643
     * Creates a slice of `array` with elements taken from the beginning. Elements                                     // 5644
     * are taken until `predicate` returns falsey. The predicate is bound to                                           // 5645
     * `thisArg` and invoked with three arguments: (value, index, array).                                              // 5646
     *                                                                                                                 // 5647
     * If a property name is provided for `predicate` the created `_.property`                                         // 5648
     * style callback returns the property value of the given element.                                                 // 5649
     *                                                                                                                 // 5650
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 5651
     * style callback returns `true` for elements that have a matching property                                        // 5652
     * value, else `false`.                                                                                            // 5653
     *                                                                                                                 // 5654
     * If an object is provided for `predicate` the created `_.matches` style                                          // 5655
     * callback returns `true` for elements that have the properties of the given                                      // 5656
     * object, else `false`.                                                                                           // 5657
     *                                                                                                                 // 5658
     * @static                                                                                                         // 5659
     * @memberOf _                                                                                                     // 5660
     * @category Array                                                                                                 // 5661
     * @param {Array} array The array to query.                                                                        // 5662
     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 5663
     *  per iteration.                                                                                                 // 5664
     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 5665
     * @returns {Array} Returns the slice of `array`.                                                                  // 5666
     * @example                                                                                                        // 5667
     *                                                                                                                 // 5668
     * _.takeWhile([1, 2, 3], function(n) {                                                                            // 5669
     *   return n < 3;                                                                                                 // 5670
     * });                                                                                                             // 5671
     * // => [1, 2]                                                                                                    // 5672
     *                                                                                                                 // 5673
     * var users = [                                                                                                   // 5674
     *   { 'user': 'barney',  'active': false },                                                                       // 5675
     *   { 'user': 'fred',    'active': false},                                                                        // 5676
     *   { 'user': 'pebbles', 'active': true }                                                                         // 5677
     * ];                                                                                                              // 5678
     *                                                                                                                 // 5679
     * // using the `_.matches` callback shorthand                                                                     // 5680
     * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');                                     // 5681
     * // => ['barney']                                                                                                // 5682
     *                                                                                                                 // 5683
     * // using the `_.matchesProperty` callback shorthand                                                             // 5684
     * _.pluck(_.takeWhile(users, 'active', false), 'user');                                                           // 5685
     * // => ['barney', 'fred']                                                                                        // 5686
     *                                                                                                                 // 5687
     * // using the `_.property` callback shorthand                                                                    // 5688
     * _.pluck(_.takeWhile(users, 'active'), 'user');                                                                  // 5689
     * // => []                                                                                                        // 5690
     */                                                                                                                // 5691
    function takeWhile(array, predicate, thisArg) {                                                                    // 5692
      return (array && array.length)                                                                                   // 5693
        ? baseWhile(array, getCallback(predicate, thisArg, 3))                                                         // 5694
        : [];                                                                                                          // 5695
    }                                                                                                                  // 5696
                                                                                                                       // 5697
    /**                                                                                                                // 5698
     * Creates an array of unique values, in order, from all of the provided arrays                                    // 5699
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                          // 5700
     * for equality comparisons.                                                                                       // 5701
     *                                                                                                                 // 5702
     * @static                                                                                                         // 5703
     * @memberOf _                                                                                                     // 5704
     * @category Array                                                                                                 // 5705
     * @param {...Array} [arrays] The arrays to inspect.                                                               // 5706
     * @returns {Array} Returns the new array of combined values.                                                      // 5707
     * @example                                                                                                        // 5708
     *                                                                                                                 // 5709
     * _.union([1, 2], [4, 2], [2, 1]);                                                                                // 5710
     * // => [1, 2, 4]                                                                                                 // 5711
     */                                                                                                                // 5712
    var union = restParam(function(arrays) {                                                                           // 5713
      return baseUniq(baseFlatten(arrays, false, true));                                                               // 5714
    });                                                                                                                // 5715
                                                                                                                       // 5716
    /**                                                                                                                // 5717
     * Creates a duplicate-free version of an array, using                                                             // 5718
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                                // 5719
     * for equality comparisons, in which only the first occurence of each element                                     // 5720
     * is kept. Providing `true` for `isSorted` performs a faster search algorithm                                     // 5721
     * for sorted arrays. If an iteratee function is provided it's invoked for                                         // 5722
     * each element in the array to generate the criterion by which uniqueness                                         // 5723
     * is computed. The `iteratee` is bound to `thisArg` and invoked with three                                        // 5724
     * arguments: (value, index, array).                                                                               // 5725
     *                                                                                                                 // 5726
     * If a property name is provided for `iteratee` the created `_.property`                                          // 5727
     * style callback returns the property value of the given element.                                                 // 5728
     *                                                                                                                 // 5729
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 5730
     * style callback returns `true` for elements that have a matching property                                        // 5731
     * value, else `false`.                                                                                            // 5732
     *                                                                                                                 // 5733
     * If an object is provided for `iteratee` the created `_.matches` style                                           // 5734
     * callback returns `true` for elements that have the properties of the given                                      // 5735
     * object, else `false`.                                                                                           // 5736
     *                                                                                                                 // 5737
     * @static                                                                                                         // 5738
     * @memberOf _                                                                                                     // 5739
     * @alias unique                                                                                                   // 5740
     * @category Array                                                                                                 // 5741
     * @param {Array} array The array to inspect.                                                                      // 5742
     * @param {boolean} [isSorted] Specify the array is sorted.                                                        // 5743
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.                                  // 5744
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 5745
     * @returns {Array} Returns the new duplicate-value-free array.                                                    // 5746
     * @example                                                                                                        // 5747
     *                                                                                                                 // 5748
     * _.uniq([2, 1, 2]);                                                                                              // 5749
     * // => [2, 1]                                                                                                    // 5750
     *                                                                                                                 // 5751
     * // using `isSorted`                                                                                             // 5752
     * _.uniq([1, 1, 2], true);                                                                                        // 5753
     * // => [1, 2]                                                                                                    // 5754
     *                                                                                                                 // 5755
     * // using an iteratee function                                                                                   // 5756
     * _.uniq([1, 2.5, 1.5, 2], function(n) {                                                                          // 5757
     *   return this.floor(n);                                                                                         // 5758
     * }, Math);                                                                                                       // 5759
     * // => [1, 2.5]                                                                                                  // 5760
     *                                                                                                                 // 5761
     * // using the `_.property` callback shorthand                                                                    // 5762
     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');                                                              // 5763
     * // => [{ 'x': 1 }, { 'x': 2 }]                                                                                  // 5764
     */                                                                                                                // 5765
    function uniq(array, isSorted, iteratee, thisArg) {                                                                // 5766
      var length = array ? array.length : 0;                                                                           // 5767
      if (!length) {                                                                                                   // 5768
        return [];                                                                                                     // 5769
      }                                                                                                                // 5770
      if (isSorted != null && typeof isSorted != 'boolean') {                                                          // 5771
        thisArg = iteratee;                                                                                            // 5772
        iteratee = isIterateeCall(array, isSorted, thisArg) ? undefined : isSorted;                                    // 5773
        isSorted = false;                                                                                              // 5774
      }                                                                                                                // 5775
      var callback = getCallback();                                                                                    // 5776
      if (!(iteratee == null && callback === baseCallback)) {                                                          // 5777
        iteratee = callback(iteratee, thisArg, 3);                                                                     // 5778
      }                                                                                                                // 5779
      return (isSorted && getIndexOf() === baseIndexOf)                                                                // 5780
        ? sortedUniq(array, iteratee)                                                                                  // 5781
        : baseUniq(array, iteratee);                                                                                   // 5782
    }                                                                                                                  // 5783
                                                                                                                       // 5784
    /**                                                                                                                // 5785
     * This method is like `_.zip` except that it accepts an array of grouped                                          // 5786
     * elements and creates an array regrouping the elements to their pre-zip                                          // 5787
     * configuration.                                                                                                  // 5788
     *                                                                                                                 // 5789
     * @static                                                                                                         // 5790
     * @memberOf _                                                                                                     // 5791
     * @category Array                                                                                                 // 5792
     * @param {Array} array The array of grouped elements to process.                                                  // 5793
     * @returns {Array} Returns the new array of regrouped elements.                                                   // 5794
     * @example                                                                                                        // 5795
     *                                                                                                                 // 5796
     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);                                                // 5797
     * // => [['fred', 30, true], ['barney', 40, false]]                                                               // 5798
     *                                                                                                                 // 5799
     * _.unzip(zipped);                                                                                                // 5800
     * // => [['fred', 'barney'], [30, 40], [true, false]]                                                             // 5801
     */                                                                                                                // 5802
    function unzip(array) {                                                                                            // 5803
      if (!(array && array.length)) {                                                                                  // 5804
        return [];                                                                                                     // 5805
      }                                                                                                                // 5806
      var index = -1,                                                                                                  // 5807
          length = 0;                                                                                                  // 5808
                                                                                                                       // 5809
      array = arrayFilter(array, function(group) {                                                                     // 5810
        if (isArrayLike(group)) {                                                                                      // 5811
          length = nativeMax(group.length, length);                                                                    // 5812
          return true;                                                                                                 // 5813
        }                                                                                                              // 5814
      });                                                                                                              // 5815
      var result = Array(length);                                                                                      // 5816
      while (++index < length) {                                                                                       // 5817
        result[index] = arrayMap(array, baseProperty(index));                                                          // 5818
      }                                                                                                                // 5819
      return result;                                                                                                   // 5820
    }                                                                                                                  // 5821
                                                                                                                       // 5822
    /**                                                                                                                // 5823
     * This method is like `_.unzip` except that it accepts an iteratee to specify                                     // 5824
     * how regrouped values should be combined. The `iteratee` is bound to `thisArg`                                   // 5825
     * and invoked with four arguments: (accumulator, value, index, group).                                            // 5826
     *                                                                                                                 // 5827
     * @static                                                                                                         // 5828
     * @memberOf _                                                                                                     // 5829
     * @category Array                                                                                                 // 5830
     * @param {Array} array The array of grouped elements to process.                                                  // 5831
     * @param {Function} [iteratee] The function to combine regrouped values.                                          // 5832
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 5833
     * @returns {Array} Returns the new array of regrouped elements.                                                   // 5834
     * @example                                                                                                        // 5835
     *                                                                                                                 // 5836
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);                                                               // 5837
     * // => [[1, 10, 100], [2, 20, 200]]                                                                              // 5838
     *                                                                                                                 // 5839
     * _.unzipWith(zipped, _.add);                                                                                     // 5840
     * // => [3, 30, 300]                                                                                              // 5841
     */                                                                                                                // 5842
    function unzipWith(array, iteratee, thisArg) {                                                                     // 5843
      var length = array ? array.length : 0;                                                                           // 5844
      if (!length) {                                                                                                   // 5845
        return [];                                                                                                     // 5846
      }                                                                                                                // 5847
      var result = unzip(array);                                                                                       // 5848
      if (iteratee == null) {                                                                                          // 5849
        return result;                                                                                                 // 5850
      }                                                                                                                // 5851
      iteratee = bindCallback(iteratee, thisArg, 4);                                                                   // 5852
      return arrayMap(result, function(group) {                                                                        // 5853
        return arrayReduce(group, iteratee, undefined, true);                                                          // 5854
      });                                                                                                              // 5855
    }                                                                                                                  // 5856
                                                                                                                       // 5857
    /**                                                                                                                // 5858
     * Creates an array excluding all provided values using                                                            // 5859
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                                // 5860
     * for equality comparisons.                                                                                       // 5861
     *                                                                                                                 // 5862
     * @static                                                                                                         // 5863
     * @memberOf _                                                                                                     // 5864
     * @category Array                                                                                                 // 5865
     * @param {Array} array The array to filter.                                                                       // 5866
     * @param {...*} [values] The values to exclude.                                                                   // 5867
     * @returns {Array} Returns the new array of filtered values.                                                      // 5868
     * @example                                                                                                        // 5869
     *                                                                                                                 // 5870
     * _.without([1, 2, 1, 3], 1, 2);                                                                                  // 5871
     * // => [3]                                                                                                       // 5872
     */                                                                                                                // 5873
    var without = restParam(function(array, values) {                                                                  // 5874
      return isArrayLike(array)                                                                                        // 5875
        ? baseDifference(array, values)                                                                                // 5876
        : [];                                                                                                          // 5877
    });                                                                                                                // 5878
                                                                                                                       // 5879
    /**                                                                                                                // 5880
     * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the provided arrays.                                                                                         // 5882
     *                                                                                                                 // 5883
     * @static                                                                                                         // 5884
     * @memberOf _                                                                                                     // 5885
     * @category Array                                                                                                 // 5886
     * @param {...Array} [arrays] The arrays to inspect.                                                               // 5887
     * @returns {Array} Returns the new array of values.                                                               // 5888
     * @example                                                                                                        // 5889
     *                                                                                                                 // 5890
     * _.xor([1, 2], [4, 2]);                                                                                          // 5891
     * // => [1, 4]                                                                                                    // 5892
     */                                                                                                                // 5893
    function xor() {                                                                                                   // 5894
      var index = -1,                                                                                                  // 5895
          length = arguments.length;                                                                                   // 5896
                                                                                                                       // 5897
      while (++index < length) {                                                                                       // 5898
        var array = arguments[index];                                                                                  // 5899
        if (isArrayLike(array)) {                                                                                      // 5900
          var result = result                                                                                          // 5901
            ? arrayPush(baseDifference(result, array), baseDifference(array, result))                                  // 5902
            : array;                                                                                                   // 5903
        }                                                                                                              // 5904
      }                                                                                                                // 5905
      return result ? baseUniq(result) : [];                                                                           // 5906
    }                                                                                                                  // 5907
                                                                                                                       // 5908
    /**                                                                                                                // 5909
     * Creates an array of grouped elements, the first of which contains the first                                     // 5910
     * elements of the given arrays, the second of which contains the second elements                                  // 5911
     * of the given arrays, and so on.                                                                                 // 5912
     *                                                                                                                 // 5913
     * @static                                                                                                         // 5914
     * @memberOf _                                                                                                     // 5915
     * @category Array                                                                                                 // 5916
     * @param {...Array} [arrays] The arrays to process.                                                               // 5917
     * @returns {Array} Returns the new array of grouped elements.                                                     // 5918
     * @example                                                                                                        // 5919
     *                                                                                                                 // 5920
     * _.zip(['fred', 'barney'], [30, 40], [true, false]);                                                             // 5921
     * // => [['fred', 30, true], ['barney', 40, false]]                                                               // 5922
     */                                                                                                                // 5923
    var zip = restParam(unzip);                                                                                        // 5924
                                                                                                                       // 5925
    /**                                                                                                                // 5926
     * The inverse of `_.pairs`; this method returns an object composed from arrays                                    // 5927
     * of property names and values. Provide either a single two dimensional array,                                    // 5928
     * e.g. `[[key1, value1], [key2, value2]]` or two arrays, one of property names                                    // 5929
     * and one of corresponding values.                                                                                // 5930
     *                                                                                                                 // 5931
     * @static                                                                                                         // 5932
     * @memberOf _                                                                                                     // 5933
     * @alias object                                                                                                   // 5934
     * @category Array                                                                                                 // 5935
     * @param {Array} props The property names.                                                                        // 5936
     * @param {Array} [values=[]] The property values.                                                                 // 5937
     * @returns {Object} Returns the new object.                                                                       // 5938
     * @example                                                                                                        // 5939
     *                                                                                                                 // 5940
     * _.zipObject([['fred', 30], ['barney', 40]]);                                                                    // 5941
     * // => { 'fred': 30, 'barney': 40 }                                                                              // 5942
     *                                                                                                                 // 5943
     * _.zipObject(['fred', 'barney'], [30, 40]);                                                                      // 5944
     * // => { 'fred': 30, 'barney': 40 }                                                                              // 5945
     */                                                                                                                // 5946
    function zipObject(props, values) {                                                                                // 5947
      var index = -1,                                                                                                  // 5948
          length = props ? props.length : 0,                                                                           // 5949
          result = {};                                                                                                 // 5950
                                                                                                                       // 5951
      if (length && !values && !isArray(props[0])) {                                                                   // 5952
        values = [];                                                                                                   // 5953
      }                                                                                                                // 5954
      while (++index < length) {                                                                                       // 5955
        var key = props[index];                                                                                        // 5956
        if (values) {                                                                                                  // 5957
          result[key] = values[index];                                                                                 // 5958
        } else if (key) {                                                                                              // 5959
          result[key[0]] = key[1];                                                                                     // 5960
        }                                                                                                              // 5961
      }                                                                                                                // 5962
      return result;                                                                                                   // 5963
    }                                                                                                                  // 5964
                                                                                                                       // 5965
    /**                                                                                                                // 5966
     * This method is like `_.zip` except that it accepts an iteratee to specify                                       // 5967
     * how grouped values should be combined. The `iteratee` is bound to `thisArg`                                     // 5968
     * and invoked with four arguments: (accumulator, value, index, group).                                            // 5969
     *                                                                                                                 // 5970
     * @static                                                                                                         // 5971
     * @memberOf _                                                                                                     // 5972
     * @category Array                                                                                                 // 5973
     * @param {...Array} [arrays] The arrays to process.                                                               // 5974
     * @param {Function} [iteratee] The function to combine grouped values.                                            // 5975
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 5976
     * @returns {Array} Returns the new array of grouped elements.                                                     // 5977
     * @example                                                                                                        // 5978
     *                                                                                                                 // 5979
     * _.zipWith([1, 2], [10, 20], [100, 200], _.add);                                                                 // 5980
     * // => [111, 222]                                                                                                // 5981
     */                                                                                                                // 5982
    var zipWith = restParam(function(arrays) {                                                                         // 5983
      var length = arrays.length,                                                                                      // 5984
          iteratee = length > 2 ? arrays[length - 2] : undefined,                                                      // 5985
          thisArg = length > 1 ? arrays[length - 1] : undefined;                                                       // 5986
                                                                                                                       // 5987
      if (length > 2 && typeof iteratee == 'function') {                                                               // 5988
        length -= 2;                                                                                                   // 5989
      } else {                                                                                                         // 5990
        iteratee = (length > 1 && typeof thisArg == 'function') ? (--length, thisArg) : undefined;                     // 5991
        thisArg = undefined;                                                                                           // 5992
      }                                                                                                                // 5993
      arrays.length = length;                                                                                          // 5994
      return unzipWith(arrays, iteratee, thisArg);                                                                     // 5995
    });                                                                                                                // 5996
                                                                                                                       // 5997
    /*------------------------------------------------------------------------*/                                       // 5998
                                                                                                                       // 5999
    /**                                                                                                                // 6000
     * Creates a `lodash` object that wraps `value` with explicit method                                               // 6001
     * chaining enabled.                                                                                               // 6002
     *                                                                                                                 // 6003
     * @static                                                                                                         // 6004
     * @memberOf _                                                                                                     // 6005
     * @category Chain                                                                                                 // 6006
     * @param {*} value The value to wrap.                                                                             // 6007
     * @returns {Object} Returns the new `lodash` wrapper instance.                                                    // 6008
     * @example                                                                                                        // 6009
     *                                                                                                                 // 6010
     * var users = [                                                                                                   // 6011
     *   { 'user': 'barney',  'age': 36 },                                                                             // 6012
     *   { 'user': 'fred',    'age': 40 },                                                                             // 6013
     *   { 'user': 'pebbles', 'age': 1 }                                                                               // 6014
     * ];                                                                                                              // 6015
     *                                                                                                                 // 6016
     * var youngest = _.chain(users)                                                                                   // 6017
     *   .sortBy('age')                                                                                                // 6018
     *   .map(function(chr) {                                                                                          // 6019
     *     return chr.user + ' is ' + chr.age;                                                                         // 6020
     *   })                                                                                                            // 6021
     *   .first()                                                                                                      // 6022
     *   .value();                                                                                                     // 6023
     * // => 'pebbles is 1'                                                                                            // 6024
     */                                                                                                                // 6025
    function chain(value) {                                                                                            // 6026
      var result = lodash(value);                                                                                      // 6027
      result.__chain__ = true;                                                                                         // 6028
      return result;                                                                                                   // 6029
    }                                                                                                                  // 6030
                                                                                                                       // 6031
    /**                                                                                                                // 6032
     * This method invokes `interceptor` and returns `value`. The interceptor is                                       // 6033
     * bound to `thisArg` and invoked with one argument; (value). The purpose of                                       // 6034
     * this method is to "tap into" a method chain in order to perform operations                                      // 6035
     * on intermediate results within the chain.                                                                       // 6036
     *                                                                                                                 // 6037
     * @static                                                                                                         // 6038
     * @memberOf _                                                                                                     // 6039
     * @category Chain                                                                                                 // 6040
     * @param {*} value The value to provide to `interceptor`.                                                         // 6041
     * @param {Function} interceptor The function to invoke.                                                           // 6042
     * @param {*} [thisArg] The `this` binding of `interceptor`.                                                       // 6043
     * @returns {*} Returns `value`.                                                                                   // 6044
     * @example                                                                                                        // 6045
     *                                                                                                                 // 6046
     * _([1, 2, 3])                                                                                                    // 6047
     *  .tap(function(array) {                                                                                         // 6048
     *    array.pop();                                                                                                 // 6049
     *  })                                                                                                             // 6050
     *  .reverse()                                                                                                     // 6051
     *  .value();                                                                                                      // 6052
     * // => [2, 1]                                                                                                    // 6053
     */                                                                                                                // 6054
    function tap(value, interceptor, thisArg) {                                                                        // 6055
      interceptor.call(thisArg, value);                                                                                // 6056
      return value;                                                                                                    // 6057
    }                                                                                                                  // 6058
                                                                                                                       // 6059
    /**                                                                                                                // 6060
     * This method is like `_.tap` except that it returns the result of `interceptor`.                                 // 6061
     *                                                                                                                 // 6062
     * @static                                                                                                         // 6063
     * @memberOf _                                                                                                     // 6064
     * @category Chain                                                                                                 // 6065
     * @param {*} value The value to provide to `interceptor`.                                                         // 6066
     * @param {Function} interceptor The function to invoke.                                                           // 6067
     * @param {*} [thisArg] The `this` binding of `interceptor`.                                                       // 6068
     * @returns {*} Returns the result of `interceptor`.                                                               // 6069
     * @example                                                                                                        // 6070
     *                                                                                                                 // 6071
     * _('  abc  ')                                                                                                    // 6072
     *  .chain()                                                                                                       // 6073
     *  .trim()                                                                                                        // 6074
     *  .thru(function(value) {                                                                                        // 6075
     *    return [value];                                                                                              // 6076
     *  })                                                                                                             // 6077
     *  .value();                                                                                                      // 6078
     * // => ['abc']                                                                                                   // 6079
     */                                                                                                                // 6080
    function thru(value, interceptor, thisArg) {                                                                       // 6081
      return interceptor.call(thisArg, value);                                                                         // 6082
    }                                                                                                                  // 6083
                                                                                                                       // 6084
    /**                                                                                                                // 6085
     * Enables explicit method chaining on the wrapper object.                                                         // 6086
     *                                                                                                                 // 6087
     * @name chain                                                                                                     // 6088
     * @memberOf _                                                                                                     // 6089
     * @category Chain                                                                                                 // 6090
     * @returns {Object} Returns the new `lodash` wrapper instance.                                                    // 6091
     * @example                                                                                                        // 6092
     *                                                                                                                 // 6093
     * var users = [                                                                                                   // 6094
     *   { 'user': 'barney', 'age': 36 },                                                                              // 6095
     *   { 'user': 'fred',   'age': 40 }                                                                               // 6096
     * ];                                                                                                              // 6097
     *                                                                                                                 // 6098
     * // without explicit chaining                                                                                    // 6099
     * _(users).first();                                                                                               // 6100
     * // => { 'user': 'barney', 'age': 36 }                                                                           // 6101
     *                                                                                                                 // 6102
     * // with explicit chaining                                                                                       // 6103
     * _(users).chain()                                                                                                // 6104
     *   .first()                                                                                                      // 6105
     *   .pick('user')                                                                                                 // 6106
     *   .value();                                                                                                     // 6107
     * // => { 'user': 'barney' }                                                                                      // 6108
     */                                                                                                                // 6109
    function wrapperChain() {                                                                                          // 6110
      return chain(this);                                                                                              // 6111
    }                                                                                                                  // 6112
                                                                                                                       // 6113
    /**                                                                                                                // 6114
     * Executes the chained sequence and returns the wrapped result.                                                   // 6115
     *                                                                                                                 // 6116
     * @name commit                                                                                                    // 6117
     * @memberOf _                                                                                                     // 6118
     * @category Chain                                                                                                 // 6119
     * @returns {Object} Returns the new `lodash` wrapper instance.                                                    // 6120
     * @example                                                                                                        // 6121
     *                                                                                                                 // 6122
     * var array = [1, 2];                                                                                             // 6123
     * var wrapped = _(array).push(3);                                                                                 // 6124
     *                                                                                                                 // 6125
     * console.log(array);                                                                                             // 6126
     * // => [1, 2]                                                                                                    // 6127
     *                                                                                                                 // 6128
     * wrapped = wrapped.commit();                                                                                     // 6129
     * console.log(array);                                                                                             // 6130
     * // => [1, 2, 3]                                                                                                 // 6131
     *                                                                                                                 // 6132
     * wrapped.last();                                                                                                 // 6133
     * // => 3                                                                                                         // 6134
     *                                                                                                                 // 6135
     * console.log(array);                                                                                             // 6136
     * // => [1, 2, 3]                                                                                                 // 6137
     */                                                                                                                // 6138
    function wrapperCommit() {                                                                                         // 6139
      return new LodashWrapper(this.value(), this.__chain__);                                                          // 6140
    }                                                                                                                  // 6141
                                                                                                                       // 6142
    /**                                                                                                                // 6143
     * Creates a new array joining a wrapped array with any additional arrays                                          // 6144
     * and/or values.                                                                                                  // 6145
     *                                                                                                                 // 6146
     * @name concat                                                                                                    // 6147
     * @memberOf _                                                                                                     // 6148
     * @category Chain                                                                                                 // 6149
     * @param {...*} [values] The values to concatenate.                                                               // 6150
     * @returns {Array} Returns the new concatenated array.                                                            // 6151
     * @example                                                                                                        // 6152
     *                                                                                                                 // 6153
     * var array = [1];                                                                                                // 6154
     * var wrapped = _(array).concat(2, [3], [[4]]);                                                                   // 6155
     *                                                                                                                 // 6156
     * console.log(wrapped.value());                                                                                   // 6157
     * // => [1, 2, 3, [4]]                                                                                            // 6158
     *                                                                                                                 // 6159
     * console.log(array);                                                                                             // 6160
     * // => [1]                                                                                                       // 6161
     */                                                                                                                // 6162
    var wrapperConcat = restParam(function(values) {                                                                   // 6163
      values = baseFlatten(values);                                                                                    // 6164
      return this.thru(function(array) {                                                                               // 6165
        return arrayConcat(isArray(array) ? array : [toObject(array)], values);                                        // 6166
      });                                                                                                              // 6167
    });                                                                                                                // 6168
                                                                                                                       // 6169
    /**                                                                                                                // 6170
     * Creates a clone of the chained sequence planting `value` as the wrapped value.                                  // 6171
     *                                                                                                                 // 6172
     * @name plant                                                                                                     // 6173
     * @memberOf _                                                                                                     // 6174
     * @category Chain                                                                                                 // 6175
     * @returns {Object} Returns the new `lodash` wrapper instance.                                                    // 6176
     * @example                                                                                                        // 6177
     *                                                                                                                 // 6178
     * var array = [1, 2];                                                                                             // 6179
     * var wrapped = _(array).map(function(value) {                                                                    // 6180
     *   return Math.pow(value, 2);                                                                                    // 6181
     * });                                                                                                             // 6182
     *                                                                                                                 // 6183
     * var other = [3, 4];                                                                                             // 6184
     * var otherWrapped = wrapped.plant(other);                                                                        // 6185
     *                                                                                                                 // 6186
     * otherWrapped.value();                                                                                           // 6187
     * // => [9, 16]                                                                                                   // 6188
     *                                                                                                                 // 6189
     * wrapped.value();                                                                                                // 6190
     * // => [1, 4]                                                                                                    // 6191
     */                                                                                                                // 6192
    function wrapperPlant(value) {                                                                                     // 6193
      var result,                                                                                                      // 6194
          parent = this;                                                                                               // 6195
                                                                                                                       // 6196
      while (parent instanceof baseLodash) {                                                                           // 6197
        var clone = wrapperClone(parent);                                                                              // 6198
        if (result) {                                                                                                  // 6199
          previous.__wrapped__ = clone;                                                                                // 6200
        } else {                                                                                                       // 6201
          result = clone;                                                                                              // 6202
        }                                                                                                              // 6203
        var previous = clone;                                                                                          // 6204
        parent = parent.__wrapped__;                                                                                   // 6205
      }                                                                                                                // 6206
      previous.__wrapped__ = value;                                                                                    // 6207
      return result;                                                                                                   // 6208
    }                                                                                                                  // 6209
                                                                                                                       // 6210
    /**                                                                                                                // 6211
     * Reverses the wrapped array so the first element becomes the last, the                                           // 6212
     * second element becomes the second to last, and so on.                                                           // 6213
     *                                                                                                                 // 6214
     * **Note:** This method mutates the wrapped array.                                                                // 6215
     *                                                                                                                 // 6216
     * @name reverse                                                                                                   // 6217
     * @memberOf _                                                                                                     // 6218
     * @category Chain                                                                                                 // 6219
     * @returns {Object} Returns the new reversed `lodash` wrapper instance.                                           // 6220
     * @example                                                                                                        // 6221
     *                                                                                                                 // 6222
     * var array = [1, 2, 3];                                                                                          // 6223
     *                                                                                                                 // 6224
     * _(array).reverse().value()                                                                                      // 6225
     * // => [3, 2, 1]                                                                                                 // 6226
     *                                                                                                                 // 6227
     * console.log(array);                                                                                             // 6228
     * // => [3, 2, 1]                                                                                                 // 6229
     */                                                                                                                // 6230
    function wrapperReverse() {                                                                                        // 6231
      var value = this.__wrapped__;                                                                                    // 6232
                                                                                                                       // 6233
      var interceptor = function(value) {                                                                              // 6234
        return value.reverse();                                                                                        // 6235
      };                                                                                                               // 6236
      if (value instanceof LazyWrapper) {                                                                              // 6237
        var wrapped = value;                                                                                           // 6238
        if (this.__actions__.length) {                                                                                 // 6239
          wrapped = new LazyWrapper(this);                                                                             // 6240
        }                                                                                                              // 6241
        wrapped = wrapped.reverse();                                                                                   // 6242
        wrapped.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });                       // 6243
        return new LodashWrapper(wrapped, this.__chain__);                                                             // 6244
      }                                                                                                                // 6245
      return this.thru(interceptor);                                                                                   // 6246
    }                                                                                                                  // 6247
                                                                                                                       // 6248
    /**                                                                                                                // 6249
     * Produces the result of coercing the unwrapped value to a string.                                                // 6250
     *                                                                                                                 // 6251
     * @name toString                                                                                                  // 6252
     * @memberOf _                                                                                                     // 6253
     * @category Chain                                                                                                 // 6254
     * @returns {string} Returns the coerced string value.                                                             // 6255
     * @example                                                                                                        // 6256
     *                                                                                                                 // 6257
     * _([1, 2, 3]).toString();                                                                                        // 6258
     * // => '1,2,3'                                                                                                   // 6259
     */                                                                                                                // 6260
    function wrapperToString() {                                                                                       // 6261
      return (this.value() + '');                                                                                      // 6262
    }                                                                                                                  // 6263
                                                                                                                       // 6264
    /**                                                                                                                // 6265
     * Executes the chained sequence to extract the unwrapped value.                                                   // 6266
     *                                                                                                                 // 6267
     * @name value                                                                                                     // 6268
     * @memberOf _                                                                                                     // 6269
     * @alias run, toJSON, valueOf                                                                                     // 6270
     * @category Chain                                                                                                 // 6271
     * @returns {*} Returns the resolved unwrapped value.                                                              // 6272
     * @example                                                                                                        // 6273
     *                                                                                                                 // 6274
     * _([1, 2, 3]).value();                                                                                           // 6275
     * // => [1, 2, 3]                                                                                                 // 6276
     */                                                                                                                // 6277
    function wrapperValue() {                                                                                          // 6278
      return baseWrapperValue(this.__wrapped__, this.__actions__);                                                     // 6279
    }                                                                                                                  // 6280
                                                                                                                       // 6281
    /*------------------------------------------------------------------------*/                                       // 6282
                                                                                                                       // 6283
    /**                                                                                                                // 6284
     * Creates an array of elements corresponding to the given keys, or indexes,                                       // 6285
     * of `collection`. Keys may be specified as individual arguments or as arrays                                     // 6286
     * of keys.                                                                                                        // 6287
     *                                                                                                                 // 6288
     * @static                                                                                                         // 6289
     * @memberOf _                                                                                                     // 6290
     * @category Collection                                                                                            // 6291
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6292
     * @param {...(number|number[]|string|string[])} [props] The property names                                        // 6293
     *  or indexes of elements to pick, specified individually or in arrays.                                           // 6294
     * @returns {Array} Returns the new array of picked elements.                                                      // 6295
     * @example                                                                                                        // 6296
     *                                                                                                                 // 6297
     * _.at(['a', 'b', 'c'], [0, 2]);                                                                                  // 6298
     * // => ['a', 'c']                                                                                                // 6299
     *                                                                                                                 // 6300
     * _.at(['barney', 'fred', 'pebbles'], 0, 2);                                                                      // 6301
     * // => ['barney', 'pebbles']                                                                                     // 6302
     */                                                                                                                // 6303
    var at = restParam(function(collection, props) {                                                                   // 6304
      if (isArrayLike(collection)) {                                                                                   // 6305
        collection = toIterable(collection);                                                                           // 6306
      }                                                                                                                // 6307
      return baseAt(collection, baseFlatten(props));                                                                   // 6308
    });                                                                                                                // 6309
                                                                                                                       // 6310
    /**                                                                                                                // 6311
     * Creates an object composed of keys generated from the results of running                                        // 6312
     * each element of `collection` through `iteratee`. The corresponding value                                        // 6313
     * of each key is the number of times the key was returned by `iteratee`.                                          // 6314
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:                                          // 6315
     * (value, index|key, collection).                                                                                 // 6316
     *                                                                                                                 // 6317
     * If a property name is provided for `iteratee` the created `_.property`                                          // 6318
     * style callback returns the property value of the given element.                                                 // 6319
     *                                                                                                                 // 6320
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 6321
     * style callback returns `true` for elements that have a matching property                                        // 6322
     * value, else `false`.                                                                                            // 6323
     *                                                                                                                 // 6324
     * If an object is provided for `iteratee` the created `_.matches` style                                           // 6325
     * callback returns `true` for elements that have the properties of the given                                      // 6326
     * object, else `false`.                                                                                           // 6327
     *                                                                                                                 // 6328
     * @static                                                                                                         // 6329
     * @memberOf _                                                                                                     // 6330
     * @category Collection                                                                                            // 6331
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6332
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked                                      // 6333
     *  per iteration.                                                                                                 // 6334
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 6335
     * @returns {Object} Returns the composed aggregate object.                                                        // 6336
     * @example                                                                                                        // 6337
     *                                                                                                                 // 6338
     * _.countBy([4.3, 6.1, 6.4], function(n) {                                                                        // 6339
     *   return Math.floor(n);                                                                                         // 6340
     * });                                                                                                             // 6341
     * // => { '4': 1, '6': 2 }                                                                                        // 6342
     *                                                                                                                 // 6343
     * _.countBy([4.3, 6.1, 6.4], function(n) {                                                                        // 6344
     *   return this.floor(n);                                                                                         // 6345
     * }, Math);                                                                                                       // 6346
     * // => { '4': 1, '6': 2 }                                                                                        // 6347
     *                                                                                                                 // 6348
     * _.countBy(['one', 'two', 'three'], 'length');                                                                   // 6349
     * // => { '3': 2, '5': 1 }                                                                                        // 6350
     */                                                                                                                // 6351
    var countBy = createAggregator(function(result, value, key) {                                                      // 6352
      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);                                            // 6353
    });                                                                                                                // 6354
                                                                                                                       // 6355
    /**                                                                                                                // 6356
     * Checks if `predicate` returns truthy for **all** elements of `collection`.                                      // 6357
     * The predicate is bound to `thisArg` and invoked with three arguments:                                           // 6358
     * (value, index|key, collection).                                                                                 // 6359
     *                                                                                                                 // 6360
     * If a property name is provided for `predicate` the created `_.property`                                         // 6361
     * style callback returns the property value of the given element.                                                 // 6362
     *                                                                                                                 // 6363
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 6364
     * style callback returns `true` for elements that have a matching property                                        // 6365
     * value, else `false`.                                                                                            // 6366
     *                                                                                                                 // 6367
     * If an object is provided for `predicate` the created `_.matches` style                                          // 6368
     * callback returns `true` for elements that have the properties of the given                                      // 6369
     * object, else `false`.                                                                                           // 6370
     *                                                                                                                 // 6371
     * @static                                                                                                         // 6372
     * @memberOf _                                                                                                     // 6373
     * @alias all                                                                                                      // 6374
     * @category Collection                                                                                            // 6375
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6376
     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 6377
     *  per iteration.                                                                                                 // 6378
     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 6379
     * @returns {boolean} Returns `true` if all elements pass the predicate check,                                     // 6380
     *  else `false`.                                                                                                  // 6381
     * @example                                                                                                        // 6382
     *                                                                                                                 // 6383
     * _.every([true, 1, null, 'yes'], Boolean);                                                                       // 6384
     * // => false                                                                                                     // 6385
     *                                                                                                                 // 6386
     * var users = [                                                                                                   // 6387
     *   { 'user': 'barney', 'active': false },                                                                        // 6388
     *   { 'user': 'fred',   'active': false }                                                                         // 6389
     * ];                                                                                                              // 6390
     *                                                                                                                 // 6391
     * // using the `_.matches` callback shorthand                                                                     // 6392
     * _.every(users, { 'user': 'barney', 'active': false });                                                          // 6393
     * // => false                                                                                                     // 6394
     *                                                                                                                 // 6395
     * // using the `_.matchesProperty` callback shorthand                                                             // 6396
     * _.every(users, 'active', false);                                                                                // 6397
     * // => true                                                                                                      // 6398
     *                                                                                                                 // 6399
     * // using the `_.property` callback shorthand                                                                    // 6400
     * _.every(users, 'active');                                                                                       // 6401
     * // => false                                                                                                     // 6402
     */                                                                                                                // 6403
    function every(collection, predicate, thisArg) {                                                                   // 6404
      var func = isArray(collection) ? arrayEvery : baseEvery;                                                         // 6405
      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {                                                 // 6406
        predicate = undefined;                                                                                         // 6407
      }                                                                                                                // 6408
      if (typeof predicate != 'function' || thisArg !== undefined) {                                                   // 6409
        predicate = getCallback(predicate, thisArg, 3);                                                                // 6410
      }                                                                                                                // 6411
      return func(collection, predicate);                                                                              // 6412
    }                                                                                                                  // 6413
                                                                                                                       // 6414
    /**                                                                                                                // 6415
     * Iterates over elements of `collection`, returning an array of all elements                                      // 6416
     * `predicate` returns truthy for. The predicate is bound to `thisArg` and                                         // 6417
     * invoked with three arguments: (value, index|key, collection).                                                   // 6418
     *                                                                                                                 // 6419
     * If a property name is provided for `predicate` the created `_.property`                                         // 6420
     * style callback returns the property value of the given element.                                                 // 6421
     *                                                                                                                 // 6422
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 6423
     * style callback returns `true` for elements that have a matching property                                        // 6424
     * value, else `false`.                                                                                            // 6425
     *                                                                                                                 // 6426
     * If an object is provided for `predicate` the created `_.matches` style                                          // 6427
     * callback returns `true` for elements that have the properties of the given                                      // 6428
     * object, else `false`.                                                                                           // 6429
     *                                                                                                                 // 6430
     * @static                                                                                                         // 6431
     * @memberOf _                                                                                                     // 6432
     * @alias select                                                                                                   // 6433
     * @category Collection                                                                                            // 6434
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6435
     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 6436
     *  per iteration.                                                                                                 // 6437
     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 6438
     * @returns {Array} Returns the new filtered array.                                                                // 6439
     * @example                                                                                                        // 6440
     *                                                                                                                 // 6441
     * _.filter([4, 5, 6], function(n) {                                                                               // 6442
     *   return n % 2 == 0;                                                                                            // 6443
     * });                                                                                                             // 6444
     * // => [4, 6]                                                                                                    // 6445
     *                                                                                                                 // 6446
     * var users = [                                                                                                   // 6447
     *   { 'user': 'barney', 'age': 36, 'active': true },                                                              // 6448
     *   { 'user': 'fred',   'age': 40, 'active': false }                                                              // 6449
     * ];                                                                                                              // 6450
     *                                                                                                                 // 6451
     * // using the `_.matches` callback shorthand                                                                     // 6452
     * _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');                                                // 6453
     * // => ['barney']                                                                                                // 6454
     *                                                                                                                 // 6455
     * // using the `_.matchesProperty` callback shorthand                                                             // 6456
     * _.pluck(_.filter(users, 'active', false), 'user');                                                              // 6457
     * // => ['fred']                                                                                                  // 6458
     *                                                                                                                 // 6459
     * // using the `_.property` callback shorthand                                                                    // 6460
     * _.pluck(_.filter(users, 'active'), 'user');                                                                     // 6461
     * // => ['barney']                                                                                                // 6462
     */                                                                                                                // 6463
    function filter(collection, predicate, thisArg) {                                                                  // 6464
      var func = isArray(collection) ? arrayFilter : baseFilter;                                                       // 6465
      predicate = getCallback(predicate, thisArg, 3);                                                                  // 6466
      return func(collection, predicate);                                                                              // 6467
    }                                                                                                                  // 6468
                                                                                                                       // 6469
    /**                                                                                                                // 6470
     * Iterates over elements of `collection`, returning the first element                                             // 6471
     * `predicate` returns truthy for. The predicate is bound to `thisArg` and                                         // 6472
     * invoked with three arguments: (value, index|key, collection).                                                   // 6473
     *                                                                                                                 // 6474
     * If a property name is provided for `predicate` the created `_.property`                                         // 6475
     * style callback returns the property value of the given element.                                                 // 6476
     *                                                                                                                 // 6477
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 6478
     * style callback returns `true` for elements that have a matching property                                        // 6479
     * value, else `false`.                                                                                            // 6480
     *                                                                                                                 // 6481
     * If an object is provided for `predicate` the created `_.matches` style                                          // 6482
     * callback returns `true` for elements that have the properties of the given                                      // 6483
     * object, else `false`.                                                                                           // 6484
     *                                                                                                                 // 6485
     * @static                                                                                                         // 6486
     * @memberOf _                                                                                                     // 6487
     * @alias detect                                                                                                   // 6488
     * @category Collection                                                                                            // 6489
     * @param {Array|Object|string} collection The collection to search.                                               // 6490
     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 6491
     *  per iteration.                                                                                                 // 6492
     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 6493
     * @returns {*} Returns the matched element, else `undefined`.                                                     // 6494
     * @example                                                                                                        // 6495
     *                                                                                                                 // 6496
     * var users = [                                                                                                   // 6497
     *   { 'user': 'barney',  'age': 36, 'active': true },                                                             // 6498
     *   { 'user': 'fred',    'age': 40, 'active': false },                                                            // 6499
     *   { 'user': 'pebbles', 'age': 1,  'active': true }                                                              // 6500
     * ];                                                                                                              // 6501
     *                                                                                                                 // 6502
     * _.result(_.find(users, function(chr) {                                                                          // 6503
     *   return chr.age < 40;                                                                                          // 6504
     * }), 'user');                                                                                                    // 6505
     * // => 'barney'                                                                                                  // 6506
     *                                                                                                                 // 6507
     * // using the `_.matches` callback shorthand                                                                     // 6508
     * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');                                                  // 6509
     * // => 'pebbles'                                                                                                 // 6510
     *                                                                                                                 // 6511
     * // using the `_.matchesProperty` callback shorthand                                                             // 6512
     * _.result(_.find(users, 'active', false), 'user');                                                               // 6513
     * // => 'fred'                                                                                                    // 6514
     *                                                                                                                 // 6515
     * // using the `_.property` callback shorthand                                                                    // 6516
     * _.result(_.find(users, 'active'), 'user');                                                                      // 6517
     * // => 'barney'                                                                                                  // 6518
     */                                                                                                                // 6519
    var find = createFind(baseEach);                                                                                   // 6520
                                                                                                                       // 6521
    /**                                                                                                                // 6522
     * This method is like `_.find` except that it iterates over elements of                                           // 6523
     * `collection` from right to left.                                                                                // 6524
     *                                                                                                                 // 6525
     * @static                                                                                                         // 6526
     * @memberOf _                                                                                                     // 6527
     * @category Collection                                                                                            // 6528
     * @param {Array|Object|string} collection The collection to search.                                               // 6529
     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 6530
     *  per iteration.                                                                                                 // 6531
     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 6532
     * @returns {*} Returns the matched element, else `undefined`.                                                     // 6533
     * @example                                                                                                        // 6534
     *                                                                                                                 // 6535
     * _.findLast([1, 2, 3, 4], function(n) {                                                                          // 6536
     *   return n % 2 == 1;                                                                                            // 6537
     * });                                                                                                             // 6538
     * // => 3                                                                                                         // 6539
     */                                                                                                                // 6540
    var findLast = createFind(baseEachRight, true);                                                                    // 6541
                                                                                                                       // 6542
    /**                                                                                                                // 6543
     * Performs a deep comparison between each element in `collection` and the                                         // 6544
     * source object, returning the first element that has equivalent property                                         // 6545
     * values.                                                                                                         // 6546
     *                                                                                                                 // 6547
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,                                      // 6548
     * numbers, `Object` objects, regexes, and strings. Objects are compared by                                        // 6549
     * their own, not inherited, enumerable properties. For comparing a single                                         // 6550
     * own or inherited property value see `_.matchesProperty`.                                                        // 6551
     *                                                                                                                 // 6552
     * @static                                                                                                         // 6553
     * @memberOf _                                                                                                     // 6554
     * @category Collection                                                                                            // 6555
     * @param {Array|Object|string} collection The collection to search.                                               // 6556
     * @param {Object} source The object of property values to match.                                                  // 6557
     * @returns {*} Returns the matched element, else `undefined`.                                                     // 6558
     * @example                                                                                                        // 6559
     *                                                                                                                 // 6560
     * var users = [                                                                                                   // 6561
     *   { 'user': 'barney', 'age': 36, 'active': true },                                                              // 6562
     *   { 'user': 'fred',   'age': 40, 'active': false }                                                              // 6563
     * ];                                                                                                              // 6564
     *                                                                                                                 // 6565
     * _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');                                            // 6566
     * // => 'barney'                                                                                                  // 6567
     *                                                                                                                 // 6568
     * _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');                                           // 6569
     * // => 'fred'                                                                                                    // 6570
     */                                                                                                                // 6571
    function findWhere(collection, source) {                                                                           // 6572
      return find(collection, baseMatches(source));                                                                    // 6573
    }                                                                                                                  // 6574
                                                                                                                       // 6575
    /**                                                                                                                // 6576
     * Iterates over elements of `collection` invoking `iteratee` for each element.                                    // 6577
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:                                          // 6578
     * (value, index|key, collection). Iteratee functions may exit iteration early                                     // 6579
     * by explicitly returning `false`.                                                                                // 6580
     *                                                                                                                 // 6581
     * **Note:** As with other "Collections" methods, objects with a "length" property                                 // 6582
     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`                                        // 6583
     * may be used for object iteration.                                                                               // 6584
     *                                                                                                                 // 6585
     * @static                                                                                                         // 6586
     * @memberOf _                                                                                                     // 6587
     * @alias each                                                                                                     // 6588
     * @category Collection                                                                                            // 6589
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6590
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 6591
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 6592
     * @returns {Array|Object|string} Returns `collection`.                                                            // 6593
     * @example                                                                                                        // 6594
     *                                                                                                                 // 6595
     * _([1, 2]).forEach(function(n) {                                                                                 // 6596
     *   console.log(n);                                                                                               // 6597
     * }).value();                                                                                                     // 6598
     * // => logs each value from left to right and returns the array                                                  // 6599
     *                                                                                                                 // 6600
     * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {                                                                // 6601
     *   console.log(n, key);                                                                                          // 6602
     * });                                                                                                             // 6603
     * // => logs each value-key pair and returns the object (iteration order is not guaranteed)                       // 6604
     */                                                                                                                // 6605
    var forEach = createForEach(arrayEach, baseEach);                                                                  // 6606
                                                                                                                       // 6607
    /**                                                                                                                // 6608
     * This method is like `_.forEach` except that it iterates over elements of                                        // 6609
     * `collection` from right to left.                                                                                // 6610
     *                                                                                                                 // 6611
     * @static                                                                                                         // 6612
     * @memberOf _                                                                                                     // 6613
     * @alias eachRight                                                                                                // 6614
     * @category Collection                                                                                            // 6615
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6616
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 6617
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 6618
     * @returns {Array|Object|string} Returns `collection`.                                                            // 6619
     * @example                                                                                                        // 6620
     *                                                                                                                 // 6621
     * _([1, 2]).forEachRight(function(n) {                                                                            // 6622
     *   console.log(n);                                                                                               // 6623
     * }).value();                                                                                                     // 6624
     * // => logs each value from right to left and returns the array                                                  // 6625
     */                                                                                                                // 6626
    var forEachRight = createForEach(arrayEachRight, baseEachRight);                                                   // 6627
                                                                                                                       // 6628
    /**                                                                                                                // 6629
     * Creates an object composed of keys generated from the results of running                                        // 6630
     * each element of `collection` through `iteratee`. The corresponding value                                        // 6631
     * of each key is an array of the elements responsible for generating the key.                                     // 6632
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:                                          // 6633
     * (value, index|key, collection).                                                                                 // 6634
     *                                                                                                                 // 6635
     * If a property name is provided for `iteratee` the created `_.property`                                          // 6636
     * style callback returns the property value of the given element.                                                 // 6637
     *                                                                                                                 // 6638
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 6639
     * style callback returns `true` for elements that have a matching property                                        // 6640
     * value, else `false`.                                                                                            // 6641
     *                                                                                                                 // 6642
     * If an object is provided for `iteratee` the created `_.matches` style                                           // 6643
     * callback returns `true` for elements that have the properties of the given                                      // 6644
     * object, else `false`.                                                                                           // 6645
     *                                                                                                                 // 6646
     * @static                                                                                                         // 6647
     * @memberOf _                                                                                                     // 6648
     * @category Collection                                                                                            // 6649
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6650
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked                                      // 6651
     *  per iteration.                                                                                                 // 6652
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 6653
     * @returns {Object} Returns the composed aggregate object.                                                        // 6654
     * @example                                                                                                        // 6655
     *                                                                                                                 // 6656
     * _.groupBy([4.2, 6.1, 6.4], function(n) {                                                                        // 6657
     *   return Math.floor(n);                                                                                         // 6658
     * });                                                                                                             // 6659
     * // => { '4': [4.2], '6': [6.1, 6.4] }                                                                           // 6660
     *                                                                                                                 // 6661
     * _.groupBy([4.2, 6.1, 6.4], function(n) {                                                                        // 6662
     *   return this.floor(n);                                                                                         // 6663
     * }, Math);                                                                                                       // 6664
     * // => { '4': [4.2], '6': [6.1, 6.4] }                                                                           // 6665
     *                                                                                                                 // 6666
     * // using the `_.property` callback shorthand                                                                    // 6667
     * _.groupBy(['one', 'two', 'three'], 'length');                                                                   // 6668
     * // => { '3': ['one', 'two'], '5': ['three'] }                                                                   // 6669
     */                                                                                                                // 6670
    var groupBy = createAggregator(function(result, value, key) {                                                      // 6671
      if (hasOwnProperty.call(result, key)) {                                                                          // 6672
        result[key].push(value);                                                                                       // 6673
      } else {                                                                                                         // 6674
        result[key] = [value];                                                                                         // 6675
      }                                                                                                                // 6676
    });                                                                                                                // 6677
                                                                                                                       // 6678
    /**                                                                                                                // 6679
     * Checks if `target` is in `collection` using                                                                     // 6680
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)                                // 6681
     * for equality comparisons. If `fromIndex` is negative, it's used as the offset                                   // 6682
     * from the end of `collection`.                                                                                   // 6683
     *                                                                                                                 // 6684
     * @static                                                                                                         // 6685
     * @memberOf _                                                                                                     // 6686
     * @alias contains, include                                                                                        // 6687
     * @category Collection                                                                                            // 6688
     * @param {Array|Object|string} collection The collection to search.                                               // 6689
     * @param {*} target The value to search for.                                                                      // 6690
     * @param {number} [fromIndex=0] The index to search from.                                                         // 6691
     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.                               // 6692
     * @returns {boolean} Returns `true` if a matching element is found, else `false`.                                 // 6693
     * @example                                                                                                        // 6694
     *                                                                                                                 // 6695
     * _.includes([1, 2, 3], 1);                                                                                       // 6696
     * // => true                                                                                                      // 6697
     *                                                                                                                 // 6698
     * _.includes([1, 2, 3], 1, 2);                                                                                    // 6699
     * // => false                                                                                                     // 6700
     *                                                                                                                 // 6701
     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');                                                              // 6702
     * // => true                                                                                                      // 6703
     *                                                                                                                 // 6704
     * _.includes('pebbles', 'eb');                                                                                    // 6705
     * // => true                                                                                                      // 6706
     */                                                                                                                // 6707
    function includes(collection, target, fromIndex, guard) {                                                          // 6708
      var length = collection ? getLength(collection) : 0;                                                             // 6709
      if (!isLength(length)) {                                                                                         // 6710
        collection = values(collection);                                                                               // 6711
        length = collection.length;                                                                                    // 6712
      }                                                                                                                // 6713
      if (typeof fromIndex != 'number' || (guard && isIterateeCall(target, fromIndex, guard))) {                       // 6714
        fromIndex = 0;                                                                                                 // 6715
      } else {                                                                                                         // 6716
        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);                               // 6717
      }                                                                                                                // 6718
      return (typeof collection == 'string' || !isArray(collection) && isString(collection))                           // 6719
        ? (fromIndex <= length && collection.indexOf(target, fromIndex) > -1)                                          // 6720
        : (!!length && getIndexOf(collection, target, fromIndex) > -1);                                                // 6721
    }                                                                                                                  // 6722
                                                                                                                       // 6723
    /**                                                                                                                // 6724
     * Creates an object composed of keys generated from the results of running                                        // 6725
     * each element of `collection` through `iteratee`. The corresponding value                                        // 6726
     * of each key is the last element responsible for generating the key. The                                         // 6727
     * iteratee function is bound to `thisArg` and invoked with three arguments:                                       // 6728
     * (value, index|key, collection).                                                                                 // 6729
     *                                                                                                                 // 6730
     * If a property name is provided for `iteratee` the created `_.property`                                          // 6731
     * style callback returns the property value of the given element.                                                 // 6732
     *                                                                                                                 // 6733
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 6734
     * style callback returns `true` for elements that have a matching property                                        // 6735
     * value, else `false`.                                                                                            // 6736
     *                                                                                                                 // 6737
     * If an object is provided for `iteratee` the created `_.matches` style                                           // 6738
     * callback returns `true` for elements that have the properties of the given                                      // 6739
     * object, else `false`.                                                                                           // 6740
     *                                                                                                                 // 6741
     * @static                                                                                                         // 6742
     * @memberOf _                                                                                                     // 6743
     * @category Collection                                                                                            // 6744
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6745
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked                                      // 6746
     *  per iteration.                                                                                                 // 6747
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 6748
     * @returns {Object} Returns the composed aggregate object.                                                        // 6749
     * @example                                                                                                        // 6750
     *                                                                                                                 // 6751
     * var keyData = [                                                                                                 // 6752
     *   { 'dir': 'left', 'code': 97 },                                                                                // 6753
     *   { 'dir': 'right', 'code': 100 }                                                                               // 6754
     * ];                                                                                                              // 6755
     *                                                                                                                 // 6756
     * _.indexBy(keyData, 'dir');                                                                                      // 6757
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }                       // 6758
     *                                                                                                                 // 6759
     * _.indexBy(keyData, function(object) {                                                                           // 6760
     *   return String.fromCharCode(object.code);                                                                      // 6761
     * });                                                                                                             // 6762
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }                              // 6763
     *                                                                                                                 // 6764
     * _.indexBy(keyData, function(object) {                                                                           // 6765
     *   return this.fromCharCode(object.code);                                                                        // 6766
     * }, String);                                                                                                     // 6767
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }                              // 6768
     */                                                                                                                // 6769
    var indexBy = createAggregator(function(result, value, key) {                                                      // 6770
      result[key] = value;                                                                                             // 6771
    });                                                                                                                // 6772
                                                                                                                       // 6773
    /**                                                                                                                // 6774
     * Invokes the method at `path` of each element in `collection`, returning                                         // 6775
     * an array of the results of each invoked method. Any additional arguments                                        // 6776
     * are provided to each invoked method. If `methodName` is a function it's                                         // 6777
     * invoked for, and `this` bound to, each element in `collection`.                                                 // 6778
     *                                                                                                                 // 6779
     * @static                                                                                                         // 6780
     * @memberOf _                                                                                                     // 6781
     * @category Collection                                                                                            // 6782
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6783
     * @param {Array|Function|string} path The path of the method to invoke or                                         // 6784
     *  the function invoked per iteration.                                                                            // 6785
     * @param {...*} [args] The arguments to invoke the method with.                                                   // 6786
     * @returns {Array} Returns the array of results.                                                                  // 6787
     * @example                                                                                                        // 6788
     *                                                                                                                 // 6789
     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');                                                                       // 6790
     * // => [[1, 5, 7], [1, 2, 3]]                                                                                    // 6791
     *                                                                                                                 // 6792
     * _.invoke([123, 456], String.prototype.split, '');                                                               // 6793
     * // => [['1', '2', '3'], ['4', '5', '6']]                                                                        // 6794
     */                                                                                                                // 6795
    var invoke = restParam(function(collection, path, args) {                                                          // 6796
      var index = -1,                                                                                                  // 6797
          isFunc = typeof path == 'function',                                                                          // 6798
          isProp = isKey(path),                                                                                        // 6799
          result = isArrayLike(collection) ? Array(collection.length) : [];                                            // 6800
                                                                                                                       // 6801
      baseEach(collection, function(value) {                                                                           // 6802
        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);                              // 6803
        result[++index] = func ? func.apply(value, args) : invokePath(value, path, args);                              // 6804
      });                                                                                                              // 6805
      return result;                                                                                                   // 6806
    });                                                                                                                // 6807
                                                                                                                       // 6808
    /**                                                                                                                // 6809
     * Creates an array of values by running each element in `collection` through                                      // 6810
     * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three                                         // 6811
     * arguments: (value, index|key, collection).                                                                      // 6812
     *                                                                                                                 // 6813
     * If a property name is provided for `iteratee` the created `_.property`                                          // 6814
     * style callback returns the property value of the given element.                                                 // 6815
     *                                                                                                                 // 6816
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 6817
     * style callback returns `true` for elements that have a matching property                                        // 6818
     * value, else `false`.                                                                                            // 6819
     *                                                                                                                 // 6820
     * If an object is provided for `iteratee` the created `_.matches` style                                           // 6821
     * callback returns `true` for elements that have the properties of the given                                      // 6822
     * object, else `false`.                                                                                           // 6823
     *                                                                                                                 // 6824
     * Many lodash methods are guarded to work as iteratees for methods like                                           // 6825
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.                                        // 6826
     *                                                                                                                 // 6827
     * The guarded methods are:                                                                                        // 6828
     * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`,                                           // 6829
     * `drop`, `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`,                                        // 6830
     * `parseInt`, `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`,                                         // 6831
     * `trimLeft`, `trimRight`, `trunc`, `random`, `range`, `sample`, `some`,                                          // 6832
     * `sum`, `uniq`, and `words`                                                                                      // 6833
     *                                                                                                                 // 6834
     * @static                                                                                                         // 6835
     * @memberOf _                                                                                                     // 6836
     * @alias collect                                                                                                  // 6837
     * @category Collection                                                                                            // 6838
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6839
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked                                      // 6840
     *  per iteration.                                                                                                 // 6841
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 6842
     * @returns {Array} Returns the new mapped array.                                                                  // 6843
     * @example                                                                                                        // 6844
     *                                                                                                                 // 6845
     * function timesThree(n) {                                                                                        // 6846
     *   return n * 3;                                                                                                 // 6847
     * }                                                                                                               // 6848
     *                                                                                                                 // 6849
     * _.map([1, 2], timesThree);                                                                                      // 6850
     * // => [3, 6]                                                                                                    // 6851
     *                                                                                                                 // 6852
     * _.map({ 'a': 1, 'b': 2 }, timesThree);                                                                          // 6853
     * // => [3, 6] (iteration order is not guaranteed)                                                                // 6854
     *                                                                                                                 // 6855
     * var users = [                                                                                                   // 6856
     *   { 'user': 'barney' },                                                                                         // 6857
     *   { 'user': 'fred' }                                                                                            // 6858
     * ];                                                                                                              // 6859
     *                                                                                                                 // 6860
     * // using the `_.property` callback shorthand                                                                    // 6861
     * _.map(users, 'user');                                                                                           // 6862
     * // => ['barney', 'fred']                                                                                        // 6863
     */                                                                                                                // 6864
    function map(collection, iteratee, thisArg) {                                                                      // 6865
      var func = isArray(collection) ? arrayMap : baseMap;                                                             // 6866
      iteratee = getCallback(iteratee, thisArg, 3);                                                                    // 6867
      return func(collection, iteratee);                                                                               // 6868
    }                                                                                                                  // 6869
                                                                                                                       // 6870
    /**                                                                                                                // 6871
     * Creates an array of elements split into two groups, the first of which                                          // 6872
     * contains elements `predicate` returns truthy for, while the second of which                                     // 6873
     * contains elements `predicate` returns falsey for. The predicate is bound                                        // 6874
     * to `thisArg` and invoked with three arguments: (value, index|key, collection).                                  // 6875
     *                                                                                                                 // 6876
     * If a property name is provided for `predicate` the created `_.property`                                         // 6877
     * style callback returns the property value of the given element.                                                 // 6878
     *                                                                                                                 // 6879
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 6880
     * style callback returns `true` for elements that have a matching property                                        // 6881
     * value, else `false`.                                                                                            // 6882
     *                                                                                                                 // 6883
     * If an object is provided for `predicate` the created `_.matches` style                                          // 6884
     * callback returns `true` for elements that have the properties of the given                                      // 6885
     * object, else `false`.                                                                                           // 6886
     *                                                                                                                 // 6887
     * @static                                                                                                         // 6888
     * @memberOf _                                                                                                     // 6889
     * @category Collection                                                                                            // 6890
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6891
     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 6892
     *  per iteration.                                                                                                 // 6893
     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 6894
     * @returns {Array} Returns the array of grouped elements.                                                         // 6895
     * @example                                                                                                        // 6896
     *                                                                                                                 // 6897
     * _.partition([1, 2, 3], function(n) {                                                                            // 6898
     *   return n % 2;                                                                                                 // 6899
     * });                                                                                                             // 6900
     * // => [[1, 3], [2]]                                                                                             // 6901
     *                                                                                                                 // 6902
     * _.partition([1.2, 2.3, 3.4], function(n) {                                                                      // 6903
     *   return this.floor(n) % 2;                                                                                     // 6904
     * }, Math);                                                                                                       // 6905
     * // => [[1.2, 3.4], [2.3]]                                                                                       // 6906
     *                                                                                                                 // 6907
     * var users = [                                                                                                   // 6908
     *   { 'user': 'barney',  'age': 36, 'active': false },                                                            // 6909
     *   { 'user': 'fred',    'age': 40, 'active': true },                                                             // 6910
     *   { 'user': 'pebbles', 'age': 1,  'active': false }                                                             // 6911
     * ];                                                                                                              // 6912
     *                                                                                                                 // 6913
     * var mapper = function(array) {                                                                                  // 6914
     *   return _.pluck(array, 'user');                                                                                // 6915
     * };                                                                                                              // 6916
     *                                                                                                                 // 6917
     * // using the `_.matches` callback shorthand                                                                     // 6918
     * _.map(_.partition(users, { 'age': 1, 'active': false }), mapper);                                               // 6919
     * // => [['pebbles'], ['barney', 'fred']]                                                                         // 6920
     *                                                                                                                 // 6921
     * // using the `_.matchesProperty` callback shorthand                                                             // 6922
     * _.map(_.partition(users, 'active', false), mapper);                                                             // 6923
     * // => [['barney', 'pebbles'], ['fred']]                                                                         // 6924
     *                                                                                                                 // 6925
     * // using the `_.property` callback shorthand                                                                    // 6926
     * _.map(_.partition(users, 'active'), mapper);                                                                    // 6927
     * // => [['fred'], ['barney', 'pebbles']]                                                                         // 6928
     */                                                                                                                // 6929
    var partition = createAggregator(function(result, value, key) {                                                    // 6930
      result[key ? 0 : 1].push(value);                                                                                 // 6931
    }, function() { return [[], []]; });                                                                               // 6932
                                                                                                                       // 6933
    /**                                                                                                                // 6934
     * Gets the property value of `path` from all elements in `collection`.                                            // 6935
     *                                                                                                                 // 6936
     * @static                                                                                                         // 6937
     * @memberOf _                                                                                                     // 6938
     * @category Collection                                                                                            // 6939
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6940
     * @param {Array|string} path The path of the property to pluck.                                                   // 6941
     * @returns {Array} Returns the property values.                                                                   // 6942
     * @example                                                                                                        // 6943
     *                                                                                                                 // 6944
     * var users = [                                                                                                   // 6945
     *   { 'user': 'barney', 'age': 36 },                                                                              // 6946
     *   { 'user': 'fred',   'age': 40 }                                                                               // 6947
     * ];                                                                                                              // 6948
     *                                                                                                                 // 6949
     * _.pluck(users, 'user');                                                                                         // 6950
     * // => ['barney', 'fred']                                                                                        // 6951
     *                                                                                                                 // 6952
     * var userIndex = _.indexBy(users, 'user');                                                                       // 6953
     * _.pluck(userIndex, 'age');                                                                                      // 6954
     * // => [36, 40] (iteration order is not guaranteed)                                                              // 6955
     */                                                                                                                // 6956
    function pluck(collection, path) {                                                                                 // 6957
      return map(collection, property(path));                                                                          // 6958
    }                                                                                                                  // 6959
                                                                                                                       // 6960
    /**                                                                                                                // 6961
     * Reduces `collection` to a value which is the accumulated result of running                                      // 6962
     * each element in `collection` through `iteratee`, where each successive                                          // 6963
     * invocation is supplied the return value of the previous. If `accumulator`                                       // 6964
     * is not provided the first element of `collection` is used as the initial                                        // 6965
     * value. The `iteratee` is bound to `thisArg` and invoked with four arguments:                                    // 6966
     * (accumulator, value, index|key, collection).                                                                    // 6967
     *                                                                                                                 // 6968
     * Many lodash methods are guarded to work as iteratees for methods like                                           // 6969
     * `_.reduce`, `_.reduceRight`, and `_.transform`.                                                                 // 6970
     *                                                                                                                 // 6971
     * The guarded methods are:                                                                                        // 6972
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `sortByAll`,                                         // 6973
     * and `sortByOrder`                                                                                               // 6974
     *                                                                                                                 // 6975
     * @static                                                                                                         // 6976
     * @memberOf _                                                                                                     // 6977
     * @alias foldl, inject                                                                                            // 6978
     * @category Collection                                                                                            // 6979
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 6980
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 6981
     * @param {*} [accumulator] The initial value.                                                                     // 6982
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 6983
     * @returns {*} Returns the accumulated value.                                                                     // 6984
     * @example                                                                                                        // 6985
     *                                                                                                                 // 6986
     * _.reduce([1, 2], function(total, n) {                                                                           // 6987
     *   return total + n;                                                                                             // 6988
     * });                                                                                                             // 6989
     * // => 3                                                                                                         // 6990
     *                                                                                                                 // 6991
     * _.reduce({ 'a': 1, 'b': 2 }, function(result, n, key) {                                                         // 6992
     *   result[key] = n * 3;                                                                                          // 6993
     *   return result;                                                                                                // 6994
     * }, {});                                                                                                         // 6995
     * // => { 'a': 3, 'b': 6 } (iteration order is not guaranteed)                                                    // 6996
     */                                                                                                                // 6997
    var reduce = createReduce(arrayReduce, baseEach);                                                                  // 6998
                                                                                                                       // 6999
    /**                                                                                                                // 7000
     * This method is like `_.reduce` except that it iterates over elements of                                         // 7001
     * `collection` from right to left.                                                                                // 7002
     *                                                                                                                 // 7003
     * @static                                                                                                         // 7004
     * @memberOf _                                                                                                     // 7005
     * @alias foldr                                                                                                    // 7006
     * @category Collection                                                                                            // 7007
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 7008
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 7009
     * @param {*} [accumulator] The initial value.                                                                     // 7010
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 7011
     * @returns {*} Returns the accumulated value.                                                                     // 7012
     * @example                                                                                                        // 7013
     *                                                                                                                 // 7014
     * var array = [[0, 1], [2, 3], [4, 5]];                                                                           // 7015
     *                                                                                                                 // 7016
     * _.reduceRight(array, function(flattened, other) {                                                               // 7017
     *   return flattened.concat(other);                                                                               // 7018
     * }, []);                                                                                                         // 7019
     * // => [4, 5, 2, 3, 0, 1]                                                                                        // 7020
     */                                                                                                                // 7021
    var reduceRight = createReduce(arrayReduceRight, baseEachRight);                                                   // 7022
                                                                                                                       // 7023
    /**                                                                                                                // 7024
     * The opposite of `_.filter`; this method returns the elements of `collection`                                    // 7025
     * that `predicate` does **not** return truthy for.                                                                // 7026
     *                                                                                                                 // 7027
     * @static                                                                                                         // 7028
     * @memberOf _                                                                                                     // 7029
     * @category Collection                                                                                            // 7030
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 7031
     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 7032
     *  per iteration.                                                                                                 // 7033
     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 7034
     * @returns {Array} Returns the new filtered array.                                                                // 7035
     * @example                                                                                                        // 7036
     *                                                                                                                 // 7037
     * _.reject([1, 2, 3, 4], function(n) {                                                                            // 7038
     *   return n % 2 == 0;                                                                                            // 7039
     * });                                                                                                             // 7040
     * // => [1, 3]                                                                                                    // 7041
     *                                                                                                                 // 7042
     * var users = [                                                                                                   // 7043
     *   { 'user': 'barney', 'age': 36, 'active': false },                                                             // 7044
     *   { 'user': 'fred',   'age': 40, 'active': true }                                                               // 7045
     * ];                                                                                                              // 7046
     *                                                                                                                 // 7047
     * // using the `_.matches` callback shorthand                                                                     // 7048
     * _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');                                                // 7049
     * // => ['barney']                                                                                                // 7050
     *                                                                                                                 // 7051
     * // using the `_.matchesProperty` callback shorthand                                                             // 7052
     * _.pluck(_.reject(users, 'active', false), 'user');                                                              // 7053
     * // => ['fred']                                                                                                  // 7054
     *                                                                                                                 // 7055
     * // using the `_.property` callback shorthand                                                                    // 7056
     * _.pluck(_.reject(users, 'active'), 'user');                                                                     // 7057
     * // => ['barney']                                                                                                // 7058
     */                                                                                                                // 7059
    function reject(collection, predicate, thisArg) {                                                                  // 7060
      var func = isArray(collection) ? arrayFilter : baseFilter;                                                       // 7061
      predicate = getCallback(predicate, thisArg, 3);                                                                  // 7062
      return func(collection, function(value, index, collection) {                                                     // 7063
        return !predicate(value, index, collection);                                                                   // 7064
      });                                                                                                              // 7065
    }                                                                                                                  // 7066
                                                                                                                       // 7067
    /**                                                                                                                // 7068
     * Gets a random element or `n` random elements from a collection.                                                 // 7069
     *                                                                                                                 // 7070
     * @static                                                                                                         // 7071
     * @memberOf _                                                                                                     // 7072
     * @category Collection                                                                                            // 7073
     * @param {Array|Object|string} collection The collection to sample.                                               // 7074
     * @param {number} [n] The number of elements to sample.                                                           // 7075
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 7076
     * @returns {*} Returns the random sample(s).                                                                      // 7077
     * @example                                                                                                        // 7078
     *                                                                                                                 // 7079
     * _.sample([1, 2, 3, 4]);                                                                                         // 7080
     * // => 2                                                                                                         // 7081
     *                                                                                                                 // 7082
     * _.sample([1, 2, 3, 4], 2);                                                                                      // 7083
     * // => [3, 1]                                                                                                    // 7084
     */                                                                                                                // 7085
    function sample(collection, n, guard) {                                                                            // 7086
      if (guard ? isIterateeCall(collection, n, guard) : n == null) {                                                  // 7087
        collection = toIterable(collection);                                                                           // 7088
        var length = collection.length;                                                                                // 7089
        return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;                                         // 7090
      }                                                                                                                // 7091
      var index = -1,                                                                                                  // 7092
          result = toArray(collection),                                                                                // 7093
          length = result.length,                                                                                      // 7094
          lastIndex = length - 1;                                                                                      // 7095
                                                                                                                       // 7096
      n = nativeMin(n < 0 ? 0 : (+n || 0), length);                                                                    // 7097
      while (++index < n) {                                                                                            // 7098
        var rand = baseRandom(index, lastIndex),                                                                       // 7099
            value = result[rand];                                                                                      // 7100
                                                                                                                       // 7101
        result[rand] = result[index];                                                                                  // 7102
        result[index] = value;                                                                                         // 7103
      }                                                                                                                // 7104
      result.length = n;                                                                                               // 7105
      return result;                                                                                                   // 7106
    }                                                                                                                  // 7107
                                                                                                                       // 7108
    /**                                                                                                                // 7109
     * Creates an array of shuffled values, using a version of the                                                     // 7110
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).                                     // 7111
     *                                                                                                                 // 7112
     * @static                                                                                                         // 7113
     * @memberOf _                                                                                                     // 7114
     * @category Collection                                                                                            // 7115
     * @param {Array|Object|string} collection The collection to shuffle.                                              // 7116
     * @returns {Array} Returns the new shuffled array.                                                                // 7117
     * @example                                                                                                        // 7118
     *                                                                                                                 // 7119
     * _.shuffle([1, 2, 3, 4]);                                                                                        // 7120
     * // => [4, 1, 3, 2]                                                                                              // 7121
     */                                                                                                                // 7122
    function shuffle(collection) {                                                                                     // 7123
      return sample(collection, POSITIVE_INFINITY);                                                                    // 7124
    }                                                                                                                  // 7125
                                                                                                                       // 7126
    /**                                                                                                                // 7127
     * Gets the size of `collection` by returning its length for array-like                                            // 7128
     * values or the number of own enumerable properties for objects.                                                  // 7129
     *                                                                                                                 // 7130
     * @static                                                                                                         // 7131
     * @memberOf _                                                                                                     // 7132
     * @category Collection                                                                                            // 7133
     * @param {Array|Object|string} collection The collection to inspect.                                              // 7134
     * @returns {number} Returns the size of `collection`.                                                             // 7135
     * @example                                                                                                        // 7136
     *                                                                                                                 // 7137
     * _.size([1, 2, 3]);                                                                                              // 7138
     * // => 3                                                                                                         // 7139
     *                                                                                                                 // 7140
     * _.size({ 'a': 1, 'b': 2 });                                                                                     // 7141
     * // => 2                                                                                                         // 7142
     *                                                                                                                 // 7143
     * _.size('pebbles');                                                                                              // 7144
     * // => 7                                                                                                         // 7145
     */                                                                                                                // 7146
    function size(collection) {                                                                                        // 7147
      var length = collection ? getLength(collection) : 0;                                                             // 7148
      return isLength(length) ? length : keys(collection).length;                                                      // 7149
    }                                                                                                                  // 7150
                                                                                                                       // 7151
    /**                                                                                                                // 7152
     * Checks if `predicate` returns truthy for **any** element of `collection`.                                       // 7153
     * The function returns as soon as it finds a passing value and does not iterate                                   // 7154
     * over the entire collection. The predicate is bound to `thisArg` and invoked                                     // 7155
     * with three arguments: (value, index|key, collection).                                                           // 7156
     *                                                                                                                 // 7157
     * If a property name is provided for `predicate` the created `_.property`                                         // 7158
     * style callback returns the property value of the given element.                                                 // 7159
     *                                                                                                                 // 7160
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 7161
     * style callback returns `true` for elements that have a matching property                                        // 7162
     * value, else `false`.                                                                                            // 7163
     *                                                                                                                 // 7164
     * If an object is provided for `predicate` the created `_.matches` style                                          // 7165
     * callback returns `true` for elements that have the properties of the given                                      // 7166
     * object, else `false`.                                                                                           // 7167
     *                                                                                                                 // 7168
     * @static                                                                                                         // 7169
     * @memberOf _                                                                                                     // 7170
     * @alias any                                                                                                      // 7171
     * @category Collection                                                                                            // 7172
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 7173
     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 7174
     *  per iteration.                                                                                                 // 7175
     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 7176
     * @returns {boolean} Returns `true` if any element passes the predicate check,                                    // 7177
     *  else `false`.                                                                                                  // 7178
     * @example                                                                                                        // 7179
     *                                                                                                                 // 7180
     * _.some([null, 0, 'yes', false], Boolean);                                                                       // 7181
     * // => true                                                                                                      // 7182
     *                                                                                                                 // 7183
     * var users = [                                                                                                   // 7184
     *   { 'user': 'barney', 'active': true },                                                                         // 7185
     *   { 'user': 'fred',   'active': false }                                                                         // 7186
     * ];                                                                                                              // 7187
     *                                                                                                                 // 7188
     * // using the `_.matches` callback shorthand                                                                     // 7189
     * _.some(users, { 'user': 'barney', 'active': false });                                                           // 7190
     * // => false                                                                                                     // 7191
     *                                                                                                                 // 7192
     * // using the `_.matchesProperty` callback shorthand                                                             // 7193
     * _.some(users, 'active', false);                                                                                 // 7194
     * // => true                                                                                                      // 7195
     *                                                                                                                 // 7196
     * // using the `_.property` callback shorthand                                                                    // 7197
     * _.some(users, 'active');                                                                                        // 7198
     * // => true                                                                                                      // 7199
     */                                                                                                                // 7200
    function some(collection, predicate, thisArg) {                                                                    // 7201
      var func = isArray(collection) ? arraySome : baseSome;                                                           // 7202
      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {                                                 // 7203
        predicate = undefined;                                                                                         // 7204
      }                                                                                                                // 7205
      if (typeof predicate != 'function' || thisArg !== undefined) {                                                   // 7206
        predicate = getCallback(predicate, thisArg, 3);                                                                // 7207
      }                                                                                                                // 7208
      return func(collection, predicate);                                                                              // 7209
    }                                                                                                                  // 7210
                                                                                                                       // 7211
    /**                                                                                                                // 7212
     * Creates an array of elements, sorted in ascending order by the results of                                       // 7213
     * running each element in a collection through `iteratee`. This method performs                                   // 7214
     * a stable sort, that is, it preserves the original sort order of equal elements.                                 // 7215
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:                                          // 7216
     * (value, index|key, collection).                                                                                 // 7217
     *                                                                                                                 // 7218
     * If a property name is provided for `iteratee` the created `_.property`                                          // 7219
     * style callback returns the property value of the given element.                                                 // 7220
     *                                                                                                                 // 7221
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 7222
     * style callback returns `true` for elements that have a matching property                                        // 7223
     * value, else `false`.                                                                                            // 7224
     *                                                                                                                 // 7225
     * If an object is provided for `iteratee` the created `_.matches` style                                           // 7226
     * callback returns `true` for elements that have the properties of the given                                      // 7227
     * object, else `false`.                                                                                           // 7228
     *                                                                                                                 // 7229
     * @static                                                                                                         // 7230
     * @memberOf _                                                                                                     // 7231
     * @category Collection                                                                                            // 7232
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 7233
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked                                      // 7234
     *  per iteration.                                                                                                 // 7235
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 7236
     * @returns {Array} Returns the new sorted array.                                                                  // 7237
     * @example                                                                                                        // 7238
     *                                                                                                                 // 7239
     * _.sortBy([1, 2, 3], function(n) {                                                                               // 7240
     *   return Math.sin(n);                                                                                           // 7241
     * });                                                                                                             // 7242
     * // => [3, 1, 2]                                                                                                 // 7243
     *                                                                                                                 // 7244
     * _.sortBy([1, 2, 3], function(n) {                                                                               // 7245
     *   return this.sin(n);                                                                                           // 7246
     * }, Math);                                                                                                       // 7247
     * // => [3, 1, 2]                                                                                                 // 7248
     *                                                                                                                 // 7249
     * var users = [                                                                                                   // 7250
     *   { 'user': 'fred' },                                                                                           // 7251
     *   { 'user': 'pebbles' },                                                                                        // 7252
     *   { 'user': 'barney' }                                                                                          // 7253
     * ];                                                                                                              // 7254
     *                                                                                                                 // 7255
     * // using the `_.property` callback shorthand                                                                    // 7256
     * _.pluck(_.sortBy(users, 'user'), 'user');                                                                       // 7257
     * // => ['barney', 'fred', 'pebbles']                                                                             // 7258
     */                                                                                                                // 7259
    function sortBy(collection, iteratee, thisArg) {                                                                   // 7260
      if (collection == null) {                                                                                        // 7261
        return [];                                                                                                     // 7262
      }                                                                                                                // 7263
      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {                                                  // 7264
        iteratee = undefined;                                                                                          // 7265
      }                                                                                                                // 7266
      var index = -1;                                                                                                  // 7267
      iteratee = getCallback(iteratee, thisArg, 3);                                                                    // 7268
                                                                                                                       // 7269
      var result = baseMap(collection, function(value, key, collection) {                                              // 7270
        return { 'criteria': iteratee(value, key, collection), 'index': ++index, 'value': value };                     // 7271
      });                                                                                                              // 7272
      return baseSortBy(result, compareAscending);                                                                     // 7273
    }                                                                                                                  // 7274
                                                                                                                       // 7275
    /**                                                                                                                // 7276
     * This method is like `_.sortBy` except that it can sort by multiple iteratees                                    // 7277
     * or property names.                                                                                              // 7278
     *                                                                                                                 // 7279
     * If a property name is provided for an iteratee the created `_.property`                                         // 7280
     * style callback returns the property value of the given element.                                                 // 7281
     *                                                                                                                 // 7282
     * If an object is provided for an iteratee the created `_.matches` style                                          // 7283
     * callback returns `true` for elements that have the properties of the given                                      // 7284
     * object, else `false`.                                                                                           // 7285
     *                                                                                                                 // 7286
     * @static                                                                                                         // 7287
     * @memberOf _                                                                                                     // 7288
     * @category Collection                                                                                            // 7289
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 7290
     * @param {...(Function|Function[]|Object|Object[]|string|string[])} iteratees                                     // 7291
     *  The iteratees to sort by, specified as individual values or arrays of values.                                  // 7292
     * @returns {Array} Returns the new sorted array.                                                                  // 7293
     * @example                                                                                                        // 7294
     *                                                                                                                 // 7295
     * var users = [                                                                                                   // 7296
     *   { 'user': 'fred',   'age': 48 },                                                                              // 7297
     *   { 'user': 'barney', 'age': 36 },                                                                              // 7298
     *   { 'user': 'fred',   'age': 42 },                                                                              // 7299
     *   { 'user': 'barney', 'age': 34 }                                                                               // 7300
     * ];                                                                                                              // 7301
     *                                                                                                                 // 7302
     * _.map(_.sortByAll(users, ['user', 'age']), _.values);                                                           // 7303
     * // => [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]                                              // 7304
     *                                                                                                                 // 7305
     * _.map(_.sortByAll(users, 'user', function(chr) {                                                                // 7306
     *   return Math.floor(chr.age / 10);                                                                              // 7307
     * }), _.values);                                                                                                  // 7308
     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]                                              // 7309
     */                                                                                                                // 7310
    var sortByAll = restParam(function(collection, iteratees) {                                                        // 7311
      if (collection == null) {                                                                                        // 7312
        return [];                                                                                                     // 7313
      }                                                                                                                // 7314
      var guard = iteratees[2];                                                                                        // 7315
      if (guard && isIterateeCall(iteratees[0], iteratees[1], guard)) {                                                // 7316
        iteratees.length = 1;                                                                                          // 7317
      }                                                                                                                // 7318
      return baseSortByOrder(collection, baseFlatten(iteratees), []);                                                  // 7319
    });                                                                                                                // 7320
                                                                                                                       // 7321
    /**                                                                                                                // 7322
     * This method is like `_.sortByAll` except that it allows specifying the                                          // 7323
     * sort orders of the iteratees to sort by. If `orders` is unspecified, all                                        // 7324
     * values are sorted in ascending order. Otherwise, a value is sorted in                                           // 7325
     * ascending order if its corresponding order is "asc", and descending if "desc".                                  // 7326
     *                                                                                                                 // 7327
     * If a property name is provided for an iteratee the created `_.property`                                         // 7328
     * style callback returns the property value of the given element.                                                 // 7329
     *                                                                                                                 // 7330
     * If an object is provided for an iteratee the created `_.matches` style                                          // 7331
     * callback returns `true` for elements that have the properties of the given                                      // 7332
     * object, else `false`.                                                                                           // 7333
     *                                                                                                                 // 7334
     * @static                                                                                                         // 7335
     * @memberOf _                                                                                                     // 7336
     * @category Collection                                                                                            // 7337
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 7338
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.                                       // 7339
     * @param {boolean[]} [orders] The sort orders of `iteratees`.                                                     // 7340
     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.                               // 7341
     * @returns {Array} Returns the new sorted array.                                                                  // 7342
     * @example                                                                                                        // 7343
     *                                                                                                                 // 7344
     * var users = [                                                                                                   // 7345
     *   { 'user': 'fred',   'age': 48 },                                                                              // 7346
     *   { 'user': 'barney', 'age': 34 },                                                                              // 7347
     *   { 'user': 'fred',   'age': 42 },                                                                              // 7348
     *   { 'user': 'barney', 'age': 36 }                                                                               // 7349
     * ];                                                                                                              // 7350
     *                                                                                                                 // 7351
     * // sort by `user` in ascending order and by `age` in descending order                                           // 7352
     * _.map(_.sortByOrder(users, ['user', 'age'], ['asc', 'desc']), _.values);                                        // 7353
     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]                                              // 7354
     */                                                                                                                // 7355
    function sortByOrder(collection, iteratees, orders, guard) {                                                       // 7356
      if (collection == null) {                                                                                        // 7357
        return [];                                                                                                     // 7358
      }                                                                                                                // 7359
      if (guard && isIterateeCall(iteratees, orders, guard)) {                                                         // 7360
        orders = undefined;                                                                                            // 7361
      }                                                                                                                // 7362
      if (!isArray(iteratees)) {                                                                                       // 7363
        iteratees = iteratees == null ? [] : [iteratees];                                                              // 7364
      }                                                                                                                // 7365
      if (!isArray(orders)) {                                                                                          // 7366
        orders = orders == null ? [] : [orders];                                                                       // 7367
      }                                                                                                                // 7368
      return baseSortByOrder(collection, iteratees, orders);                                                           // 7369
    }                                                                                                                  // 7370
                                                                                                                       // 7371
    /**                                                                                                                // 7372
     * Performs a deep comparison between each element in `collection` and the                                         // 7373
     * source object, returning an array of all elements that have equivalent                                          // 7374
     * property values.                                                                                                // 7375
     *                                                                                                                 // 7376
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,                                      // 7377
     * numbers, `Object` objects, regexes, and strings. Objects are compared by                                        // 7378
     * their own, not inherited, enumerable properties. For comparing a single                                         // 7379
     * own or inherited property value see `_.matchesProperty`.                                                        // 7380
     *                                                                                                                 // 7381
     * @static                                                                                                         // 7382
     * @memberOf _                                                                                                     // 7383
     * @category Collection                                                                                            // 7384
     * @param {Array|Object|string} collection The collection to search.                                               // 7385
     * @param {Object} source The object of property values to match.                                                  // 7386
     * @returns {Array} Returns the new filtered array.                                                                // 7387
     * @example                                                                                                        // 7388
     *                                                                                                                 // 7389
     * var users = [                                                                                                   // 7390
     *   { 'user': 'barney', 'age': 36, 'active': false, 'pets': ['hoppy'] },                                          // 7391
     *   { 'user': 'fred',   'age': 40, 'active': true, 'pets': ['baby puss', 'dino'] }                                // 7392
     * ];                                                                                                              // 7393
     *                                                                                                                 // 7394
     * _.pluck(_.where(users, { 'age': 36, 'active': false }), 'user');                                                // 7395
     * // => ['barney']                                                                                                // 7396
     *                                                                                                                 // 7397
     * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');                                                          // 7398
     * // => ['fred']                                                                                                  // 7399
     */                                                                                                                // 7400
    function where(collection, source) {                                                                               // 7401
      return filter(collection, baseMatches(source));                                                                  // 7402
    }                                                                                                                  // 7403
                                                                                                                       // 7404
    /*------------------------------------------------------------------------*/                                       // 7405
                                                                                                                       // 7406
    /**                                                                                                                // 7407
     * Gets the number of milliseconds that have elapsed since the Unix epoch                                          // 7408
     * (1 January 1970 00:00:00 UTC).                                                                                  // 7409
     *                                                                                                                 // 7410
     * @static                                                                                                         // 7411
     * @memberOf _                                                                                                     // 7412
     * @category Date                                                                                                  // 7413
     * @example                                                                                                        // 7414
     *                                                                                                                 // 7415
     * _.defer(function(stamp) {                                                                                       // 7416
     *   console.log(_.now() - stamp);                                                                                 // 7417
     * }, _.now());                                                                                                    // 7418
     * // => logs the number of milliseconds it took for the deferred function to be invoked                           // 7419
     */                                                                                                                // 7420
    var now = nativeNow || function() {                                                                                // 7421
      return new Date().getTime();                                                                                     // 7422
    };                                                                                                                 // 7423
                                                                                                                       // 7424
    /*------------------------------------------------------------------------*/                                       // 7425
                                                                                                                       // 7426
    /**                                                                                                                // 7427
     * The opposite of `_.before`; this method creates a function that invokes                                         // 7428
     * `func` once it's called `n` or more times.                                                                      // 7429
     *                                                                                                                 // 7430
     * @static                                                                                                         // 7431
     * @memberOf _                                                                                                     // 7432
     * @category Function                                                                                              // 7433
     * @param {number} n The number of calls before `func` is invoked.                                                 // 7434
     * @param {Function} func The function to restrict.                                                                // 7435
     * @returns {Function} Returns the new restricted function.                                                        // 7436
     * @example                                                                                                        // 7437
     *                                                                                                                 // 7438
     * var saves = ['profile', 'settings'];                                                                            // 7439
     *                                                                                                                 // 7440
     * var done = _.after(saves.length, function() {                                                                   // 7441
     *   console.log('done saving!');                                                                                  // 7442
     * });                                                                                                             // 7443
     *                                                                                                                 // 7444
     * _.forEach(saves, function(type) {                                                                               // 7445
     *   asyncSave({ 'type': type, 'complete': done });                                                                // 7446
     * });                                                                                                             // 7447
     * // => logs 'done saving!' after the two async saves have completed                                              // 7448
     */                                                                                                                // 7449
    function after(n, func) {                                                                                          // 7450
      if (typeof func != 'function') {                                                                                 // 7451
        if (typeof n == 'function') {                                                                                  // 7452
          var temp = n;                                                                                                // 7453
          n = func;                                                                                                    // 7454
          func = temp;                                                                                                 // 7455
        } else {                                                                                                       // 7456
          throw new TypeError(FUNC_ERROR_TEXT);                                                                        // 7457
        }                                                                                                              // 7458
      }                                                                                                                // 7459
      n = nativeIsFinite(n = +n) ? n : 0;                                                                              // 7460
      return function() {                                                                                              // 7461
        if (--n < 1) {                                                                                                 // 7462
          return func.apply(this, arguments);                                                                          // 7463
        }                                                                                                              // 7464
      };                                                                                                               // 7465
    }                                                                                                                  // 7466
                                                                                                                       // 7467
    /**                                                                                                                // 7468
     * Creates a function that accepts up to `n` arguments ignoring any                                                // 7469
     * additional arguments.                                                                                           // 7470
     *                                                                                                                 // 7471
     * @static                                                                                                         // 7472
     * @memberOf _                                                                                                     // 7473
     * @category Function                                                                                              // 7474
     * @param {Function} func The function to cap arguments for.                                                       // 7475
     * @param {number} [n=func.length] The arity cap.                                                                  // 7476
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 7477
     * @returns {Function} Returns the new function.                                                                   // 7478
     * @example                                                                                                        // 7479
     *                                                                                                                 // 7480
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));                                                                    // 7481
     * // => [6, 8, 10]                                                                                                // 7482
     */                                                                                                                // 7483
    function ary(func, n, guard) {                                                                                     // 7484
      if (guard && isIterateeCall(func, n, guard)) {                                                                   // 7485
        n = undefined;                                                                                                 // 7486
      }                                                                                                                // 7487
      n = (func && n == null) ? func.length : nativeMax(+n || 0, 0);                                                   // 7488
      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);                             // 7489
    }                                                                                                                  // 7490
                                                                                                                       // 7491
    /**                                                                                                                // 7492
     * Creates a function that invokes `func`, with the `this` binding and arguments                                   // 7493
     * of the created function, while it's called less than `n` times. Subsequent                                      // 7494
     * calls to the created function return the result of the last `func` invocation.                                  // 7495
     *                                                                                                                 // 7496
     * @static                                                                                                         // 7497
     * @memberOf _                                                                                                     // 7498
     * @category Function                                                                                              // 7499
     * @param {number} n The number of calls at which `func` is no longer invoked.                                     // 7500
     * @param {Function} func The function to restrict.                                                                // 7501
     * @returns {Function} Returns the new restricted function.                                                        // 7502
     * @example                                                                                                        // 7503
     *                                                                                                                 // 7504
     * jQuery('#add').on('click', _.before(5, addContactToList));                                                      // 7505
     * // => allows adding up to 4 contacts to the list                                                                // 7506
     */                                                                                                                // 7507
    function before(n, func) {                                                                                         // 7508
      var result;                                                                                                      // 7509
      if (typeof func != 'function') {                                                                                 // 7510
        if (typeof n == 'function') {                                                                                  // 7511
          var temp = n;                                                                                                // 7512
          n = func;                                                                                                    // 7513
          func = temp;                                                                                                 // 7514
        } else {                                                                                                       // 7515
          throw new TypeError(FUNC_ERROR_TEXT);                                                                        // 7516
        }                                                                                                              // 7517
      }                                                                                                                // 7518
      return function() {                                                                                              // 7519
        if (--n > 0) {                                                                                                 // 7520
          result = func.apply(this, arguments);                                                                        // 7521
        }                                                                                                              // 7522
        if (n <= 1) {                                                                                                  // 7523
          func = undefined;                                                                                            // 7524
        }                                                                                                              // 7525
        return result;                                                                                                 // 7526
      };                                                                                                               // 7527
    }                                                                                                                  // 7528
                                                                                                                       // 7529
    /**                                                                                                                // 7530
     * Creates a function that invokes `func` with the `this` binding of `thisArg`                                     // 7531
     * and prepends any additional `_.bind` arguments to those provided to the                                         // 7532
     * bound function.                                                                                                 // 7533
     *                                                                                                                 // 7534
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,                                     // 7535
     * may be used as a placeholder for partially applied arguments.                                                   // 7536
     *                                                                                                                 // 7537
     * **Note:** Unlike native `Function#bind` this method does not set the "length"                                   // 7538
     * property of bound functions.                                                                                    // 7539
     *                                                                                                                 // 7540
     * @static                                                                                                         // 7541
     * @memberOf _                                                                                                     // 7542
     * @category Function                                                                                              // 7543
     * @param {Function} func The function to bind.                                                                    // 7544
     * @param {*} thisArg The `this` binding of `func`.                                                                // 7545
     * @param {...*} [partials] The arguments to be partially applied.                                                 // 7546
     * @returns {Function} Returns the new bound function.                                                             // 7547
     * @example                                                                                                        // 7548
     *                                                                                                                 // 7549
     * var greet = function(greeting, punctuation) {                                                                   // 7550
     *   return greeting + ' ' + this.user + punctuation;                                                              // 7551
     * };                                                                                                              // 7552
     *                                                                                                                 // 7553
     * var object = { 'user': 'fred' };                                                                                // 7554
     *                                                                                                                 // 7555
     * var bound = _.bind(greet, object, 'hi');                                                                        // 7556
     * bound('!');                                                                                                     // 7557
     * // => 'hi fred!'                                                                                                // 7558
     *                                                                                                                 // 7559
     * // using placeholders                                                                                           // 7560
     * var bound = _.bind(greet, object, _, '!');                                                                      // 7561
     * bound('hi');                                                                                                    // 7562
     * // => 'hi fred!'                                                                                                // 7563
     */                                                                                                                // 7564
    var bind = restParam(function(func, thisArg, partials) {                                                           // 7565
      var bitmask = BIND_FLAG;                                                                                         // 7566
      if (partials.length) {                                                                                           // 7567
        var holders = replaceHolders(partials, bind.placeholder);                                                      // 7568
        bitmask |= PARTIAL_FLAG;                                                                                       // 7569
      }                                                                                                                // 7570
      return createWrapper(func, bitmask, thisArg, partials, holders);                                                 // 7571
    });                                                                                                                // 7572
                                                                                                                       // 7573
    /**                                                                                                                // 7574
     * Binds methods of an object to the object itself, overwriting the existing                                       // 7575
     * method. Method names may be specified as individual arguments or as arrays                                      // 7576
     * of method names. If no method names are provided all enumerable function                                        // 7577
     * properties, own and inherited, of `object` are bound.                                                           // 7578
     *                                                                                                                 // 7579
     * **Note:** This method does not set the "length" property of bound functions.                                    // 7580
     *                                                                                                                 // 7581
     * @static                                                                                                         // 7582
     * @memberOf _                                                                                                     // 7583
     * @category Function                                                                                              // 7584
     * @param {Object} object The object to bind and assign the bound methods to.                                      // 7585
     * @param {...(string|string[])} [methodNames] The object method names to bind,                                    // 7586
     *  specified as individual method names or arrays of method names.                                                // 7587
     * @returns {Object} Returns `object`.                                                                             // 7588
     * @example                                                                                                        // 7589
     *                                                                                                                 // 7590
     * var view = {                                                                                                    // 7591
     *   'label': 'docs',                                                                                              // 7592
     *   'onClick': function() {                                                                                       // 7593
     *     console.log('clicked ' + this.label);                                                                       // 7594
     *   }                                                                                                             // 7595
     * };                                                                                                              // 7596
     *                                                                                                                 // 7597
     * _.bindAll(view);                                                                                                // 7598
     * jQuery('#docs').on('click', view.onClick);                                                                      // 7599
     * // => logs 'clicked docs' when the element is clicked                                                           // 7600
     */                                                                                                                // 7601
    var bindAll = restParam(function(object, methodNames) {                                                            // 7602
      methodNames = methodNames.length ? baseFlatten(methodNames) : functions(object);                                 // 7603
                                                                                                                       // 7604
      var index = -1,                                                                                                  // 7605
          length = methodNames.length;                                                                                 // 7606
                                                                                                                       // 7607
      while (++index < length) {                                                                                       // 7608
        var key = methodNames[index];                                                                                  // 7609
        object[key] = createWrapper(object[key], BIND_FLAG, object);                                                   // 7610
      }                                                                                                                // 7611
      return object;                                                                                                   // 7612
    });                                                                                                                // 7613
                                                                                                                       // 7614
    /**                                                                                                                // 7615
     * Creates a function that invokes the method at `object[key]` and prepends                                        // 7616
     * any additional `_.bindKey` arguments to those provided to the bound function.                                   // 7617
     *                                                                                                                 // 7618
     * This method differs from `_.bind` by allowing bound functions to reference                                      // 7619
     * methods that may be redefined or don't yet exist.                                                               // 7620
     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)                // 7621
     * for more details.                                                                                               // 7622
     *                                                                                                                 // 7623
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic                                          // 7624
     * builds, may be used as a placeholder for partially applied arguments.                                           // 7625
     *                                                                                                                 // 7626
     * @static                                                                                                         // 7627
     * @memberOf _                                                                                                     // 7628
     * @category Function                                                                                              // 7629
     * @param {Object} object The object the method belongs to.                                                        // 7630
     * @param {string} key The key of the method.                                                                      // 7631
     * @param {...*} [partials] The arguments to be partially applied.                                                 // 7632
     * @returns {Function} Returns the new bound function.                                                             // 7633
     * @example                                                                                                        // 7634
     *                                                                                                                 // 7635
     * var object = {                                                                                                  // 7636
     *   'user': 'fred',                                                                                               // 7637
     *   'greet': function(greeting, punctuation) {                                                                    // 7638
     *     return greeting + ' ' + this.user + punctuation;                                                            // 7639
     *   }                                                                                                             // 7640
     * };                                                                                                              // 7641
     *                                                                                                                 // 7642
     * var bound = _.bindKey(object, 'greet', 'hi');                                                                   // 7643
     * bound('!');                                                                                                     // 7644
     * // => 'hi fred!'                                                                                                // 7645
     *                                                                                                                 // 7646
     * object.greet = function(greeting, punctuation) {                                                                // 7647
     *   return greeting + 'ya ' + this.user + punctuation;                                                            // 7648
     * };                                                                                                              // 7649
     *                                                                                                                 // 7650
     * bound('!');                                                                                                     // 7651
     * // => 'hiya fred!'                                                                                              // 7652
     *                                                                                                                 // 7653
     * // using placeholders                                                                                           // 7654
     * var bound = _.bindKey(object, 'greet', _, '!');                                                                 // 7655
     * bound('hi');                                                                                                    // 7656
     * // => 'hiya fred!'                                                                                              // 7657
     */                                                                                                                // 7658
    var bindKey = restParam(function(object, key, partials) {                                                          // 7659
      var bitmask = BIND_FLAG | BIND_KEY_FLAG;                                                                         // 7660
      if (partials.length) {                                                                                           // 7661
        var holders = replaceHolders(partials, bindKey.placeholder);                                                   // 7662
        bitmask |= PARTIAL_FLAG;                                                                                       // 7663
      }                                                                                                                // 7664
      return createWrapper(key, bitmask, object, partials, holders);                                                   // 7665
    });                                                                                                                // 7666
                                                                                                                       // 7667
    /**                                                                                                                // 7668
     * Creates a function that accepts one or more arguments of `func` that when                                       // 7669
     * called either invokes `func` returning its result, if all `func` arguments                                      // 7670
     * have been provided, or returns a function that accepts one or more of the                                       // 7671
     * remaining `func` arguments, and so on. The arity of `func` may be specified                                     // 7672
     * if `func.length` is not sufficient.                                                                             // 7673
     *                                                                                                                 // 7674
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,                                    // 7675
     * may be used as a placeholder for provided arguments.                                                            // 7676
     *                                                                                                                 // 7677
     * **Note:** This method does not set the "length" property of curried functions.                                  // 7678
     *                                                                                                                 // 7679
     * @static                                                                                                         // 7680
     * @memberOf _                                                                                                     // 7681
     * @category Function                                                                                              // 7682
     * @param {Function} func The function to curry.                                                                   // 7683
     * @param {number} [arity=func.length] The arity of `func`.                                                        // 7684
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 7685
     * @returns {Function} Returns the new curried function.                                                           // 7686
     * @example                                                                                                        // 7687
     *                                                                                                                 // 7688
     * var abc = function(a, b, c) {                                                                                   // 7689
     *   return [a, b, c];                                                                                             // 7690
     * };                                                                                                              // 7691
     *                                                                                                                 // 7692
     * var curried = _.curry(abc);                                                                                     // 7693
     *                                                                                                                 // 7694
     * curried(1)(2)(3);                                                                                               // 7695
     * // => [1, 2, 3]                                                                                                 // 7696
     *                                                                                                                 // 7697
     * curried(1, 2)(3);                                                                                               // 7698
     * // => [1, 2, 3]                                                                                                 // 7699
     *                                                                                                                 // 7700
     * curried(1, 2, 3);                                                                                               // 7701
     * // => [1, 2, 3]                                                                                                 // 7702
     *                                                                                                                 // 7703
     * // using placeholders                                                                                           // 7704
     * curried(1)(_, 3)(2);                                                                                            // 7705
     * // => [1, 2, 3]                                                                                                 // 7706
     */                                                                                                                // 7707
    var curry = createCurry(CURRY_FLAG);                                                                               // 7708
                                                                                                                       // 7709
    /**                                                                                                                // 7710
     * This method is like `_.curry` except that arguments are applied to `func`                                       // 7711
     * in the manner of `_.partialRight` instead of `_.partial`.                                                       // 7712
     *                                                                                                                 // 7713
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic                                       // 7714
     * builds, may be used as a placeholder for provided arguments.                                                    // 7715
     *                                                                                                                 // 7716
     * **Note:** This method does not set the "length" property of curried functions.                                  // 7717
     *                                                                                                                 // 7718
     * @static                                                                                                         // 7719
     * @memberOf _                                                                                                     // 7720
     * @category Function                                                                                              // 7721
     * @param {Function} func The function to curry.                                                                   // 7722
     * @param {number} [arity=func.length] The arity of `func`.                                                        // 7723
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 7724
     * @returns {Function} Returns the new curried function.                                                           // 7725
     * @example                                                                                                        // 7726
     *                                                                                                                 // 7727
     * var abc = function(a, b, c) {                                                                                   // 7728
     *   return [a, b, c];                                                                                             // 7729
     * };                                                                                                              // 7730
     *                                                                                                                 // 7731
     * var curried = _.curryRight(abc);                                                                                // 7732
     *                                                                                                                 // 7733
     * curried(3)(2)(1);                                                                                               // 7734
     * // => [1, 2, 3]                                                                                                 // 7735
     *                                                                                                                 // 7736
     * curried(2, 3)(1);                                                                                               // 7737
     * // => [1, 2, 3]                                                                                                 // 7738
     *                                                                                                                 // 7739
     * curried(1, 2, 3);                                                                                               // 7740
     * // => [1, 2, 3]                                                                                                 // 7741
     *                                                                                                                 // 7742
     * // using placeholders                                                                                           // 7743
     * curried(3)(1, _)(2);                                                                                            // 7744
     * // => [1, 2, 3]                                                                                                 // 7745
     */                                                                                                                // 7746
    var curryRight = createCurry(CURRY_RIGHT_FLAG);                                                                    // 7747
                                                                                                                       // 7748
    /**                                                                                                                // 7749
     * Creates a debounced function that delays invoking `func` until after `wait`                                     // 7750
     * milliseconds have elapsed since the last time the debounced function was                                        // 7751
     * invoked. The debounced function comes with a `cancel` method to cancel                                          // 7752
     * delayed invocations. Provide an options object to indicate that `func`                                          // 7753
     * should be invoked on the leading and/or trailing edge of the `wait` timeout.                                    // 7754
     * Subsequent calls to the debounced function return the result of the last                                        // 7755
     * `func` invocation.                                                                                              // 7756
     *                                                                                                                 // 7757
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked                                     // 7758
     * on the trailing edge of the timeout only if the the debounced function is                                       // 7759
     * invoked more than once during the `wait` timeout.                                                               // 7760
     *                                                                                                                 // 7761
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)        // 7762
     * for details over the differences between `_.debounce` and `_.throttle`.                                         // 7763
     *                                                                                                                 // 7764
     * @static                                                                                                         // 7765
     * @memberOf _                                                                                                     // 7766
     * @category Function                                                                                              // 7767
     * @param {Function} func The function to debounce.                                                                // 7768
     * @param {number} [wait=0] The number of milliseconds to delay.                                                   // 7769
     * @param {Object} [options] The options object.                                                                   // 7770
     * @param {boolean} [options.leading=false] Specify invoking on the leading                                        // 7771
     *  edge of the timeout.                                                                                           // 7772
     * @param {number} [options.maxWait] The maximum time `func` is allowed to be                                      // 7773
     *  delayed before it's invoked.                                                                                   // 7774
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing                                       // 7775
     *  edge of the timeout.                                                                                           // 7776
     * @returns {Function} Returns the new debounced function.                                                         // 7777
     * @example                                                                                                        // 7778
     *                                                                                                                 // 7779
     * // avoid costly calculations while the window size is in flux                                                   // 7780
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));                                                  // 7781
     *                                                                                                                 // 7782
     * // invoke `sendMail` when the click event is fired, debouncing subsequent calls                                 // 7783
     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {                                                      // 7784
     *   'leading': true,                                                                                              // 7785
     *   'trailing': false                                                                                             // 7786
     * }));                                                                                                            // 7787
     *                                                                                                                 // 7788
     * // ensure `batchLog` is invoked once after 1 second of debounced calls                                          // 7789
     * var source = new EventSource('/stream');                                                                        // 7790
     * jQuery(source).on('message', _.debounce(batchLog, 250, {                                                        // 7791
     *   'maxWait': 1000                                                                                               // 7792
     * }));                                                                                                            // 7793
     *                                                                                                                 // 7794
     * // cancel a debounced call                                                                                      // 7795
     * var todoChanges = _.debounce(batchLog, 1000);                                                                   // 7796
     * Object.observe(models.todo, todoChanges);                                                                       // 7797
     *                                                                                                                 // 7798
     * Object.observe(models, function(changes) {                                                                      // 7799
     *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {                                                   // 7800
     *     todoChanges.cancel();                                                                                       // 7801
     *   }                                                                                                             // 7802
     * }, ['delete']);                                                                                                 // 7803
     *                                                                                                                 // 7804
     * // ...at some point `models.todo` is changed                                                                    // 7805
     * models.todo.completed = true;                                                                                   // 7806
     *                                                                                                                 // 7807
     * // ...before 1 second has passed `models.todo` is deleted                                                       // 7808
     * // which cancels the debounced `todoChanges` call                                                               // 7809
     * delete models.todo;                                                                                             // 7810
     */                                                                                                                // 7811
    function debounce(func, wait, options) {                                                                           // 7812
      var args,                                                                                                        // 7813
          maxTimeoutId,                                                                                                // 7814
          result,                                                                                                      // 7815
          stamp,                                                                                                       // 7816
          thisArg,                                                                                                     // 7817
          timeoutId,                                                                                                   // 7818
          trailingCall,                                                                                                // 7819
          lastCalled = 0,                                                                                              // 7820
          maxWait = false,                                                                                             // 7821
          trailing = true;                                                                                             // 7822
                                                                                                                       // 7823
      if (typeof func != 'function') {                                                                                 // 7824
        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 7825
      }                                                                                                                // 7826
      wait = wait < 0 ? 0 : (+wait || 0);                                                                              // 7827
      if (options === true) {                                                                                          // 7828
        var leading = true;                                                                                            // 7829
        trailing = false;                                                                                              // 7830
      } else if (isObject(options)) {                                                                                  // 7831
        leading = !!options.leading;                                                                                   // 7832
        maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);                                      // 7833
        trailing = 'trailing' in options ? !!options.trailing : trailing;                                              // 7834
      }                                                                                                                // 7835
                                                                                                                       // 7836
      function cancel() {                                                                                              // 7837
        if (timeoutId) {                                                                                               // 7838
          clearTimeout(timeoutId);                                                                                     // 7839
        }                                                                                                              // 7840
        if (maxTimeoutId) {                                                                                            // 7841
          clearTimeout(maxTimeoutId);                                                                                  // 7842
        }                                                                                                              // 7843
        lastCalled = 0;                                                                                                // 7844
        maxTimeoutId = timeoutId = trailingCall = undefined;                                                           // 7845
      }                                                                                                                // 7846
                                                                                                                       // 7847
      function complete(isCalled, id) {                                                                                // 7848
        if (id) {                                                                                                      // 7849
          clearTimeout(id);                                                                                            // 7850
        }                                                                                                              // 7851
        maxTimeoutId = timeoutId = trailingCall = undefined;                                                           // 7852
        if (isCalled) {                                                                                                // 7853
          lastCalled = now();                                                                                          // 7854
          result = func.apply(thisArg, args);                                                                          // 7855
          if (!timeoutId && !maxTimeoutId) {                                                                           // 7856
            args = thisArg = undefined;                                                                                // 7857
          }                                                                                                            // 7858
        }                                                                                                              // 7859
      }                                                                                                                // 7860
                                                                                                                       // 7861
      function delayed() {                                                                                             // 7862
        var remaining = wait - (now() - stamp);                                                                        // 7863
        if (remaining <= 0 || remaining > wait) {                                                                      // 7864
          complete(trailingCall, maxTimeoutId);                                                                        // 7865
        } else {                                                                                                       // 7866
          timeoutId = setTimeout(delayed, remaining);                                                                  // 7867
        }                                                                                                              // 7868
      }                                                                                                                // 7869
                                                                                                                       // 7870
      function maxDelayed() {                                                                                          // 7871
        complete(trailing, timeoutId);                                                                                 // 7872
      }                                                                                                                // 7873
                                                                                                                       // 7874
      function debounced() {                                                                                           // 7875
        args = arguments;                                                                                              // 7876
        stamp = now();                                                                                                 // 7877
        thisArg = this;                                                                                                // 7878
        trailingCall = trailing && (timeoutId || !leading);                                                            // 7879
                                                                                                                       // 7880
        if (maxWait === false) {                                                                                       // 7881
          var leadingCall = leading && !timeoutId;                                                                     // 7882
        } else {                                                                                                       // 7883
          if (!maxTimeoutId && !leading) {                                                                             // 7884
            lastCalled = stamp;                                                                                        // 7885
          }                                                                                                            // 7886
          var remaining = maxWait - (stamp - lastCalled),                                                              // 7887
              isCalled = remaining <= 0 || remaining > maxWait;                                                        // 7888
                                                                                                                       // 7889
          if (isCalled) {                                                                                              // 7890
            if (maxTimeoutId) {                                                                                        // 7891
              maxTimeoutId = clearTimeout(maxTimeoutId);                                                               // 7892
            }                                                                                                          // 7893
            lastCalled = stamp;                                                                                        // 7894
            result = func.apply(thisArg, args);                                                                        // 7895
          }                                                                                                            // 7896
          else if (!maxTimeoutId) {                                                                                    // 7897
            maxTimeoutId = setTimeout(maxDelayed, remaining);                                                          // 7898
          }                                                                                                            // 7899
        }                                                                                                              // 7900
        if (isCalled && timeoutId) {                                                                                   // 7901
          timeoutId = clearTimeout(timeoutId);                                                                         // 7902
        }                                                                                                              // 7903
        else if (!timeoutId && wait !== maxWait) {                                                                     // 7904
          timeoutId = setTimeout(delayed, wait);                                                                       // 7905
        }                                                                                                              // 7906
        if (leadingCall) {                                                                                             // 7907
          isCalled = true;                                                                                             // 7908
          result = func.apply(thisArg, args);                                                                          // 7909
        }                                                                                                              // 7910
        if (isCalled && !timeoutId && !maxTimeoutId) {                                                                 // 7911
          args = thisArg = undefined;                                                                                  // 7912
        }                                                                                                              // 7913
        return result;                                                                                                 // 7914
      }                                                                                                                // 7915
      debounced.cancel = cancel;                                                                                       // 7916
      return debounced;                                                                                                // 7917
    }                                                                                                                  // 7918
                                                                                                                       // 7919
    /**                                                                                                                // 7920
     * Defers invoking the `func` until the current call stack has cleared. Any                                        // 7921
     * additional arguments are provided to `func` when it's invoked.                                                  // 7922
     *                                                                                                                 // 7923
     * @static                                                                                                         // 7924
     * @memberOf _                                                                                                     // 7925
     * @category Function                                                                                              // 7926
     * @param {Function} func The function to defer.                                                                   // 7927
     * @param {...*} [args] The arguments to invoke the function with.                                                 // 7928
     * @returns {number} Returns the timer id.                                                                         // 7929
     * @example                                                                                                        // 7930
     *                                                                                                                 // 7931
     * _.defer(function(text) {                                                                                        // 7932
     *   console.log(text);                                                                                            // 7933
     * }, 'deferred');                                                                                                 // 7934
     * // logs 'deferred' after one or more milliseconds                                                               // 7935
     */                                                                                                                // 7936
    var defer = restParam(function(func, args) {                                                                       // 7937
      return baseDelay(func, 1, args);                                                                                 // 7938
    });                                                                                                                // 7939
                                                                                                                       // 7940
    /**                                                                                                                // 7941
     * Invokes `func` after `wait` milliseconds. Any additional arguments are                                          // 7942
     * provided to `func` when it's invoked.                                                                           // 7943
     *                                                                                                                 // 7944
     * @static                                                                                                         // 7945
     * @memberOf _                                                                                                     // 7946
     * @category Function                                                                                              // 7947
     * @param {Function} func The function to delay.                                                                   // 7948
     * @param {number} wait The number of milliseconds to delay invocation.                                            // 7949
     * @param {...*} [args] The arguments to invoke the function with.                                                 // 7950
     * @returns {number} Returns the timer id.                                                                         // 7951
     * @example                                                                                                        // 7952
     *                                                                                                                 // 7953
     * _.delay(function(text) {                                                                                        // 7954
     *   console.log(text);                                                                                            // 7955
     * }, 1000, 'later');                                                                                              // 7956
     * // => logs 'later' after one second                                                                             // 7957
     */                                                                                                                // 7958
    var delay = restParam(function(func, wait, args) {                                                                 // 7959
      return baseDelay(func, wait, args);                                                                              // 7960
    });                                                                                                                // 7961
                                                                                                                       // 7962
    /**                                                                                                                // 7963
     * Creates a function that returns the result of invoking the provided                                             // 7964
     * functions with the `this` binding of the created function, where each                                           // 7965
     * successive invocation is supplied the return value of the previous.                                             // 7966
     *                                                                                                                 // 7967
     * @static                                                                                                         // 7968
     * @memberOf _                                                                                                     // 7969
     * @category Function                                                                                              // 7970
     * @param {...Function} [funcs] Functions to invoke.                                                               // 7971
     * @returns {Function} Returns the new function.                                                                   // 7972
     * @example                                                                                                        // 7973
     *                                                                                                                 // 7974
     * function square(n) {                                                                                            // 7975
     *   return n * n;                                                                                                 // 7976
     * }                                                                                                               // 7977
     *                                                                                                                 // 7978
     * var addSquare = _.flow(_.add, square);                                                                          // 7979
     * addSquare(1, 2);                                                                                                // 7980
     * // => 9                                                                                                         // 7981
     */                                                                                                                // 7982
    var flow = createFlow();                                                                                           // 7983
                                                                                                                       // 7984
    /**                                                                                                                // 7985
     * This method is like `_.flow` except that it creates a function that                                             // 7986
     * invokes the provided functions from right to left.                                                              // 7987
     *                                                                                                                 // 7988
     * @static                                                                                                         // 7989
     * @memberOf _                                                                                                     // 7990
     * @alias backflow, compose                                                                                        // 7991
     * @category Function                                                                                              // 7992
     * @param {...Function} [funcs] Functions to invoke.                                                               // 7993
     * @returns {Function} Returns the new function.                                                                   // 7994
     * @example                                                                                                        // 7995
     *                                                                                                                 // 7996
     * function square(n) {                                                                                            // 7997
     *   return n * n;                                                                                                 // 7998
     * }                                                                                                               // 7999
     *                                                                                                                 // 8000
     * var addSquare = _.flowRight(square, _.add);                                                                     // 8001
     * addSquare(1, 2);                                                                                                // 8002
     * // => 9                                                                                                         // 8003
     */                                                                                                                // 8004
    var flowRight = createFlow(true);                                                                                  // 8005
                                                                                                                       // 8006
    /**                                                                                                                // 8007
     * Creates a function that memoizes the result of `func`. If `resolver` is                                         // 8008
     * provided it determines the cache key for storing the result based on the                                        // 8009
     * arguments provided to the memoized function. By default, the first argument                                     // 8010
     * provided to the memoized function is coerced to a string and used as the                                        // 8011
     * cache key. The `func` is invoked with the `this` binding of the memoized                                        // 8012
     * function.                                                                                                       // 8013
     *                                                                                                                 // 8014
     * **Note:** The cache is exposed as the `cache` property on the memoized                                          // 8015
     * function. Its creation may be customized by replacing the `_.memoize.Cache`                                     // 8016
     * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `get`, `has`, and `set`.                                                                    // 8018
     *                                                                                                                 // 8019
     * @static                                                                                                         // 8020
     * @memberOf _                                                                                                     // 8021
     * @category Function                                                                                              // 8022
     * @param {Function} func The function to have its output memoized.                                                // 8023
     * @param {Function} [resolver] The function to resolve the cache key.                                             // 8024
     * @returns {Function} Returns the new memoizing function.                                                         // 8025
     * @example                                                                                                        // 8026
     *                                                                                                                 // 8027
     * var upperCase = _.memoize(function(string) {                                                                    // 8028
     *   return string.toUpperCase();                                                                                  // 8029
     * });                                                                                                             // 8030
     *                                                                                                                 // 8031
     * upperCase('fred');                                                                                              // 8032
     * // => 'FRED'                                                                                                    // 8033
     *                                                                                                                 // 8034
     * // modifying the result cache                                                                                   // 8035
     * upperCase.cache.set('fred', 'BARNEY');                                                                          // 8036
     * upperCase('fred');                                                                                              // 8037
     * // => 'BARNEY'                                                                                                  // 8038
     *                                                                                                                 // 8039
     * // replacing `_.memoize.Cache`                                                                                  // 8040
     * var object = { 'user': 'fred' };                                                                                // 8041
     * var other = { 'user': 'barney' };                                                                               // 8042
     * var identity = _.memoize(_.identity);                                                                           // 8043
     *                                                                                                                 // 8044
     * identity(object);                                                                                               // 8045
     * // => { 'user': 'fred' }                                                                                        // 8046
     * identity(other);                                                                                                // 8047
     * // => { 'user': 'fred' }                                                                                        // 8048
     *                                                                                                                 // 8049
     * _.memoize.Cache = WeakMap;                                                                                      // 8050
     * var identity = _.memoize(_.identity);                                                                           // 8051
     *                                                                                                                 // 8052
     * identity(object);                                                                                               // 8053
     * // => { 'user': 'fred' }                                                                                        // 8054
     * identity(other);                                                                                                // 8055
     * // => { 'user': 'barney' }                                                                                      // 8056
     */                                                                                                                // 8057
    function memoize(func, resolver) {                                                                                 // 8058
      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {                                  // 8059
        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 8060
      }                                                                                                                // 8061
      var memoized = function() {                                                                                      // 8062
        var args = arguments,                                                                                          // 8063
            key = resolver ? resolver.apply(this, args) : args[0],                                                     // 8064
            cache = memoized.cache;                                                                                    // 8065
                                                                                                                       // 8066
        if (cache.has(key)) {                                                                                          // 8067
          return cache.get(key);                                                                                       // 8068
        }                                                                                                              // 8069
        var result = func.apply(this, args);                                                                           // 8070
        memoized.cache = cache.set(key, result);                                                                       // 8071
        return result;                                                                                                 // 8072
      };                                                                                                               // 8073
      memoized.cache = new memoize.Cache;                                                                              // 8074
      return memoized;                                                                                                 // 8075
    }                                                                                                                  // 8076
                                                                                                                       // 8077
    /**                                                                                                                // 8078
     * Creates a function that runs each argument through a corresponding                                              // 8079
     * transform function.                                                                                             // 8080
     *                                                                                                                 // 8081
     * @static                                                                                                         // 8082
     * @memberOf _                                                                                                     // 8083
     * @category Function                                                                                              // 8084
     * @param {Function} func The function to wrap.                                                                    // 8085
     * @param {...(Function|Function[])} [transforms] The functions to transform                                       // 8086
     * arguments, specified as individual functions or arrays of functions.                                            // 8087
     * @returns {Function} Returns the new function.                                                                   // 8088
     * @example                                                                                                        // 8089
     *                                                                                                                 // 8090
     * function doubled(n) {                                                                                           // 8091
     *   return n * 2;                                                                                                 // 8092
     * }                                                                                                               // 8093
     *                                                                                                                 // 8094
     * function square(n) {                                                                                            // 8095
     *   return n * n;                                                                                                 // 8096
     * }                                                                                                               // 8097
     *                                                                                                                 // 8098
     * var modded = _.modArgs(function(x, y) {                                                                         // 8099
     *   return [x, y];                                                                                                // 8100
     * }, square, doubled);                                                                                            // 8101
     *                                                                                                                 // 8102
     * modded(1, 2);                                                                                                   // 8103
     * // => [1, 4]                                                                                                    // 8104
     *                                                                                                                 // 8105
     * modded(5, 10);                                                                                                  // 8106
     * // => [25, 20]                                                                                                  // 8107
     */                                                                                                                // 8108
    var modArgs = restParam(function(func, transforms) {                                                               // 8109
      transforms = baseFlatten(transforms);                                                                            // 8110
      if (typeof func != 'function' || !arrayEvery(transforms, baseIsFunction)) {                                      // 8111
        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 8112
      }                                                                                                                // 8113
      var length = transforms.length;                                                                                  // 8114
      return restParam(function(args) {                                                                                // 8115
        var index = nativeMin(args.length, length);                                                                    // 8116
        while (index--) {                                                                                              // 8117
          args[index] = transforms[index](args[index]);                                                                // 8118
        }                                                                                                              // 8119
        return func.apply(this, args);                                                                                 // 8120
      });                                                                                                              // 8121
    });                                                                                                                // 8122
                                                                                                                       // 8123
    /**                                                                                                                // 8124
     * Creates a function that negates the result of the predicate `func`. The                                         // 8125
     * `func` predicate is invoked with the `this` binding and arguments of the                                        // 8126
     * created function.                                                                                               // 8127
     *                                                                                                                 // 8128
     * @static                                                                                                         // 8129
     * @memberOf _                                                                                                     // 8130
     * @category Function                                                                                              // 8131
     * @param {Function} predicate The predicate to negate.                                                            // 8132
     * @returns {Function} Returns the new function.                                                                   // 8133
     * @example                                                                                                        // 8134
     *                                                                                                                 // 8135
     * function isEven(n) {                                                                                            // 8136
     *   return n % 2 == 0;                                                                                            // 8137
     * }                                                                                                               // 8138
     *                                                                                                                 // 8139
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));                                                                 // 8140
     * // => [1, 3, 5]                                                                                                 // 8141
     */                                                                                                                // 8142
    function negate(predicate) {                                                                                       // 8143
      if (typeof predicate != 'function') {                                                                            // 8144
        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 8145
      }                                                                                                                // 8146
      return function() {                                                                                              // 8147
        return !predicate.apply(this, arguments);                                                                      // 8148
      };                                                                                                               // 8149
    }                                                                                                                  // 8150
                                                                                                                       // 8151
    /**                                                                                                                // 8152
     * Creates a function that is restricted to invoking `func` once. Repeat calls                                     // 8153
     * to the function return the value of the first call. The `func` is invoked                                       // 8154
     * with the `this` binding and arguments of the created function.                                                  // 8155
     *                                                                                                                 // 8156
     * @static                                                                                                         // 8157
     * @memberOf _                                                                                                     // 8158
     * @category Function                                                                                              // 8159
     * @param {Function} func The function to restrict.                                                                // 8160
     * @returns {Function} Returns the new restricted function.                                                        // 8161
     * @example                                                                                                        // 8162
     *                                                                                                                 // 8163
     * var initialize = _.once(createApplication);                                                                     // 8164
     * initialize();                                                                                                   // 8165
     * initialize();                                                                                                   // 8166
     * // `initialize` invokes `createApplication` once                                                                // 8167
     */                                                                                                                // 8168
    function once(func) {                                                                                              // 8169
      return before(2, func);                                                                                          // 8170
    }                                                                                                                  // 8171
                                                                                                                       // 8172
    /**                                                                                                                // 8173
     * Creates a function that invokes `func` with `partial` arguments prepended                                       // 8174
     * to those provided to the new function. This method is like `_.bind` except                                      // 8175
     * it does **not** alter the `this` binding.                                                                       // 8176
     *                                                                                                                 // 8177
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic                                          // 8178
     * builds, may be used as a placeholder for partially applied arguments.                                           // 8179
     *                                                                                                                 // 8180
     * **Note:** This method does not set the "length" property of partially                                           // 8181
     * applied functions.                                                                                              // 8182
     *                                                                                                                 // 8183
     * @static                                                                                                         // 8184
     * @memberOf _                                                                                                     // 8185
     * @category Function                                                                                              // 8186
     * @param {Function} func The function to partially apply arguments to.                                            // 8187
     * @param {...*} [partials] The arguments to be partially applied.                                                 // 8188
     * @returns {Function} Returns the new partially applied function.                                                 // 8189
     * @example                                                                                                        // 8190
     *                                                                                                                 // 8191
     * var greet = function(greeting, name) {                                                                          // 8192
     *   return greeting + ' ' + name;                                                                                 // 8193
     * };                                                                                                              // 8194
     *                                                                                                                 // 8195
     * var sayHelloTo = _.partial(greet, 'hello');                                                                     // 8196
     * sayHelloTo('fred');                                                                                             // 8197
     * // => 'hello fred'                                                                                              // 8198
     *                                                                                                                 // 8199
     * // using placeholders                                                                                           // 8200
     * var greetFred = _.partial(greet, _, 'fred');                                                                    // 8201
     * greetFred('hi');                                                                                                // 8202
     * // => 'hi fred'                                                                                                 // 8203
     */                                                                                                                // 8204
    var partial = createPartial(PARTIAL_FLAG);                                                                         // 8205
                                                                                                                       // 8206
    /**                                                                                                                // 8207
     * This method is like `_.partial` except that partially applied arguments                                         // 8208
     * are appended to those provided to the new function.                                                             // 8209
     *                                                                                                                 // 8210
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic                                     // 8211
     * builds, may be used as a placeholder for partially applied arguments.                                           // 8212
     *                                                                                                                 // 8213
     * **Note:** This method does not set the "length" property of partially                                           // 8214
     * applied functions.                                                                                              // 8215
     *                                                                                                                 // 8216
     * @static                                                                                                         // 8217
     * @memberOf _                                                                                                     // 8218
     * @category Function                                                                                              // 8219
     * @param {Function} func The function to partially apply arguments to.                                            // 8220
     * @param {...*} [partials] The arguments to be partially applied.                                                 // 8221
     * @returns {Function} Returns the new partially applied function.                                                 // 8222
     * @example                                                                                                        // 8223
     *                                                                                                                 // 8224
     * var greet = function(greeting, name) {                                                                          // 8225
     *   return greeting + ' ' + name;                                                                                 // 8226
     * };                                                                                                              // 8227
     *                                                                                                                 // 8228
     * var greetFred = _.partialRight(greet, 'fred');                                                                  // 8229
     * greetFred('hi');                                                                                                // 8230
     * // => 'hi fred'                                                                                                 // 8231
     *                                                                                                                 // 8232
     * // using placeholders                                                                                           // 8233
     * var sayHelloTo = _.partialRight(greet, 'hello', _);                                                             // 8234
     * sayHelloTo('fred');                                                                                             // 8235
     * // => 'hello fred'                                                                                              // 8236
     */                                                                                                                // 8237
    var partialRight = createPartial(PARTIAL_RIGHT_FLAG);                                                              // 8238
                                                                                                                       // 8239
    /**                                                                                                                // 8240
     * Creates a function that invokes `func` with arguments arranged according                                        // 8241
     * to the specified indexes where the argument value at the first index is                                         // 8242
     * provided as the first argument, the argument value at the second index is                                       // 8243
     * provided as the second argument, and so on.                                                                     // 8244
     *                                                                                                                 // 8245
     * @static                                                                                                         // 8246
     * @memberOf _                                                                                                     // 8247
     * @category Function                                                                                              // 8248
     * @param {Function} func The function to rearrange arguments for.                                                 // 8249
     * @param {...(number|number[])} indexes The arranged argument indexes,                                            // 8250
     *  specified as individual indexes or arrays of indexes.                                                          // 8251
     * @returns {Function} Returns the new function.                                                                   // 8252
     * @example                                                                                                        // 8253
     *                                                                                                                 // 8254
     * var rearged = _.rearg(function(a, b, c) {                                                                       // 8255
     *   return [a, b, c];                                                                                             // 8256
     * }, 2, 0, 1);                                                                                                    // 8257
     *                                                                                                                 // 8258
     * rearged('b', 'c', 'a')                                                                                          // 8259
     * // => ['a', 'b', 'c']                                                                                           // 8260
     *                                                                                                                 // 8261
     * var map = _.rearg(_.map, [1, 0]);                                                                               // 8262
     * map(function(n) {                                                                                               // 8263
     *   return n * 3;                                                                                                 // 8264
     * }, [1, 2, 3]);                                                                                                  // 8265
     * // => [3, 6, 9]                                                                                                 // 8266
     */                                                                                                                // 8267
    var rearg = restParam(function(func, indexes) {                                                                    // 8268
      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes));                   // 8269
    });                                                                                                                // 8270
                                                                                                                       // 8271
    /**                                                                                                                // 8272
     * Creates a function that invokes `func` with the `this` binding of the                                           // 8273
     * created function and arguments from `start` and beyond provided as an array.                                    // 8274
     *                                                                                                                 // 8275
     * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/Web/JavaScript/Reference/Functions/rest_parameters).
     *                                                                                                                 // 8277
     * @static                                                                                                         // 8278
     * @memberOf _                                                                                                     // 8279
     * @category Function                                                                                              // 8280
     * @param {Function} func The function to apply a rest parameter to.                                               // 8281
     * @param {number} [start=func.length-1] The start position of the rest parameter.                                 // 8282
     * @returns {Function} Returns the new function.                                                                   // 8283
     * @example                                                                                                        // 8284
     *                                                                                                                 // 8285
     * var say = _.restParam(function(what, names) {                                                                   // 8286
     *   return what + ' ' + _.initial(names).join(', ') +                                                             // 8287
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);                                                          // 8288
     * });                                                                                                             // 8289
     *                                                                                                                 // 8290
     * say('hello', 'fred', 'barney', 'pebbles');                                                                      // 8291
     * // => 'hello fred, barney, & pebbles'                                                                           // 8292
     */                                                                                                                // 8293
    function restParam(func, start) {                                                                                  // 8294
      if (typeof func != 'function') {                                                                                 // 8295
        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 8296
      }                                                                                                                // 8297
      start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);                                   // 8298
      return function() {                                                                                              // 8299
        var args = arguments,                                                                                          // 8300
            index = -1,                                                                                                // 8301
            length = nativeMax(args.length - start, 0),                                                                // 8302
            rest = Array(length);                                                                                      // 8303
                                                                                                                       // 8304
        while (++index < length) {                                                                                     // 8305
          rest[index] = args[start + index];                                                                           // 8306
        }                                                                                                              // 8307
        switch (start) {                                                                                               // 8308
          case 0: return func.call(this, rest);                                                                        // 8309
          case 1: return func.call(this, args[0], rest);                                                               // 8310
          case 2: return func.call(this, args[0], args[1], rest);                                                      // 8311
        }                                                                                                              // 8312
        var otherArgs = Array(start + 1);                                                                              // 8313
        index = -1;                                                                                                    // 8314
        while (++index < start) {                                                                                      // 8315
          otherArgs[index] = args[index];                                                                              // 8316
        }                                                                                                              // 8317
        otherArgs[start] = rest;                                                                                       // 8318
        return func.apply(this, otherArgs);                                                                            // 8319
      };                                                                                                               // 8320
    }                                                                                                                  // 8321
                                                                                                                       // 8322
    /**                                                                                                                // 8323
     * Creates a function that invokes `func` with the `this` binding of the created                                   // 8324
     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).              // 8325
     *                                                                                                                 // 8326
     * **Note:** This method is based on the [spread operator](https://developer.mozilla.org/Web/JavaScript/Reference/Operators/Spread_operator).
     *                                                                                                                 // 8328
     * @static                                                                                                         // 8329
     * @memberOf _                                                                                                     // 8330
     * @category Function                                                                                              // 8331
     * @param {Function} func The function to spread arguments over.                                                   // 8332
     * @returns {Function} Returns the new function.                                                                   // 8333
     * @example                                                                                                        // 8334
     *                                                                                                                 // 8335
     * var say = _.spread(function(who, what) {                                                                        // 8336
     *   return who + ' says ' + what;                                                                                 // 8337
     * });                                                                                                             // 8338
     *                                                                                                                 // 8339
     * say(['fred', 'hello']);                                                                                         // 8340
     * // => 'fred says hello'                                                                                         // 8341
     *                                                                                                                 // 8342
     * // with a Promise                                                                                               // 8343
     * var numbers = Promise.all([                                                                                     // 8344
     *   Promise.resolve(40),                                                                                          // 8345
     *   Promise.resolve(36)                                                                                           // 8346
     * ]);                                                                                                             // 8347
     *                                                                                                                 // 8348
     * numbers.then(_.spread(function(x, y) {                                                                          // 8349
     *   return x + y;                                                                                                 // 8350
     * }));                                                                                                            // 8351
     * // => a Promise of 76                                                                                           // 8352
     */                                                                                                                // 8353
    function spread(func) {                                                                                            // 8354
      if (typeof func != 'function') {                                                                                 // 8355
        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 8356
      }                                                                                                                // 8357
      return function(array) {                                                                                         // 8358
        return func.apply(this, array);                                                                                // 8359
      };                                                                                                               // 8360
    }                                                                                                                  // 8361
                                                                                                                       // 8362
    /**                                                                                                                // 8363
     * Creates a throttled function that only invokes `func` at most once per                                          // 8364
     * every `wait` milliseconds. The throttled function comes with a `cancel`                                         // 8365
     * method to cancel delayed invocations. Provide an options object to indicate                                     // 8366
     * that `func` should be invoked on the leading and/or trailing edge of the                                        // 8367
     * `wait` timeout. Subsequent calls to the throttled function return the                                           // 8368
     * result of the last `func` call.                                                                                 // 8369
     *                                                                                                                 // 8370
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked                                     // 8371
     * on the trailing edge of the timeout only if the the throttled function is                                       // 8372
     * invoked more than once during the `wait` timeout.                                                               // 8373
     *                                                                                                                 // 8374
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)        // 8375
     * for details over the differences between `_.throttle` and `_.debounce`.                                         // 8376
     *                                                                                                                 // 8377
     * @static                                                                                                         // 8378
     * @memberOf _                                                                                                     // 8379
     * @category Function                                                                                              // 8380
     * @param {Function} func The function to throttle.                                                                // 8381
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.                                 // 8382
     * @param {Object} [options] The options object.                                                                   // 8383
     * @param {boolean} [options.leading=true] Specify invoking on the leading                                         // 8384
     *  edge of the timeout.                                                                                           // 8385
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing                                       // 8386
     *  edge of the timeout.                                                                                           // 8387
     * @returns {Function} Returns the new throttled function.                                                         // 8388
     * @example                                                                                                        // 8389
     *                                                                                                                 // 8390
     * // avoid excessively updating the position while scrolling                                                      // 8391
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));                                                   // 8392
     *                                                                                                                 // 8393
     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes                    // 8394
     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {                                             // 8395
     *   'trailing': false                                                                                             // 8396
     * }));                                                                                                            // 8397
     *                                                                                                                 // 8398
     * // cancel a trailing throttled call                                                                             // 8399
     * jQuery(window).on('popstate', throttled.cancel);                                                                // 8400
     */                                                                                                                // 8401
    function throttle(func, wait, options) {                                                                           // 8402
      var leading = true,                                                                                              // 8403
          trailing = true;                                                                                             // 8404
                                                                                                                       // 8405
      if (typeof func != 'function') {                                                                                 // 8406
        throw new TypeError(FUNC_ERROR_TEXT);                                                                          // 8407
      }                                                                                                                // 8408
      if (options === false) {                                                                                         // 8409
        leading = false;                                                                                               // 8410
      } else if (isObject(options)) {                                                                                  // 8411
        leading = 'leading' in options ? !!options.leading : leading;                                                  // 8412
        trailing = 'trailing' in options ? !!options.trailing : trailing;                                              // 8413
      }                                                                                                                // 8414
      return debounce(func, wait, { 'leading': leading, 'maxWait': +wait, 'trailing': trailing });                     // 8415
    }                                                                                                                  // 8416
                                                                                                                       // 8417
    /**                                                                                                                // 8418
     * Creates a function that provides `value` to the wrapper function as its                                         // 8419
     * first argument. Any additional arguments provided to the function are                                           // 8420
     * appended to those provided to the wrapper function. The wrapper is invoked                                      // 8421
     * with the `this` binding of the created function.                                                                // 8422
     *                                                                                                                 // 8423
     * @static                                                                                                         // 8424
     * @memberOf _                                                                                                     // 8425
     * @category Function                                                                                              // 8426
     * @param {*} value The value to wrap.                                                                             // 8427
     * @param {Function} wrapper The wrapper function.                                                                 // 8428
     * @returns {Function} Returns the new function.                                                                   // 8429
     * @example                                                                                                        // 8430
     *                                                                                                                 // 8431
     * var p = _.wrap(_.escape, function(func, text) {                                                                 // 8432
     *   return '<p>' + func(text) + '</p>';                                                                           // 8433
     * });                                                                                                             // 8434
     *                                                                                                                 // 8435
     * p('fred, barney, & pebbles');                                                                                   // 8436
     * // => '<p>fred, barney, &amp; pebbles</p>'                                                                      // 8437
     */                                                                                                                // 8438
    function wrap(value, wrapper) {                                                                                    // 8439
      wrapper = wrapper == null ? identity : wrapper;                                                                  // 8440
      return createWrapper(wrapper, PARTIAL_FLAG, undefined, [value], []);                                             // 8441
    }                                                                                                                  // 8442
                                                                                                                       // 8443
    /*------------------------------------------------------------------------*/                                       // 8444
                                                                                                                       // 8445
    /**                                                                                                                // 8446
     * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,                                    // 8447
     * otherwise they are assigned by reference. If `customizer` is provided it's                                      // 8448
     * invoked to produce the cloned values. If `customizer` returns `undefined`                                       // 8449
     * cloning is handled by the method instead. The `customizer` is bound to                                          // 8450
     * `thisArg` and invoked with up to three argument; (value [, index|key, object]).                                 // 8451
     *                                                                                                                 // 8452
     * **Note:** This method is loosely based on the                                                                   // 8453
     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
     * The enumerable properties of `arguments` objects and objects created by                                         // 8455
     * constructors other than `Object` are cloned to plain `Object` objects. An                                       // 8456
     * empty object is returned for uncloneable values such as functions, DOM nodes,                                   // 8457
     * Maps, Sets, and WeakMaps.                                                                                       // 8458
     *                                                                                                                 // 8459
     * @static                                                                                                         // 8460
     * @memberOf _                                                                                                     // 8461
     * @category Lang                                                                                                  // 8462
     * @param {*} value The value to clone.                                                                            // 8463
     * @param {boolean} [isDeep] Specify a deep clone.                                                                 // 8464
     * @param {Function} [customizer] The function to customize cloning values.                                        // 8465
     * @param {*} [thisArg] The `this` binding of `customizer`.                                                        // 8466
     * @returns {*} Returns the cloned value.                                                                          // 8467
     * @example                                                                                                        // 8468
     *                                                                                                                 // 8469
     * var users = [                                                                                                   // 8470
     *   { 'user': 'barney' },                                                                                         // 8471
     *   { 'user': 'fred' }                                                                                            // 8472
     * ];                                                                                                              // 8473
     *                                                                                                                 // 8474
     * var shallow = _.clone(users);                                                                                   // 8475
     * shallow[0] === users[0];                                                                                        // 8476
     * // => true                                                                                                      // 8477
     *                                                                                                                 // 8478
     * var deep = _.clone(users, true);                                                                                // 8479
     * deep[0] === users[0];                                                                                           // 8480
     * // => false                                                                                                     // 8481
     *                                                                                                                 // 8482
     * // using a customizer callback                                                                                  // 8483
     * var el = _.clone(document.body, function(value) {                                                               // 8484
     *   if (_.isElement(value)) {                                                                                     // 8485
     *     return value.cloneNode(false);                                                                              // 8486
     *   }                                                                                                             // 8487
     * });                                                                                                             // 8488
     *                                                                                                                 // 8489
     * el === document.body                                                                                            // 8490
     * // => false                                                                                                     // 8491
     * el.nodeName                                                                                                     // 8492
     * // => BODY                                                                                                      // 8493
     * el.childNodes.length;                                                                                           // 8494
     * // => 0                                                                                                         // 8495
     */                                                                                                                // 8496
    function clone(value, isDeep, customizer, thisArg) {                                                               // 8497
      if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {                         // 8498
        isDeep = false;                                                                                                // 8499
      }                                                                                                                // 8500
      else if (typeof isDeep == 'function') {                                                                          // 8501
        thisArg = customizer;                                                                                          // 8502
        customizer = isDeep;                                                                                           // 8503
        isDeep = false;                                                                                                // 8504
      }                                                                                                                // 8505
      return typeof customizer == 'function'                                                                           // 8506
        ? baseClone(value, isDeep, bindCallback(customizer, thisArg, 3))                                               // 8507
        : baseClone(value, isDeep);                                                                                    // 8508
    }                                                                                                                  // 8509
                                                                                                                       // 8510
    /**                                                                                                                // 8511
     * Creates a deep clone of `value`. If `customizer` is provided it's invoked                                       // 8512
     * to produce the cloned values. If `customizer` returns `undefined` cloning                                       // 8513
     * is handled by the method instead. The `customizer` is bound to `thisArg`                                        // 8514
     * and invoked with up to three argument; (value [, index|key, object]).                                           // 8515
     *                                                                                                                 // 8516
     * **Note:** This method is loosely based on the                                                                   // 8517
     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
     * The enumerable properties of `arguments` objects and objects created by                                         // 8519
     * constructors other than `Object` are cloned to plain `Object` objects. An                                       // 8520
     * empty object is returned for uncloneable values such as functions, DOM nodes,                                   // 8521
     * Maps, Sets, and WeakMaps.                                                                                       // 8522
     *                                                                                                                 // 8523
     * @static                                                                                                         // 8524
     * @memberOf _                                                                                                     // 8525
     * @category Lang                                                                                                  // 8526
     * @param {*} value The value to deep clone.                                                                       // 8527
     * @param {Function} [customizer] The function to customize cloning values.                                        // 8528
     * @param {*} [thisArg] The `this` binding of `customizer`.                                                        // 8529
     * @returns {*} Returns the deep cloned value.                                                                     // 8530
     * @example                                                                                                        // 8531
     *                                                                                                                 // 8532
     * var users = [                                                                                                   // 8533
     *   { 'user': 'barney' },                                                                                         // 8534
     *   { 'user': 'fred' }                                                                                            // 8535
     * ];                                                                                                              // 8536
     *                                                                                                                 // 8537
     * var deep = _.cloneDeep(users);                                                                                  // 8538
     * deep[0] === users[0];                                                                                           // 8539
     * // => false                                                                                                     // 8540
     *                                                                                                                 // 8541
     * // using a customizer callback                                                                                  // 8542
     * var el = _.cloneDeep(document.body, function(value) {                                                           // 8543
     *   if (_.isElement(value)) {                                                                                     // 8544
     *     return value.cloneNode(true);                                                                               // 8545
     *   }                                                                                                             // 8546
     * });                                                                                                             // 8547
     *                                                                                                                 // 8548
     * el === document.body                                                                                            // 8549
     * // => false                                                                                                     // 8550
     * el.nodeName                                                                                                     // 8551
     * // => BODY                                                                                                      // 8552
     * el.childNodes.length;                                                                                           // 8553
     * // => 20                                                                                                        // 8554
     */                                                                                                                // 8555
    function cloneDeep(value, customizer, thisArg) {                                                                   // 8556
      return typeof customizer == 'function'                                                                           // 8557
        ? baseClone(value, true, bindCallback(customizer, thisArg, 3))                                                 // 8558
        : baseClone(value, true);                                                                                      // 8559
    }                                                                                                                  // 8560
                                                                                                                       // 8561
    /**                                                                                                                // 8562
     * Checks if `value` is greater than `other`.                                                                      // 8563
     *                                                                                                                 // 8564
     * @static                                                                                                         // 8565
     * @memberOf _                                                                                                     // 8566
     * @category Lang                                                                                                  // 8567
     * @param {*} value The value to compare.                                                                          // 8568
     * @param {*} other The other value to compare.                                                                    // 8569
     * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.                             // 8570
     * @example                                                                                                        // 8571
     *                                                                                                                 // 8572
     * _.gt(3, 1);                                                                                                     // 8573
     * // => true                                                                                                      // 8574
     *                                                                                                                 // 8575
     * _.gt(3, 3);                                                                                                     // 8576
     * // => false                                                                                                     // 8577
     *                                                                                                                 // 8578
     * _.gt(1, 3);                                                                                                     // 8579
     * // => false                                                                                                     // 8580
     */                                                                                                                // 8581
    function gt(value, other) {                                                                                        // 8582
      return value > other;                                                                                            // 8583
    }                                                                                                                  // 8584
                                                                                                                       // 8585
    /**                                                                                                                // 8586
     * Checks if `value` is greater than or equal to `other`.                                                          // 8587
     *                                                                                                                 // 8588
     * @static                                                                                                         // 8589
     * @memberOf _                                                                                                     // 8590
     * @category Lang                                                                                                  // 8591
     * @param {*} value The value to compare.                                                                          // 8592
     * @param {*} other The other value to compare.                                                                    // 8593
     * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.                 // 8594
     * @example                                                                                                        // 8595
     *                                                                                                                 // 8596
     * _.gte(3, 1);                                                                                                    // 8597
     * // => true                                                                                                      // 8598
     *                                                                                                                 // 8599
     * _.gte(3, 3);                                                                                                    // 8600
     * // => true                                                                                                      // 8601
     *                                                                                                                 // 8602
     * _.gte(1, 3);                                                                                                    // 8603
     * // => false                                                                                                     // 8604
     */                                                                                                                // 8605
    function gte(value, other) {                                                                                       // 8606
      return value >= other;                                                                                           // 8607
    }                                                                                                                  // 8608
                                                                                                                       // 8609
    /**                                                                                                                // 8610
     * Checks if `value` is classified as an `arguments` object.                                                       // 8611
     *                                                                                                                 // 8612
     * @static                                                                                                         // 8613
     * @memberOf _                                                                                                     // 8614
     * @category Lang                                                                                                  // 8615
     * @param {*} value The value to check.                                                                            // 8616
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 8617
     * @example                                                                                                        // 8618
     *                                                                                                                 // 8619
     * _.isArguments(function() { return arguments; }());                                                              // 8620
     * // => true                                                                                                      // 8621
     *                                                                                                                 // 8622
     * _.isArguments([1, 2, 3]);                                                                                       // 8623
     * // => false                                                                                                     // 8624
     */                                                                                                                // 8625
    function isArguments(value) {                                                                                      // 8626
      return isObjectLike(value) && isArrayLike(value) &&                                                              // 8627
        hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');                           // 8628
    }                                                                                                                  // 8629
                                                                                                                       // 8630
    /**                                                                                                                // 8631
     * Checks if `value` is classified as an `Array` object.                                                           // 8632
     *                                                                                                                 // 8633
     * @static                                                                                                         // 8634
     * @memberOf _                                                                                                     // 8635
     * @category Lang                                                                                                  // 8636
     * @param {*} value The value to check.                                                                            // 8637
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 8638
     * @example                                                                                                        // 8639
     *                                                                                                                 // 8640
     * _.isArray([1, 2, 3]);                                                                                           // 8641
     * // => true                                                                                                      // 8642
     *                                                                                                                 // 8643
     * _.isArray(function() { return arguments; }());                                                                  // 8644
     * // => false                                                                                                     // 8645
     */                                                                                                                // 8646
    var isArray = nativeIsArray || function(value) {                                                                   // 8647
      return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;                     // 8648
    };                                                                                                                 // 8649
                                                                                                                       // 8650
    /**                                                                                                                // 8651
     * Checks if `value` is classified as a boolean primitive or object.                                               // 8652
     *                                                                                                                 // 8653
     * @static                                                                                                         // 8654
     * @memberOf _                                                                                                     // 8655
     * @category Lang                                                                                                  // 8656
     * @param {*} value The value to check.                                                                            // 8657
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 8658
     * @example                                                                                                        // 8659
     *                                                                                                                 // 8660
     * _.isBoolean(false);                                                                                             // 8661
     * // => true                                                                                                      // 8662
     *                                                                                                                 // 8663
     * _.isBoolean(null);                                                                                              // 8664
     * // => false                                                                                                     // 8665
     */                                                                                                                // 8666
    function isBoolean(value) {                                                                                        // 8667
      return value === true || value === false || (isObjectLike(value) && objToString.call(value) == boolTag);         // 8668
    }                                                                                                                  // 8669
                                                                                                                       // 8670
    /**                                                                                                                // 8671
     * Checks if `value` is classified as a `Date` object.                                                             // 8672
     *                                                                                                                 // 8673
     * @static                                                                                                         // 8674
     * @memberOf _                                                                                                     // 8675
     * @category Lang                                                                                                  // 8676
     * @param {*} value The value to check.                                                                            // 8677
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 8678
     * @example                                                                                                        // 8679
     *                                                                                                                 // 8680
     * _.isDate(new Date);                                                                                             // 8681
     * // => true                                                                                                      // 8682
     *                                                                                                                 // 8683
     * _.isDate('Mon April 23 2012');                                                                                  // 8684
     * // => false                                                                                                     // 8685
     */                                                                                                                // 8686
    function isDate(value) {                                                                                           // 8687
      return isObjectLike(value) && objToString.call(value) == dateTag;                                                // 8688
    }                                                                                                                  // 8689
                                                                                                                       // 8690
    /**                                                                                                                // 8691
     * Checks if `value` is a DOM element.                                                                             // 8692
     *                                                                                                                 // 8693
     * @static                                                                                                         // 8694
     * @memberOf _                                                                                                     // 8695
     * @category Lang                                                                                                  // 8696
     * @param {*} value The value to check.                                                                            // 8697
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.                                    // 8698
     * @example                                                                                                        // 8699
     *                                                                                                                 // 8700
     * _.isElement(document.body);                                                                                     // 8701
     * // => true                                                                                                      // 8702
     *                                                                                                                 // 8703
     * _.isElement('<body>');                                                                                          // 8704
     * // => false                                                                                                     // 8705
     */                                                                                                                // 8706
    function isElement(value) {                                                                                        // 8707
      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);                          // 8708
    }                                                                                                                  // 8709
                                                                                                                       // 8710
    /**                                                                                                                // 8711
     * Checks if `value` is empty. A value is considered empty unless it's an                                          // 8712
     * `arguments` object, array, string, or jQuery-like collection with a length                                      // 8713
     * greater than `0` or an object with own enumerable properties.                                                   // 8714
     *                                                                                                                 // 8715
     * @static                                                                                                         // 8716
     * @memberOf _                                                                                                     // 8717
     * @category Lang                                                                                                  // 8718
     * @param {Array|Object|string} value The value to inspect.                                                        // 8719
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.                                            // 8720
     * @example                                                                                                        // 8721
     *                                                                                                                 // 8722
     * _.isEmpty(null);                                                                                                // 8723
     * // => true                                                                                                      // 8724
     *                                                                                                                 // 8725
     * _.isEmpty(true);                                                                                                // 8726
     * // => true                                                                                                      // 8727
     *                                                                                                                 // 8728
     * _.isEmpty(1);                                                                                                   // 8729
     * // => true                                                                                                      // 8730
     *                                                                                                                 // 8731
     * _.isEmpty([1, 2, 3]);                                                                                           // 8732
     * // => false                                                                                                     // 8733
     *                                                                                                                 // 8734
     * _.isEmpty({ 'a': 1 });                                                                                          // 8735
     * // => false                                                                                                     // 8736
     */                                                                                                                // 8737
    function isEmpty(value) {                                                                                          // 8738
      if (value == null) {                                                                                             // 8739
        return true;                                                                                                   // 8740
      }                                                                                                                // 8741
      if (isArrayLike(value) && (isArray(value) || isString(value) || isArguments(value) ||                            // 8742
          (isObjectLike(value) && isFunction(value.splice)))) {                                                        // 8743
        return !value.length;                                                                                          // 8744
      }                                                                                                                // 8745
      return !keys(value).length;                                                                                      // 8746
    }                                                                                                                  // 8747
                                                                                                                       // 8748
    /**                                                                                                                // 8749
     * Performs a deep comparison between two values to determine if they are                                          // 8750
     * equivalent. If `customizer` is provided it's invoked to compare values.                                         // 8751
     * If `customizer` returns `undefined` comparisons are handled by the method                                       // 8752
     * instead. The `customizer` is bound to `thisArg` and invoked with up to                                          // 8753
     * three arguments: (value, other [, index|key]).                                                                  // 8754
     *                                                                                                                 // 8755
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,                                      // 8756
     * numbers, `Object` objects, regexes, and strings. Objects are compared by                                        // 8757
     * their own, not inherited, enumerable properties. Functions and DOM nodes                                        // 8758
     * are **not** supported. Provide a customizer function to extend support                                          // 8759
     * for comparing other values.                                                                                     // 8760
     *                                                                                                                 // 8761
     * @static                                                                                                         // 8762
     * @memberOf _                                                                                                     // 8763
     * @alias eq                                                                                                       // 8764
     * @category Lang                                                                                                  // 8765
     * @param {*} value The value to compare.                                                                          // 8766
     * @param {*} other The other value to compare.                                                                    // 8767
     * @param {Function} [customizer] The function to customize value comparisons.                                     // 8768
     * @param {*} [thisArg] The `this` binding of `customizer`.                                                        // 8769
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.                                   // 8770
     * @example                                                                                                        // 8771
     *                                                                                                                 // 8772
     * var object = { 'user': 'fred' };                                                                                // 8773
     * var other = { 'user': 'fred' };                                                                                 // 8774
     *                                                                                                                 // 8775
     * object == other;                                                                                                // 8776
     * // => false                                                                                                     // 8777
     *                                                                                                                 // 8778
     * _.isEqual(object, other);                                                                                       // 8779
     * // => true                                                                                                      // 8780
     *                                                                                                                 // 8781
     * // using a customizer callback                                                                                  // 8782
     * var array = ['hello', 'goodbye'];                                                                               // 8783
     * var other = ['hi', 'goodbye'];                                                                                  // 8784
     *                                                                                                                 // 8785
     * _.isEqual(array, other, function(value, other) {                                                                // 8786
     *   if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {                                        // 8787
     *     return true;                                                                                                // 8788
     *   }                                                                                                             // 8789
     * });                                                                                                             // 8790
     * // => true                                                                                                      // 8791
     */                                                                                                                // 8792
    function isEqual(value, other, customizer, thisArg) {                                                              // 8793
      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;                 // 8794
      var result = customizer ? customizer(value, other) : undefined;                                                  // 8795
      return  result === undefined ? baseIsEqual(value, other, customizer) : !!result;                                 // 8796
    }                                                                                                                  // 8797
                                                                                                                       // 8798
    /**                                                                                                                // 8799
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,                                   // 8800
     * `SyntaxError`, `TypeError`, or `URIError` object.                                                               // 8801
     *                                                                                                                 // 8802
     * @static                                                                                                         // 8803
     * @memberOf _                                                                                                     // 8804
     * @category Lang                                                                                                  // 8805
     * @param {*} value The value to check.                                                                            // 8806
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.                                  // 8807
     * @example                                                                                                        // 8808
     *                                                                                                                 // 8809
     * _.isError(new Error);                                                                                           // 8810
     * // => true                                                                                                      // 8811
     *                                                                                                                 // 8812
     * _.isError(Error);                                                                                               // 8813
     * // => false                                                                                                     // 8814
     */                                                                                                                // 8815
    function isError(value) {                                                                                          // 8816
      return isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag;           // 8817
    }                                                                                                                  // 8818
                                                                                                                       // 8819
    /**                                                                                                                // 8820
     * Checks if `value` is a finite primitive number.                                                                 // 8821
     *                                                                                                                 // 8822
     * **Note:** This method is based on [`Number.isFinite`](http://ecma-international.org/ecma-262/6.0/#sec-number.isfinite).
     *                                                                                                                 // 8824
     * @static                                                                                                         // 8825
     * @memberOf _                                                                                                     // 8826
     * @category Lang                                                                                                  // 8827
     * @param {*} value The value to check.                                                                            // 8828
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.                                  // 8829
     * @example                                                                                                        // 8830
     *                                                                                                                 // 8831
     * _.isFinite(10);                                                                                                 // 8832
     * // => true                                                                                                      // 8833
     *                                                                                                                 // 8834
     * _.isFinite('10');                                                                                               // 8835
     * // => false                                                                                                     // 8836
     *                                                                                                                 // 8837
     * _.isFinite(true);                                                                                               // 8838
     * // => false                                                                                                     // 8839
     *                                                                                                                 // 8840
     * _.isFinite(Object(10));                                                                                         // 8841
     * // => false                                                                                                     // 8842
     *                                                                                                                 // 8843
     * _.isFinite(Infinity);                                                                                           // 8844
     * // => false                                                                                                     // 8845
     */                                                                                                                // 8846
    function isFinite(value) {                                                                                         // 8847
      return typeof value == 'number' && nativeIsFinite(value);                                                        // 8848
    }                                                                                                                  // 8849
                                                                                                                       // 8850
    /**                                                                                                                // 8851
     * Checks if `value` is classified as a `Function` object.                                                         // 8852
     *                                                                                                                 // 8853
     * @static                                                                                                         // 8854
     * @memberOf _                                                                                                     // 8855
     * @category Lang                                                                                                  // 8856
     * @param {*} value The value to check.                                                                            // 8857
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 8858
     * @example                                                                                                        // 8859
     *                                                                                                                 // 8860
     * _.isFunction(_);                                                                                                // 8861
     * // => true                                                                                                      // 8862
     *                                                                                                                 // 8863
     * _.isFunction(/abc/);                                                                                            // 8864
     * // => false                                                                                                     // 8865
     */                                                                                                                // 8866
    function isFunction(value) {                                                                                       // 8867
      // The use of `Object#toString` avoids issues with the `typeof` operator                                         // 8868
      // in older versions of Chrome and Safari which return 'function' for regexes                                    // 8869
      // and Safari 8 which returns 'object' for typed array constructors.                                             // 8870
      return isObject(value) && objToString.call(value) == funcTag;                                                    // 8871
    }                                                                                                                  // 8872
                                                                                                                       // 8873
    /**                                                                                                                // 8874
     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.                                // 8875
     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)                               // 8876
     *                                                                                                                 // 8877
     * @static                                                                                                         // 8878
     * @memberOf _                                                                                                     // 8879
     * @category Lang                                                                                                  // 8880
     * @param {*} value The value to check.                                                                            // 8881
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.                                        // 8882
     * @example                                                                                                        // 8883
     *                                                                                                                 // 8884
     * _.isObject({});                                                                                                 // 8885
     * // => true                                                                                                      // 8886
     *                                                                                                                 // 8887
     * _.isObject([1, 2, 3]);                                                                                          // 8888
     * // => true                                                                                                      // 8889
     *                                                                                                                 // 8890
     * _.isObject(1);                                                                                                  // 8891
     * // => false                                                                                                     // 8892
     */                                                                                                                // 8893
    function isObject(value) {                                                                                         // 8894
      // Avoid a V8 JIT bug in Chrome 19-20.                                                                           // 8895
      // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.                                      // 8896
      var type = typeof value;                                                                                         // 8897
      return !!value && (type == 'object' || type == 'function');                                                      // 8898
    }                                                                                                                  // 8899
                                                                                                                       // 8900
    /**                                                                                                                // 8901
     * Performs a deep comparison between `object` and `source` to determine if                                        // 8902
     * `object` contains equivalent property values. If `customizer` is provided                                       // 8903
     * it's invoked to compare values. If `customizer` returns `undefined`                                             // 8904
     * comparisons are handled by the method instead. The `customizer` is bound                                        // 8905
     * to `thisArg` and invoked with three arguments: (value, other, index|key).                                       // 8906
     *                                                                                                                 // 8907
     * **Note:** This method supports comparing properties of arrays, booleans,                                        // 8908
     * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions                                      // 8909
     * and DOM nodes are **not** supported. Provide a customizer function to extend                                    // 8910
     * support for comparing other values.                                                                             // 8911
     *                                                                                                                 // 8912
     * @static                                                                                                         // 8913
     * @memberOf _                                                                                                     // 8914
     * @category Lang                                                                                                  // 8915
     * @param {Object} object The object to inspect.                                                                   // 8916
     * @param {Object} source The object of property values to match.                                                  // 8917
     * @param {Function} [customizer] The function to customize value comparisons.                                     // 8918
     * @param {*} [thisArg] The `this` binding of `customizer`.                                                        // 8919
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.                                         // 8920
     * @example                                                                                                        // 8921
     *                                                                                                                 // 8922
     * var object = { 'user': 'fred', 'age': 40 };                                                                     // 8923
     *                                                                                                                 // 8924
     * _.isMatch(object, { 'age': 40 });                                                                               // 8925
     * // => true                                                                                                      // 8926
     *                                                                                                                 // 8927
     * _.isMatch(object, { 'age': 36 });                                                                               // 8928
     * // => false                                                                                                     // 8929
     *                                                                                                                 // 8930
     * // using a customizer callback                                                                                  // 8931
     * var object = { 'greeting': 'hello' };                                                                           // 8932
     * var source = { 'greeting': 'hi' };                                                                              // 8933
     *                                                                                                                 // 8934
     * _.isMatch(object, source, function(value, other) {                                                              // 8935
     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;                          // 8936
     * });                                                                                                             // 8937
     * // => true                                                                                                      // 8938
     */                                                                                                                // 8939
    function isMatch(object, source, customizer, thisArg) {                                                            // 8940
      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;                 // 8941
      return baseIsMatch(object, getMatchData(source), customizer);                                                    // 8942
    }                                                                                                                  // 8943
                                                                                                                       // 8944
    /**                                                                                                                // 8945
     * Checks if `value` is `NaN`.                                                                                     // 8946
     *                                                                                                                 // 8947
     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)                            // 8948
     * which returns `true` for `undefined` and other non-numeric values.                                              // 8949
     *                                                                                                                 // 8950
     * @static                                                                                                         // 8951
     * @memberOf _                                                                                                     // 8952
     * @category Lang                                                                                                  // 8953
     * @param {*} value The value to check.                                                                            // 8954
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.                                            // 8955
     * @example                                                                                                        // 8956
     *                                                                                                                 // 8957
     * _.isNaN(NaN);                                                                                                   // 8958
     * // => true                                                                                                      // 8959
     *                                                                                                                 // 8960
     * _.isNaN(new Number(NaN));                                                                                       // 8961
     * // => true                                                                                                      // 8962
     *                                                                                                                 // 8963
     * isNaN(undefined);                                                                                               // 8964
     * // => true                                                                                                      // 8965
     *                                                                                                                 // 8966
     * _.isNaN(undefined);                                                                                             // 8967
     * // => false                                                                                                     // 8968
     */                                                                                                                // 8969
    function isNaN(value) {                                                                                            // 8970
      // An `NaN` primitive is the only value that is not equal to itself.                                             // 8971
      // Perform the `toStringTag` check first to avoid errors with some host objects in IE.                           // 8972
      return isNumber(value) && value != +value;                                                                       // 8973
    }                                                                                                                  // 8974
                                                                                                                       // 8975
    /**                                                                                                                // 8976
     * Checks if `value` is a native function.                                                                         // 8977
     *                                                                                                                 // 8978
     * @static                                                                                                         // 8979
     * @memberOf _                                                                                                     // 8980
     * @category Lang                                                                                                  // 8981
     * @param {*} value The value to check.                                                                            // 8982
     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.                                // 8983
     * @example                                                                                                        // 8984
     *                                                                                                                 // 8985
     * _.isNative(Array.prototype.push);                                                                               // 8986
     * // => true                                                                                                      // 8987
     *                                                                                                                 // 8988
     * _.isNative(_);                                                                                                  // 8989
     * // => false                                                                                                     // 8990
     */                                                                                                                // 8991
    function isNative(value) {                                                                                         // 8992
      if (value == null) {                                                                                             // 8993
        return false;                                                                                                  // 8994
      }                                                                                                                // 8995
      if (isFunction(value)) {                                                                                         // 8996
        return reIsNative.test(fnToString.call(value));                                                                // 8997
      }                                                                                                                // 8998
      return isObjectLike(value) && (isHostObject(value) ? reIsNative : reIsHostCtor).test(value);                     // 8999
    }                                                                                                                  // 9000
                                                                                                                       // 9001
    /**                                                                                                                // 9002
     * Checks if `value` is `null`.                                                                                    // 9003
     *                                                                                                                 // 9004
     * @static                                                                                                         // 9005
     * @memberOf _                                                                                                     // 9006
     * @category Lang                                                                                                  // 9007
     * @param {*} value The value to check.                                                                            // 9008
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.                                           // 9009
     * @example                                                                                                        // 9010
     *                                                                                                                 // 9011
     * _.isNull(null);                                                                                                 // 9012
     * // => true                                                                                                      // 9013
     *                                                                                                                 // 9014
     * _.isNull(void 0);                                                                                               // 9015
     * // => false                                                                                                     // 9016
     */                                                                                                                // 9017
    function isNull(value) {                                                                                           // 9018
      return value === null;                                                                                           // 9019
    }                                                                                                                  // 9020
                                                                                                                       // 9021
    /**                                                                                                                // 9022
     * Checks if `value` is classified as a `Number` primitive or object.                                              // 9023
     *                                                                                                                 // 9024
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified                                   // 9025
     * as numbers, use the `_.isFinite` method.                                                                        // 9026
     *                                                                                                                 // 9027
     * @static                                                                                                         // 9028
     * @memberOf _                                                                                                     // 9029
     * @category Lang                                                                                                  // 9030
     * @param {*} value The value to check.                                                                            // 9031
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 9032
     * @example                                                                                                        // 9033
     *                                                                                                                 // 9034
     * _.isNumber(8.4);                                                                                                // 9035
     * // => true                                                                                                      // 9036
     *                                                                                                                 // 9037
     * _.isNumber(NaN);                                                                                                // 9038
     * // => true                                                                                                      // 9039
     *                                                                                                                 // 9040
     * _.isNumber('8.4');                                                                                              // 9041
     * // => false                                                                                                     // 9042
     */                                                                                                                // 9043
    function isNumber(value) {                                                                                         // 9044
      return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);                // 9045
    }                                                                                                                  // 9046
                                                                                                                       // 9047
    /**                                                                                                                // 9048
     * Checks if `value` is a plain object, that is, an object created by the                                          // 9049
     * `Object` constructor or one with a `[[Prototype]]` of `null`.                                                   // 9050
     *                                                                                                                 // 9051
     * **Note:** This method assumes objects created by the `Object` constructor                                       // 9052
     * have no inherited enumerable properties.                                                                        // 9053
     *                                                                                                                 // 9054
     * @static                                                                                                         // 9055
     * @memberOf _                                                                                                     // 9056
     * @category Lang                                                                                                  // 9057
     * @param {*} value The value to check.                                                                            // 9058
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.                                   // 9059
     * @example                                                                                                        // 9060
     *                                                                                                                 // 9061
     * function Foo() {                                                                                                // 9062
     *   this.a = 1;                                                                                                   // 9063
     * }                                                                                                               // 9064
     *                                                                                                                 // 9065
     * _.isPlainObject(new Foo);                                                                                       // 9066
     * // => false                                                                                                     // 9067
     *                                                                                                                 // 9068
     * _.isPlainObject([1, 2, 3]);                                                                                     // 9069
     * // => false                                                                                                     // 9070
     *                                                                                                                 // 9071
     * _.isPlainObject({ 'x': 0, 'y': 0 });                                                                            // 9072
     * // => true                                                                                                      // 9073
     *                                                                                                                 // 9074
     * _.isPlainObject(Object.create(null));                                                                           // 9075
     * // => true                                                                                                      // 9076
     */                                                                                                                // 9077
    function isPlainObject(value) {                                                                                    // 9078
      var Ctor;                                                                                                        // 9079
                                                                                                                       // 9080
      // Exit early for non `Object` objects.                                                                          // 9081
      if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isHostObject(value) && !isArguments(value)) ||
          (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
        return false;                                                                                                  // 9084
      }                                                                                                                // 9085
      // IE < 9 iterates inherited properties before own properties. If the first                                      // 9086
      // iterated property is an object's own property then there are no inherited                                     // 9087
      // enumerable properties.                                                                                        // 9088
      var result;                                                                                                      // 9089
      if (lodash.support.ownLast) {                                                                                    // 9090
        baseForIn(value, function(subValue, key, object) {                                                             // 9091
          result = hasOwnProperty.call(object, key);                                                                   // 9092
          return false;                                                                                                // 9093
        });                                                                                                            // 9094
        return result !== false;                                                                                       // 9095
      }                                                                                                                // 9096
      // In most environments an object's own properties are iterated before                                           // 9097
      // its inherited properties. If the last iterated property is an object's                                        // 9098
      // own property then there are no inherited enumerable properties.                                               // 9099
      baseForIn(value, function(subValue, key) {                                                                       // 9100
        result = key;                                                                                                  // 9101
      });                                                                                                              // 9102
      return result === undefined || hasOwnProperty.call(value, result);                                               // 9103
    }                                                                                                                  // 9104
                                                                                                                       // 9105
    /**                                                                                                                // 9106
     * Checks if `value` is classified as a `RegExp` object.                                                           // 9107
     *                                                                                                                 // 9108
     * @static                                                                                                         // 9109
     * @memberOf _                                                                                                     // 9110
     * @category Lang                                                                                                  // 9111
     * @param {*} value The value to check.                                                                            // 9112
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 9113
     * @example                                                                                                        // 9114
     *                                                                                                                 // 9115
     * _.isRegExp(/abc/);                                                                                              // 9116
     * // => true                                                                                                      // 9117
     *                                                                                                                 // 9118
     * _.isRegExp('/abc/');                                                                                            // 9119
     * // => false                                                                                                     // 9120
     */                                                                                                                // 9121
    function isRegExp(value) {                                                                                         // 9122
      return isObject(value) && objToString.call(value) == regexpTag;                                                  // 9123
    }                                                                                                                  // 9124
                                                                                                                       // 9125
    /**                                                                                                                // 9126
     * Checks if `value` is classified as a `String` primitive or object.                                              // 9127
     *                                                                                                                 // 9128
     * @static                                                                                                         // 9129
     * @memberOf _                                                                                                     // 9130
     * @category Lang                                                                                                  // 9131
     * @param {*} value The value to check.                                                                            // 9132
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 9133
     * @example                                                                                                        // 9134
     *                                                                                                                 // 9135
     * _.isString('abc');                                                                                              // 9136
     * // => true                                                                                                      // 9137
     *                                                                                                                 // 9138
     * _.isString(1);                                                                                                  // 9139
     * // => false                                                                                                     // 9140
     */                                                                                                                // 9141
    function isString(value) {                                                                                         // 9142
      return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);                // 9143
    }                                                                                                                  // 9144
                                                                                                                       // 9145
    /**                                                                                                                // 9146
     * Checks if `value` is classified as a typed array.                                                               // 9147
     *                                                                                                                 // 9148
     * @static                                                                                                         // 9149
     * @memberOf _                                                                                                     // 9150
     * @category Lang                                                                                                  // 9151
     * @param {*} value The value to check.                                                                            // 9152
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                             // 9153
     * @example                                                                                                        // 9154
     *                                                                                                                 // 9155
     * _.isTypedArray(new Uint8Array);                                                                                 // 9156
     * // => true                                                                                                      // 9157
     *                                                                                                                 // 9158
     * _.isTypedArray([]);                                                                                             // 9159
     * // => false                                                                                                     // 9160
     */                                                                                                                // 9161
    function isTypedArray(value) {                                                                                     // 9162
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];               // 9163
    }                                                                                                                  // 9164
                                                                                                                       // 9165
    /**                                                                                                                // 9166
     * Checks if `value` is `undefined`.                                                                               // 9167
     *                                                                                                                 // 9168
     * @static                                                                                                         // 9169
     * @memberOf _                                                                                                     // 9170
     * @category Lang                                                                                                  // 9171
     * @param {*} value The value to check.                                                                            // 9172
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.                                      // 9173
     * @example                                                                                                        // 9174
     *                                                                                                                 // 9175
     * _.isUndefined(void 0);                                                                                          // 9176
     * // => true                                                                                                      // 9177
     *                                                                                                                 // 9178
     * _.isUndefined(null);                                                                                            // 9179
     * // => false                                                                                                     // 9180
     */                                                                                                                // 9181
    function isUndefined(value) {                                                                                      // 9182
      return value === undefined;                                                                                      // 9183
    }                                                                                                                  // 9184
                                                                                                                       // 9185
    /**                                                                                                                // 9186
     * Checks if `value` is less than `other`.                                                                         // 9187
     *                                                                                                                 // 9188
     * @static                                                                                                         // 9189
     * @memberOf _                                                                                                     // 9190
     * @category Lang                                                                                                  // 9191
     * @param {*} value The value to compare.                                                                          // 9192
     * @param {*} other The other value to compare.                                                                    // 9193
     * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.                                // 9194
     * @example                                                                                                        // 9195
     *                                                                                                                 // 9196
     * _.lt(1, 3);                                                                                                     // 9197
     * // => true                                                                                                      // 9198
     *                                                                                                                 // 9199
     * _.lt(3, 3);                                                                                                     // 9200
     * // => false                                                                                                     // 9201
     *                                                                                                                 // 9202
     * _.lt(3, 1);                                                                                                     // 9203
     * // => false                                                                                                     // 9204
     */                                                                                                                // 9205
    function lt(value, other) {                                                                                        // 9206
      return value < other;                                                                                            // 9207
    }                                                                                                                  // 9208
                                                                                                                       // 9209
    /**                                                                                                                // 9210
     * Checks if `value` is less than or equal to `other`.                                                             // 9211
     *                                                                                                                 // 9212
     * @static                                                                                                         // 9213
     * @memberOf _                                                                                                     // 9214
     * @category Lang                                                                                                  // 9215
     * @param {*} value The value to compare.                                                                          // 9216
     * @param {*} other The other value to compare.                                                                    // 9217
     * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.                    // 9218
     * @example                                                                                                        // 9219
     *                                                                                                                 // 9220
     * _.lte(1, 3);                                                                                                    // 9221
     * // => true                                                                                                      // 9222
     *                                                                                                                 // 9223
     * _.lte(3, 3);                                                                                                    // 9224
     * // => true                                                                                                      // 9225
     *                                                                                                                 // 9226
     * _.lte(3, 1);                                                                                                    // 9227
     * // => false                                                                                                     // 9228
     */                                                                                                                // 9229
    function lte(value, other) {                                                                                       // 9230
      return value <= other;                                                                                           // 9231
    }                                                                                                                  // 9232
                                                                                                                       // 9233
    /**                                                                                                                // 9234
     * Converts `value` to an array.                                                                                   // 9235
     *                                                                                                                 // 9236
     * @static                                                                                                         // 9237
     * @memberOf _                                                                                                     // 9238
     * @category Lang                                                                                                  // 9239
     * @param {*} value The value to convert.                                                                          // 9240
     * @returns {Array} Returns the converted array.                                                                   // 9241
     * @example                                                                                                        // 9242
     *                                                                                                                 // 9243
     * (function() {                                                                                                   // 9244
     *   return _.toArray(arguments).slice(1);                                                                         // 9245
     * }(1, 2, 3));                                                                                                    // 9246
     * // => [2, 3]                                                                                                    // 9247
     */                                                                                                                // 9248
    function toArray(value) {                                                                                          // 9249
      var length = value ? getLength(value) : 0;                                                                       // 9250
      if (!isLength(length)) {                                                                                         // 9251
        return values(value);                                                                                          // 9252
      }                                                                                                                // 9253
      if (!length) {                                                                                                   // 9254
        return [];                                                                                                     // 9255
      }                                                                                                                // 9256
      return (lodash.support.unindexedChars && isString(value))                                                        // 9257
        ? value.split('')                                                                                              // 9258
        : arrayCopy(value);                                                                                            // 9259
    }                                                                                                                  // 9260
                                                                                                                       // 9261
    /**                                                                                                                // 9262
     * Converts `value` to a plain object flattening inherited enumerable                                              // 9263
     * properties of `value` to own properties of the plain object.                                                    // 9264
     *                                                                                                                 // 9265
     * @static                                                                                                         // 9266
     * @memberOf _                                                                                                     // 9267
     * @category Lang                                                                                                  // 9268
     * @param {*} value The value to convert.                                                                          // 9269
     * @returns {Object} Returns the converted plain object.                                                           // 9270
     * @example                                                                                                        // 9271
     *                                                                                                                 // 9272
     * function Foo() {                                                                                                // 9273
     *   this.b = 2;                                                                                                   // 9274
     * }                                                                                                               // 9275
     *                                                                                                                 // 9276
     * Foo.prototype.c = 3;                                                                                            // 9277
     *                                                                                                                 // 9278
     * _.assign({ 'a': 1 }, new Foo);                                                                                  // 9279
     * // => { 'a': 1, 'b': 2 }                                                                                        // 9280
     *                                                                                                                 // 9281
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));                                                                 // 9282
     * // => { 'a': 1, 'b': 2, 'c': 3 }                                                                                // 9283
     */                                                                                                                // 9284
    function toPlainObject(value) {                                                                                    // 9285
      return baseCopy(value, keysIn(value));                                                                           // 9286
    }                                                                                                                  // 9287
                                                                                                                       // 9288
    /*------------------------------------------------------------------------*/                                       // 9289
                                                                                                                       // 9290
    /**                                                                                                                // 9291
     * Recursively merges own enumerable properties of the source object(s), that                                      // 9292
     * don't resolve to `undefined` into the destination object. Subsequent sources                                    // 9293
     * overwrite property assignments of previous sources. If `customizer` is                                          // 9294
     * provided it's invoked to produce the merged values of the destination and                                       // 9295
     * source properties. If `customizer` returns `undefined` merging is handled                                       // 9296
     * by the method instead. The `customizer` is bound to `thisArg` and invoked                                       // 9297
     * with five arguments: (objectValue, sourceValue, key, object, source).                                           // 9298
     *                                                                                                                 // 9299
     * @static                                                                                                         // 9300
     * @memberOf _                                                                                                     // 9301
     * @category Object                                                                                                // 9302
     * @param {Object} object The destination object.                                                                  // 9303
     * @param {...Object} [sources] The source objects.                                                                // 9304
     * @param {Function} [customizer] The function to customize assigned values.                                       // 9305
     * @param {*} [thisArg] The `this` binding of `customizer`.                                                        // 9306
     * @returns {Object} Returns `object`.                                                                             // 9307
     * @example                                                                                                        // 9308
     *                                                                                                                 // 9309
     * var users = {                                                                                                   // 9310
     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]                                                            // 9311
     * };                                                                                                              // 9312
     *                                                                                                                 // 9313
     * var ages = {                                                                                                    // 9314
     *   'data': [{ 'age': 36 }, { 'age': 40 }]                                                                        // 9315
     * };                                                                                                              // 9316
     *                                                                                                                 // 9317
     * _.merge(users, ages);                                                                                           // 9318
     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }                              // 9319
     *                                                                                                                 // 9320
     * // using a customizer callback                                                                                  // 9321
     * var object = {                                                                                                  // 9322
     *   'fruits': ['apple'],                                                                                          // 9323
     *   'vegetables': ['beet']                                                                                        // 9324
     * };                                                                                                              // 9325
     *                                                                                                                 // 9326
     * var other = {                                                                                                   // 9327
     *   'fruits': ['banana'],                                                                                         // 9328
     *   'vegetables': ['carrot']                                                                                      // 9329
     * };                                                                                                              // 9330
     *                                                                                                                 // 9331
     * _.merge(object, other, function(a, b) {                                                                         // 9332
     *   if (_.isArray(a)) {                                                                                           // 9333
     *     return a.concat(b);                                                                                         // 9334
     *   }                                                                                                             // 9335
     * });                                                                                                             // 9336
     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }                                       // 9337
     */                                                                                                                // 9338
    var merge = createAssigner(baseMerge);                                                                             // 9339
                                                                                                                       // 9340
    /**                                                                                                                // 9341
     * Assigns own enumerable properties of source object(s) to the destination                                        // 9342
     * object. Subsequent sources overwrite property assignments of previous sources.                                  // 9343
     * If `customizer` is provided it's invoked to produce the assigned values.                                        // 9344
     * The `customizer` is bound to `thisArg` and invoked with five arguments:                                         // 9345
     * (objectValue, sourceValue, key, object, source).                                                                // 9346
     *                                                                                                                 // 9347
     * **Note:** This method mutates `object` and is based on                                                          // 9348
     * [`Object.assign`](http://ecma-international.org/ecma-262/6.0/#sec-object.assign).                               // 9349
     *                                                                                                                 // 9350
     * @static                                                                                                         // 9351
     * @memberOf _                                                                                                     // 9352
     * @alias extend                                                                                                   // 9353
     * @category Object                                                                                                // 9354
     * @param {Object} object The destination object.                                                                  // 9355
     * @param {...Object} [sources] The source objects.                                                                // 9356
     * @param {Function} [customizer] The function to customize assigned values.                                       // 9357
     * @param {*} [thisArg] The `this` binding of `customizer`.                                                        // 9358
     * @returns {Object} Returns `object`.                                                                             // 9359
     * @example                                                                                                        // 9360
     *                                                                                                                 // 9361
     * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });                                              // 9362
     * // => { 'user': 'fred', 'age': 40 }                                                                             // 9363
     *                                                                                                                 // 9364
     * // using a customizer callback                                                                                  // 9365
     * var defaults = _.partialRight(_.assign, function(value, other) {                                                // 9366
     *   return _.isUndefined(value) ? other : value;                                                                  // 9367
     * });                                                                                                             // 9368
     *                                                                                                                 // 9369
     * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });                                              // 9370
     * // => { 'user': 'barney', 'age': 36 }                                                                           // 9371
     */                                                                                                                // 9372
    var assign = createAssigner(function(object, source, customizer) {                                                 // 9373
      return customizer                                                                                                // 9374
        ? assignWith(object, source, customizer)                                                                       // 9375
        : baseAssign(object, source);                                                                                  // 9376
    });                                                                                                                // 9377
                                                                                                                       // 9378
    /**                                                                                                                // 9379
     * Creates an object that inherits from the given `prototype` object. If a                                         // 9380
     * `properties` object is provided its own enumerable properties are assigned                                      // 9381
     * to the created object.                                                                                          // 9382
     *                                                                                                                 // 9383
     * @static                                                                                                         // 9384
     * @memberOf _                                                                                                     // 9385
     * @category Object                                                                                                // 9386
     * @param {Object} prototype The object to inherit from.                                                           // 9387
     * @param {Object} [properties] The properties to assign to the object.                                            // 9388
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 9389
     * @returns {Object} Returns the new object.                                                                       // 9390
     * @example                                                                                                        // 9391
     *                                                                                                                 // 9392
     * function Shape() {                                                                                              // 9393
     *   this.x = 0;                                                                                                   // 9394
     *   this.y = 0;                                                                                                   // 9395
     * }                                                                                                               // 9396
     *                                                                                                                 // 9397
     * function Circle() {                                                                                             // 9398
     *   Shape.call(this);                                                                                             // 9399
     * }                                                                                                               // 9400
     *                                                                                                                 // 9401
     * Circle.prototype = _.create(Shape.prototype, {                                                                  // 9402
     *   'constructor': Circle                                                                                         // 9403
     * });                                                                                                             // 9404
     *                                                                                                                 // 9405
     * var circle = new Circle;                                                                                        // 9406
     * circle instanceof Circle;                                                                                       // 9407
     * // => true                                                                                                      // 9408
     *                                                                                                                 // 9409
     * circle instanceof Shape;                                                                                        // 9410
     * // => true                                                                                                      // 9411
     */                                                                                                                // 9412
    function create(prototype, properties, guard) {                                                                    // 9413
      var result = baseCreate(prototype);                                                                              // 9414
      if (guard && isIterateeCall(prototype, properties, guard)) {                                                     // 9415
        properties = undefined;                                                                                        // 9416
      }                                                                                                                // 9417
      return properties ? baseAssign(result, properties) : result;                                                     // 9418
    }                                                                                                                  // 9419
                                                                                                                       // 9420
    /**                                                                                                                // 9421
     * Assigns own enumerable properties of source object(s) to the destination                                        // 9422
     * object for all destination properties that resolve to `undefined`. Once a                                       // 9423
     * property is set, additional values of the same property are ignored.                                            // 9424
     *                                                                                                                 // 9425
     * **Note:** This method mutates `object`.                                                                         // 9426
     *                                                                                                                 // 9427
     * @static                                                                                                         // 9428
     * @memberOf _                                                                                                     // 9429
     * @category Object                                                                                                // 9430
     * @param {Object} object The destination object.                                                                  // 9431
     * @param {...Object} [sources] The source objects.                                                                // 9432
     * @returns {Object} Returns `object`.                                                                             // 9433
     * @example                                                                                                        // 9434
     *                                                                                                                 // 9435
     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });                                            // 9436
     * // => { 'user': 'barney', 'age': 36 }                                                                           // 9437
     */                                                                                                                // 9438
    var defaults = createDefaults(assign, assignDefaults);                                                             // 9439
                                                                                                                       // 9440
    /**                                                                                                                // 9441
     * This method is like `_.defaults` except that it recursively assigns                                             // 9442
     * default properties.                                                                                             // 9443
     *                                                                                                                 // 9444
     * **Note:** This method mutates `object`.                                                                         // 9445
     *                                                                                                                 // 9446
     * @static                                                                                                         // 9447
     * @memberOf _                                                                                                     // 9448
     * @category Object                                                                                                // 9449
     * @param {Object} object The destination object.                                                                  // 9450
     * @param {...Object} [sources] The source objects.                                                                // 9451
     * @returns {Object} Returns `object`.                                                                             // 9452
     * @example                                                                                                        // 9453
     *                                                                                                                 // 9454
     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });                    // 9455
     * // => { 'user': { 'name': 'barney', 'age': 36 } }                                                               // 9456
     *                                                                                                                 // 9457
     */                                                                                                                // 9458
    var defaultsDeep = createDefaults(merge, mergeDefaults);                                                           // 9459
                                                                                                                       // 9460
    /**                                                                                                                // 9461
     * This method is like `_.find` except that it returns the key of the first                                        // 9462
     * element `predicate` returns truthy for instead of the element itself.                                           // 9463
     *                                                                                                                 // 9464
     * If a property name is provided for `predicate` the created `_.property`                                         // 9465
     * style callback returns the property value of the given element.                                                 // 9466
     *                                                                                                                 // 9467
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 9468
     * style callback returns `true` for elements that have a matching property                                        // 9469
     * value, else `false`.                                                                                            // 9470
     *                                                                                                                 // 9471
     * If an object is provided for `predicate` the created `_.matches` style                                          // 9472
     * callback returns `true` for elements that have the properties of the given                                      // 9473
     * object, else `false`.                                                                                           // 9474
     *                                                                                                                 // 9475
     * @static                                                                                                         // 9476
     * @memberOf _                                                                                                     // 9477
     * @category Object                                                                                                // 9478
     * @param {Object} object The object to search.                                                                    // 9479
     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 9480
     *  per iteration.                                                                                                 // 9481
     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 9482
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.                           // 9483
     * @example                                                                                                        // 9484
     *                                                                                                                 // 9485
     * var users = {                                                                                                   // 9486
     *   'barney':  { 'age': 36, 'active': true },                                                                     // 9487
     *   'fred':    { 'age': 40, 'active': false },                                                                    // 9488
     *   'pebbles': { 'age': 1,  'active': true }                                                                      // 9489
     * };                                                                                                              // 9490
     *                                                                                                                 // 9491
     * _.findKey(users, function(chr) {                                                                                // 9492
     *   return chr.age < 40;                                                                                          // 9493
     * });                                                                                                             // 9494
     * // => 'barney' (iteration order is not guaranteed)                                                              // 9495
     *                                                                                                                 // 9496
     * // using the `_.matches` callback shorthand                                                                     // 9497
     * _.findKey(users, { 'age': 1, 'active': true });                                                                 // 9498
     * // => 'pebbles'                                                                                                 // 9499
     *                                                                                                                 // 9500
     * // using the `_.matchesProperty` callback shorthand                                                             // 9501
     * _.findKey(users, 'active', false);                                                                              // 9502
     * // => 'fred'                                                                                                    // 9503
     *                                                                                                                 // 9504
     * // using the `_.property` callback shorthand                                                                    // 9505
     * _.findKey(users, 'active');                                                                                     // 9506
     * // => 'barney'                                                                                                  // 9507
     */                                                                                                                // 9508
    var findKey = createFindKey(baseForOwn);                                                                           // 9509
                                                                                                                       // 9510
    /**                                                                                                                // 9511
     * This method is like `_.findKey` except that it iterates over elements of                                        // 9512
     * a collection in the opposite order.                                                                             // 9513
     *                                                                                                                 // 9514
     * If a property name is provided for `predicate` the created `_.property`                                         // 9515
     * style callback returns the property value of the given element.                                                 // 9516
     *                                                                                                                 // 9517
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 9518
     * style callback returns `true` for elements that have a matching property                                        // 9519
     * value, else `false`.                                                                                            // 9520
     *                                                                                                                 // 9521
     * If an object is provided for `predicate` the created `_.matches` style                                          // 9522
     * callback returns `true` for elements that have the properties of the given                                      // 9523
     * object, else `false`.                                                                                           // 9524
     *                                                                                                                 // 9525
     * @static                                                                                                         // 9526
     * @memberOf _                                                                                                     // 9527
     * @category Object                                                                                                // 9528
     * @param {Object} object The object to search.                                                                    // 9529
     * @param {Function|Object|string} [predicate=_.identity] The function invoked                                     // 9530
     *  per iteration.                                                                                                 // 9531
     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 9532
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.                           // 9533
     * @example                                                                                                        // 9534
     *                                                                                                                 // 9535
     * var users = {                                                                                                   // 9536
     *   'barney':  { 'age': 36, 'active': true },                                                                     // 9537
     *   'fred':    { 'age': 40, 'active': false },                                                                    // 9538
     *   'pebbles': { 'age': 1,  'active': true }                                                                      // 9539
     * };                                                                                                              // 9540
     *                                                                                                                 // 9541
     * _.findLastKey(users, function(chr) {                                                                            // 9542
     *   return chr.age < 40;                                                                                          // 9543
     * });                                                                                                             // 9544
     * // => returns `pebbles` assuming `_.findKey` returns `barney`                                                   // 9545
     *                                                                                                                 // 9546
     * // using the `_.matches` callback shorthand                                                                     // 9547
     * _.findLastKey(users, { 'age': 36, 'active': true });                                                            // 9548
     * // => 'barney'                                                                                                  // 9549
     *                                                                                                                 // 9550
     * // using the `_.matchesProperty` callback shorthand                                                             // 9551
     * _.findLastKey(users, 'active', false);                                                                          // 9552
     * // => 'fred'                                                                                                    // 9553
     *                                                                                                                 // 9554
     * // using the `_.property` callback shorthand                                                                    // 9555
     * _.findLastKey(users, 'active');                                                                                 // 9556
     * // => 'pebbles'                                                                                                 // 9557
     */                                                                                                                // 9558
    var findLastKey = createFindKey(baseForOwnRight);                                                                  // 9559
                                                                                                                       // 9560
    /**                                                                                                                // 9561
     * Iterates over own and inherited enumerable properties of an object invoking                                     // 9562
     * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked                                  // 9563
     * with three arguments: (value, key, object). Iteratee functions may exit                                         // 9564
     * iteration early by explicitly returning `false`.                                                                // 9565
     *                                                                                                                 // 9566
     * @static                                                                                                         // 9567
     * @memberOf _                                                                                                     // 9568
     * @category Object                                                                                                // 9569
     * @param {Object} object The object to iterate over.                                                              // 9570
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 9571
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 9572
     * @returns {Object} Returns `object`.                                                                             // 9573
     * @example                                                                                                        // 9574
     *                                                                                                                 // 9575
     * function Foo() {                                                                                                // 9576
     *   this.a = 1;                                                                                                   // 9577
     *   this.b = 2;                                                                                                   // 9578
     * }                                                                                                               // 9579
     *                                                                                                                 // 9580
     * Foo.prototype.c = 3;                                                                                            // 9581
     *                                                                                                                 // 9582
     * _.forIn(new Foo, function(value, key) {                                                                         // 9583
     *   console.log(key);                                                                                             // 9584
     * });                                                                                                             // 9585
     * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)                                                // 9586
     */                                                                                                                // 9587
    var forIn = createForIn(baseFor);                                                                                  // 9588
                                                                                                                       // 9589
    /**                                                                                                                // 9590
     * This method is like `_.forIn` except that it iterates over properties of                                        // 9591
     * `object` in the opposite order.                                                                                 // 9592
     *                                                                                                                 // 9593
     * @static                                                                                                         // 9594
     * @memberOf _                                                                                                     // 9595
     * @category Object                                                                                                // 9596
     * @param {Object} object The object to iterate over.                                                              // 9597
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 9598
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 9599
     * @returns {Object} Returns `object`.                                                                             // 9600
     * @example                                                                                                        // 9601
     *                                                                                                                 // 9602
     * function Foo() {                                                                                                // 9603
     *   this.a = 1;                                                                                                   // 9604
     *   this.b = 2;                                                                                                   // 9605
     * }                                                                                                               // 9606
     *                                                                                                                 // 9607
     * Foo.prototype.c = 3;                                                                                            // 9608
     *                                                                                                                 // 9609
     * _.forInRight(new Foo, function(value, key) {                                                                    // 9610
     *   console.log(key);                                                                                             // 9611
     * });                                                                                                             // 9612
     * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'                                         // 9613
     */                                                                                                                // 9614
    var forInRight = createForIn(baseForRight);                                                                        // 9615
                                                                                                                       // 9616
    /**                                                                                                                // 9617
     * Iterates over own enumerable properties of an object invoking `iteratee`                                        // 9618
     * for each property. The `iteratee` is bound to `thisArg` and invoked with                                        // 9619
     * three arguments: (value, key, object). Iteratee functions may exit iteration                                    // 9620
     * early by explicitly returning `false`.                                                                          // 9621
     *                                                                                                                 // 9622
     * @static                                                                                                         // 9623
     * @memberOf _                                                                                                     // 9624
     * @category Object                                                                                                // 9625
     * @param {Object} object The object to iterate over.                                                              // 9626
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 9627
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 9628
     * @returns {Object} Returns `object`.                                                                             // 9629
     * @example                                                                                                        // 9630
     *                                                                                                                 // 9631
     * function Foo() {                                                                                                // 9632
     *   this.a = 1;                                                                                                   // 9633
     *   this.b = 2;                                                                                                   // 9634
     * }                                                                                                               // 9635
     *                                                                                                                 // 9636
     * Foo.prototype.c = 3;                                                                                            // 9637
     *                                                                                                                 // 9638
     * _.forOwn(new Foo, function(value, key) {                                                                        // 9639
     *   console.log(key);                                                                                             // 9640
     * });                                                                                                             // 9641
     * // => logs 'a' and 'b' (iteration order is not guaranteed)                                                      // 9642
     */                                                                                                                // 9643
    var forOwn = createForOwn(baseForOwn);                                                                             // 9644
                                                                                                                       // 9645
    /**                                                                                                                // 9646
     * This method is like `_.forOwn` except that it iterates over properties of                                       // 9647
     * `object` in the opposite order.                                                                                 // 9648
     *                                                                                                                 // 9649
     * @static                                                                                                         // 9650
     * @memberOf _                                                                                                     // 9651
     * @category Object                                                                                                // 9652
     * @param {Object} object The object to iterate over.                                                              // 9653
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 9654
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 9655
     * @returns {Object} Returns `object`.                                                                             // 9656
     * @example                                                                                                        // 9657
     *                                                                                                                 // 9658
     * function Foo() {                                                                                                // 9659
     *   this.a = 1;                                                                                                   // 9660
     *   this.b = 2;                                                                                                   // 9661
     * }                                                                                                               // 9662
     *                                                                                                                 // 9663
     * Foo.prototype.c = 3;                                                                                            // 9664
     *                                                                                                                 // 9665
     * _.forOwnRight(new Foo, function(value, key) {                                                                   // 9666
     *   console.log(key);                                                                                             // 9667
     * });                                                                                                             // 9668
     * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'                                                     // 9669
     */                                                                                                                // 9670
    var forOwnRight = createForOwn(baseForOwnRight);                                                                   // 9671
                                                                                                                       // 9672
    /**                                                                                                                // 9673
     * Creates an array of function property names from all enumerable properties,                                     // 9674
     * own and inherited, of `object`.                                                                                 // 9675
     *                                                                                                                 // 9676
     * @static                                                                                                         // 9677
     * @memberOf _                                                                                                     // 9678
     * @alias methods                                                                                                  // 9679
     * @category Object                                                                                                // 9680
     * @param {Object} object The object to inspect.                                                                   // 9681
     * @returns {Array} Returns the new array of property names.                                                       // 9682
     * @example                                                                                                        // 9683
     *                                                                                                                 // 9684
     * _.functions(_);                                                                                                 // 9685
     * // => ['after', 'ary', 'assign', ...]                                                                           // 9686
     */                                                                                                                // 9687
    function functions(object) {                                                                                       // 9688
      return baseFunctions(object, keysIn(object));                                                                    // 9689
    }                                                                                                                  // 9690
                                                                                                                       // 9691
    /**                                                                                                                // 9692
     * Gets the property value at `path` of `object`. If the resolved value is                                         // 9693
     * `undefined` the `defaultValue` is used in its place.                                                            // 9694
     *                                                                                                                 // 9695
     * @static                                                                                                         // 9696
     * @memberOf _                                                                                                     // 9697
     * @category Object                                                                                                // 9698
     * @param {Object} object The object to query.                                                                     // 9699
     * @param {Array|string} path The path of the property to get.                                                     // 9700
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.                              // 9701
     * @returns {*} Returns the resolved value.                                                                        // 9702
     * @example                                                                                                        // 9703
     *                                                                                                                 // 9704
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };                                                                    // 9705
     *                                                                                                                 // 9706
     * _.get(object, 'a[0].b.c');                                                                                      // 9707
     * // => 3                                                                                                         // 9708
     *                                                                                                                 // 9709
     * _.get(object, ['a', '0', 'b', 'c']);                                                                            // 9710
     * // => 3                                                                                                         // 9711
     *                                                                                                                 // 9712
     * _.get(object, 'a.b.c', 'default');                                                                              // 9713
     * // => 'default'                                                                                                 // 9714
     */                                                                                                                // 9715
    function get(object, path, defaultValue) {                                                                         // 9716
      var result = object == null ? undefined : baseGet(object, toPath(path), (path + ''));                            // 9717
      return result === undefined ? defaultValue : result;                                                             // 9718
    }                                                                                                                  // 9719
                                                                                                                       // 9720
    /**                                                                                                                // 9721
     * Checks if `path` is a direct property.                                                                          // 9722
     *                                                                                                                 // 9723
     * @static                                                                                                         // 9724
     * @memberOf _                                                                                                     // 9725
     * @category Object                                                                                                // 9726
     * @param {Object} object The object to query.                                                                     // 9727
     * @param {Array|string} path The path to check.                                                                   // 9728
     * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.                                 // 9729
     * @example                                                                                                        // 9730
     *                                                                                                                 // 9731
     * var object = { 'a': { 'b': { 'c': 3 } } };                                                                      // 9732
     *                                                                                                                 // 9733
     * _.has(object, 'a');                                                                                             // 9734
     * // => true                                                                                                      // 9735
     *                                                                                                                 // 9736
     * _.has(object, 'a.b.c');                                                                                         // 9737
     * // => true                                                                                                      // 9738
     *                                                                                                                 // 9739
     * _.has(object, ['a', 'b', 'c']);                                                                                 // 9740
     * // => true                                                                                                      // 9741
     */                                                                                                                // 9742
    function has(object, path) {                                                                                       // 9743
      if (object == null) {                                                                                            // 9744
        return false;                                                                                                  // 9745
      }                                                                                                                // 9746
      var result = hasOwnProperty.call(object, path);                                                                  // 9747
      if (!result && !isKey(path)) {                                                                                   // 9748
        path = toPath(path);                                                                                           // 9749
        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));                                  // 9750
        if (object == null) {                                                                                          // 9751
          return false;                                                                                                // 9752
        }                                                                                                              // 9753
        path = last(path);                                                                                             // 9754
        result = hasOwnProperty.call(object, path);                                                                    // 9755
      }                                                                                                                // 9756
      return result || (isLength(object.length) && isIndex(path, object.length) &&                                     // 9757
        (isArray(object) || isArguments(object) || isString(object)));                                                 // 9758
    }                                                                                                                  // 9759
                                                                                                                       // 9760
    /**                                                                                                                // 9761
     * Creates an object composed of the inverted keys and values of `object`.                                         // 9762
     * If `object` contains duplicate values, subsequent values overwrite property                                     // 9763
     * assignments of previous values unless `multiValue` is `true`.                                                   // 9764
     *                                                                                                                 // 9765
     * @static                                                                                                         // 9766
     * @memberOf _                                                                                                     // 9767
     * @category Object                                                                                                // 9768
     * @param {Object} object The object to invert.                                                                    // 9769
     * @param {boolean} [multiValue] Allow multiple values per key.                                                    // 9770
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 9771
     * @returns {Object} Returns the new inverted object.                                                              // 9772
     * @example                                                                                                        // 9773
     *                                                                                                                 // 9774
     * var object = { 'a': 1, 'b': 2, 'c': 1 };                                                                        // 9775
     *                                                                                                                 // 9776
     * _.invert(object);                                                                                               // 9777
     * // => { '1': 'c', '2': 'b' }                                                                                    // 9778
     *                                                                                                                 // 9779
     * // with `multiValue`                                                                                            // 9780
     * _.invert(object, true);                                                                                         // 9781
     * // => { '1': ['a', 'c'], '2': ['b'] }                                                                           // 9782
     */                                                                                                                // 9783
    function invert(object, multiValue, guard) {                                                                       // 9784
      if (guard && isIterateeCall(object, multiValue, guard)) {                                                        // 9785
        multiValue = undefined;                                                                                        // 9786
      }                                                                                                                // 9787
      var index = -1,                                                                                                  // 9788
          props = keys(object),                                                                                        // 9789
          length = props.length,                                                                                       // 9790
          result = {};                                                                                                 // 9791
                                                                                                                       // 9792
      while (++index < length) {                                                                                       // 9793
        var key = props[index],                                                                                        // 9794
            value = object[key];                                                                                       // 9795
                                                                                                                       // 9796
        if (multiValue) {                                                                                              // 9797
          if (hasOwnProperty.call(result, value)) {                                                                    // 9798
            result[value].push(key);                                                                                   // 9799
          } else {                                                                                                     // 9800
            result[value] = [key];                                                                                     // 9801
          }                                                                                                            // 9802
        }                                                                                                              // 9803
        else {                                                                                                         // 9804
          result[value] = key;                                                                                         // 9805
        }                                                                                                              // 9806
      }                                                                                                                // 9807
      return result;                                                                                                   // 9808
    }                                                                                                                  // 9809
                                                                                                                       // 9810
    /**                                                                                                                // 9811
     * Creates an array of the own enumerable property names of `object`.                                              // 9812
     *                                                                                                                 // 9813
     * **Note:** Non-object values are coerced to objects. See the                                                     // 9814
     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)                                          // 9815
     * for more details.                                                                                               // 9816
     *                                                                                                                 // 9817
     * @static                                                                                                         // 9818
     * @memberOf _                                                                                                     // 9819
     * @category Object                                                                                                // 9820
     * @param {Object} object The object to query.                                                                     // 9821
     * @returns {Array} Returns the array of property names.                                                           // 9822
     * @example                                                                                                        // 9823
     *                                                                                                                 // 9824
     * function Foo() {                                                                                                // 9825
     *   this.a = 1;                                                                                                   // 9826
     *   this.b = 2;                                                                                                   // 9827
     * }                                                                                                               // 9828
     *                                                                                                                 // 9829
     * Foo.prototype.c = 3;                                                                                            // 9830
     *                                                                                                                 // 9831
     * _.keys(new Foo);                                                                                                // 9832
     * // => ['a', 'b'] (iteration order is not guaranteed)                                                            // 9833
     *                                                                                                                 // 9834
     * _.keys('hi');                                                                                                   // 9835
     * // => ['0', '1']                                                                                                // 9836
     */                                                                                                                // 9837
    var keys = !nativeKeys ? shimKeys : function(object) {                                                             // 9838
      var Ctor = object == null ? undefined : object.constructor;                                                      // 9839
      if ((typeof Ctor == 'function' && Ctor.prototype === object) ||                                                  // 9840
          (typeof object == 'function' ? lodash.support.enumPrototypes : isArrayLike(object))) {                       // 9841
        return shimKeys(object);                                                                                       // 9842
      }                                                                                                                // 9843
      return isObject(object) ? nativeKeys(object) : [];                                                               // 9844
    };                                                                                                                 // 9845
                                                                                                                       // 9846
    /**                                                                                                                // 9847
     * Creates an array of the own and inherited enumerable property names of `object`.                                // 9848
     *                                                                                                                 // 9849
     * **Note:** Non-object values are coerced to objects.                                                             // 9850
     *                                                                                                                 // 9851
     * @static                                                                                                         // 9852
     * @memberOf _                                                                                                     // 9853
     * @category Object                                                                                                // 9854
     * @param {Object} object The object to query.                                                                     // 9855
     * @returns {Array} Returns the array of property names.                                                           // 9856
     * @example                                                                                                        // 9857
     *                                                                                                                 // 9858
     * function Foo() {                                                                                                // 9859
     *   this.a = 1;                                                                                                   // 9860
     *   this.b = 2;                                                                                                   // 9861
     * }                                                                                                               // 9862
     *                                                                                                                 // 9863
     * Foo.prototype.c = 3;                                                                                            // 9864
     *                                                                                                                 // 9865
     * _.keysIn(new Foo);                                                                                              // 9866
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)                                                       // 9867
     */                                                                                                                // 9868
    function keysIn(object) {                                                                                          // 9869
      if (object == null) {                                                                                            // 9870
        return [];                                                                                                     // 9871
      }                                                                                                                // 9872
      if (!isObject(object)) {                                                                                         // 9873
        object = Object(object);                                                                                       // 9874
      }                                                                                                                // 9875
      var length = object.length,                                                                                      // 9876
          support = lodash.support;                                                                                    // 9877
                                                                                                                       // 9878
      length = (length && isLength(length) &&                                                                          // 9879
        (isArray(object) || isArguments(object) || isString(object)) && length) || 0;                                  // 9880
                                                                                                                       // 9881
      var Ctor = object.constructor,                                                                                   // 9882
          index = -1,                                                                                                  // 9883
          proto = (isFunction(Ctor) && Ctor.prototype) || objectProto,                                                 // 9884
          isProto = proto === object,                                                                                  // 9885
          result = Array(length),                                                                                      // 9886
          skipIndexes = length > 0,                                                                                    // 9887
          skipErrorProps = support.enumErrorProps && (object === errorProto || object instanceof Error),               // 9888
          skipProto = support.enumPrototypes && isFunction(object);                                                    // 9889
                                                                                                                       // 9890
      while (++index < length) {                                                                                       // 9891
        result[index] = (index + '');                                                                                  // 9892
      }                                                                                                                // 9893
      // lodash skips the `constructor` property when it infers it's iterating                                         // 9894
      // over a `prototype` object because IE < 9 can't set the `[[Enumerable]]`                                       // 9895
      // attribute of an existing property and the `constructor` property of a                                         // 9896
      // prototype defaults to non-enumerable.                                                                         // 9897
      for (var key in object) {                                                                                        // 9898
        if (!(skipProto && key == 'prototype') &&                                                                      // 9899
            !(skipErrorProps && (key == 'message' || key == 'name')) &&                                                // 9900
            !(skipIndexes && isIndex(key, length)) &&                                                                  // 9901
            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {                               // 9902
          result.push(key);                                                                                            // 9903
        }                                                                                                              // 9904
      }                                                                                                                // 9905
      if (support.nonEnumShadows && object !== objectProto) {                                                          // 9906
        var tag = object === stringProto ? stringTag : (object === errorProto ? errorTag : objToString.call(object)),  // 9907
            nonEnums = nonEnumProps[tag] || nonEnumProps[objectTag];                                                   // 9908
                                                                                                                       // 9909
        if (tag == objectTag) {                                                                                        // 9910
          proto = objectProto;                                                                                         // 9911
        }                                                                                                              // 9912
        length = shadowProps.length;                                                                                   // 9913
        while (length--) {                                                                                             // 9914
          key = shadowProps[length];                                                                                   // 9915
          var nonEnum = nonEnums[key];                                                                                 // 9916
          if (!(isProto && nonEnum) &&                                                                                 // 9917
              (nonEnum ? hasOwnProperty.call(object, key) : object[key] !== proto[key])) {                             // 9918
            result.push(key);                                                                                          // 9919
          }                                                                                                            // 9920
        }                                                                                                              // 9921
      }                                                                                                                // 9922
      return result;                                                                                                   // 9923
    }                                                                                                                  // 9924
                                                                                                                       // 9925
    /**                                                                                                                // 9926
     * The opposite of `_.mapValues`; this method creates an object with the                                           // 9927
     * same values as `object` and keys generated by running each own enumerable                                       // 9928
     * property of `object` through `iteratee`.                                                                        // 9929
     *                                                                                                                 // 9930
     * @static                                                                                                         // 9931
     * @memberOf _                                                                                                     // 9932
     * @category Object                                                                                                // 9933
     * @param {Object} object The object to iterate over.                                                              // 9934
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked                                      // 9935
     *  per iteration.                                                                                                 // 9936
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 9937
     * @returns {Object} Returns the new mapped object.                                                                // 9938
     * @example                                                                                                        // 9939
     *                                                                                                                 // 9940
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {                                                            // 9941
     *   return key + value;                                                                                           // 9942
     * });                                                                                                             // 9943
     * // => { 'a1': 1, 'b2': 2 }                                                                                      // 9944
     */                                                                                                                // 9945
    var mapKeys = createObjectMapper(true);                                                                            // 9946
                                                                                                                       // 9947
    /**                                                                                                                // 9948
     * Creates an object with the same keys as `object` and values generated by                                        // 9949
     * running each own enumerable property of `object` through `iteratee`. The                                        // 9950
     * iteratee function is bound to `thisArg` and invoked with three arguments:                                       // 9951
     * (value, key, object).                                                                                           // 9952
     *                                                                                                                 // 9953
     * If a property name is provided for `iteratee` the created `_.property`                                          // 9954
     * style callback returns the property value of the given element.                                                 // 9955
     *                                                                                                                 // 9956
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 9957
     * style callback returns `true` for elements that have a matching property                                        // 9958
     * value, else `false`.                                                                                            // 9959
     *                                                                                                                 // 9960
     * If an object is provided for `iteratee` the created `_.matches` style                                           // 9961
     * callback returns `true` for elements that have the properties of the given                                      // 9962
     * object, else `false`.                                                                                           // 9963
     *                                                                                                                 // 9964
     * @static                                                                                                         // 9965
     * @memberOf _                                                                                                     // 9966
     * @category Object                                                                                                // 9967
     * @param {Object} object The object to iterate over.                                                              // 9968
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked                                      // 9969
     *  per iteration.                                                                                                 // 9970
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 9971
     * @returns {Object} Returns the new mapped object.                                                                // 9972
     * @example                                                                                                        // 9973
     *                                                                                                                 // 9974
     * _.mapValues({ 'a': 1, 'b': 2 }, function(n) {                                                                   // 9975
     *   return n * 3;                                                                                                 // 9976
     * });                                                                                                             // 9977
     * // => { 'a': 3, 'b': 6 }                                                                                        // 9978
     *                                                                                                                 // 9979
     * var users = {                                                                                                   // 9980
     *   'fred':    { 'user': 'fred',    'age': 40 },                                                                  // 9981
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }                                                                    // 9982
     * };                                                                                                              // 9983
     *                                                                                                                 // 9984
     * // using the `_.property` callback shorthand                                                                    // 9985
     * _.mapValues(users, 'age');                                                                                      // 9986
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)                                          // 9987
     */                                                                                                                // 9988
    var mapValues = createObjectMapper();                                                                              // 9989
                                                                                                                       // 9990
    /**                                                                                                                // 9991
     * The opposite of `_.pick`; this method creates an object composed of the                                         // 9992
     * own and inherited enumerable properties of `object` that are not omitted.                                       // 9993
     *                                                                                                                 // 9994
     * @static                                                                                                         // 9995
     * @memberOf _                                                                                                     // 9996
     * @category Object                                                                                                // 9997
     * @param {Object} object The source object.                                                                       // 9998
     * @param {Function|...(string|string[])} [predicate] The function invoked per                                     // 9999
     *  iteration or property names to omit, specified as individual property                                          // 10000
     *  names or arrays of property names.                                                                             // 10001
     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 10002
     * @returns {Object} Returns the new object.                                                                       // 10003
     * @example                                                                                                        // 10004
     *                                                                                                                 // 10005
     * var object = { 'user': 'fred', 'age': 40 };                                                                     // 10006
     *                                                                                                                 // 10007
     * _.omit(object, 'age');                                                                                          // 10008
     * // => { 'user': 'fred' }                                                                                        // 10009
     *                                                                                                                 // 10010
     * _.omit(object, _.isNumber);                                                                                     // 10011
     * // => { 'user': 'fred' }                                                                                        // 10012
     */                                                                                                                // 10013
    var omit = restParam(function(object, props) {                                                                     // 10014
      if (object == null) {                                                                                            // 10015
        return {};                                                                                                     // 10016
      }                                                                                                                // 10017
      if (typeof props[0] != 'function') {                                                                             // 10018
        var props = arrayMap(baseFlatten(props), String);                                                              // 10019
        return pickByArray(object, baseDifference(keysIn(object), props));                                             // 10020
      }                                                                                                                // 10021
      var predicate = bindCallback(props[0], props[1], 3);                                                             // 10022
      return pickByCallback(object, function(value, key, object) {                                                     // 10023
        return !predicate(value, key, object);                                                                         // 10024
      });                                                                                                              // 10025
    });                                                                                                                // 10026
                                                                                                                       // 10027
    /**                                                                                                                // 10028
     * Creates a two dimensional array of the key-value pairs for `object`,                                            // 10029
     * e.g. `[[key1, value1], [key2, value2]]`.                                                                        // 10030
     *                                                                                                                 // 10031
     * @static                                                                                                         // 10032
     * @memberOf _                                                                                                     // 10033
     * @category Object                                                                                                // 10034
     * @param {Object} object The object to query.                                                                     // 10035
     * @returns {Array} Returns the new array of key-value pairs.                                                      // 10036
     * @example                                                                                                        // 10037
     *                                                                                                                 // 10038
     * _.pairs({ 'barney': 36, 'fred': 40 });                                                                          // 10039
     * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)                                        // 10040
     */                                                                                                                // 10041
    function pairs(object) {                                                                                           // 10042
      object = toObject(object);                                                                                       // 10043
                                                                                                                       // 10044
      var index = -1,                                                                                                  // 10045
          props = keys(object),                                                                                        // 10046
          length = props.length,                                                                                       // 10047
          result = Array(length);                                                                                      // 10048
                                                                                                                       // 10049
      while (++index < length) {                                                                                       // 10050
        var key = props[index];                                                                                        // 10051
        result[index] = [key, object[key]];                                                                            // 10052
      }                                                                                                                // 10053
      return result;                                                                                                   // 10054
    }                                                                                                                  // 10055
                                                                                                                       // 10056
    /**                                                                                                                // 10057
     * Creates an object composed of the picked `object` properties. Property                                          // 10058
     * names may be specified as individual arguments or as arrays of property                                         // 10059
     * names. If `predicate` is provided it's invoked for each property of `object`                                    // 10060
     * picking the properties `predicate` returns truthy for. The predicate is                                         // 10061
     * bound to `thisArg` and invoked with three arguments: (value, key, object).                                      // 10062
     *                                                                                                                 // 10063
     * @static                                                                                                         // 10064
     * @memberOf _                                                                                                     // 10065
     * @category Object                                                                                                // 10066
     * @param {Object} object The source object.                                                                       // 10067
     * @param {Function|...(string|string[])} [predicate] The function invoked per                                     // 10068
     *  iteration or property names to pick, specified as individual property                                          // 10069
     *  names or arrays of property names.                                                                             // 10070
     * @param {*} [thisArg] The `this` binding of `predicate`.                                                         // 10071
     * @returns {Object} Returns the new object.                                                                       // 10072
     * @example                                                                                                        // 10073
     *                                                                                                                 // 10074
     * var object = { 'user': 'fred', 'age': 40 };                                                                     // 10075
     *                                                                                                                 // 10076
     * _.pick(object, 'user');                                                                                         // 10077
     * // => { 'user': 'fred' }                                                                                        // 10078
     *                                                                                                                 // 10079
     * _.pick(object, _.isString);                                                                                     // 10080
     * // => { 'user': 'fred' }                                                                                        // 10081
     */                                                                                                                // 10082
    var pick = restParam(function(object, props) {                                                                     // 10083
      if (object == null) {                                                                                            // 10084
        return {};                                                                                                     // 10085
      }                                                                                                                // 10086
      return typeof props[0] == 'function'                                                                             // 10087
        ? pickByCallback(object, bindCallback(props[0], props[1], 3))                                                  // 10088
        : pickByArray(object, baseFlatten(props));                                                                     // 10089
    });                                                                                                                // 10090
                                                                                                                       // 10091
    /**                                                                                                                // 10092
     * This method is like `_.get` except that if the resolved value is a function                                     // 10093
     * it's invoked with the `this` binding of its parent object and its result                                        // 10094
     * is returned.                                                                                                    // 10095
     *                                                                                                                 // 10096
     * @static                                                                                                         // 10097
     * @memberOf _                                                                                                     // 10098
     * @category Object                                                                                                // 10099
     * @param {Object} object The object to query.                                                                     // 10100
     * @param {Array|string} path The path of the property to resolve.                                                 // 10101
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.                              // 10102
     * @returns {*} Returns the resolved value.                                                                        // 10103
     * @example                                                                                                        // 10104
     *                                                                                                                 // 10105
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };                                              // 10106
     *                                                                                                                 // 10107
     * _.result(object, 'a[0].b.c1');                                                                                  // 10108
     * // => 3                                                                                                         // 10109
     *                                                                                                                 // 10110
     * _.result(object, 'a[0].b.c2');                                                                                  // 10111
     * // => 4                                                                                                         // 10112
     *                                                                                                                 // 10113
     * _.result(object, 'a.b.c', 'default');                                                                           // 10114
     * // => 'default'                                                                                                 // 10115
     *                                                                                                                 // 10116
     * _.result(object, 'a.b.c', _.constant('default'));                                                               // 10117
     * // => 'default'                                                                                                 // 10118
     */                                                                                                                // 10119
    function result(object, path, defaultValue) {                                                                      // 10120
      var result = object == null ? undefined : toObject(object)[path];                                                // 10121
      if (result === undefined) {                                                                                      // 10122
        if (object != null && !isKey(path, object)) {                                                                  // 10123
          path = toPath(path);                                                                                         // 10124
          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));                                // 10125
          result = object == null ? undefined : toObject(object)[last(path)];                                          // 10126
        }                                                                                                              // 10127
        result = result === undefined ? defaultValue : result;                                                         // 10128
      }                                                                                                                // 10129
      return isFunction(result) ? result.call(object) : result;                                                        // 10130
    }                                                                                                                  // 10131
                                                                                                                       // 10132
    /**                                                                                                                // 10133
     * Sets the property value of `path` on `object`. If a portion of `path`                                           // 10134
     * does not exist it's created.                                                                                    // 10135
     *                                                                                                                 // 10136
     * @static                                                                                                         // 10137
     * @memberOf _                                                                                                     // 10138
     * @category Object                                                                                                // 10139
     * @param {Object} object The object to augment.                                                                   // 10140
     * @param {Array|string} path The path of the property to set.                                                     // 10141
     * @param {*} value The value to set.                                                                              // 10142
     * @returns {Object} Returns `object`.                                                                             // 10143
     * @example                                                                                                        // 10144
     *                                                                                                                 // 10145
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };                                                                    // 10146
     *                                                                                                                 // 10147
     * _.set(object, 'a[0].b.c', 4);                                                                                   // 10148
     * console.log(object.a[0].b.c);                                                                                   // 10149
     * // => 4                                                                                                         // 10150
     *                                                                                                                 // 10151
     * _.set(object, 'x[0].y.z', 5);                                                                                   // 10152
     * console.log(object.x[0].y.z);                                                                                   // 10153
     * // => 5                                                                                                         // 10154
     */                                                                                                                // 10155
    function set(object, path, value) {                                                                                // 10156
      if (object == null) {                                                                                            // 10157
        return object;                                                                                                 // 10158
      }                                                                                                                // 10159
      var pathKey = (path + '');                                                                                       // 10160
      path = (object[pathKey] != null || isKey(path, object)) ? [pathKey] : toPath(path);                              // 10161
                                                                                                                       // 10162
      var index = -1,                                                                                                  // 10163
          length = path.length,                                                                                        // 10164
          lastIndex = length - 1,                                                                                      // 10165
          nested = object;                                                                                             // 10166
                                                                                                                       // 10167
      while (nested != null && ++index < length) {                                                                     // 10168
        var key = path[index];                                                                                         // 10169
        if (isObject(nested)) {                                                                                        // 10170
          if (index == lastIndex) {                                                                                    // 10171
            nested[key] = value;                                                                                       // 10172
          } else if (nested[key] == null) {                                                                            // 10173
            nested[key] = isIndex(path[index + 1]) ? [] : {};                                                          // 10174
          }                                                                                                            // 10175
        }                                                                                                              // 10176
        nested = nested[key];                                                                                          // 10177
      }                                                                                                                // 10178
      return object;                                                                                                   // 10179
    }                                                                                                                  // 10180
                                                                                                                       // 10181
    /**                                                                                                                // 10182
     * An alternative to `_.reduce`; this method transforms `object` to a new                                          // 10183
     * `accumulator` object which is the result of running each of its own enumerable                                  // 10184
     * properties through `iteratee`, with each invocation potentially mutating                                        // 10185
     * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked                                      // 10186
     * with four arguments: (accumulator, value, key, object). Iteratee functions                                      // 10187
     * may exit iteration early by explicitly returning `false`.                                                       // 10188
     *                                                                                                                 // 10189
     * @static                                                                                                         // 10190
     * @memberOf _                                                                                                     // 10191
     * @category Object                                                                                                // 10192
     * @param {Array|Object} object The object to iterate over.                                                        // 10193
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 10194
     * @param {*} [accumulator] The custom accumulator value.                                                          // 10195
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 10196
     * @returns {*} Returns the accumulated value.                                                                     // 10197
     * @example                                                                                                        // 10198
     *                                                                                                                 // 10199
     * _.transform([2, 3, 4], function(result, n) {                                                                    // 10200
     *   result.push(n *= n);                                                                                          // 10201
     *   return n % 2 == 0;                                                                                            // 10202
     * });                                                                                                             // 10203
     * // => [4, 9]                                                                                                    // 10204
     *                                                                                                                 // 10205
     * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {                                                      // 10206
     *   result[key] = n * 3;                                                                                          // 10207
     * });                                                                                                             // 10208
     * // => { 'a': 3, 'b': 6 }                                                                                        // 10209
     */                                                                                                                // 10210
    function transform(object, iteratee, accumulator, thisArg) {                                                       // 10211
      var isArr = isArray(object) || isTypedArray(object);                                                             // 10212
      iteratee = getCallback(iteratee, thisArg, 4);                                                                    // 10213
                                                                                                                       // 10214
      if (accumulator == null) {                                                                                       // 10215
        if (isArr || isObject(object)) {                                                                               // 10216
          var Ctor = object.constructor;                                                                               // 10217
          if (isArr) {                                                                                                 // 10218
            accumulator = isArray(object) ? new Ctor : [];                                                             // 10219
          } else {                                                                                                     // 10220
            accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);                                   // 10221
          }                                                                                                            // 10222
        } else {                                                                                                       // 10223
          accumulator = {};                                                                                            // 10224
        }                                                                                                              // 10225
      }                                                                                                                // 10226
      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {                                        // 10227
        return iteratee(accumulator, value, index, object);                                                            // 10228
      });                                                                                                              // 10229
      return accumulator;                                                                                              // 10230
    }                                                                                                                  // 10231
                                                                                                                       // 10232
    /**                                                                                                                // 10233
     * Creates an array of the own enumerable property values of `object`.                                             // 10234
     *                                                                                                                 // 10235
     * **Note:** Non-object values are coerced to objects.                                                             // 10236
     *                                                                                                                 // 10237
     * @static                                                                                                         // 10238
     * @memberOf _                                                                                                     // 10239
     * @category Object                                                                                                // 10240
     * @param {Object} object The object to query.                                                                     // 10241
     * @returns {Array} Returns the array of property values.                                                          // 10242
     * @example                                                                                                        // 10243
     *                                                                                                                 // 10244
     * function Foo() {                                                                                                // 10245
     *   this.a = 1;                                                                                                   // 10246
     *   this.b = 2;                                                                                                   // 10247
     * }                                                                                                               // 10248
     *                                                                                                                 // 10249
     * Foo.prototype.c = 3;                                                                                            // 10250
     *                                                                                                                 // 10251
     * _.values(new Foo);                                                                                              // 10252
     * // => [1, 2] (iteration order is not guaranteed)                                                                // 10253
     *                                                                                                                 // 10254
     * _.values('hi');                                                                                                 // 10255
     * // => ['h', 'i']                                                                                                // 10256
     */                                                                                                                // 10257
    function values(object) {                                                                                          // 10258
      return baseValues(object, keys(object));                                                                         // 10259
    }                                                                                                                  // 10260
                                                                                                                       // 10261
    /**                                                                                                                // 10262
     * Creates an array of the own and inherited enumerable property values                                            // 10263
     * of `object`.                                                                                                    // 10264
     *                                                                                                                 // 10265
     * **Note:** Non-object values are coerced to objects.                                                             // 10266
     *                                                                                                                 // 10267
     * @static                                                                                                         // 10268
     * @memberOf _                                                                                                     // 10269
     * @category Object                                                                                                // 10270
     * @param {Object} object The object to query.                                                                     // 10271
     * @returns {Array} Returns the array of property values.                                                          // 10272
     * @example                                                                                                        // 10273
     *                                                                                                                 // 10274
     * function Foo() {                                                                                                // 10275
     *   this.a = 1;                                                                                                   // 10276
     *   this.b = 2;                                                                                                   // 10277
     * }                                                                                                               // 10278
     *                                                                                                                 // 10279
     * Foo.prototype.c = 3;                                                                                            // 10280
     *                                                                                                                 // 10281
     * _.valuesIn(new Foo);                                                                                            // 10282
     * // => [1, 2, 3] (iteration order is not guaranteed)                                                             // 10283
     */                                                                                                                // 10284
    function valuesIn(object) {                                                                                        // 10285
      return baseValues(object, keysIn(object));                                                                       // 10286
    }                                                                                                                  // 10287
                                                                                                                       // 10288
    /*------------------------------------------------------------------------*/                                       // 10289
                                                                                                                       // 10290
    /**                                                                                                                // 10291
     * Checks if `n` is between `start` and up to but not including, `end`. If                                         // 10292
     * `end` is not specified it's set to `start` with `start` then set to `0`.                                        // 10293
     *                                                                                                                 // 10294
     * @static                                                                                                         // 10295
     * @memberOf _                                                                                                     // 10296
     * @category Number                                                                                                // 10297
     * @param {number} n The number to check.                                                                          // 10298
     * @param {number} [start=0] The start of the range.                                                               // 10299
     * @param {number} end The end of the range.                                                                       // 10300
     * @returns {boolean} Returns `true` if `n` is in the range, else `false`.                                         // 10301
     * @example                                                                                                        // 10302
     *                                                                                                                 // 10303
     * _.inRange(3, 2, 4);                                                                                             // 10304
     * // => true                                                                                                      // 10305
     *                                                                                                                 // 10306
     * _.inRange(4, 8);                                                                                                // 10307
     * // => true                                                                                                      // 10308
     *                                                                                                                 // 10309
     * _.inRange(4, 2);                                                                                                // 10310
     * // => false                                                                                                     // 10311
     *                                                                                                                 // 10312
     * _.inRange(2, 2);                                                                                                // 10313
     * // => false                                                                                                     // 10314
     *                                                                                                                 // 10315
     * _.inRange(1.2, 2);                                                                                              // 10316
     * // => true                                                                                                      // 10317
     *                                                                                                                 // 10318
     * _.inRange(5.2, 4);                                                                                              // 10319
     * // => false                                                                                                     // 10320
     */                                                                                                                // 10321
    function inRange(value, start, end) {                                                                              // 10322
      start = +start || 0;                                                                                             // 10323
      if (end === undefined) {                                                                                         // 10324
        end = start;                                                                                                   // 10325
        start = 0;                                                                                                     // 10326
      } else {                                                                                                         // 10327
        end = +end || 0;                                                                                               // 10328
      }                                                                                                                // 10329
      return value >= nativeMin(start, end) && value < nativeMax(start, end);                                          // 10330
    }                                                                                                                  // 10331
                                                                                                                       // 10332
    /**                                                                                                                // 10333
     * Produces a random number between `min` and `max` (inclusive). If only one                                       // 10334
     * argument is provided a number between `0` and the given number is returned.                                     // 10335
     * If `floating` is `true`, or either `min` or `max` are floats, a floating-point                                  // 10336
     * number is returned instead of an integer.                                                                       // 10337
     *                                                                                                                 // 10338
     * @static                                                                                                         // 10339
     * @memberOf _                                                                                                     // 10340
     * @category Number                                                                                                // 10341
     * @param {number} [min=0] The minimum possible value.                                                             // 10342
     * @param {number} [max=1] The maximum possible value.                                                             // 10343
     * @param {boolean} [floating] Specify returning a floating-point number.                                          // 10344
     * @returns {number} Returns the random number.                                                                    // 10345
     * @example                                                                                                        // 10346
     *                                                                                                                 // 10347
     * _.random(0, 5);                                                                                                 // 10348
     * // => an integer between 0 and 5                                                                                // 10349
     *                                                                                                                 // 10350
     * _.random(5);                                                                                                    // 10351
     * // => also an integer between 0 and 5                                                                           // 10352
     *                                                                                                                 // 10353
     * _.random(5, true);                                                                                              // 10354
     * // => a floating-point number between 0 and 5                                                                   // 10355
     *                                                                                                                 // 10356
     * _.random(1.2, 5.2);                                                                                             // 10357
     * // => a floating-point number between 1.2 and 5.2                                                               // 10358
     */                                                                                                                // 10359
    function random(min, max, floating) {                                                                              // 10360
      if (floating && isIterateeCall(min, max, floating)) {                                                            // 10361
        max = floating = undefined;                                                                                    // 10362
      }                                                                                                                // 10363
      var noMin = min == null,                                                                                         // 10364
          noMax = max == null;                                                                                         // 10365
                                                                                                                       // 10366
      if (floating == null) {                                                                                          // 10367
        if (noMax && typeof min == 'boolean') {                                                                        // 10368
          floating = min;                                                                                              // 10369
          min = 1;                                                                                                     // 10370
        }                                                                                                              // 10371
        else if (typeof max == 'boolean') {                                                                            // 10372
          floating = max;                                                                                              // 10373
          noMax = true;                                                                                                // 10374
        }                                                                                                              // 10375
      }                                                                                                                // 10376
      if (noMin && noMax) {                                                                                            // 10377
        max = 1;                                                                                                       // 10378
        noMax = false;                                                                                                 // 10379
      }                                                                                                                // 10380
      min = +min || 0;                                                                                                 // 10381
      if (noMax) {                                                                                                     // 10382
        max = min;                                                                                                     // 10383
        min = 0;                                                                                                       // 10384
      } else {                                                                                                         // 10385
        max = +max || 0;                                                                                               // 10386
      }                                                                                                                // 10387
      if (floating || min % 1 || max % 1) {                                                                            // 10388
        var rand = nativeRandom();                                                                                     // 10389
        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand + '').length - 1)))), max);              // 10390
      }                                                                                                                // 10391
      return baseRandom(min, max);                                                                                     // 10392
    }                                                                                                                  // 10393
                                                                                                                       // 10394
    /*------------------------------------------------------------------------*/                                       // 10395
                                                                                                                       // 10396
    /**                                                                                                                // 10397
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).                                     // 10398
     *                                                                                                                 // 10399
     * @static                                                                                                         // 10400
     * @memberOf _                                                                                                     // 10401
     * @category String                                                                                                // 10402
     * @param {string} [string=''] The string to convert.                                                              // 10403
     * @returns {string} Returns the camel cased string.                                                               // 10404
     * @example                                                                                                        // 10405
     *                                                                                                                 // 10406
     * _.camelCase('Foo Bar');                                                                                         // 10407
     * // => 'fooBar'                                                                                                  // 10408
     *                                                                                                                 // 10409
     * _.camelCase('--foo-bar');                                                                                       // 10410
     * // => 'fooBar'                                                                                                  // 10411
     *                                                                                                                 // 10412
     * _.camelCase('__foo_bar__');                                                                                     // 10413
     * // => 'fooBar'                                                                                                  // 10414
     */                                                                                                                // 10415
    var camelCase = createCompounder(function(result, word, index) {                                                   // 10416
      word = word.toLowerCase();                                                                                       // 10417
      return result + (index ? (word.charAt(0).toUpperCase() + word.slice(1)) : word);                                 // 10418
    });                                                                                                                // 10419
                                                                                                                       // 10420
    /**                                                                                                                // 10421
     * Capitalizes the first character of `string`.                                                                    // 10422
     *                                                                                                                 // 10423
     * @static                                                                                                         // 10424
     * @memberOf _                                                                                                     // 10425
     * @category String                                                                                                // 10426
     * @param {string} [string=''] The string to capitalize.                                                           // 10427
     * @returns {string} Returns the capitalized string.                                                               // 10428
     * @example                                                                                                        // 10429
     *                                                                                                                 // 10430
     * _.capitalize('fred');                                                                                           // 10431
     * // => 'Fred'                                                                                                    // 10432
     */                                                                                                                // 10433
    function capitalize(string) {                                                                                      // 10434
      string = baseToString(string);                                                                                   // 10435
      return string && (string.charAt(0).toUpperCase() + string.slice(1));                                             // 10436
    }                                                                                                                  // 10437
                                                                                                                       // 10438
    /**                                                                                                                // 10439
     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *                                                                                                                 // 10442
     * @static                                                                                                         // 10443
     * @memberOf _                                                                                                     // 10444
     * @category String                                                                                                // 10445
     * @param {string} [string=''] The string to deburr.                                                               // 10446
     * @returns {string} Returns the deburred string.                                                                  // 10447
     * @example                                                                                                        // 10448
     *                                                                                                                 // 10449
     * _.deburr('déjà vu');                                                                                            // 10450
     * // => 'deja vu'                                                                                                 // 10451
     */                                                                                                                // 10452
    function deburr(string) {                                                                                          // 10453
      string = baseToString(string);                                                                                   // 10454
      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');                                // 10455
    }                                                                                                                  // 10456
                                                                                                                       // 10457
    /**                                                                                                                // 10458
     * Checks if `string` ends with the given target string.                                                           // 10459
     *                                                                                                                 // 10460
     * @static                                                                                                         // 10461
     * @memberOf _                                                                                                     // 10462
     * @category String                                                                                                // 10463
     * @param {string} [string=''] The string to search.                                                               // 10464
     * @param {string} [target] The string to search for.                                                              // 10465
     * @param {number} [position=string.length] The position to search from.                                           // 10466
     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.                                 // 10467
     * @example                                                                                                        // 10468
     *                                                                                                                 // 10469
     * _.endsWith('abc', 'c');                                                                                         // 10470
     * // => true                                                                                                      // 10471
     *                                                                                                                 // 10472
     * _.endsWith('abc', 'b');                                                                                         // 10473
     * // => false                                                                                                     // 10474
     *                                                                                                                 // 10475
     * _.endsWith('abc', 'b', 2);                                                                                      // 10476
     * // => true                                                                                                      // 10477
     */                                                                                                                // 10478
    function endsWith(string, target, position) {                                                                      // 10479
      string = baseToString(string);                                                                                   // 10480
      target = (target + '');                                                                                          // 10481
                                                                                                                       // 10482
      var length = string.length;                                                                                      // 10483
      position = position === undefined                                                                                // 10484
        ? length                                                                                                       // 10485
        : nativeMin(position < 0 ? 0 : (+position || 0), length);                                                      // 10486
                                                                                                                       // 10487
      position -= target.length;                                                                                       // 10488
      return position >= 0 && string.indexOf(target, position) == position;                                            // 10489
    }                                                                                                                  // 10490
                                                                                                                       // 10491
    /**                                                                                                                // 10492
     * Converts the characters "&", "<", ">", '"', "'", and "\`", in `string` to                                       // 10493
     * their corresponding HTML entities.                                                                              // 10494
     *                                                                                                                 // 10495
     * **Note:** No other characters are escaped. To escape additional characters                                      // 10496
     * use a third-party library like [_he_](https://mths.be/he).                                                      // 10497
     *                                                                                                                 // 10498
     * Though the ">" character is escaped for symmetry, characters like                                               // 10499
     * ">" and "/" don't need escaping in HTML and have no special meaning                                             // 10500
     * unless they're part of a tag or unquoted attribute value.                                                       // 10501
     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)                             // 10502
     * (under "semi-related fun fact") for more details.                                                               // 10503
     *                                                                                                                 // 10504
     * Backticks are escaped because in Internet Explorer < 9, they can break out                                      // 10505
     * of attribute values or HTML comments. See [#59](https://html5sec.org/#59),                                      // 10506
     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and                                       // 10507
     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)                     // 10508
     * for more details.                                                                                               // 10509
     *                                                                                                                 // 10510
     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)          // 10511
     * to reduce XSS vectors.                                                                                          // 10512
     *                                                                                                                 // 10513
     * @static                                                                                                         // 10514
     * @memberOf _                                                                                                     // 10515
     * @category String                                                                                                // 10516
     * @param {string} [string=''] The string to escape.                                                               // 10517
     * @returns {string} Returns the escaped string.                                                                   // 10518
     * @example                                                                                                        // 10519
     *                                                                                                                 // 10520
     * _.escape('fred, barney, & pebbles');                                                                            // 10521
     * // => 'fred, barney, &amp; pebbles'                                                                             // 10522
     */                                                                                                                // 10523
    function escape(string) {                                                                                          // 10524
      // Reset `lastIndex` because in IE < 9 `String#replace` does not.                                                // 10525
      string = baseToString(string);                                                                                   // 10526
      return (string && reHasUnescapedHtml.test(string))                                                               // 10527
        ? string.replace(reUnescapedHtml, escapeHtmlChar)                                                              // 10528
        : string;                                                                                                      // 10529
    }                                                                                                                  // 10530
                                                                                                                       // 10531
    /**                                                                                                                // 10532
     * Escapes the `RegExp` special characters "\", "/", "^", "$", ".", "|", "?",                                      // 10533
     * "*", "+", "(", ")", "[", "]", "{" and "}" in `string`.                                                          // 10534
     *                                                                                                                 // 10535
     * @static                                                                                                         // 10536
     * @memberOf _                                                                                                     // 10537
     * @category String                                                                                                // 10538
     * @param {string} [string=''] The string to escape.                                                               // 10539
     * @returns {string} Returns the escaped string.                                                                   // 10540
     * @example                                                                                                        // 10541
     *                                                                                                                 // 10542
     * _.escapeRegExp('[lodash](https://lodash.com/)');                                                                // 10543
     * // => '\[lodash\]\(https:\/\/lodash\.com\/\)'                                                                   // 10544
     */                                                                                                                // 10545
    function escapeRegExp(string) {                                                                                    // 10546
      string = baseToString(string);                                                                                   // 10547
      return (string && reHasRegExpChars.test(string))                                                                 // 10548
        ? string.replace(reRegExpChars, escapeRegExpChar)                                                              // 10549
        : (string || '(?:)');                                                                                          // 10550
    }                                                                                                                  // 10551
                                                                                                                       // 10552
    /**                                                                                                                // 10553
     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).               // 10554
     *                                                                                                                 // 10555
     * @static                                                                                                         // 10556
     * @memberOf _                                                                                                     // 10557
     * @category String                                                                                                // 10558
     * @param {string} [string=''] The string to convert.                                                              // 10559
     * @returns {string} Returns the kebab cased string.                                                               // 10560
     * @example                                                                                                        // 10561
     *                                                                                                                 // 10562
     * _.kebabCase('Foo Bar');                                                                                         // 10563
     * // => 'foo-bar'                                                                                                 // 10564
     *                                                                                                                 // 10565
     * _.kebabCase('fooBar');                                                                                          // 10566
     * // => 'foo-bar'                                                                                                 // 10567
     *                                                                                                                 // 10568
     * _.kebabCase('__foo_bar__');                                                                                     // 10569
     * // => 'foo-bar'                                                                                                 // 10570
     */                                                                                                                // 10571
    var kebabCase = createCompounder(function(result, word, index) {                                                   // 10572
      return result + (index ? '-' : '') + word.toLowerCase();                                                         // 10573
    });                                                                                                                // 10574
                                                                                                                       // 10575
    /**                                                                                                                // 10576
     * Pads `string` on the left and right sides if it's shorter than `length`.                                        // 10577
     * Padding characters are truncated if they can't be evenly divided by `length`.                                   // 10578
     *                                                                                                                 // 10579
     * @static                                                                                                         // 10580
     * @memberOf _                                                                                                     // 10581
     * @category String                                                                                                // 10582
     * @param {string} [string=''] The string to pad.                                                                  // 10583
     * @param {number} [length=0] The padding length.                                                                  // 10584
     * @param {string} [chars=' '] The string used as padding.                                                         // 10585
     * @returns {string} Returns the padded string.                                                                    // 10586
     * @example                                                                                                        // 10587
     *                                                                                                                 // 10588
     * _.pad('abc', 8);                                                                                                // 10589
     * // => '  abc   '                                                                                                // 10590
     *                                                                                                                 // 10591
     * _.pad('abc', 8, '_-');                                                                                          // 10592
     * // => '_-abc_-_'                                                                                                // 10593
     *                                                                                                                 // 10594
     * _.pad('abc', 3);                                                                                                // 10595
     * // => 'abc'                                                                                                     // 10596
     */                                                                                                                // 10597
    function pad(string, length, chars) {                                                                              // 10598
      string = baseToString(string);                                                                                   // 10599
      length = +length;                                                                                                // 10600
                                                                                                                       // 10601
      var strLength = string.length;                                                                                   // 10602
      if (strLength >= length || !nativeIsFinite(length)) {                                                            // 10603
        return string;                                                                                                 // 10604
      }                                                                                                                // 10605
      var mid = (length - strLength) / 2,                                                                              // 10606
          leftLength = nativeFloor(mid),                                                                               // 10607
          rightLength = nativeCeil(mid);                                                                               // 10608
                                                                                                                       // 10609
      chars = createPadding('', rightLength, chars);                                                                   // 10610
      return chars.slice(0, leftLength) + string + chars;                                                              // 10611
    }                                                                                                                  // 10612
                                                                                                                       // 10613
    /**                                                                                                                // 10614
     * Pads `string` on the left side if it's shorter than `length`. Padding                                           // 10615
     * characters are truncated if they exceed `length`.                                                               // 10616
     *                                                                                                                 // 10617
     * @static                                                                                                         // 10618
     * @memberOf _                                                                                                     // 10619
     * @category String                                                                                                // 10620
     * @param {string} [string=''] The string to pad.                                                                  // 10621
     * @param {number} [length=0] The padding length.                                                                  // 10622
     * @param {string} [chars=' '] The string used as padding.                                                         // 10623
     * @returns {string} Returns the padded string.                                                                    // 10624
     * @example                                                                                                        // 10625
     *                                                                                                                 // 10626
     * _.padLeft('abc', 6);                                                                                            // 10627
     * // => '   abc'                                                                                                  // 10628
     *                                                                                                                 // 10629
     * _.padLeft('abc', 6, '_-');                                                                                      // 10630
     * // => '_-_abc'                                                                                                  // 10631
     *                                                                                                                 // 10632
     * _.padLeft('abc', 3);                                                                                            // 10633
     * // => 'abc'                                                                                                     // 10634
     */                                                                                                                // 10635
    var padLeft = createPadDir();                                                                                      // 10636
                                                                                                                       // 10637
    /**                                                                                                                // 10638
     * Pads `string` on the right side if it's shorter than `length`. Padding                                          // 10639
     * characters are truncated if they exceed `length`.                                                               // 10640
     *                                                                                                                 // 10641
     * @static                                                                                                         // 10642
     * @memberOf _                                                                                                     // 10643
     * @category String                                                                                                // 10644
     * @param {string} [string=''] The string to pad.                                                                  // 10645
     * @param {number} [length=0] The padding length.                                                                  // 10646
     * @param {string} [chars=' '] The string used as padding.                                                         // 10647
     * @returns {string} Returns the padded string.                                                                    // 10648
     * @example                                                                                                        // 10649
     *                                                                                                                 // 10650
     * _.padRight('abc', 6);                                                                                           // 10651
     * // => 'abc   '                                                                                                  // 10652
     *                                                                                                                 // 10653
     * _.padRight('abc', 6, '_-');                                                                                     // 10654
     * // => 'abc_-_'                                                                                                  // 10655
     *                                                                                                                 // 10656
     * _.padRight('abc', 3);                                                                                           // 10657
     * // => 'abc'                                                                                                     // 10658
     */                                                                                                                // 10659
    var padRight = createPadDir(true);                                                                                 // 10660
                                                                                                                       // 10661
    /**                                                                                                                // 10662
     * Converts `string` to an integer of the specified radix. If `radix` is                                           // 10663
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,                                  // 10664
     * in which case a `radix` of `16` is used.                                                                        // 10665
     *                                                                                                                 // 10666
     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)                            // 10667
     * of `parseInt`.                                                                                                  // 10668
     *                                                                                                                 // 10669
     * @static                                                                                                         // 10670
     * @memberOf _                                                                                                     // 10671
     * @category String                                                                                                // 10672
     * @param {string} string The string to convert.                                                                   // 10673
     * @param {number} [radix] The radix to interpret `value` by.                                                      // 10674
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 10675
     * @returns {number} Returns the converted integer.                                                                // 10676
     * @example                                                                                                        // 10677
     *                                                                                                                 // 10678
     * _.parseInt('08');                                                                                               // 10679
     * // => 8                                                                                                         // 10680
     *                                                                                                                 // 10681
     * _.map(['6', '08', '10'], _.parseInt);                                                                           // 10682
     * // => [6, 8, 10]                                                                                                // 10683
     */                                                                                                                // 10684
    function parseInt(string, radix, guard) {                                                                          // 10685
      // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.                                                        // 10686
      // Chrome fails to trim leading <BOM> whitespace characters.                                                     // 10687
      // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.                                      // 10688
      if (guard ? isIterateeCall(string, radix, guard) : radix == null) {                                              // 10689
        radix = 0;                                                                                                     // 10690
      } else if (radix) {                                                                                              // 10691
        radix = +radix;                                                                                                // 10692
      }                                                                                                                // 10693
      string = trim(string);                                                                                           // 10694
      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));                                 // 10695
    }                                                                                                                  // 10696
                                                                                                                       // 10697
    /**                                                                                                                // 10698
     * Repeats the given string `n` times.                                                                             // 10699
     *                                                                                                                 // 10700
     * @static                                                                                                         // 10701
     * @memberOf _                                                                                                     // 10702
     * @category String                                                                                                // 10703
     * @param {string} [string=''] The string to repeat.                                                               // 10704
     * @param {number} [n=0] The number of times to repeat the string.                                                 // 10705
     * @returns {string} Returns the repeated string.                                                                  // 10706
     * @example                                                                                                        // 10707
     *                                                                                                                 // 10708
     * _.repeat('*', 3);                                                                                               // 10709
     * // => '***'                                                                                                     // 10710
     *                                                                                                                 // 10711
     * _.repeat('abc', 2);                                                                                             // 10712
     * // => 'abcabc'                                                                                                  // 10713
     *                                                                                                                 // 10714
     * _.repeat('abc', 0);                                                                                             // 10715
     * // => ''                                                                                                        // 10716
     */                                                                                                                // 10717
    function repeat(string, n) {                                                                                       // 10718
      var result = '';                                                                                                 // 10719
      string = baseToString(string);                                                                                   // 10720
      n = +n;                                                                                                          // 10721
      if (n < 1 || !string || !nativeIsFinite(n)) {                                                                    // 10722
        return result;                                                                                                 // 10723
      }                                                                                                                // 10724
      // Leverage the exponentiation by squaring algorithm for a faster repeat.                                        // 10725
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.                                // 10726
      do {                                                                                                             // 10727
        if (n % 2) {                                                                                                   // 10728
          result += string;                                                                                            // 10729
        }                                                                                                              // 10730
        n = nativeFloor(n / 2);                                                                                        // 10731
        string += string;                                                                                              // 10732
      } while (n);                                                                                                     // 10733
                                                                                                                       // 10734
      return result;                                                                                                   // 10735
    }                                                                                                                  // 10736
                                                                                                                       // 10737
    /**                                                                                                                // 10738
     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).                                    // 10739
     *                                                                                                                 // 10740
     * @static                                                                                                         // 10741
     * @memberOf _                                                                                                     // 10742
     * @category String                                                                                                // 10743
     * @param {string} [string=''] The string to convert.                                                              // 10744
     * @returns {string} Returns the snake cased string.                                                               // 10745
     * @example                                                                                                        // 10746
     *                                                                                                                 // 10747
     * _.snakeCase('Foo Bar');                                                                                         // 10748
     * // => 'foo_bar'                                                                                                 // 10749
     *                                                                                                                 // 10750
     * _.snakeCase('fooBar');                                                                                          // 10751
     * // => 'foo_bar'                                                                                                 // 10752
     *                                                                                                                 // 10753
     * _.snakeCase('--foo-bar');                                                                                       // 10754
     * // => 'foo_bar'                                                                                                 // 10755
     */                                                                                                                // 10756
    var snakeCase = createCompounder(function(result, word, index) {                                                   // 10757
      return result + (index ? '_' : '') + word.toLowerCase();                                                         // 10758
    });                                                                                                                // 10759
                                                                                                                       // 10760
    /**                                                                                                                // 10761
     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).    // 10762
     *                                                                                                                 // 10763
     * @static                                                                                                         // 10764
     * @memberOf _                                                                                                     // 10765
     * @category String                                                                                                // 10766
     * @param {string} [string=''] The string to convert.                                                              // 10767
     * @returns {string} Returns the start cased string.                                                               // 10768
     * @example                                                                                                        // 10769
     *                                                                                                                 // 10770
     * _.startCase('--foo-bar');                                                                                       // 10771
     * // => 'Foo Bar'                                                                                                 // 10772
     *                                                                                                                 // 10773
     * _.startCase('fooBar');                                                                                          // 10774
     * // => 'Foo Bar'                                                                                                 // 10775
     *                                                                                                                 // 10776
     * _.startCase('__foo_bar__');                                                                                     // 10777
     * // => 'Foo Bar'                                                                                                 // 10778
     */                                                                                                                // 10779
    var startCase = createCompounder(function(result, word, index) {                                                   // 10780
      return result + (index ? ' ' : '') + (word.charAt(0).toUpperCase() + word.slice(1));                             // 10781
    });                                                                                                                // 10782
                                                                                                                       // 10783
    /**                                                                                                                // 10784
     * Checks if `string` starts with the given target string.                                                         // 10785
     *                                                                                                                 // 10786
     * @static                                                                                                         // 10787
     * @memberOf _                                                                                                     // 10788
     * @category String                                                                                                // 10789
     * @param {string} [string=''] The string to search.                                                               // 10790
     * @param {string} [target] The string to search for.                                                              // 10791
     * @param {number} [position=0] The position to search from.                                                       // 10792
     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.                               // 10793
     * @example                                                                                                        // 10794
     *                                                                                                                 // 10795
     * _.startsWith('abc', 'a');                                                                                       // 10796
     * // => true                                                                                                      // 10797
     *                                                                                                                 // 10798
     * _.startsWith('abc', 'b');                                                                                       // 10799
     * // => false                                                                                                     // 10800
     *                                                                                                                 // 10801
     * _.startsWith('abc', 'b', 1);                                                                                    // 10802
     * // => true                                                                                                      // 10803
     */                                                                                                                // 10804
    function startsWith(string, target, position) {                                                                    // 10805
      string = baseToString(string);                                                                                   // 10806
      position = position == null                                                                                      // 10807
        ? 0                                                                                                            // 10808
        : nativeMin(position < 0 ? 0 : (+position || 0), string.length);                                               // 10809
                                                                                                                       // 10810
      return string.lastIndexOf(target, position) == position;                                                         // 10811
    }                                                                                                                  // 10812
                                                                                                                       // 10813
    /**                                                                                                                // 10814
     * Creates a compiled template function that can interpolate data properties                                       // 10815
     * in "interpolate" delimiters, HTML-escape interpolated data properties in                                        // 10816
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data                                      // 10817
     * properties may be accessed as free variables in the template. If a setting                                      // 10818
     * object is provided it takes precedence over `_.templateSettings` values.                                        // 10819
     *                                                                                                                 // 10820
     * **Note:** In the development build `_.template` utilizes                                                        // 10821
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)                   // 10822
     * for easier debugging.                                                                                           // 10823
     *                                                                                                                 // 10824
     * For more information on precompiling templates see                                                              // 10825
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).                                       // 10826
     *                                                                                                                 // 10827
     * For more information on Chrome extension sandboxes see                                                          // 10828
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).                    // 10829
     *                                                                                                                 // 10830
     * @static                                                                                                         // 10831
     * @memberOf _                                                                                                     // 10832
     * @category String                                                                                                // 10833
     * @param {string} [string=''] The template string.                                                                // 10834
     * @param {Object} [options] The options object.                                                                   // 10835
     * @param {RegExp} [options.escape] The HTML "escape" delimiter.                                                   // 10836
     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.                                                    // 10837
     * @param {Object} [options.imports] An object to import into the template as free variables.                      // 10838
     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.                                              // 10839
     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.                            // 10840
     * @param {string} [options.variable] The data object variable name.                                               // 10841
     * @param- {Object} [otherOptions] Enables the legacy `options` param signature.                                   // 10842
     * @returns {Function} Returns the compiled template function.                                                     // 10843
     * @example                                                                                                        // 10844
     *                                                                                                                 // 10845
     * // using the "interpolate" delimiter to create a compiled template                                              // 10846
     * var compiled = _.template('hello <%= user %>!');                                                                // 10847
     * compiled({ 'user': 'fred' });                                                                                   // 10848
     * // => 'hello fred!'                                                                                             // 10849
     *                                                                                                                 // 10850
     * // using the HTML "escape" delimiter to escape data property values                                             // 10851
     * var compiled = _.template('<b><%- value %></b>');                                                               // 10852
     * compiled({ 'value': '<script>' });                                                                              // 10853
     * // => '<b>&lt;script&gt;</b>'                                                                                   // 10854
     *                                                                                                                 // 10855
     * // using the "evaluate" delimiter to execute JavaScript and generate HTML                                       // 10856
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');              // 10857
     * compiled({ 'users': ['fred', 'barney'] });                                                                      // 10858
     * // => '<li>fred</li><li>barney</li>'                                                                            // 10859
     *                                                                                                                 // 10860
     * // using the internal `print` function in "evaluate" delimiters                                                 // 10861
     * var compiled = _.template('<% print("hello " + user); %>!');                                                    // 10862
     * compiled({ 'user': 'barney' });                                                                                 // 10863
     * // => 'hello barney!'                                                                                           // 10864
     *                                                                                                                 // 10865
     * // using the ES delimiter as an alternative to the default "interpolate" delimiter                              // 10866
     * var compiled = _.template('hello ${ user }!');                                                                  // 10867
     * compiled({ 'user': 'pebbles' });                                                                                // 10868
     * // => 'hello pebbles!'                                                                                          // 10869
     *                                                                                                                 // 10870
     * // using custom template delimiters                                                                             // 10871
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;                                                             // 10872
     * var compiled = _.template('hello {{ user }}!');                                                                 // 10873
     * compiled({ 'user': 'mustache' });                                                                               // 10874
     * // => 'hello mustache!'                                                                                         // 10875
     *                                                                                                                 // 10876
     * // using backslashes to treat delimiters as plain text                                                          // 10877
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');                                                         // 10878
     * compiled({ 'value': 'ignored' });                                                                               // 10879
     * // => '<%- value %>'                                                                                            // 10880
     *                                                                                                                 // 10881
     * // using the `imports` option to import `jQuery` as `jq`                                                        // 10882
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';                                // 10883
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });                                               // 10884
     * compiled({ 'users': ['fred', 'barney'] });                                                                      // 10885
     * // => '<li>fred</li><li>barney</li>'                                                                            // 10886
     *                                                                                                                 // 10887
     * // using the `sourceURL` option to specify a custom sourceURL for the template                                  // 10888
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });                        // 10889
     * compiled(data);                                                                                                 // 10890
     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector           // 10891
     *                                                                                                                 // 10892
     * // using the `variable` option to ensure a with-statement isn't used in the compiled template                   // 10893
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });                                      // 10894
     * compiled.source;                                                                                                // 10895
     * // => function(data) {                                                                                          // 10896
     * //   var __t, __p = '';                                                                                         // 10897
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';                                           // 10898
     * //   return __p;                                                                                                // 10899
     * // }                                                                                                            // 10900
     *                                                                                                                 // 10901
     * // using the `source` property to inline compiled templates for meaningful                                      // 10902
     * // line numbers in error messages and a stack trace                                                             // 10903
     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');                                                                                                             // 10908
     */                                                                                                                // 10909
    function template(string, options, otherOptions) {                                                                 // 10910
      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)              // 10911
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).                                                  // 10912
      var settings = lodash.templateSettings;                                                                          // 10913
                                                                                                                       // 10914
      if (otherOptions && isIterateeCall(string, options, otherOptions)) {                                             // 10915
        options = otherOptions = undefined;                                                                            // 10916
      }                                                                                                                // 10917
      string = baseToString(string);                                                                                   // 10918
      options = assignWith(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);                      // 10919
                                                                                                                       // 10920
      var imports = assignWith(baseAssign({}, options.imports), settings.imports, assignOwnDefaults),                  // 10921
          importsKeys = keys(imports),                                                                                 // 10922
          importsValues = baseValues(imports, importsKeys);                                                            // 10923
                                                                                                                       // 10924
      var isEscaping,                                                                                                  // 10925
          isEvaluating,                                                                                                // 10926
          index = 0,                                                                                                   // 10927
          interpolate = options.interpolate || reNoMatch,                                                              // 10928
          source = "__p += '";                                                                                         // 10929
                                                                                                                       // 10930
      // Compile the regexp to match each delimiter.                                                                   // 10931
      var reDelimiters = RegExp(                                                                                       // 10932
        (options.escape || reNoMatch).source + '|' +                                                                   // 10933
        interpolate.source + '|' +                                                                                     // 10934
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +                                      // 10935
        (options.evaluate || reNoMatch).source + '|$'                                                                  // 10936
      , 'g');                                                                                                          // 10937
                                                                                                                       // 10938
      // Use a sourceURL for easier debugging.                                                                         // 10939
      var sourceURL = '//# sourceURL=' +                                                                               // 10940
        ('sourceURL' in options                                                                                        // 10941
          ? options.sourceURL                                                                                          // 10942
          : ('lodash.templateSources[' + (++templateCounter) + ']')                                                    // 10943
        ) + '\n';                                                                                                      // 10944
                                                                                                                       // 10945
      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);                                                      // 10947
                                                                                                                       // 10948
        // Escape characters that can't be included in string literals.                                                // 10949
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);                            // 10950
                                                                                                                       // 10951
        // Replace delimiters with snippets.                                                                           // 10952
        if (escapeValue) {                                                                                             // 10953
          isEscaping = true;                                                                                           // 10954
          source += "' +\n__e(" + escapeValue + ") +\n'";                                                              // 10955
        }                                                                                                              // 10956
        if (evaluateValue) {                                                                                           // 10957
          isEvaluating = true;                                                                                         // 10958
          source += "';\n" + evaluateValue + ";\n__p += '";                                                            // 10959
        }                                                                                                              // 10960
        if (interpolateValue) {                                                                                        // 10961
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";                               // 10962
        }                                                                                                              // 10963
        index = offset + match.length;                                                                                 // 10964
                                                                                                                       // 10965
        // The JS engine embedded in Adobe products requires returning the `match`                                     // 10966
        // string in order to produce the correct `offset` value.                                                      // 10967
        return match;                                                                                                  // 10968
      });                                                                                                              // 10969
                                                                                                                       // 10970
      source += "';\n";                                                                                                // 10971
                                                                                                                       // 10972
      // If `variable` is not specified wrap a with-statement around the generated                                     // 10973
      // code to add the data object to the top of the scope chain.                                                    // 10974
      var variable = options.variable;                                                                                 // 10975
      if (!variable) {                                                                                                 // 10976
        source = 'with (obj) {\n' + source + '\n}\n';                                                                  // 10977
      }                                                                                                                // 10978
      // Cleanup code by stripping empty strings.                                                                      // 10979
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)                                      // 10980
        .replace(reEmptyStringMiddle, '$1')                                                                            // 10981
        .replace(reEmptyStringTrailing, '$1;');                                                                        // 10982
                                                                                                                       // 10983
      // Frame code as the function body.                                                                              // 10984
      source = 'function(' + (variable || 'obj') + ') {\n' +                                                           // 10985
        (variable                                                                                                      // 10986
          ? ''                                                                                                         // 10987
          : 'obj || (obj = {});\n'                                                                                     // 10988
        ) +                                                                                                            // 10989
        "var __t, __p = ''" +                                                                                          // 10990
        (isEscaping                                                                                                    // 10991
           ? ', __e = _.escape'                                                                                        // 10992
           : ''                                                                                                        // 10993
        ) +                                                                                                            // 10994
        (isEvaluating                                                                                                  // 10995
          ? ', __j = Array.prototype.join;\n' +                                                                        // 10996
            "function print() { __p += __j.call(arguments, '') }\n"                                                    // 10997
          : ';\n'                                                                                                      // 10998
        ) +                                                                                                            // 10999
        source +                                                                                                       // 11000
        'return __p\n}';                                                                                               // 11001
                                                                                                                       // 11002
      var result = attempt(function() {                                                                                // 11003
        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);                  // 11004
      });                                                                                                              // 11005
                                                                                                                       // 11006
      // Provide the compiled function's source by its `toString` method or                                            // 11007
      // the `source` property as a convenience for inlining compiled templates.                                       // 11008
      result.source = source;                                                                                          // 11009
      if (isError(result)) {                                                                                           // 11010
        throw result;                                                                                                  // 11011
      }                                                                                                                // 11012
      return result;                                                                                                   // 11013
    }                                                                                                                  // 11014
                                                                                                                       // 11015
    /**                                                                                                                // 11016
     * Removes leading and trailing whitespace or specified characters from `string`.                                  // 11017
     *                                                                                                                 // 11018
     * @static                                                                                                         // 11019
     * @memberOf _                                                                                                     // 11020
     * @category String                                                                                                // 11021
     * @param {string} [string=''] The string to trim.                                                                 // 11022
     * @param {string} [chars=whitespace] The characters to trim.                                                      // 11023
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 11024
     * @returns {string} Returns the trimmed string.                                                                   // 11025
     * @example                                                                                                        // 11026
     *                                                                                                                 // 11027
     * _.trim('  abc  ');                                                                                              // 11028
     * // => 'abc'                                                                                                     // 11029
     *                                                                                                                 // 11030
     * _.trim('-_-abc-_-', '_-');                                                                                      // 11031
     * // => 'abc'                                                                                                     // 11032
     *                                                                                                                 // 11033
     * _.map(['  foo  ', '  bar  '], _.trim);                                                                          // 11034
     * // => ['foo', 'bar']                                                                                            // 11035
     */                                                                                                                // 11036
    function trim(string, chars, guard) {                                                                              // 11037
      var value = string;                                                                                              // 11038
      string = baseToString(string);                                                                                   // 11039
      if (!string) {                                                                                                   // 11040
        return string;                                                                                                 // 11041
      }                                                                                                                // 11042
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {                                               // 11043
        return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);                                  // 11044
      }                                                                                                                // 11045
      chars = (chars + '');                                                                                            // 11046
      return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);                          // 11047
    }                                                                                                                  // 11048
                                                                                                                       // 11049
    /**                                                                                                                // 11050
     * Removes leading whitespace or specified characters from `string`.                                               // 11051
     *                                                                                                                 // 11052
     * @static                                                                                                         // 11053
     * @memberOf _                                                                                                     // 11054
     * @category String                                                                                                // 11055
     * @param {string} [string=''] The string to trim.                                                                 // 11056
     * @param {string} [chars=whitespace] The characters to trim.                                                      // 11057
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 11058
     * @returns {string} Returns the trimmed string.                                                                   // 11059
     * @example                                                                                                        // 11060
     *                                                                                                                 // 11061
     * _.trimLeft('  abc  ');                                                                                          // 11062
     * // => 'abc  '                                                                                                   // 11063
     *                                                                                                                 // 11064
     * _.trimLeft('-_-abc-_-', '_-');                                                                                  // 11065
     * // => 'abc-_-'                                                                                                  // 11066
     */                                                                                                                // 11067
    function trimLeft(string, chars, guard) {                                                                          // 11068
      var value = string;                                                                                              // 11069
      string = baseToString(string);                                                                                   // 11070
      if (!string) {                                                                                                   // 11071
        return string;                                                                                                 // 11072
      }                                                                                                                // 11073
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {                                               // 11074
        return string.slice(trimmedLeftIndex(string));                                                                 // 11075
      }                                                                                                                // 11076
      return string.slice(charsLeftIndex(string, (chars + '')));                                                       // 11077
    }                                                                                                                  // 11078
                                                                                                                       // 11079
    /**                                                                                                                // 11080
     * Removes trailing whitespace or specified characters from `string`.                                              // 11081
     *                                                                                                                 // 11082
     * @static                                                                                                         // 11083
     * @memberOf _                                                                                                     // 11084
     * @category String                                                                                                // 11085
     * @param {string} [string=''] The string to trim.                                                                 // 11086
     * @param {string} [chars=whitespace] The characters to trim.                                                      // 11087
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 11088
     * @returns {string} Returns the trimmed string.                                                                   // 11089
     * @example                                                                                                        // 11090
     *                                                                                                                 // 11091
     * _.trimRight('  abc  ');                                                                                         // 11092
     * // => '  abc'                                                                                                   // 11093
     *                                                                                                                 // 11094
     * _.trimRight('-_-abc-_-', '_-');                                                                                 // 11095
     * // => '-_-abc'                                                                                                  // 11096
     */                                                                                                                // 11097
    function trimRight(string, chars, guard) {                                                                         // 11098
      var value = string;                                                                                              // 11099
      string = baseToString(string);                                                                                   // 11100
      if (!string) {                                                                                                   // 11101
        return string;                                                                                                 // 11102
      }                                                                                                                // 11103
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {                                               // 11104
        return string.slice(0, trimmedRightIndex(string) + 1);                                                         // 11105
      }                                                                                                                // 11106
      return string.slice(0, charsRightIndex(string, (chars + '')) + 1);                                               // 11107
    }                                                                                                                  // 11108
                                                                                                                       // 11109
    /**                                                                                                                // 11110
     * Truncates `string` if it's longer than the given maximum string length.                                         // 11111
     * The last characters of the truncated string are replaced with the omission                                      // 11112
     * string which defaults to "...".                                                                                 // 11113
     *                                                                                                                 // 11114
     * @static                                                                                                         // 11115
     * @memberOf _                                                                                                     // 11116
     * @category String                                                                                                // 11117
     * @param {string} [string=''] The string to truncate.                                                             // 11118
     * @param {Object|number} [options] The options object or maximum string length.                                   // 11119
     * @param {number} [options.length=30] The maximum string length.                                                  // 11120
     * @param {string} [options.omission='...'] The string to indicate text is omitted.                                // 11121
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.                                // 11122
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 11123
     * @returns {string} Returns the truncated string.                                                                 // 11124
     * @example                                                                                                        // 11125
     *                                                                                                                 // 11126
     * _.trunc('hi-diddly-ho there, neighborino');                                                                     // 11127
     * // => 'hi-diddly-ho there, neighbo...'                                                                          // 11128
     *                                                                                                                 // 11129
     * _.trunc('hi-diddly-ho there, neighborino', 24);                                                                 // 11130
     * // => 'hi-diddly-ho there, n...'                                                                                // 11131
     *                                                                                                                 // 11132
     * _.trunc('hi-diddly-ho there, neighborino', {                                                                    // 11133
     *   'length': 24,                                                                                                 // 11134
     *   'separator': ' '                                                                                              // 11135
     * });                                                                                                             // 11136
     * // => 'hi-diddly-ho there,...'                                                                                  // 11137
     *                                                                                                                 // 11138
     * _.trunc('hi-diddly-ho there, neighborino', {                                                                    // 11139
     *   'length': 24,                                                                                                 // 11140
     *   'separator': /,? +/                                                                                           // 11141
     * });                                                                                                             // 11142
     * // => 'hi-diddly-ho there...'                                                                                   // 11143
     *                                                                                                                 // 11144
     * _.trunc('hi-diddly-ho there, neighborino', {                                                                    // 11145
     *   'omission': ' [...]'                                                                                          // 11146
     * });                                                                                                             // 11147
     * // => 'hi-diddly-ho there, neig [...]'                                                                          // 11148
     */                                                                                                                // 11149
    function trunc(string, options, guard) {                                                                           // 11150
      if (guard && isIterateeCall(string, options, guard)) {                                                           // 11151
        options = undefined;                                                                                           // 11152
      }                                                                                                                // 11153
      var length = DEFAULT_TRUNC_LENGTH,                                                                               // 11154
          omission = DEFAULT_TRUNC_OMISSION;                                                                           // 11155
                                                                                                                       // 11156
      if (options != null) {                                                                                           // 11157
        if (isObject(options)) {                                                                                       // 11158
          var separator = 'separator' in options ? options.separator : separator;                                      // 11159
          length = 'length' in options ? (+options.length || 0) : length;                                              // 11160
          omission = 'omission' in options ? baseToString(options.omission) : omission;                                // 11161
        } else {                                                                                                       // 11162
          length = +options || 0;                                                                                      // 11163
        }                                                                                                              // 11164
      }                                                                                                                // 11165
      string = baseToString(string);                                                                                   // 11166
      if (length >= string.length) {                                                                                   // 11167
        return string;                                                                                                 // 11168
      }                                                                                                                // 11169
      var end = length - omission.length;                                                                              // 11170
      if (end < 1) {                                                                                                   // 11171
        return omission;                                                                                               // 11172
      }                                                                                                                // 11173
      var result = string.slice(0, end);                                                                               // 11174
      if (separator == null) {                                                                                         // 11175
        return result + omission;                                                                                      // 11176
      }                                                                                                                // 11177
      if (isRegExp(separator)) {                                                                                       // 11178
        if (string.slice(end).search(separator)) {                                                                     // 11179
          var match,                                                                                                   // 11180
              newEnd,                                                                                                  // 11181
              substring = string.slice(0, end);                                                                        // 11182
                                                                                                                       // 11183
          if (!separator.global) {                                                                                     // 11184
            separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');                               // 11185
          }                                                                                                            // 11186
          separator.lastIndex = 0;                                                                                     // 11187
          while ((match = separator.exec(substring))) {                                                                // 11188
            newEnd = match.index;                                                                                      // 11189
          }                                                                                                            // 11190
          result = result.slice(0, newEnd == null ? end : newEnd);                                                     // 11191
        }                                                                                                              // 11192
      } else if (string.indexOf(separator, end) != end) {                                                              // 11193
        var index = result.lastIndexOf(separator);                                                                     // 11194
        if (index > -1) {                                                                                              // 11195
          result = result.slice(0, index);                                                                             // 11196
        }                                                                                                              // 11197
      }                                                                                                                // 11198
      return result + omission;                                                                                        // 11199
    }                                                                                                                  // 11200
                                                                                                                       // 11201
    /**                                                                                                                // 11202
     * The inverse of `_.escape`; this method converts the HTML entities                                               // 11203
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their                                    // 11204
     * corresponding characters.                                                                                       // 11205
     *                                                                                                                 // 11206
     * **Note:** No other HTML entities are unescaped. To unescape additional HTML                                     // 11207
     * entities use a third-party library like [_he_](https://mths.be/he).                                             // 11208
     *                                                                                                                 // 11209
     * @static                                                                                                         // 11210
     * @memberOf _                                                                                                     // 11211
     * @category String                                                                                                // 11212
     * @param {string} [string=''] The string to unescape.                                                             // 11213
     * @returns {string} Returns the unescaped string.                                                                 // 11214
     * @example                                                                                                        // 11215
     *                                                                                                                 // 11216
     * _.unescape('fred, barney, &amp; pebbles');                                                                      // 11217
     * // => 'fred, barney, & pebbles'                                                                                 // 11218
     */                                                                                                                // 11219
    function unescape(string) {                                                                                        // 11220
      string = baseToString(string);                                                                                   // 11221
      return (string && reHasEscapedHtml.test(string))                                                                 // 11222
        ? string.replace(reEscapedHtml, unescapeHtmlChar)                                                              // 11223
        : string;                                                                                                      // 11224
    }                                                                                                                  // 11225
                                                                                                                       // 11226
    /**                                                                                                                // 11227
     * Splits `string` into an array of its words.                                                                     // 11228
     *                                                                                                                 // 11229
     * @static                                                                                                         // 11230
     * @memberOf _                                                                                                     // 11231
     * @category String                                                                                                // 11232
     * @param {string} [string=''] The string to inspect.                                                              // 11233
     * @param {RegExp|string} [pattern] The pattern to match words.                                                    // 11234
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 11235
     * @returns {Array} Returns the words of `string`.                                                                 // 11236
     * @example                                                                                                        // 11237
     *                                                                                                                 // 11238
     * _.words('fred, barney, & pebbles');                                                                             // 11239
     * // => ['fred', 'barney', 'pebbles']                                                                             // 11240
     *                                                                                                                 // 11241
     * _.words('fred, barney, & pebbles', /[^, ]+/g);                                                                  // 11242
     * // => ['fred', 'barney', '&', 'pebbles']                                                                        // 11243
     */                                                                                                                // 11244
    function words(string, pattern, guard) {                                                                           // 11245
      if (guard && isIterateeCall(string, pattern, guard)) {                                                           // 11246
        pattern = undefined;                                                                                           // 11247
      }                                                                                                                // 11248
      string = baseToString(string);                                                                                   // 11249
      return string.match(pattern || reWords) || [];                                                                   // 11250
    }                                                                                                                  // 11251
                                                                                                                       // 11252
    /*------------------------------------------------------------------------*/                                       // 11253
                                                                                                                       // 11254
    /**                                                                                                                // 11255
     * Attempts to invoke `func`, returning either the result or the caught error                                      // 11256
     * object. Any additional arguments are provided to `func` when it's invoked.                                      // 11257
     *                                                                                                                 // 11258
     * @static                                                                                                         // 11259
     * @memberOf _                                                                                                     // 11260
     * @category Utility                                                                                               // 11261
     * @param {Function} func The function to attempt.                                                                 // 11262
     * @returns {*} Returns the `func` result or error object.                                                         // 11263
     * @example                                                                                                        // 11264
     *                                                                                                                 // 11265
     * // avoid throwing errors for invalid selectors                                                                  // 11266
     * var elements = _.attempt(function(selector) {                                                                   // 11267
     *   return document.querySelectorAll(selector);                                                                   // 11268
     * }, '>_>');                                                                                                      // 11269
     *                                                                                                                 // 11270
     * if (_.isError(elements)) {                                                                                      // 11271
     *   elements = [];                                                                                                // 11272
     * }                                                                                                               // 11273
     */                                                                                                                // 11274
    var attempt = restParam(function(func, args) {                                                                     // 11275
      try {                                                                                                            // 11276
        return func.apply(undefined, args);                                                                            // 11277
      } catch(e) {                                                                                                     // 11278
        return isError(e) ? e : new Error(e);                                                                          // 11279
      }                                                                                                                // 11280
    });                                                                                                                // 11281
                                                                                                                       // 11282
    /**                                                                                                                // 11283
     * Creates a function that invokes `func` with the `this` binding of `thisArg`                                     // 11284
     * and arguments of the created function. If `func` is a property name the                                         // 11285
     * created callback returns the property value for a given element. If `func`                                      // 11286
     * is an object the created callback returns `true` for elements that contain                                      // 11287
     * the equivalent object properties, otherwise it returns `false`.                                                 // 11288
     *                                                                                                                 // 11289
     * @static                                                                                                         // 11290
     * @memberOf _                                                                                                     // 11291
     * @alias iteratee                                                                                                 // 11292
     * @category Utility                                                                                               // 11293
     * @param {*} [func=_.identity] The value to convert to a callback.                                                // 11294
     * @param {*} [thisArg] The `this` binding of `func`.                                                              // 11295
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.                                  // 11296
     * @returns {Function} Returns the callback.                                                                       // 11297
     * @example                                                                                                        // 11298
     *                                                                                                                 // 11299
     * var users = [                                                                                                   // 11300
     *   { 'user': 'barney', 'age': 36 },                                                                              // 11301
     *   { 'user': 'fred',   'age': 40 }                                                                               // 11302
     * ];                                                                                                              // 11303
     *                                                                                                                 // 11304
     * // wrap to create custom callback shorthands                                                                    // 11305
     * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {                                             // 11306
     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);                                                                // 11307
     *   if (!match) {                                                                                                 // 11308
     *     return callback(func, thisArg);                                                                             // 11309
     *   }                                                                                                             // 11310
     *   return function(object) {                                                                                     // 11311
     *     return match[2] == 'gt'                                                                                     // 11312
     *       ? object[match[1]] > match[3]                                                                             // 11313
     *       : object[match[1]] < match[3];                                                                            // 11314
     *   };                                                                                                            // 11315
     * });                                                                                                             // 11316
     *                                                                                                                 // 11317
     * _.filter(users, 'age__gt36');                                                                                   // 11318
     * // => [{ 'user': 'fred', 'age': 40 }]                                                                           // 11319
     */                                                                                                                // 11320
    function callback(func, thisArg, guard) {                                                                          // 11321
      if (guard && isIterateeCall(func, thisArg, guard)) {                                                             // 11322
        thisArg = undefined;                                                                                           // 11323
      }                                                                                                                // 11324
      return isObjectLike(func)                                                                                        // 11325
        ? matches(func)                                                                                                // 11326
        : baseCallback(func, thisArg);                                                                                 // 11327
    }                                                                                                                  // 11328
                                                                                                                       // 11329
    /**                                                                                                                // 11330
     * Creates a function that returns `value`.                                                                        // 11331
     *                                                                                                                 // 11332
     * @static                                                                                                         // 11333
     * @memberOf _                                                                                                     // 11334
     * @category Utility                                                                                               // 11335
     * @param {*} value The value to return from the new function.                                                     // 11336
     * @returns {Function} Returns the new function.                                                                   // 11337
     * @example                                                                                                        // 11338
     *                                                                                                                 // 11339
     * var object = { 'user': 'fred' };                                                                                // 11340
     * var getter = _.constant(object);                                                                                // 11341
     *                                                                                                                 // 11342
     * getter() === object;                                                                                            // 11343
     * // => true                                                                                                      // 11344
     */                                                                                                                // 11345
    function constant(value) {                                                                                         // 11346
      return function() {                                                                                              // 11347
        return value;                                                                                                  // 11348
      };                                                                                                               // 11349
    }                                                                                                                  // 11350
                                                                                                                       // 11351
    /**                                                                                                                // 11352
     * This method returns the first argument provided to it.                                                          // 11353
     *                                                                                                                 // 11354
     * @static                                                                                                         // 11355
     * @memberOf _                                                                                                     // 11356
     * @category Utility                                                                                               // 11357
     * @param {*} value Any value.                                                                                     // 11358
     * @returns {*} Returns `value`.                                                                                   // 11359
     * @example                                                                                                        // 11360
     *                                                                                                                 // 11361
     * var object = { 'user': 'fred' };                                                                                // 11362
     *                                                                                                                 // 11363
     * _.identity(object) === object;                                                                                  // 11364
     * // => true                                                                                                      // 11365
     */                                                                                                                // 11366
    function identity(value) {                                                                                         // 11367
      return value;                                                                                                    // 11368
    }                                                                                                                  // 11369
                                                                                                                       // 11370
    /**                                                                                                                // 11371
     * Creates a function that performs a deep comparison between a given object                                       // 11372
     * and `source`, returning `true` if the given object has equivalent property                                      // 11373
     * values, else `false`.                                                                                           // 11374
     *                                                                                                                 // 11375
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,                                      // 11376
     * numbers, `Object` objects, regexes, and strings. Objects are compared by                                        // 11377
     * their own, not inherited, enumerable properties. For comparing a single                                         // 11378
     * own or inherited property value see `_.matchesProperty`.                                                        // 11379
     *                                                                                                                 // 11380
     * @static                                                                                                         // 11381
     * @memberOf _                                                                                                     // 11382
     * @category Utility                                                                                               // 11383
     * @param {Object} source The object of property values to match.                                                  // 11384
     * @returns {Function} Returns the new function.                                                                   // 11385
     * @example                                                                                                        // 11386
     *                                                                                                                 // 11387
     * var users = [                                                                                                   // 11388
     *   { 'user': 'barney', 'age': 36, 'active': true },                                                              // 11389
     *   { 'user': 'fred',   'age': 40, 'active': false }                                                              // 11390
     * ];                                                                                                              // 11391
     *                                                                                                                 // 11392
     * _.filter(users, _.matches({ 'age': 40, 'active': false }));                                                     // 11393
     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]                                                          // 11394
     */                                                                                                                // 11395
    function matches(source) {                                                                                         // 11396
      return baseMatches(baseClone(source, true));                                                                     // 11397
    }                                                                                                                  // 11398
                                                                                                                       // 11399
    /**                                                                                                                // 11400
     * Creates a function that compares the property value of `path` on a given                                        // 11401
     * object to `value`.                                                                                              // 11402
     *                                                                                                                 // 11403
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,                                      // 11404
     * numbers, `Object` objects, regexes, and strings. Objects are compared by                                        // 11405
     * their own, not inherited, enumerable properties.                                                                // 11406
     *                                                                                                                 // 11407
     * @static                                                                                                         // 11408
     * @memberOf _                                                                                                     // 11409
     * @category Utility                                                                                               // 11410
     * @param {Array|string} path The path of the property to get.                                                     // 11411
     * @param {*} srcValue The value to match.                                                                         // 11412
     * @returns {Function} Returns the new function.                                                                   // 11413
     * @example                                                                                                        // 11414
     *                                                                                                                 // 11415
     * var users = [                                                                                                   // 11416
     *   { 'user': 'barney' },                                                                                         // 11417
     *   { 'user': 'fred' }                                                                                            // 11418
     * ];                                                                                                              // 11419
     *                                                                                                                 // 11420
     * _.find(users, _.matchesProperty('user', 'fred'));                                                               // 11421
     * // => { 'user': 'fred' }                                                                                        // 11422
     */                                                                                                                // 11423
    function matchesProperty(path, srcValue) {                                                                         // 11424
      return baseMatchesProperty(path, baseClone(srcValue, true));                                                     // 11425
    }                                                                                                                  // 11426
                                                                                                                       // 11427
    /**                                                                                                                // 11428
     * Creates a function that invokes the method at `path` on a given object.                                         // 11429
     * Any additional arguments are provided to the invoked method.                                                    // 11430
     *                                                                                                                 // 11431
     * @static                                                                                                         // 11432
     * @memberOf _                                                                                                     // 11433
     * @category Utility                                                                                               // 11434
     * @param {Array|string} path The path of the method to invoke.                                                    // 11435
     * @param {...*} [args] The arguments to invoke the method with.                                                   // 11436
     * @returns {Function} Returns the new function.                                                                   // 11437
     * @example                                                                                                        // 11438
     *                                                                                                                 // 11439
     * var objects = [                                                                                                 // 11440
     *   { 'a': { 'b': { 'c': _.constant(2) } } },                                                                     // 11441
     *   { 'a': { 'b': { 'c': _.constant(1) } } }                                                                      // 11442
     * ];                                                                                                              // 11443
     *                                                                                                                 // 11444
     * _.map(objects, _.method('a.b.c'));                                                                              // 11445
     * // => [2, 1]                                                                                                    // 11446
     *                                                                                                                 // 11447
     * _.invoke(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');                                                // 11448
     * // => [1, 2]                                                                                                    // 11449
     */                                                                                                                // 11450
    var method = restParam(function(path, args) {                                                                      // 11451
      return function(object) {                                                                                        // 11452
        return invokePath(object, path, args);                                                                         // 11453
      };                                                                                                               // 11454
    });                                                                                                                // 11455
                                                                                                                       // 11456
    /**                                                                                                                // 11457
     * The opposite of `_.method`; this method creates a function that invokes                                         // 11458
     * the method at a given path on `object`. Any additional arguments are                                            // 11459
     * provided to the invoked method.                                                                                 // 11460
     *                                                                                                                 // 11461
     * @static                                                                                                         // 11462
     * @memberOf _                                                                                                     // 11463
     * @category Utility                                                                                               // 11464
     * @param {Object} object The object to query.                                                                     // 11465
     * @param {...*} [args] The arguments to invoke the method with.                                                   // 11466
     * @returns {Function} Returns the new function.                                                                   // 11467
     * @example                                                                                                        // 11468
     *                                                                                                                 // 11469
     * var array = _.times(3, _.constant),                                                                             // 11470
     *     object = { 'a': array, 'b': array, 'c': array };                                                            // 11471
     *                                                                                                                 // 11472
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));                                                                    // 11473
     * // => [2, 0]                                                                                                    // 11474
     *                                                                                                                 // 11475
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));                                                            // 11476
     * // => [2, 0]                                                                                                    // 11477
     */                                                                                                                // 11478
    var methodOf = restParam(function(object, args) {                                                                  // 11479
      return function(path) {                                                                                          // 11480
        return invokePath(object, path, args);                                                                         // 11481
      };                                                                                                               // 11482
    });                                                                                                                // 11483
                                                                                                                       // 11484
    /**                                                                                                                // 11485
     * Adds all own enumerable function properties of a source object to the                                           // 11486
     * destination object. If `object` is a function then methods are added to                                         // 11487
     * its prototype as well.                                                                                          // 11488
     *                                                                                                                 // 11489
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to                                        // 11490
     * avoid conflicts caused by modifying the original.                                                               // 11491
     *                                                                                                                 // 11492
     * @static                                                                                                         // 11493
     * @memberOf _                                                                                                     // 11494
     * @category Utility                                                                                               // 11495
     * @param {Function|Object} [object=lodash] The destination object.                                                // 11496
     * @param {Object} source The object of functions to add.                                                          // 11497
     * @param {Object} [options] The options object.                                                                   // 11498
     * @param {boolean} [options.chain=true] Specify whether the functions added                                       // 11499
     *  are chainable.                                                                                                 // 11500
     * @returns {Function|Object} Returns `object`.                                                                    // 11501
     * @example                                                                                                        // 11502
     *                                                                                                                 // 11503
     * function vowels(string) {                                                                                       // 11504
     *   return _.filter(string, function(v) {                                                                         // 11505
     *     return /[aeiou]/i.test(v);                                                                                  // 11506
     *   });                                                                                                           // 11507
     * }                                                                                                               // 11508
     *                                                                                                                 // 11509
     * _.mixin({ 'vowels': vowels });                                                                                  // 11510
     * _.vowels('fred');                                                                                               // 11511
     * // => ['e']                                                                                                     // 11512
     *                                                                                                                 // 11513
     * _('fred').vowels().value();                                                                                     // 11514
     * // => ['e']                                                                                                     // 11515
     *                                                                                                                 // 11516
     * _.mixin({ 'vowels': vowels }, { 'chain': false });                                                              // 11517
     * _('fred').vowels();                                                                                             // 11518
     * // => ['e']                                                                                                     // 11519
     */                                                                                                                // 11520
    function mixin(object, source, options) {                                                                          // 11521
      if (options == null) {                                                                                           // 11522
        var isObj = isObject(source),                                                                                  // 11523
            props = isObj ? keys(source) : undefined,                                                                  // 11524
            methodNames = (props && props.length) ? baseFunctions(source, props) : undefined;                          // 11525
                                                                                                                       // 11526
        if (!(methodNames ? methodNames.length : isObj)) {                                                             // 11527
          methodNames = false;                                                                                         // 11528
          options = source;                                                                                            // 11529
          source = object;                                                                                             // 11530
          object = this;                                                                                               // 11531
        }                                                                                                              // 11532
      }                                                                                                                // 11533
      if (!methodNames) {                                                                                              // 11534
        methodNames = baseFunctions(source, keys(source));                                                             // 11535
      }                                                                                                                // 11536
      var chain = true,                                                                                                // 11537
          index = -1,                                                                                                  // 11538
          isFunc = isFunction(object),                                                                                 // 11539
          length = methodNames.length;                                                                                 // 11540
                                                                                                                       // 11541
      if (options === false) {                                                                                         // 11542
        chain = false;                                                                                                 // 11543
      } else if (isObject(options) && 'chain' in options) {                                                            // 11544
        chain = options.chain;                                                                                         // 11545
      }                                                                                                                // 11546
      while (++index < length) {                                                                                       // 11547
        var methodName = methodNames[index],                                                                           // 11548
            func = source[methodName];                                                                                 // 11549
                                                                                                                       // 11550
        object[methodName] = func;                                                                                     // 11551
        if (isFunc) {                                                                                                  // 11552
          object.prototype[methodName] = (function(func) {                                                             // 11553
            return function() {                                                                                        // 11554
              var chainAll = this.__chain__;                                                                           // 11555
              if (chain || chainAll) {                                                                                 // 11556
                var result = object(this.__wrapped__),                                                                 // 11557
                    actions = result.__actions__ = arrayCopy(this.__actions__);                                        // 11558
                                                                                                                       // 11559
                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });                                  // 11560
                result.__chain__ = chainAll;                                                                           // 11561
                return result;                                                                                         // 11562
              }                                                                                                        // 11563
              return func.apply(object, arrayPush([this.value()], arguments));                                         // 11564
            };                                                                                                         // 11565
          }(func));                                                                                                    // 11566
        }                                                                                                              // 11567
      }                                                                                                                // 11568
      return object;                                                                                                   // 11569
    }                                                                                                                  // 11570
                                                                                                                       // 11571
    /**                                                                                                                // 11572
     * Reverts the `_` variable to its previous value and returns a reference to                                       // 11573
     * the `lodash` function.                                                                                          // 11574
     *                                                                                                                 // 11575
     * @static                                                                                                         // 11576
     * @memberOf _                                                                                                     // 11577
     * @category Utility                                                                                               // 11578
     * @returns {Function} Returns the `lodash` function.                                                              // 11579
     * @example                                                                                                        // 11580
     *                                                                                                                 // 11581
     * var lodash = _.noConflict();                                                                                    // 11582
     */                                                                                                                // 11583
    function noConflict() {                                                                                            // 11584
      root._ = oldDash;                                                                                                // 11585
      return this;                                                                                                     // 11586
    }                                                                                                                  // 11587
                                                                                                                       // 11588
    /**                                                                                                                // 11589
     * A no-operation function that returns `undefined` regardless of the                                              // 11590
     * arguments it receives.                                                                                          // 11591
     *                                                                                                                 // 11592
     * @static                                                                                                         // 11593
     * @memberOf _                                                                                                     // 11594
     * @category Utility                                                                                               // 11595
     * @example                                                                                                        // 11596
     *                                                                                                                 // 11597
     * var object = { 'user': 'fred' };                                                                                // 11598
     *                                                                                                                 // 11599
     * _.noop(object) === undefined;                                                                                   // 11600
     * // => true                                                                                                      // 11601
     */                                                                                                                // 11602
    function noop() {                                                                                                  // 11603
      // No operation performed.                                                                                       // 11604
    }                                                                                                                  // 11605
                                                                                                                       // 11606
    /**                                                                                                                // 11607
     * Creates a function that returns the property value at `path` on a                                               // 11608
     * given object.                                                                                                   // 11609
     *                                                                                                                 // 11610
     * @static                                                                                                         // 11611
     * @memberOf _                                                                                                     // 11612
     * @category Utility                                                                                               // 11613
     * @param {Array|string} path The path of the property to get.                                                     // 11614
     * @returns {Function} Returns the new function.                                                                   // 11615
     * @example                                                                                                        // 11616
     *                                                                                                                 // 11617
     * var objects = [                                                                                                 // 11618
     *   { 'a': { 'b': { 'c': 2 } } },                                                                                 // 11619
     *   { 'a': { 'b': { 'c': 1 } } }                                                                                  // 11620
     * ];                                                                                                              // 11621
     *                                                                                                                 // 11622
     * _.map(objects, _.property('a.b.c'));                                                                            // 11623
     * // => [2, 1]                                                                                                    // 11624
     *                                                                                                                 // 11625
     * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');                                               // 11626
     * // => [1, 2]                                                                                                    // 11627
     */                                                                                                                // 11628
    function property(path) {                                                                                          // 11629
      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);                                                // 11630
    }                                                                                                                  // 11631
                                                                                                                       // 11632
    /**                                                                                                                // 11633
     * The opposite of `_.property`; this method creates a function that returns                                       // 11634
     * the property value at a given path on `object`.                                                                 // 11635
     *                                                                                                                 // 11636
     * @static                                                                                                         // 11637
     * @memberOf _                                                                                                     // 11638
     * @category Utility                                                                                               // 11639
     * @param {Object} object The object to query.                                                                     // 11640
     * @returns {Function} Returns the new function.                                                                   // 11641
     * @example                                                                                                        // 11642
     *                                                                                                                 // 11643
     * var array = [0, 1, 2],                                                                                          // 11644
     *     object = { 'a': array, 'b': array, 'c': array };                                                            // 11645
     *                                                                                                                 // 11646
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));                                                                  // 11647
     * // => [2, 0]                                                                                                    // 11648
     *                                                                                                                 // 11649
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));                                                          // 11650
     * // => [2, 0]                                                                                                    // 11651
     */                                                                                                                // 11652
    function propertyOf(object) {                                                                                      // 11653
      return function(path) {                                                                                          // 11654
        return baseGet(object, toPath(path), (path + ''));                                                             // 11655
      };                                                                                                               // 11656
    }                                                                                                                  // 11657
                                                                                                                       // 11658
    /**                                                                                                                // 11659
     * Creates an array of numbers (positive and/or negative) progressing from                                         // 11660
     * `start` up to, but not including, `end`. If `end` is not specified it's                                         // 11661
     * set to `start` with `start` then set to `0`. If `end` is less than `start`                                      // 11662
     * a zero-length range is created unless a negative `step` is specified.                                           // 11663
     *                                                                                                                 // 11664
     * @static                                                                                                         // 11665
     * @memberOf _                                                                                                     // 11666
     * @category Utility                                                                                               // 11667
     * @param {number} [start=0] The start of the range.                                                               // 11668
     * @param {number} end The end of the range.                                                                       // 11669
     * @param {number} [step=1] The value to increment or decrement by.                                                // 11670
     * @returns {Array} Returns the new array of numbers.                                                              // 11671
     * @example                                                                                                        // 11672
     *                                                                                                                 // 11673
     * _.range(4);                                                                                                     // 11674
     * // => [0, 1, 2, 3]                                                                                              // 11675
     *                                                                                                                 // 11676
     * _.range(1, 5);                                                                                                  // 11677
     * // => [1, 2, 3, 4]                                                                                              // 11678
     *                                                                                                                 // 11679
     * _.range(0, 20, 5);                                                                                              // 11680
     * // => [0, 5, 10, 15]                                                                                            // 11681
     *                                                                                                                 // 11682
     * _.range(0, -4, -1);                                                                                             // 11683
     * // => [0, -1, -2, -3]                                                                                           // 11684
     *                                                                                                                 // 11685
     * _.range(1, 4, 0);                                                                                               // 11686
     * // => [1, 1, 1]                                                                                                 // 11687
     *                                                                                                                 // 11688
     * _.range(0);                                                                                                     // 11689
     * // => []                                                                                                        // 11690
     */                                                                                                                // 11691
    function range(start, end, step) {                                                                                 // 11692
      if (step && isIterateeCall(start, end, step)) {                                                                  // 11693
        end = step = undefined;                                                                                        // 11694
      }                                                                                                                // 11695
      start = +start || 0;                                                                                             // 11696
      step = step == null ? 1 : (+step || 0);                                                                          // 11697
                                                                                                                       // 11698
      if (end == null) {                                                                                               // 11699
        end = start;                                                                                                   // 11700
        start = 0;                                                                                                     // 11701
      } else {                                                                                                         // 11702
        end = +end || 0;                                                                                               // 11703
      }                                                                                                                // 11704
      // Use `Array(length)` so engines like Chakra and V8 avoid slower modes.                                         // 11705
      // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.                                                   // 11706
      var index = -1,                                                                                                  // 11707
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),                                              // 11708
          result = Array(length);                                                                                      // 11709
                                                                                                                       // 11710
      while (++index < length) {                                                                                       // 11711
        result[index] = start;                                                                                         // 11712
        start += step;                                                                                                 // 11713
      }                                                                                                                // 11714
      return result;                                                                                                   // 11715
    }                                                                                                                  // 11716
                                                                                                                       // 11717
    /**                                                                                                                // 11718
     * Invokes the iteratee function `n` times, returning an array of the results                                      // 11719
     * of each invocation. The `iteratee` is bound to `thisArg` and invoked with                                       // 11720
     * one argument; (index).                                                                                          // 11721
     *                                                                                                                 // 11722
     * @static                                                                                                         // 11723
     * @memberOf _                                                                                                     // 11724
     * @category Utility                                                                                               // 11725
     * @param {number} n The number of times to invoke `iteratee`.                                                     // 11726
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                     // 11727
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 11728
     * @returns {Array} Returns the array of results.                                                                  // 11729
     * @example                                                                                                        // 11730
     *                                                                                                                 // 11731
     * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));                                                   // 11732
     * // => [3, 6, 4]                                                                                                 // 11733
     *                                                                                                                 // 11734
     * _.times(3, function(n) {                                                                                        // 11735
     *   mage.castSpell(n);                                                                                            // 11736
     * });                                                                                                             // 11737
     * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2`                                     // 11738
     *                                                                                                                 // 11739
     * _.times(3, function(n) {                                                                                        // 11740
     *   this.cast(n);                                                                                                 // 11741
     * }, mage);                                                                                                       // 11742
     * // => also invokes `mage.castSpell(n)` three times                                                              // 11743
     */                                                                                                                // 11744
    function times(n, iteratee, thisArg) {                                                                             // 11745
      n = nativeFloor(n);                                                                                              // 11746
                                                                                                                       // 11747
      // Exit early to avoid a JSC JIT bug in Safari 8                                                                 // 11748
      // where `Array(0)` is treated as `Array(1)`.                                                                    // 11749
      if (n < 1 || !nativeIsFinite(n)) {                                                                               // 11750
        return [];                                                                                                     // 11751
      }                                                                                                                // 11752
      var index = -1,                                                                                                  // 11753
          result = Array(nativeMin(n, MAX_ARRAY_LENGTH));                                                              // 11754
                                                                                                                       // 11755
      iteratee = bindCallback(iteratee, thisArg, 1);                                                                   // 11756
      while (++index < n) {                                                                                            // 11757
        if (index < MAX_ARRAY_LENGTH) {                                                                                // 11758
          result[index] = iteratee(index);                                                                             // 11759
        } else {                                                                                                       // 11760
          iteratee(index);                                                                                             // 11761
        }                                                                                                              // 11762
      }                                                                                                                // 11763
      return result;                                                                                                   // 11764
    }                                                                                                                  // 11765
                                                                                                                       // 11766
    /**                                                                                                                // 11767
     * Generates a unique ID. If `prefix` is provided the ID is appended to it.                                        // 11768
     *                                                                                                                 // 11769
     * @static                                                                                                         // 11770
     * @memberOf _                                                                                                     // 11771
     * @category Utility                                                                                               // 11772
     * @param {string} [prefix] The value to prefix the ID with.                                                       // 11773
     * @returns {string} Returns the unique ID.                                                                        // 11774
     * @example                                                                                                        // 11775
     *                                                                                                                 // 11776
     * _.uniqueId('contact_');                                                                                         // 11777
     * // => 'contact_104'                                                                                             // 11778
     *                                                                                                                 // 11779
     * _.uniqueId();                                                                                                   // 11780
     * // => '105'                                                                                                     // 11781
     */                                                                                                                // 11782
    function uniqueId(prefix) {                                                                                        // 11783
      var id = ++idCounter;                                                                                            // 11784
      return baseToString(prefix) + id;                                                                                // 11785
    }                                                                                                                  // 11786
                                                                                                                       // 11787
    /*------------------------------------------------------------------------*/                                       // 11788
                                                                                                                       // 11789
    /**                                                                                                                // 11790
     * Adds two numbers.                                                                                               // 11791
     *                                                                                                                 // 11792
     * @static                                                                                                         // 11793
     * @memberOf _                                                                                                     // 11794
     * @category Math                                                                                                  // 11795
     * @param {number} augend The first number to add.                                                                 // 11796
     * @param {number} addend The second number to add.                                                                // 11797
     * @returns {number} Returns the sum.                                                                              // 11798
     * @example                                                                                                        // 11799
     *                                                                                                                 // 11800
     * _.add(6, 4);                                                                                                    // 11801
     * // => 10                                                                                                        // 11802
     */                                                                                                                // 11803
    function add(augend, addend) {                                                                                     // 11804
      return (+augend || 0) + (+addend || 0);                                                                          // 11805
    }                                                                                                                  // 11806
                                                                                                                       // 11807
    /**                                                                                                                // 11808
     * Calculates `n` rounded up to `precision`.                                                                       // 11809
     *                                                                                                                 // 11810
     * @static                                                                                                         // 11811
     * @memberOf _                                                                                                     // 11812
     * @category Math                                                                                                  // 11813
     * @param {number} n The number to round up.                                                                       // 11814
     * @param {number} [precision=0] The precision to round up to.                                                     // 11815
     * @returns {number} Returns the rounded up number.                                                                // 11816
     * @example                                                                                                        // 11817
     *                                                                                                                 // 11818
     * _.ceil(4.006);                                                                                                  // 11819
     * // => 5                                                                                                         // 11820
     *                                                                                                                 // 11821
     * _.ceil(6.004, 2);                                                                                               // 11822
     * // => 6.01                                                                                                      // 11823
     *                                                                                                                 // 11824
     * _.ceil(6040, -2);                                                                                               // 11825
     * // => 6100                                                                                                      // 11826
     */                                                                                                                // 11827
    var ceil = createRound('ceil');                                                                                    // 11828
                                                                                                                       // 11829
    /**                                                                                                                // 11830
     * Calculates `n` rounded down to `precision`.                                                                     // 11831
     *                                                                                                                 // 11832
     * @static                                                                                                         // 11833
     * @memberOf _                                                                                                     // 11834
     * @category Math                                                                                                  // 11835
     * @param {number} n The number to round down.                                                                     // 11836
     * @param {number} [precision=0] The precision to round down to.                                                   // 11837
     * @returns {number} Returns the rounded down number.                                                              // 11838
     * @example                                                                                                        // 11839
     *                                                                                                                 // 11840
     * _.floor(4.006);                                                                                                 // 11841
     * // => 4                                                                                                         // 11842
     *                                                                                                                 // 11843
     * _.floor(0.046, 2);                                                                                              // 11844
     * // => 0.04                                                                                                      // 11845
     *                                                                                                                 // 11846
     * _.floor(4060, -2);                                                                                              // 11847
     * // => 4000                                                                                                      // 11848
     */                                                                                                                // 11849
    var floor = createRound('floor');                                                                                  // 11850
                                                                                                                       // 11851
    /**                                                                                                                // 11852
     * Gets the maximum value of `collection`. If `collection` is empty or falsey                                      // 11853
     * `-Infinity` is returned. If an iteratee function is provided it's invoked                                       // 11854
     * for each value in `collection` to generate the criterion by which the value                                     // 11855
     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three                                          // 11856
     * arguments: (value, index, collection).                                                                          // 11857
     *                                                                                                                 // 11858
     * If a property name is provided for `iteratee` the created `_.property`                                          // 11859
     * style callback returns the property value of the given element.                                                 // 11860
     *                                                                                                                 // 11861
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 11862
     * style callback returns `true` for elements that have a matching property                                        // 11863
     * value, else `false`.                                                                                            // 11864
     *                                                                                                                 // 11865
     * If an object is provided for `iteratee` the created `_.matches` style                                           // 11866
     * callback returns `true` for elements that have the properties of the given                                      // 11867
     * object, else `false`.                                                                                           // 11868
     *                                                                                                                 // 11869
     * @static                                                                                                         // 11870
     * @memberOf _                                                                                                     // 11871
     * @category Math                                                                                                  // 11872
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 11873
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.                                  // 11874
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 11875
     * @returns {*} Returns the maximum value.                                                                         // 11876
     * @example                                                                                                        // 11877
     *                                                                                                                 // 11878
     * _.max([4, 2, 8, 6]);                                                                                            // 11879
     * // => 8                                                                                                         // 11880
     *                                                                                                                 // 11881
     * _.max([]);                                                                                                      // 11882
     * // => -Infinity                                                                                                 // 11883
     *                                                                                                                 // 11884
     * var users = [                                                                                                   // 11885
     *   { 'user': 'barney', 'age': 36 },                                                                              // 11886
     *   { 'user': 'fred',   'age': 40 }                                                                               // 11887
     * ];                                                                                                              // 11888
     *                                                                                                                 // 11889
     * _.max(users, function(chr) {                                                                                    // 11890
     *   return chr.age;                                                                                               // 11891
     * });                                                                                                             // 11892
     * // => { 'user': 'fred', 'age': 40 }                                                                             // 11893
     *                                                                                                                 // 11894
     * // using the `_.property` callback shorthand                                                                    // 11895
     * _.max(users, 'age');                                                                                            // 11896
     * // => { 'user': 'fred', 'age': 40 }                                                                             // 11897
     */                                                                                                                // 11898
    var max = createExtremum(gt, NEGATIVE_INFINITY);                                                                   // 11899
                                                                                                                       // 11900
    /**                                                                                                                // 11901
     * Gets the minimum value of `collection`. If `collection` is empty or falsey                                      // 11902
     * `Infinity` is returned. If an iteratee function is provided it's invoked                                        // 11903
     * for each value in `collection` to generate the criterion by which the value                                     // 11904
     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three                                          // 11905
     * arguments: (value, index, collection).                                                                          // 11906
     *                                                                                                                 // 11907
     * If a property name is provided for `iteratee` the created `_.property`                                          // 11908
     * style callback returns the property value of the given element.                                                 // 11909
     *                                                                                                                 // 11910
     * If a value is also provided for `thisArg` the created `_.matchesProperty`                                       // 11911
     * style callback returns `true` for elements that have a matching property                                        // 11912
     * value, else `false`.                                                                                            // 11913
     *                                                                                                                 // 11914
     * If an object is provided for `iteratee` the created `_.matches` style                                           // 11915
     * callback returns `true` for elements that have the properties of the given                                      // 11916
     * object, else `false`.                                                                                           // 11917
     *                                                                                                                 // 11918
     * @static                                                                                                         // 11919
     * @memberOf _                                                                                                     // 11920
     * @category Math                                                                                                  // 11921
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 11922
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.                                  // 11923
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 11924
     * @returns {*} Returns the minimum value.                                                                         // 11925
     * @example                                                                                                        // 11926
     *                                                                                                                 // 11927
     * _.min([4, 2, 8, 6]);                                                                                            // 11928
     * // => 2                                                                                                         // 11929
     *                                                                                                                 // 11930
     * _.min([]);                                                                                                      // 11931
     * // => Infinity                                                                                                  // 11932
     *                                                                                                                 // 11933
     * var users = [                                                                                                   // 11934
     *   { 'user': 'barney', 'age': 36 },                                                                              // 11935
     *   { 'user': 'fred',   'age': 40 }                                                                               // 11936
     * ];                                                                                                              // 11937
     *                                                                                                                 // 11938
     * _.min(users, function(chr) {                                                                                    // 11939
     *   return chr.age;                                                                                               // 11940
     * });                                                                                                             // 11941
     * // => { 'user': 'barney', 'age': 36 }                                                                           // 11942
     *                                                                                                                 // 11943
     * // using the `_.property` callback shorthand                                                                    // 11944
     * _.min(users, 'age');                                                                                            // 11945
     * // => { 'user': 'barney', 'age': 36 }                                                                           // 11946
     */                                                                                                                // 11947
    var min = createExtremum(lt, POSITIVE_INFINITY);                                                                   // 11948
                                                                                                                       // 11949
    /**                                                                                                                // 11950
     * Calculates `n` rounded to `precision`.                                                                          // 11951
     *                                                                                                                 // 11952
     * @static                                                                                                         // 11953
     * @memberOf _                                                                                                     // 11954
     * @category Math                                                                                                  // 11955
     * @param {number} n The number to round.                                                                          // 11956
     * @param {number} [precision=0] The precision to round to.                                                        // 11957
     * @returns {number} Returns the rounded number.                                                                   // 11958
     * @example                                                                                                        // 11959
     *                                                                                                                 // 11960
     * _.round(4.006);                                                                                                 // 11961
     * // => 4                                                                                                         // 11962
     *                                                                                                                 // 11963
     * _.round(4.006, 2);                                                                                              // 11964
     * // => 4.01                                                                                                      // 11965
     *                                                                                                                 // 11966
     * _.round(4060, -2);                                                                                              // 11967
     * // => 4100                                                                                                      // 11968
     */                                                                                                                // 11969
    var round = createRound('round');                                                                                  // 11970
                                                                                                                       // 11971
    /**                                                                                                                // 11972
     * Gets the sum of the values in `collection`.                                                                     // 11973
     *                                                                                                                 // 11974
     * @static                                                                                                         // 11975
     * @memberOf _                                                                                                     // 11976
     * @category Math                                                                                                  // 11977
     * @param {Array|Object|string} collection The collection to iterate over.                                         // 11978
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.                                  // 11979
     * @param {*} [thisArg] The `this` binding of `iteratee`.                                                          // 11980
     * @returns {number} Returns the sum.                                                                              // 11981
     * @example                                                                                                        // 11982
     *                                                                                                                 // 11983
     * _.sum([4, 6]);                                                                                                  // 11984
     * // => 10                                                                                                        // 11985
     *                                                                                                                 // 11986
     * _.sum({ 'a': 4, 'b': 6 });                                                                                      // 11987
     * // => 10                                                                                                        // 11988
     *                                                                                                                 // 11989
     * var objects = [                                                                                                 // 11990
     *   { 'n': 4 },                                                                                                   // 11991
     *   { 'n': 6 }                                                                                                    // 11992
     * ];                                                                                                              // 11993
     *                                                                                                                 // 11994
     * _.sum(objects, function(object) {                                                                               // 11995
     *   return object.n;                                                                                              // 11996
     * });                                                                                                             // 11997
     * // => 10                                                                                                        // 11998
     *                                                                                                                 // 11999
     * // using the `_.property` callback shorthand                                                                    // 12000
     * _.sum(objects, 'n');                                                                                            // 12001
     * // => 10                                                                                                        // 12002
     */                                                                                                                // 12003
    function sum(collection, iteratee, thisArg) {                                                                      // 12004
      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {                                                  // 12005
        iteratee = undefined;                                                                                          // 12006
      }                                                                                                                // 12007
      iteratee = getCallback(iteratee, thisArg, 3);                                                                    // 12008
      return iteratee.length == 1                                                                                      // 12009
        ? arraySum(isArray(collection) ? collection : toIterable(collection), iteratee)                                // 12010
        : baseSum(collection, iteratee);                                                                               // 12011
    }                                                                                                                  // 12012
                                                                                                                       // 12013
    /*------------------------------------------------------------------------*/                                       // 12014
                                                                                                                       // 12015
    // Ensure wrappers are instances of `baseLodash`.                                                                  // 12016
    lodash.prototype = baseLodash.prototype;                                                                           // 12017
                                                                                                                       // 12018
    LodashWrapper.prototype = baseCreate(baseLodash.prototype);                                                        // 12019
    LodashWrapper.prototype.constructor = LodashWrapper;                                                               // 12020
                                                                                                                       // 12021
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);                                                          // 12022
    LazyWrapper.prototype.constructor = LazyWrapper;                                                                   // 12023
                                                                                                                       // 12024
    // Add functions to the `Map` cache.                                                                               // 12025
    MapCache.prototype['delete'] = mapDelete;                                                                          // 12026
    MapCache.prototype.get = mapGet;                                                                                   // 12027
    MapCache.prototype.has = mapHas;                                                                                   // 12028
    MapCache.prototype.set = mapSet;                                                                                   // 12029
                                                                                                                       // 12030
    // Add functions to the `Set` cache.                                                                               // 12031
    SetCache.prototype.push = cachePush;                                                                               // 12032
                                                                                                                       // 12033
    // Assign cache to `_.memoize`.                                                                                    // 12034
    memoize.Cache = MapCache;                                                                                          // 12035
                                                                                                                       // 12036
    // Add functions that return wrapped values when chaining.                                                         // 12037
    lodash.after = after;                                                                                              // 12038
    lodash.ary = ary;                                                                                                  // 12039
    lodash.assign = assign;                                                                                            // 12040
    lodash.at = at;                                                                                                    // 12041
    lodash.before = before;                                                                                            // 12042
    lodash.bind = bind;                                                                                                // 12043
    lodash.bindAll = bindAll;                                                                                          // 12044
    lodash.bindKey = bindKey;                                                                                          // 12045
    lodash.callback = callback;                                                                                        // 12046
    lodash.chain = chain;                                                                                              // 12047
    lodash.chunk = chunk;                                                                                              // 12048
    lodash.compact = compact;                                                                                          // 12049
    lodash.constant = constant;                                                                                        // 12050
    lodash.countBy = countBy;                                                                                          // 12051
    lodash.create = create;                                                                                            // 12052
    lodash.curry = curry;                                                                                              // 12053
    lodash.curryRight = curryRight;                                                                                    // 12054
    lodash.debounce = debounce;                                                                                        // 12055
    lodash.defaults = defaults;                                                                                        // 12056
    lodash.defaultsDeep = defaultsDeep;                                                                                // 12057
    lodash.defer = defer;                                                                                              // 12058
    lodash.delay = delay;                                                                                              // 12059
    lodash.difference = difference;                                                                                    // 12060
    lodash.drop = drop;                                                                                                // 12061
    lodash.dropRight = dropRight;                                                                                      // 12062
    lodash.dropRightWhile = dropRightWhile;                                                                            // 12063
    lodash.dropWhile = dropWhile;                                                                                      // 12064
    lodash.fill = fill;                                                                                                // 12065
    lodash.filter = filter;                                                                                            // 12066
    lodash.flatten = flatten;                                                                                          // 12067
    lodash.flattenDeep = flattenDeep;                                                                                  // 12068
    lodash.flow = flow;                                                                                                // 12069
    lodash.flowRight = flowRight;                                                                                      // 12070
    lodash.forEach = forEach;                                                                                          // 12071
    lodash.forEachRight = forEachRight;                                                                                // 12072
    lodash.forIn = forIn;                                                                                              // 12073
    lodash.forInRight = forInRight;                                                                                    // 12074
    lodash.forOwn = forOwn;                                                                                            // 12075
    lodash.forOwnRight = forOwnRight;                                                                                  // 12076
    lodash.functions = functions;                                                                                      // 12077
    lodash.groupBy = groupBy;                                                                                          // 12078
    lodash.indexBy = indexBy;                                                                                          // 12079
    lodash.initial = initial;                                                                                          // 12080
    lodash.intersection = intersection;                                                                                // 12081
    lodash.invert = invert;                                                                                            // 12082
    lodash.invoke = invoke;                                                                                            // 12083
    lodash.keys = keys;                                                                                                // 12084
    lodash.keysIn = keysIn;                                                                                            // 12085
    lodash.map = map;                                                                                                  // 12086
    lodash.mapKeys = mapKeys;                                                                                          // 12087
    lodash.mapValues = mapValues;                                                                                      // 12088
    lodash.matches = matches;                                                                                          // 12089
    lodash.matchesProperty = matchesProperty;                                                                          // 12090
    lodash.memoize = memoize;                                                                                          // 12091
    lodash.merge = merge;                                                                                              // 12092
    lodash.method = method;                                                                                            // 12093
    lodash.methodOf = methodOf;                                                                                        // 12094
    lodash.mixin = mixin;                                                                                              // 12095
    lodash.modArgs = modArgs;                                                                                          // 12096
    lodash.negate = negate;                                                                                            // 12097
    lodash.omit = omit;                                                                                                // 12098
    lodash.once = once;                                                                                                // 12099
    lodash.pairs = pairs;                                                                                              // 12100
    lodash.partial = partial;                                                                                          // 12101
    lodash.partialRight = partialRight;                                                                                // 12102
    lodash.partition = partition;                                                                                      // 12103
    lodash.pick = pick;                                                                                                // 12104
    lodash.pluck = pluck;                                                                                              // 12105
    lodash.property = property;                                                                                        // 12106
    lodash.propertyOf = propertyOf;                                                                                    // 12107
    lodash.pull = pull;                                                                                                // 12108
    lodash.pullAt = pullAt;                                                                                            // 12109
    lodash.range = range;                                                                                              // 12110
    lodash.rearg = rearg;                                                                                              // 12111
    lodash.reject = reject;                                                                                            // 12112
    lodash.remove = remove;                                                                                            // 12113
    lodash.rest = rest;                                                                                                // 12114
    lodash.restParam = restParam;                                                                                      // 12115
    lodash.set = set;                                                                                                  // 12116
    lodash.shuffle = shuffle;                                                                                          // 12117
    lodash.slice = slice;                                                                                              // 12118
    lodash.sortBy = sortBy;                                                                                            // 12119
    lodash.sortByAll = sortByAll;                                                                                      // 12120
    lodash.sortByOrder = sortByOrder;                                                                                  // 12121
    lodash.spread = spread;                                                                                            // 12122
    lodash.take = take;                                                                                                // 12123
    lodash.takeRight = takeRight;                                                                                      // 12124
    lodash.takeRightWhile = takeRightWhile;                                                                            // 12125
    lodash.takeWhile = takeWhile;                                                                                      // 12126
    lodash.tap = tap;                                                                                                  // 12127
    lodash.throttle = throttle;                                                                                        // 12128
    lodash.thru = thru;                                                                                                // 12129
    lodash.times = times;                                                                                              // 12130
    lodash.toArray = toArray;                                                                                          // 12131
    lodash.toPlainObject = toPlainObject;                                                                              // 12132
    lodash.transform = transform;                                                                                      // 12133
    lodash.union = union;                                                                                              // 12134
    lodash.uniq = uniq;                                                                                                // 12135
    lodash.unzip = unzip;                                                                                              // 12136
    lodash.unzipWith = unzipWith;                                                                                      // 12137
    lodash.values = values;                                                                                            // 12138
    lodash.valuesIn = valuesIn;                                                                                        // 12139
    lodash.where = where;                                                                                              // 12140
    lodash.without = without;                                                                                          // 12141
    lodash.wrap = wrap;                                                                                                // 12142
    lodash.xor = xor;                                                                                                  // 12143
    lodash.zip = zip;                                                                                                  // 12144
    lodash.zipObject = zipObject;                                                                                      // 12145
    lodash.zipWith = zipWith;                                                                                          // 12146
                                                                                                                       // 12147
    // Add aliases.                                                                                                    // 12148
    lodash.backflow = flowRight;                                                                                       // 12149
    lodash.collect = map;                                                                                              // 12150
    lodash.compose = flowRight;                                                                                        // 12151
    lodash.each = forEach;                                                                                             // 12152
    lodash.eachRight = forEachRight;                                                                                   // 12153
    lodash.extend = assign;                                                                                            // 12154
    lodash.iteratee = callback;                                                                                        // 12155
    lodash.methods = functions;                                                                                        // 12156
    lodash.object = zipObject;                                                                                         // 12157
    lodash.select = filter;                                                                                            // 12158
    lodash.tail = rest;                                                                                                // 12159
    lodash.unique = uniq;                                                                                              // 12160
                                                                                                                       // 12161
    // Add functions to `lodash.prototype`.                                                                            // 12162
    mixin(lodash, lodash);                                                                                             // 12163
                                                                                                                       // 12164
    /*------------------------------------------------------------------------*/                                       // 12165
                                                                                                                       // 12166
    // Add functions that return unwrapped values when chaining.                                                       // 12167
    lodash.add = add;                                                                                                  // 12168
    lodash.attempt = attempt;                                                                                          // 12169
    lodash.camelCase = camelCase;                                                                                      // 12170
    lodash.capitalize = capitalize;                                                                                    // 12171
    lodash.ceil = ceil;                                                                                                // 12172
    lodash.clone = clone;                                                                                              // 12173
    lodash.cloneDeep = cloneDeep;                                                                                      // 12174
    lodash.deburr = deburr;                                                                                            // 12175
    lodash.endsWith = endsWith;                                                                                        // 12176
    lodash.escape = escape;                                                                                            // 12177
    lodash.escapeRegExp = escapeRegExp;                                                                                // 12178
    lodash.every = every;                                                                                              // 12179
    lodash.find = find;                                                                                                // 12180
    lodash.findIndex = findIndex;                                                                                      // 12181
    lodash.findKey = findKey;                                                                                          // 12182
    lodash.findLast = findLast;                                                                                        // 12183
    lodash.findLastIndex = findLastIndex;                                                                              // 12184
    lodash.findLastKey = findLastKey;                                                                                  // 12185
    lodash.findWhere = findWhere;                                                                                      // 12186
    lodash.first = first;                                                                                              // 12187
    lodash.floor = floor;                                                                                              // 12188
    lodash.get = get;                                                                                                  // 12189
    lodash.gt = gt;                                                                                                    // 12190
    lodash.gte = gte;                                                                                                  // 12191
    lodash.has = has;                                                                                                  // 12192
    lodash.identity = identity;                                                                                        // 12193
    lodash.includes = includes;                                                                                        // 12194
    lodash.indexOf = indexOf;                                                                                          // 12195
    lodash.inRange = inRange;                                                                                          // 12196
    lodash.isArguments = isArguments;                                                                                  // 12197
    lodash.isArray = isArray;                                                                                          // 12198
    lodash.isBoolean = isBoolean;                                                                                      // 12199
    lodash.isDate = isDate;                                                                                            // 12200
    lodash.isElement = isElement;                                                                                      // 12201
    lodash.isEmpty = isEmpty;                                                                                          // 12202
    lodash.isEqual = isEqual;                                                                                          // 12203
    lodash.isError = isError;                                                                                          // 12204
    lodash.isFinite = isFinite;                                                                                        // 12205
    lodash.isFunction = isFunction;                                                                                    // 12206
    lodash.isMatch = isMatch;                                                                                          // 12207
    lodash.isNaN = isNaN;                                                                                              // 12208
    lodash.isNative = isNative;                                                                                        // 12209
    lodash.isNull = isNull;                                                                                            // 12210
    lodash.isNumber = isNumber;                                                                                        // 12211
    lodash.isObject = isObject;                                                                                        // 12212
    lodash.isPlainObject = isPlainObject;                                                                              // 12213
    lodash.isRegExp = isRegExp;                                                                                        // 12214
    lodash.isString = isString;                                                                                        // 12215
    lodash.isTypedArray = isTypedArray;                                                                                // 12216
    lodash.isUndefined = isUndefined;                                                                                  // 12217
    lodash.kebabCase = kebabCase;                                                                                      // 12218
    lodash.last = last;                                                                                                // 12219
    lodash.lastIndexOf = lastIndexOf;                                                                                  // 12220
    lodash.lt = lt;                                                                                                    // 12221
    lodash.lte = lte;                                                                                                  // 12222
    lodash.max = max;                                                                                                  // 12223
    lodash.min = min;                                                                                                  // 12224
    lodash.noConflict = noConflict;                                                                                    // 12225
    lodash.noop = noop;                                                                                                // 12226
    lodash.now = now;                                                                                                  // 12227
    lodash.pad = pad;                                                                                                  // 12228
    lodash.padLeft = padLeft;                                                                                          // 12229
    lodash.padRight = padRight;                                                                                        // 12230
    lodash.parseInt = parseInt;                                                                                        // 12231
    lodash.random = random;                                                                                            // 12232
    lodash.reduce = reduce;                                                                                            // 12233
    lodash.reduceRight = reduceRight;                                                                                  // 12234
    lodash.repeat = repeat;                                                                                            // 12235
    lodash.result = result;                                                                                            // 12236
    lodash.round = round;                                                                                              // 12237
    lodash.runInContext = runInContext;                                                                                // 12238
    lodash.size = size;                                                                                                // 12239
    lodash.snakeCase = snakeCase;                                                                                      // 12240
    lodash.some = some;                                                                                                // 12241
    lodash.sortedIndex = sortedIndex;                                                                                  // 12242
    lodash.sortedLastIndex = sortedLastIndex;                                                                          // 12243
    lodash.startCase = startCase;                                                                                      // 12244
    lodash.startsWith = startsWith;                                                                                    // 12245
    lodash.sum = sum;                                                                                                  // 12246
    lodash.template = template;                                                                                        // 12247
    lodash.trim = trim;                                                                                                // 12248
    lodash.trimLeft = trimLeft;                                                                                        // 12249
    lodash.trimRight = trimRight;                                                                                      // 12250
    lodash.trunc = trunc;                                                                                              // 12251
    lodash.unescape = unescape;                                                                                        // 12252
    lodash.uniqueId = uniqueId;                                                                                        // 12253
    lodash.words = words;                                                                                              // 12254
                                                                                                                       // 12255
    // Add aliases.                                                                                                    // 12256
    lodash.all = every;                                                                                                // 12257
    lodash.any = some;                                                                                                 // 12258
    lodash.contains = includes;                                                                                        // 12259
    lodash.eq = isEqual;                                                                                               // 12260
    lodash.detect = find;                                                                                              // 12261
    lodash.foldl = reduce;                                                                                             // 12262
    lodash.foldr = reduceRight;                                                                                        // 12263
    lodash.head = first;                                                                                               // 12264
    lodash.include = includes;                                                                                         // 12265
    lodash.inject = reduce;                                                                                            // 12266
                                                                                                                       // 12267
    mixin(lodash, (function() {                                                                                        // 12268
      var source = {};                                                                                                 // 12269
      baseForOwn(lodash, function(func, methodName) {                                                                  // 12270
        if (!lodash.prototype[methodName]) {                                                                           // 12271
          source[methodName] = func;                                                                                   // 12272
        }                                                                                                              // 12273
      });                                                                                                              // 12274
      return source;                                                                                                   // 12275
    }()), false);                                                                                                      // 12276
                                                                                                                       // 12277
    /*------------------------------------------------------------------------*/                                       // 12278
                                                                                                                       // 12279
    // Add functions capable of returning wrapped and unwrapped values when chaining.                                  // 12280
    lodash.sample = sample;                                                                                            // 12281
                                                                                                                       // 12282
    lodash.prototype.sample = function(n) {                                                                            // 12283
      if (!this.__chain__ && n == null) {                                                                              // 12284
        return sample(this.value());                                                                                   // 12285
      }                                                                                                                // 12286
      return this.thru(function(value) {                                                                               // 12287
        return sample(value, n);                                                                                       // 12288
      });                                                                                                              // 12289
    };                                                                                                                 // 12290
                                                                                                                       // 12291
    /*------------------------------------------------------------------------*/                                       // 12292
                                                                                                                       // 12293
    /**                                                                                                                // 12294
     * The semantic version number.                                                                                    // 12295
     *                                                                                                                 // 12296
     * @static                                                                                                         // 12297
     * @memberOf _                                                                                                     // 12298
     * @type string                                                                                                    // 12299
     */                                                                                                                // 12300
    lodash.VERSION = VERSION;                                                                                          // 12301
                                                                                                                       // 12302
    // Assign default placeholders.                                                                                    // 12303
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {            // 12304
      lodash[methodName].placeholder = lodash;                                                                         // 12305
    });                                                                                                                // 12306
                                                                                                                       // 12307
    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.                                                   // 12308
    arrayEach(['drop', 'take'], function(methodName, index) {                                                          // 12309
      LazyWrapper.prototype[methodName] = function(n) {                                                                // 12310
        var filtered = this.__filtered__;                                                                              // 12311
        if (filtered && !index) {                                                                                      // 12312
          return new LazyWrapper(this);                                                                                // 12313
        }                                                                                                              // 12314
        n = n == null ? 1 : nativeMax(nativeFloor(n) || 0, 0);                                                         // 12315
                                                                                                                       // 12316
        var result = this.clone();                                                                                     // 12317
        if (filtered) {                                                                                                // 12318
          result.__takeCount__ = nativeMin(result.__takeCount__, n);                                                   // 12319
        } else {                                                                                                       // 12320
          result.__views__.push({ 'size': n, 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });              // 12321
        }                                                                                                              // 12322
        return result;                                                                                                 // 12323
      };                                                                                                               // 12324
                                                                                                                       // 12325
      LazyWrapper.prototype[methodName + 'Right'] = function(n) {                                                      // 12326
        return this.reverse()[methodName](n).reverse();                                                                // 12327
      };                                                                                                               // 12328
    });                                                                                                                // 12329
                                                                                                                       // 12330
    // Add `LazyWrapper` methods that accept an `iteratee` value.                                                      // 12331
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {                                            // 12332
      var type = index + 1,                                                                                            // 12333
          isFilter = type != LAZY_MAP_FLAG;                                                                            // 12334
                                                                                                                       // 12335
      LazyWrapper.prototype[methodName] = function(iteratee, thisArg) {                                                // 12336
        var result = this.clone();                                                                                     // 12337
        result.__iteratees__.push({ 'iteratee': getCallback(iteratee, thisArg, 1), 'type': type });                    // 12338
        result.__filtered__ = result.__filtered__ || isFilter;                                                         // 12339
        return result;                                                                                                 // 12340
      };                                                                                                               // 12341
    });                                                                                                                // 12342
                                                                                                                       // 12343
    // Add `LazyWrapper` methods for `_.first` and `_.last`.                                                           // 12344
    arrayEach(['first', 'last'], function(methodName, index) {                                                         // 12345
      var takeName = 'take' + (index ? 'Right' : '');                                                                  // 12346
                                                                                                                       // 12347
      LazyWrapper.prototype[methodName] = function() {                                                                 // 12348
        return this[takeName](1).value()[0];                                                                           // 12349
      };                                                                                                               // 12350
    });                                                                                                                // 12351
                                                                                                                       // 12352
    // Add `LazyWrapper` methods for `_.initial` and `_.rest`.                                                         // 12353
    arrayEach(['initial', 'rest'], function(methodName, index) {                                                       // 12354
      var dropName = 'drop' + (index ? '' : 'Right');                                                                  // 12355
                                                                                                                       // 12356
      LazyWrapper.prototype[methodName] = function() {                                                                 // 12357
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);                                          // 12358
      };                                                                                                               // 12359
    });                                                                                                                // 12360
                                                                                                                       // 12361
    // Add `LazyWrapper` methods for `_.pluck` and `_.where`.                                                          // 12362
    arrayEach(['pluck', 'where'], function(methodName, index) {                                                        // 12363
      var operationName = index ? 'filter' : 'map',                                                                    // 12364
          createCallback = index ? baseMatches : property;                                                             // 12365
                                                                                                                       // 12366
      LazyWrapper.prototype[methodName] = function(value) {                                                            // 12367
        return this[operationName](createCallback(value));                                                             // 12368
      };                                                                                                               // 12369
    });                                                                                                                // 12370
                                                                                                                       // 12371
    LazyWrapper.prototype.compact = function() {                                                                       // 12372
      return this.filter(identity);                                                                                    // 12373
    };                                                                                                                 // 12374
                                                                                                                       // 12375
    LazyWrapper.prototype.reject = function(predicate, thisArg) {                                                      // 12376
      predicate = getCallback(predicate, thisArg, 1);                                                                  // 12377
      return this.filter(function(value) {                                                                             // 12378
        return !predicate(value);                                                                                      // 12379
      });                                                                                                              // 12380
    };                                                                                                                 // 12381
                                                                                                                       // 12382
    LazyWrapper.prototype.slice = function(start, end) {                                                               // 12383
      start = start == null ? 0 : (+start || 0);                                                                       // 12384
                                                                                                                       // 12385
      var result = this;                                                                                               // 12386
      if (result.__filtered__ && (start > 0 || end < 0)) {                                                             // 12387
        return new LazyWrapper(result);                                                                                // 12388
      }                                                                                                                // 12389
      if (start < 0) {                                                                                                 // 12390
        result = result.takeRight(-start);                                                                             // 12391
      } else if (start) {                                                                                              // 12392
        result = result.drop(start);                                                                                   // 12393
      }                                                                                                                // 12394
      if (end !== undefined) {                                                                                         // 12395
        end = (+end || 0);                                                                                             // 12396
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);                                          // 12397
      }                                                                                                                // 12398
      return result;                                                                                                   // 12399
    };                                                                                                                 // 12400
                                                                                                                       // 12401
    LazyWrapper.prototype.takeRightWhile = function(predicate, thisArg) {                                              // 12402
      return this.reverse().takeWhile(predicate, thisArg).reverse();                                                   // 12403
    };                                                                                                                 // 12404
                                                                                                                       // 12405
    LazyWrapper.prototype.toArray = function() {                                                                       // 12406
      return this.take(POSITIVE_INFINITY);                                                                             // 12407
    };                                                                                                                 // 12408
                                                                                                                       // 12409
    // Add `LazyWrapper` methods to `lodash.prototype`.                                                                // 12410
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {                                                     // 12411
      var checkIteratee = /^(?:filter|map|reject)|While$/.test(methodName),                                            // 12412
          retUnwrapped = /^(?:first|last)$/.test(methodName),                                                          // 12413
          lodashFunc = lodash[retUnwrapped ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName];           // 12414
                                                                                                                       // 12415
      if (!lodashFunc) {                                                                                               // 12416
        return;                                                                                                        // 12417
      }                                                                                                                // 12418
      lodash.prototype[methodName] = function() {                                                                      // 12419
        var args = retUnwrapped ? [1] : arguments,                                                                     // 12420
            chainAll = this.__chain__,                                                                                 // 12421
            value = this.__wrapped__,                                                                                  // 12422
            isHybrid = !!this.__actions__.length,                                                                      // 12423
            isLazy = value instanceof LazyWrapper,                                                                     // 12424
            iteratee = args[0],                                                                                        // 12425
            useLazy = isLazy || isArray(value);                                                                        // 12426
                                                                                                                       // 12427
        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {                       // 12428
          // Avoid lazy use if the iteratee has a "length" value other than `1`.                                       // 12429
          isLazy = useLazy = false;                                                                                    // 12430
        }                                                                                                              // 12431
        var interceptor = function(value) {                                                                            // 12432
          return (retUnwrapped && chainAll)                                                                            // 12433
            ? lodashFunc(value, 1)[0]                                                                                  // 12434
            : lodashFunc.apply(undefined, arrayPush([value], args));                                                   // 12435
        };                                                                                                             // 12436
                                                                                                                       // 12437
        var action = { 'func': thru, 'args': [interceptor], 'thisArg': undefined },                                    // 12438
            onlyLazy = isLazy && !isHybrid;                                                                            // 12439
                                                                                                                       // 12440
        if (retUnwrapped && !chainAll) {                                                                               // 12441
          if (onlyLazy) {                                                                                              // 12442
            value = value.clone();                                                                                     // 12443
            value.__actions__.push(action);                                                                            // 12444
            return func.call(value);                                                                                   // 12445
          }                                                                                                            // 12446
          return lodashFunc.call(undefined, this.value())[0];                                                          // 12447
        }                                                                                                              // 12448
        if (!retUnwrapped && useLazy) {                                                                                // 12449
          value = onlyLazy ? value : new LazyWrapper(this);                                                            // 12450
          var result = func.apply(value, args);                                                                        // 12451
          result.__actions__.push(action);                                                                             // 12452
          return new LodashWrapper(result, chainAll);                                                                  // 12453
        }                                                                                                              // 12454
        return this.thru(interceptor);                                                                                 // 12455
      };                                                                                                               // 12456
    });                                                                                                                // 12457
                                                                                                                       // 12458
    // Add `Array` and `String` methods to `lodash.prototype`.                                                         // 12459
    arrayEach(['join', 'pop', 'push', 'replace', 'shift', 'sort', 'splice', 'split', 'unshift'], function(methodName) {
      var protoFunc = (/^(?:replace|split)$/.test(methodName) ? stringProto : arrayProto)[methodName],                 // 12461
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',                                     // 12462
          fixObjects = !support.spliceObjects && /^(?:pop|shift|splice)$/.test(methodName),                            // 12463
          retUnwrapped = /^(?:join|pop|replace|shift)$/.test(methodName);                                              // 12464
                                                                                                                       // 12465
      // Avoid array-like object bugs with `Array#shift` and `Array#splice` in                                         // 12466
      // IE < 9, Firefox < 10, and RingoJS.                                                                            // 12467
      var func = !fixObjects ? protoFunc : function() {                                                                // 12468
        var result = protoFunc.apply(this, arguments);                                                                 // 12469
        if (this.length === 0) {                                                                                       // 12470
          delete this[0];                                                                                              // 12471
        }                                                                                                              // 12472
        return result;                                                                                                 // 12473
      };                                                                                                               // 12474
                                                                                                                       // 12475
      lodash.prototype[methodName] = function() {                                                                      // 12476
        var args = arguments;                                                                                          // 12477
        if (retUnwrapped && !this.__chain__) {                                                                         // 12478
          return func.apply(this.value(), args);                                                                       // 12479
        }                                                                                                              // 12480
        return this[chainName](function(value) {                                                                       // 12481
          return func.apply(value, args);                                                                              // 12482
        });                                                                                                            // 12483
      };                                                                                                               // 12484
    });                                                                                                                // 12485
                                                                                                                       // 12486
    // Map minified function names to their real names.                                                                // 12487
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {                                                     // 12488
      var lodashFunc = lodash[methodName];                                                                             // 12489
      if (lodashFunc) {                                                                                                // 12490
        var key = (lodashFunc.name + ''),                                                                              // 12491
            names = realNames[key] || (realNames[key] = []);                                                           // 12492
                                                                                                                       // 12493
        names.push({ 'name': methodName, 'func': lodashFunc });                                                        // 12494
      }                                                                                                                // 12495
    });                                                                                                                // 12496
                                                                                                                       // 12497
    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{ 'name': 'wrapper', 'func': undefined }];        // 12498
                                                                                                                       // 12499
    // Add functions to the lazy wrapper.                                                                              // 12500
    LazyWrapper.prototype.clone = lazyClone;                                                                           // 12501
    LazyWrapper.prototype.reverse = lazyReverse;                                                                       // 12502
    LazyWrapper.prototype.value = lazyValue;                                                                           // 12503
                                                                                                                       // 12504
    // Add chaining functions to the `lodash` wrapper.                                                                 // 12505
    lodash.prototype.chain = wrapperChain;                                                                             // 12506
    lodash.prototype.commit = wrapperCommit;                                                                           // 12507
    lodash.prototype.concat = wrapperConcat;                                                                           // 12508
    lodash.prototype.plant = wrapperPlant;                                                                             // 12509
    lodash.prototype.reverse = wrapperReverse;                                                                         // 12510
    lodash.prototype.toString = wrapperToString;                                                                       // 12511
    lodash.prototype.run = lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue; // 12512
                                                                                                                       // 12513
    // Add function aliases to the `lodash` wrapper.                                                                   // 12514
    lodash.prototype.collect = lodash.prototype.map;                                                                   // 12515
    lodash.prototype.head = lodash.prototype.first;                                                                    // 12516
    lodash.prototype.select = lodash.prototype.filter;                                                                 // 12517
    lodash.prototype.tail = lodash.prototype.rest;                                                                     // 12518
                                                                                                                       // 12519
    return lodash;                                                                                                     // 12520
  }                                                                                                                    // 12521
                                                                                                                       // 12522
  /*--------------------------------------------------------------------------*/                                       // 12523
                                                                                                                       // 12524
  // Export lodash.                                                                                                    // 12525
  var _ = runInContext();                                                                                              // 12526
                                                                                                                       // 12527
  // Some AMD build optimizers like r.js check for condition patterns like the following:                              // 12528
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {                                    // 12529
    // Expose lodash to the global object when an AMD loader is present to avoid                                       // 12530
    // errors in cases where lodash is loaded by a script tag and not intended                                         // 12531
    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for                                        // 12532
    // more details.                                                                                                   // 12533
    root._ = _;                                                                                                        // 12534
                                                                                                                       // 12535
    // Define as an anonymous module so, through path mapping, it can be                                               // 12536
    // referenced as the "underscore" module.                                                                          // 12537
    define(function() {                                                                                                // 12538
      return _;                                                                                                        // 12539
    });                                                                                                                // 12540
  }                                                                                                                    // 12541
  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.                            // 12542
  else if (freeExports && freeModule) {                                                                                // 12543
    // Export for Node.js or RingoJS.                                                                                  // 12544
    if (moduleExports) {                                                                                               // 12545
      (freeModule.exports = _)._ = _;                                                                                  // 12546
    }                                                                                                                  // 12547
    // Export for Rhino with CommonJS support.                                                                         // 12548
    else {                                                                                                             // 12549
      freeExports._ = _;                                                                                               // 12550
    }                                                                                                                  // 12551
  }                                                                                                                    // 12552
  else {                                                                                                               // 12553
    // Export for a browser or Rhino.                                                                                  // 12554
    root._ = _;                                                                                                        // 12555
  }                                                                                                                    // 12556
}.call(this));                                                                                                         // 12557
                                                                                                                       // 12558
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/stevezhu:lodash/client.js                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
lodash = this._;                                                                                                       // 1
delete this._;                                                                                                         // 2
                                                                                                                       // 3
_ = lodash;                                                                                                            // 4
                                                                                                                       // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);

///////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package['stevezhu:lodash'] = {}, {
  lodash: lodash,
  _: _
});

})();
